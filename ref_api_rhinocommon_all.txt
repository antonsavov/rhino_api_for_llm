Rhino.ApplicationSettings.AppearanceSettings.DefaultPaintColor(whichColor: Rhino.ApplicationSettings.PaintColor) -> Color
Rhino.ApplicationSettings.AppearanceSettings.DefaultPaintColor(whichColor: Rhino.ApplicationSettings.PaintColor, darkMode: bool) -> Color
Rhino.ApplicationSettings.AppearanceSettings.DefaultWidgetColor(whichColor: Rhino.ApplicationSettings.WidgetColor) -> Color
Rhino.ApplicationSettings.AppearanceSettings.GetCurrentState() -> AppearanceSettingsState
Rhino.ApplicationSettings.AppearanceSettings.GetDefaultState() -> AppearanceSettingsState
Rhino.ApplicationSettings.AppearanceSettings.GetDefaultState(darkMode: bool) -> AppearanceSettingsState
Rhino.ApplicationSettings.AppearanceSettings.GetPaintColor(whichColor: Rhino.ApplicationSettings.PaintColor) -> Color
Rhino.ApplicationSettings.AppearanceSettings.GetPaintColor(whichColor: Rhino.ApplicationSettings.PaintColor, compute: bool) -> Color
Rhino.ApplicationSettings.AppearanceSettings.GetWidgetColor(whichColor: Rhino.ApplicationSettings.WidgetColor) -> Color
Rhino.ApplicationSettings.AppearanceSettings.InitialMainWindowPosition(bounds: System.Drawing.Rectangle@) -> bool
Rhino.ApplicationSettings.AppearanceSettings.RestoreDefaults() -> None
Rhino.ApplicationSettings.AppearanceSettings.SetPaintColor(whichColor: Rhino.ApplicationSettings.PaintColor, c: System.Drawing.Color) -> None
Rhino.ApplicationSettings.AppearanceSettings.SetPaintColor(whichColor: Rhino.ApplicationSettings.PaintColor, c: System.Drawing.Color, forceUiUpdate: bool) -> None
Rhino.ApplicationSettings.AppearanceSettings.SetToDarkMode() -> bool
Rhino.ApplicationSettings.AppearanceSettings.SetToLightMode() -> bool
Rhino.ApplicationSettings.AppearanceSettings.SetWidgetColor(whichColor: Rhino.ApplicationSettings.WidgetColor, c: System.Drawing.Color) -> None
Rhino.ApplicationSettings.AppearanceSettings.SetWidgetColor(whichColor: Rhino.ApplicationSettings.WidgetColor, c: System.Drawing.Color, forceUiUpdate: bool) -> None
Rhino.ApplicationSettings.AppearanceSettings.UpdateFromState(state: Rhino.ApplicationSettings.AppearanceSettingsState) -> None
Rhino.ApplicationSettings.AppearanceSettings.UsingDefaultDarkModeColors() -> bool
Rhino.ApplicationSettings.AppearanceSettings.UsingDefaultLightModeColors() -> bool
Rhino.ApplicationSettings.ChooseOneObjectSettings.GetCurrentState() -> ChooseOneObjectSettingsState
Rhino.ApplicationSettings.ChooseOneObjectSettings.GetDefaultState() -> ChooseOneObjectSettingsState
Rhino.ApplicationSettings.ChooseOneObjectSettings.RestoreDefaults() -> None
Rhino.ApplicationSettings.ChooseOneObjectSettings.UpdateFromState(state: Rhino.ApplicationSettings.ChooseOneObjectSettingsState) -> None
Rhino.ApplicationSettings.CommandAliasList.Add(alias: str, macro: str) -> bool
Rhino.ApplicationSettings.CommandAliasList.Clear() -> None
Rhino.ApplicationSettings.CommandAliasList.Delete(alias: str) -> bool
Rhino.ApplicationSettings.CommandAliasList.GetDefaults() -> string>
Rhino.ApplicationSettings.CommandAliasList.GetMacro(alias: str) -> str
Rhino.ApplicationSettings.CommandAliasList.GetNames() -> List[str]
Rhino.ApplicationSettings.CommandAliasList.IsAlias(alias: str) -> bool
Rhino.ApplicationSettings.CommandAliasList.IsDefault() -> bool
Rhino.ApplicationSettings.CommandAliasList.SetMacro(alias: str, macro: str) -> bool
Rhino.ApplicationSettings.CommandAliasList.ToDictionary() -> string>
Rhino.ApplicationSettings.CursorTooltipSettings.GetCurrentState() -> CursorTooltipSettingsState
Rhino.ApplicationSettings.CursorTooltipSettings.GetDefaultState() -> CursorTooltipSettingsState
Rhino.ApplicationSettings.CursorTooltipSettingsState.__init__(self) -> None
Rhino.ApplicationSettings.CurvatureAnalysisSettings.CalculateCurvatureAutoRange(meshes: Iterable[Rhino.Geometry.Mesh], settings: Rhino.ApplicationSettings.CurvatureAnalysisSettingsState@) -> bool
Rhino.ApplicationSettings.CurvatureAnalysisSettings.GetCurrentState() -> CurvatureAnalysisSettingsState
Rhino.ApplicationSettings.CurvatureAnalysisSettings.GetDefaultState() -> CurvatureAnalysisSettingsState
Rhino.ApplicationSettings.CurvatureAnalysisSettings.RestoreDefaults() -> None
Rhino.ApplicationSettings.CurvatureAnalysisSettings.UpdateFromState(state: Rhino.ApplicationSettings.CurvatureAnalysisSettingsState) -> None
Rhino.ApplicationSettings.CurvatureGraphSettings.GetCurrentState() -> CurvatureGraphSettingsState
Rhino.ApplicationSettings.CurvatureGraphSettings.GetDefaultState() -> CurvatureGraphSettingsState
Rhino.ApplicationSettings.CurvatureGraphSettings.RestoreDefaults() -> None
Rhino.ApplicationSettings.CurvatureGraphSettings.UpdateFromState(state: Rhino.ApplicationSettings.CurvatureGraphSettingsState) -> None
Rhino.ApplicationSettings.DraftAngleAnalysisSettings.GetCurrentState() -> DraftAngleAnalysisSettingsState
Rhino.ApplicationSettings.DraftAngleAnalysisSettings.GetDefaultState() -> DraftAngleAnalysisSettingsState
Rhino.ApplicationSettings.DraftAngleAnalysisSettings.RestoreDefaults() -> None
Rhino.ApplicationSettings.DraftAngleAnalysisSettings.UpdateFromState(state: Rhino.ApplicationSettings.DraftAngleAnalysisSettingsState) -> None
Rhino.ApplicationSettings.EdgeAnalysisSettings.GetCurrentState() -> EdgeAnalysisSettingsState
Rhino.ApplicationSettings.EdgeAnalysisSettings.GetDefaultState() -> EdgeAnalysisSettingsState
Rhino.ApplicationSettings.EdgeAnalysisSettings.RestoreDefaults() -> None
Rhino.ApplicationSettings.EdgeAnalysisSettings.UpdateFromState(state: Rhino.ApplicationSettings.EdgeAnalysisSettingsState) -> None
Rhino.ApplicationSettings.FileSettings.AddSearchPath(folder: str, index: int) -> int
Rhino.ApplicationSettings.FileSettings.AutoSaveBeforeCommands() -> List[str]
Rhino.ApplicationSettings.FileSettings.DefaultTemplateFolderForLanguageID(languageID: int) -> str
Rhino.ApplicationSettings.FileSettings.DeleteSearchPath(folder: str) -> bool
Rhino.ApplicationSettings.FileSettings.FindFile(fileName: str) -> str
Rhino.ApplicationSettings.FileSettings.GetCurrentState() -> FileSettingsState
Rhino.ApplicationSettings.FileSettings.GetDataFolder(currentUser: bool) -> str
Rhino.ApplicationSettings.FileSettings.GetDefaultState() -> FileSettingsState
Rhino.ApplicationSettings.FileSettings.GetSearchPaths() -> List[str]
Rhino.ApplicationSettings.FileSettings.RecentlyOpenedFiles() -> List[str]
Rhino.ApplicationSettings.FileSettings.SetAutoSaveBeforeCommands(commands: List[str]) -> None
Rhino.ApplicationSettings.FileSettings.UpdateFromState(state: Rhino.ApplicationSettings.FileSettingsState) -> None
Rhino.ApplicationSettings.GeneralSettings.GetCurrentState() -> GeneralSettingsState
Rhino.ApplicationSettings.GeneralSettings.GetDefaultState() -> GeneralSettingsState
Rhino.ApplicationSettings.KeyboardShortcut.__init__(self) -> None
Rhino.ApplicationSettings.ModelAidSettings.GetCurrentState() -> ModelAidSettingsState
Rhino.ApplicationSettings.ModelAidSettings.GetDefaultState() -> ModelAidSettingsState
Rhino.ApplicationSettings.ModelAidSettings.UpdateFromState(state: Rhino.ApplicationSettings.ModelAidSettingsState) -> None
Rhino.ApplicationSettings.NeverRepeatList.CommandNames() -> List[str]
Rhino.ApplicationSettings.NeverRepeatList.SetList(commandNames: List[str]) -> int
Rhino.ApplicationSettings.OpenGLSettings.GetCurrentState() -> OpenGLSettingsState
Rhino.ApplicationSettings.OpenGLSettings.GetDefaultState() -> OpenGLSettingsState
Rhino.ApplicationSettings.OpenGLSettings.RestoreDefaults() -> None
Rhino.ApplicationSettings.OpenGLSettings.UpdateFromState(state: Rhino.ApplicationSettings.OpenGLSettingsState) -> None
Rhino.ApplicationSettings.OpenGLSettings.__init__(self) -> None
Rhino.ApplicationSettings.SelectionFilterSettings.GetCurrentState() -> SelectionFilterSettingsState
Rhino.ApplicationSettings.SelectionFilterSettings.GetDefaultState() -> SelectionFilterSettingsState
Rhino.ApplicationSettings.SelectionFilterSettings.RestoreDefaults() -> None
Rhino.ApplicationSettings.SelectionFilterSettings.UpdateFromState(state: Rhino.ApplicationSettings.SelectionFilterSettingsState) -> None
Rhino.ApplicationSettings.ShortcutKeySettings.GetDefaults() -> List[KeyboardShortcut]
Rhino.ApplicationSettings.ShortcutKeySettings.GetLabel(key: Rhino.ApplicationSettings.ShortcutKey) -> str
Rhino.ApplicationSettings.ShortcutKeySettings.GetMacro(key: Rhino.ApplicationSettings.ShortcutKey) -> str
Rhino.ApplicationSettings.ShortcutKeySettings.GetShortcuts() -> List[KeyboardShortcut]
Rhino.ApplicationSettings.ShortcutKeySettings.IsAcceptableKeyCombo(key: Rhino.UI.KeyboardKey, modifier: Rhino.UI.ModifierKey) -> bool
Rhino.ApplicationSettings.ShortcutKeySettings.SetMacro(key: Rhino.ApplicationSettings.ShortcutKey, macro: str) -> None
Rhino.ApplicationSettings.ShortcutKeySettings.SetMacro(key: Rhino.UI.KeyboardKey, modifier: Rhino.UI.ModifierKey, macro: str) -> None
Rhino.ApplicationSettings.ShortcutKeySettings.Update(shortcuts: Iterable[Rhino.ApplicationSettings.KeyboardShortcut], replaceAll: bool) -> None
Rhino.ApplicationSettings.SmartTrackSettings.GetCurrentState() -> SmartTrackSettingsState
Rhino.ApplicationSettings.SmartTrackSettings.GetDefaultState() -> SmartTrackSettingsState
Rhino.ApplicationSettings.SmartTrackSettings.UpdateFromState(state: Rhino.ApplicationSettings.SmartTrackSettingsState) -> None
Rhino.ApplicationSettings.ViewSettings.GetCurrentState() -> ViewSettingsState
Rhino.ApplicationSettings.ViewSettings.GetDefaultState() -> ViewSettingsState
Rhino.ApplicationSettings.ViewSettings.RestoreDefaults() -> None
Rhino.ApplicationSettings.ViewSettings.UpdateFromState(state: Rhino.ApplicationSettings.ViewSettingsState) -> None
Rhino.ApplicationSettings.ZebraAnalysisSettings.GetCurrentState() -> ZebraAnalysisSettingsState
Rhino.ApplicationSettings.ZebraAnalysisSettings.GetDefaultState() -> ZebraAnalysisSettingsState
Rhino.ApplicationSettings.ZebraAnalysisSettings.RestoreDefaults() -> None
Rhino.ApplicationSettings.ZebraAnalysisSettings.UpdateFromState(state: Rhino.ApplicationSettings.ZebraAnalysisSettingsState) -> None
Rhino.BitmapExtensions.BitmapAsTextureFileReference(bitmap: System.Drawing.Bitmap, crc: System.UInt32) -> FileReference
Rhino.BitmapExtensions.ConvertToNormalMap(bitmap: System.Drawing.Bitmap, bLossyCompressionSource: bool, bPositiveZComponent: System.Boolean@) -> Bitmap
Rhino.BitmapExtensions.IsNormalMap(bitmap: System.Drawing.Bitmap, bLossyCompressionSource: bool, bPositiveZComponent: System.Boolean@) -> bool
Rhino.Collections.ArchivableDictionary.AddContentsFrom(self, source: Rhino.Collections.ArchivableDictionary) -> bool
Rhino.Collections.ArchivableDictionary.Clear(self) -> None
Rhino.Collections.ArchivableDictionary.Clone(self) -> Rhino.Collections.ArchivableDictionary
Rhino.Collections.ArchivableDictionary.ContainsKey(self, key: str) -> bool
Rhino.Collections.ArchivableDictionary.GetBool(self, key: str) -> bool
Rhino.Collections.ArchivableDictionary.GetBool(self, key: str, defaultValue: bool) -> bool
Rhino.Collections.ArchivableDictionary.GetBytes(self, key: str) -> List[byte]
Rhino.Collections.ArchivableDictionary.GetBytes(self, key: str, defaultValue: List[System.Byte]) -> List[byte]
Rhino.Collections.ArchivableDictionary.GetDictionary(self, key: str) -> Rhino.Collections.ArchivableDictionary
Rhino.Collections.ArchivableDictionary.GetDictionary(self, key: str, defaultValue: Rhino.Collections.ArchivableDictionary) -> Rhino.Collections.ArchivableDictionary
Rhino.Collections.ArchivableDictionary.GetDouble(self, key: str) -> float
Rhino.Collections.ArchivableDictionary.GetDouble(self, key: str, defaultValue: float) -> float
Rhino.Collections.ArchivableDictionary.GetEnumValue<T>(self) -> T
Rhino.Collections.ArchivableDictionary.GetEnumValue<T>(self, key: str) -> T
Rhino.Collections.ArchivableDictionary.GetEnumerator(self) -> Object>>
Rhino.Collections.ArchivableDictionary.GetFloat(self, key: str) -> float
Rhino.Collections.ArchivableDictionary.GetFloat(self, key: str, defaultValue: float) -> float
Rhino.Collections.ArchivableDictionary.GetGuid(self, key: str) -> Guid
Rhino.Collections.ArchivableDictionary.GetGuid(self, key: str, defaultValue: System.Guid) -> Guid
Rhino.Collections.ArchivableDictionary.GetInteger(self, key: str) -> int
Rhino.Collections.ArchivableDictionary.GetInteger(self, key: str, defaultValue: int) -> int
Rhino.Collections.ArchivableDictionary.GetObjectData(self, info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext) -> None
Rhino.Collections.ArchivableDictionary.GetPlane(self, key: str) -> Plane
Rhino.Collections.ArchivableDictionary.GetPlane(self, key: str, defaultValue: Rhino.Geometry.Plane) -> Plane
Rhino.Collections.ArchivableDictionary.GetPoint3d(self, key: str) -> Point3d
Rhino.Collections.ArchivableDictionary.GetPoint3d(self, key: str, defaultValue: Rhino.Geometry.Point3d) -> Point3d
Rhino.Collections.ArchivableDictionary.GetPoint3f(self, key: str) -> Point3f
Rhino.Collections.ArchivableDictionary.GetPoint3f(self, key: str, defaultValue: Rhino.Geometry.Point3f) -> Point3f
Rhino.Collections.ArchivableDictionary.GetString(self, key: str) -> str
Rhino.Collections.ArchivableDictionary.GetString(self, key: str, defaultValue: str) -> str
Rhino.Collections.ArchivableDictionary.GetVector3d(self, key: str) -> Vector3d
Rhino.Collections.ArchivableDictionary.GetVector3d(self, key: str, defaultValue: Rhino.Geometry.Vector3d) -> Vector3d
Rhino.Collections.ArchivableDictionary.Getint(self, key: str, defaultValue: int) -> int
Rhino.Collections.ArchivableDictionary.Remove(self, key: str) -> bool
Rhino.Collections.ArchivableDictionary.RemoveEnumValue<T>(self) -> bool
Rhino.Collections.ArchivableDictionary.ReplaceContentsWith(self, source: Rhino.Collections.ArchivableDictionary) -> bool
Rhino.Collections.ArchivableDictionary.Set(self, key: str, val: Iterable[Rhino.DocObjects.ObjRef]) -> bool
Rhino.Collections.ArchivableDictionary.Set(self, key: str, val: Iterable[Rhino.Geometry.GeometryBase]) -> bool
Rhino.Collections.ArchivableDictionary.Set(self, key: str, val: Iterable[System.Byte]) -> bool
Rhino.Collections.ArchivableDictionary.Set(self, key: str, val: Iterable[System.Guid]) -> bool
Rhino.Collections.ArchivableDictionary.Set(self, key: str, val: Iterable[System.Int16]) -> bool
Rhino.Collections.ArchivableDictionary.Set(self, key: str, val: Iterable[System.SByte]) -> bool
Rhino.Collections.ArchivableDictionary.Set(self, key: str, val: Iterable[bool]) -> bool
Rhino.Collections.ArchivableDictionary.Set(self, key: str, val: Iterable[float]) -> bool
Rhino.Collections.ArchivableDictionary.Set(self, key: str, val: Iterable[float]) -> bool
Rhino.Collections.ArchivableDictionary.Set(self, key: str, val: Iterable[int]) -> bool
Rhino.Collections.ArchivableDictionary.Set(self, key: str, val: Iterable[str]) -> bool
Rhino.Collections.ArchivableDictionary.Set(self, key: str, val: Rhino.Collections.ArchivableDictionary) -> bool
Rhino.Collections.ArchivableDictionary.Set(self, key: str, val: Rhino.DocObjects.ObjRef) -> bool
Rhino.Collections.ArchivableDictionary.Set(self, key: str, val: Rhino.Geometry.BoundingBox) -> bool
Rhino.Collections.ArchivableDictionary.Set(self, key: str, val: Rhino.Geometry.GeometryBase) -> bool
Rhino.Collections.ArchivableDictionary.Set(self, key: str, val: Rhino.Geometry.Interval) -> bool
Rhino.Collections.ArchivableDictionary.Set(self, key: str, val: Rhino.Geometry.Line) -> bool
Rhino.Collections.ArchivableDictionary.Set(self, key: str, val: Rhino.Geometry.MeshingParameters) -> bool
Rhino.Collections.ArchivableDictionary.Set(self, key: str, val: Rhino.Geometry.Plane) -> bool
Rhino.Collections.ArchivableDictionary.Set(self, key: str, val: Rhino.Geometry.Point2d) -> bool
Rhino.Collections.ArchivableDictionary.Set(self, key: str, val: Rhino.Geometry.Point3d) -> bool
Rhino.Collections.ArchivableDictionary.Set(self, key: str, val: Rhino.Geometry.Point3f) -> bool
Rhino.Collections.ArchivableDictionary.Set(self, key: str, val: Rhino.Geometry.Point4d) -> bool
Rhino.Collections.ArchivableDictionary.Set(self, key: str, val: Rhino.Geometry.Ray3d) -> bool
Rhino.Collections.ArchivableDictionary.Set(self, key: str, val: Rhino.Geometry.Transform) -> bool
Rhino.Collections.ArchivableDictionary.Set(self, key: str, val: Rhino.Geometry.Vector2d) -> bool
Rhino.Collections.ArchivableDictionary.Set(self, key: str, val: Rhino.Geometry.Vector3d) -> bool
Rhino.Collections.ArchivableDictionary.Set(self, key: str, val: Rhino.Geometry.Vector3f) -> bool
Rhino.Collections.ArchivableDictionary.Set(self, key: str, val: System.Byte) -> bool
Rhino.Collections.ArchivableDictionary.Set(self, key: str, val: System.Drawing.Color) -> bool
Rhino.Collections.ArchivableDictionary.Set(self, key: str, val: System.Drawing.Font) -> bool
Rhino.Collections.ArchivableDictionary.Set(self, key: str, val: System.Drawing.Point) -> bool
Rhino.Collections.ArchivableDictionary.Set(self, key: str, val: System.Drawing.PointF) -> bool
Rhino.Collections.ArchivableDictionary.Set(self, key: str, val: System.Drawing.Rectangle) -> bool
Rhino.Collections.ArchivableDictionary.Set(self, key: str, val: System.Drawing.RectangleF) -> bool
Rhino.Collections.ArchivableDictionary.Set(self, key: str, val: System.Drawing.Size) -> bool
Rhino.Collections.ArchivableDictionary.Set(self, key: str, val: System.Drawing.SizeF) -> bool
Rhino.Collections.ArchivableDictionary.Set(self, key: str, val: System.Guid) -> bool
Rhino.Collections.ArchivableDictionary.Set(self, key: str, val: System.Int16) -> bool
Rhino.Collections.ArchivableDictionary.Set(self, key: str, val: System.SByte) -> bool
Rhino.Collections.ArchivableDictionary.Set(self, key: str, val: System.UInt16) -> bool
Rhino.Collections.ArchivableDictionary.Set(self, key: str, val: System.UInt32) -> bool
Rhino.Collections.ArchivableDictionary.Set(self, key: str, val: bool) -> bool
Rhino.Collections.ArchivableDictionary.Set(self, key: str, val: float) -> bool
Rhino.Collections.ArchivableDictionary.Set(self, key: str, val: float) -> bool
Rhino.Collections.ArchivableDictionary.Set(self, key: str, val: int) -> bool
Rhino.Collections.ArchivableDictionary.Set(self, key: str, val: int) -> bool
Rhino.Collections.ArchivableDictionary.Set(self, key: str, val: str) -> bool
Rhino.Collections.ArchivableDictionary.SetEnumValue<T>(self, enumValue: ``0) -> bool
Rhino.Collections.ArchivableDictionary.SetEnumValue<T>(self, key: str, enumValue: ``0) -> bool
Rhino.Collections.ArchivableDictionary.TryGetBool(self, key: str, value: System.Boolean@) -> bool
Rhino.Collections.ArchivableDictionary.TryGetBytes(self, key: str, value: System.Byte[]@) -> bool
Rhino.Collections.ArchivableDictionary.TryGetDictionary(self, key: str, value: Rhino.Collections.ArchivableDictionary@) -> bool
Rhino.Collections.ArchivableDictionary.TryGetDouble(self, key: str, value: System.Double@) -> bool
Rhino.Collections.ArchivableDictionary.TryGetEnumValue<T>(self, key: str, enumValue: ``0@) -> bool
Rhino.Collections.ArchivableDictionary.TryGetFloat(self, key: str, value: System.Single@) -> bool
Rhino.Collections.ArchivableDictionary.TryGetGuid(self, key: str, value: System.Guid@) -> bool
Rhino.Collections.ArchivableDictionary.TryGetInteger(self, key: str, value: System.Int32@) -> bool
Rhino.Collections.ArchivableDictionary.TryGetPlane(self, key: str, value: Rhino.Geometry.Plane@) -> bool
Rhino.Collections.ArchivableDictionary.TryGetPoint3d(self, key: str, value: Rhino.Geometry.Point3d@) -> bool
Rhino.Collections.ArchivableDictionary.TryGetPoint3f(self, key: str, value: Rhino.Geometry.Point3f@) -> bool
Rhino.Collections.ArchivableDictionary.TryGetString(self, key: str, value: System.String@) -> bool
Rhino.Collections.ArchivableDictionary.TryGetValue(self, key: str, value: System.Object@) -> bool
Rhino.Collections.ArchivableDictionary.TryGetVector3d(self, key: str, value: Rhino.Geometry.Vector3d@) -> bool
Rhino.Collections.ArchivableDictionary.__init__(self) -> None
Rhino.Collections.ArchivableDictionary.__init__(self, info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext) -> None
Rhino.Collections.ArchivableDictionary.__init__(self, parentUserData: Rhino.DocObjects.Custom.UserData) -> None
Rhino.Collections.ArchivableDictionary.__init__(self, version: int) -> None
Rhino.Collections.ArchivableDictionary.__init__(self, version: int, name: str) -> None
Rhino.Collections.CurveList.Add(self, arc: Rhino.Geometry.Arc) -> None
Rhino.Collections.CurveList.Add(self, circle: Rhino.Geometry.Circle) -> None
Rhino.Collections.CurveList.Add(self, ellipse: Rhino.Geometry.Ellipse) -> None
Rhino.Collections.CurveList.Add(self, line: Rhino.Geometry.Line) -> None
Rhino.Collections.CurveList.Add(self, polyline: Iterable[Rhino.Geometry.Point3d]) -> None
Rhino.Collections.CurveList.Insert(self, index: int, arc: Rhino.Geometry.Arc) -> None
Rhino.Collections.CurveList.Insert(self, index: int, circle: Rhino.Geometry.Circle) -> None
Rhino.Collections.CurveList.Insert(self, index: int, ellipse: Rhino.Geometry.Ellipse) -> None
Rhino.Collections.CurveList.Insert(self, index: int, line: Rhino.Geometry.Line) -> None
Rhino.Collections.CurveList.Insert(self, index: int, polyline: Iterable[Rhino.Geometry.Point3d]) -> None
Rhino.Collections.CurveList.Transform(self, xform: Rhino.Geometry.Transform) -> bool
Rhino.Collections.CurveList.__init__(self) -> None
Rhino.Collections.CurveList.__init__(self, collection: Iterable[Rhino.Geometry.Curve]) -> None
Rhino.Collections.CurveList.__init__(self, initialCapacity: int) -> None
Rhino.Collections.Point3dList.Add(self, x: float, y: float, z: float) -> None
Rhino.Collections.Point3dList.ClosestIndex(self, testPoint: Rhino.Geometry.Point3d) -> int
Rhino.Collections.Point3dList.ClosestIndexInList(list: List[Rhino.Geometry.Point3d], testPoint: Rhino.Geometry.Point3d) -> int
Rhino.Collections.Point3dList.ClosestPointInList(list: List[Rhino.Geometry.Point3d], testPoint: Rhino.Geometry.Point3d) -> Point3d
Rhino.Collections.Point3dList.Duplicate(self) -> Rhino.Collections.Point3dList
Rhino.Collections.Point3dList.Equals(self, obj: Any) -> bool
Rhino.Collections.Point3dList.Equals(self, other: Rhino.Collections.Point3dList) -> bool
Rhino.Collections.Point3dList.GetHashCode(self) -> int
Rhino.Collections.Point3dList.SetAllX(self, xValue: float) -> None
Rhino.Collections.Point3dList.SetAllY(self, yValue: float) -> None
Rhino.Collections.Point3dList.SetAllZ(self, zValue: float) -> None
Rhino.Collections.Point3dList.Transform(self, xform: Rhino.Geometry.Transform) -> None
Rhino.Collections.Point3dList.__init__(self) -> None
Rhino.Collections.Point3dList.__init__(self, collection: Iterable[Rhino.Geometry.Point3d]) -> None
Rhino.Collections.Point3dList.__init__(self, initialCapacity: int) -> None
Rhino.Collections.Point3dList.__init__(self, initialPoints: List[Rhino.Geometry.Point3d]) -> None
Rhino.Collections.RhinoList.Point2dKNeighbors(hayPoints: Iterable[Rhino.Geometry.Point2d], needlePoints: Iterable[Rhino.Geometry.Point2d], amount: int) -> IEnumerable<int[]>
Rhino.Collections.RhinoList.Point2fKNeighbors(hayPoints: Iterable[Rhino.Geometry.Point2f], needlePoints: Iterable[Rhino.Geometry.Point2f], amount: int) -> IEnumerable<int[]>
Rhino.Collections.RhinoList.Point3dKNeighbors(hayPoints: Iterable[Rhino.Geometry.Point3d], needlePoints: Iterable[Rhino.Geometry.Point3d], amount: int) -> IEnumerable<int[]>
Rhino.Collections.RhinoList.Point3fKNeighbors(hayPoints: Iterable[Rhino.Geometry.Point3f], needlePoints: Iterable[Rhino.Geometry.Point3f], amount: int) -> IEnumerable<int[]>
Rhino.Collections.RhinoList.PointCloudKNeighbors(pointcloud: Rhino.Geometry.PointCloud, needlePoints: Iterable[Rhino.Geometry.Point3d], amount: int) -> IEnumerable<int[]>
Rhino.Collections.RhinoList`1.Add(self, item: `0) -> None
Rhino.Collections.RhinoList`1.AddRange(self, collection: Iterable[`0]) -> None
Rhino.Collections.RhinoList`1.AddRange(self, collection: System.Collections.IEnumerable) -> None
Rhino.Collections.RhinoList`1.AsReadOnly(self) -> ReadOnlyCollection<T>
Rhino.Collections.RhinoList`1.BinarySearch(self, index: int, count: int, item: `0, comparer: IComparer[`0]) -> int
Rhino.Collections.RhinoList`1.BinarySearch(self, item: `0) -> int
Rhino.Collections.RhinoList`1.BinarySearch(self, item: `0, comparer: IComparer[`0]) -> int
Rhino.Collections.RhinoList`1.Clear(self) -> None
Rhino.Collections.RhinoList`1.Contains(self, item: `0) -> bool
Rhino.Collections.RhinoList`1.ConvertAll<TOutput>(self, converter: Converter[`0, ``0]) -> RhinoList<TOutput>
Rhino.Collections.RhinoList`1.CopyTo(self, array: List[`0]) -> None
Rhino.Collections.RhinoList`1.CopyTo(self, array: List[`0], arrayIndex: int) -> None
Rhino.Collections.RhinoList`1.CopyTo(self, index: int, array: List[`0], arrayIndex: int, count: int) -> None
Rhino.Collections.RhinoList`1.Duplicate(self) -> RhinoList<T>
Rhino.Collections.RhinoList`1.Exists(self, match: Predicate[`0]) -> bool
Rhino.Collections.RhinoList`1.Find(self, match: Predicate[`0]) -> T
Rhino.Collections.RhinoList`1.FindAll(self, match: Predicate[`0]) -> RhinoList<T>
Rhino.Collections.RhinoList`1.FindIndex(self, match: Predicate[`0]) -> int
Rhino.Collections.RhinoList`1.FindIndex(self, startIndex: int, count: int, match: Predicate[`0]) -> int
Rhino.Collections.RhinoList`1.FindIndex(self, startIndex: int, match: Predicate[`0]) -> int
Rhino.Collections.RhinoList`1.FindLast(self, match: Predicate[`0]) -> T
Rhino.Collections.RhinoList`1.FindLastIndex(self, match: Predicate[`0]) -> int
Rhino.Collections.RhinoList`1.FindLastIndex(self, startIndex: int, count: int, match: Predicate[`0]) -> int
Rhino.Collections.RhinoList`1.FindLastIndex(self, startIndex: int, match: Predicate[`0]) -> int
Rhino.Collections.RhinoList`1.ForEach(self, action: Action[`0]) -> None
Rhino.Collections.RhinoList`1.GetEnumerator(self) -> IEnumerator<T>
Rhino.Collections.RhinoList`1.GetRange(self, index: int, count: int) -> RhinoList<T>
Rhino.Collections.RhinoList`1.IndexOf(self, item: `0) -> int
Rhino.Collections.RhinoList`1.IndexOf(self, item: `0, index: int) -> int
Rhino.Collections.RhinoList`1.IndexOf(self, item: `0, index: int, count: int) -> int
Rhino.Collections.RhinoList`1.Insert(self, index: int, item: `0) -> None
Rhino.Collections.RhinoList`1.InsertRange(self, index: int, collection: Iterable[`0]) -> None
Rhino.Collections.RhinoList`1.LastIndexOf(self, item: `0) -> int
Rhino.Collections.RhinoList`1.LastIndexOf(self, item: `0, index: int) -> int
Rhino.Collections.RhinoList`1.LastIndexOf(self, item: `0, index: int, count: int) -> int
Rhino.Collections.RhinoList`1.RemapIndex(self, index: int) -> int
Rhino.Collections.RhinoList`1.Remove(self, item: `0) -> bool
Rhino.Collections.RhinoList`1.RemoveAll(self, match: Predicate[`0]) -> int
Rhino.Collections.RhinoList`1.RemoveAt(self, index: int) -> None
Rhino.Collections.RhinoList`1.RemoveNulls(self) -> int
Rhino.Collections.RhinoList`1.RemoveRange(self, index: int, count: int) -> None
Rhino.Collections.RhinoList`1.Reverse(self) -> None
Rhino.Collections.RhinoList`1.Reverse(self, index: int, count: int) -> None
Rhino.Collections.RhinoList`1.Sort(self) -> None
Rhino.Collections.RhinoList`1.Sort(self, comparer: IComparer[`0]) -> None
Rhino.Collections.RhinoList`1.Sort(self, comparison: Comparison[`0]) -> None
Rhino.Collections.RhinoList`1.Sort(self, index: int, count: int, comparer: IComparer[`0]) -> None
Rhino.Collections.RhinoList`1.Sort(self, keys: List[float]) -> None
Rhino.Collections.RhinoList`1.Sort(self, keys: List[int]) -> None
Rhino.Collections.RhinoList`1.ToArray(self) -> List[T]
Rhino.Collections.RhinoList`1.TrimExcess(self) -> None
Rhino.Collections.RhinoList`1.TrueForAll(self, match: Predicate[`0]) -> bool
Rhino.Collections.RhinoList`1.__init__(self) -> None
Rhino.Collections.RhinoList`1.__init__(self, amount: int, defaultValue: `0) -> None
Rhino.Collections.RhinoList`1.__init__(self, collection: Iterable[`0]) -> None
Rhino.Collections.RhinoList`1.__init__(self, initialCapacity: int) -> None
Rhino.Collections.RhinoList`1.__init__(self, list: RhinoList[`0]) -> None
Rhino.Collections.TransformObjectList.Add(self, objref: Rhino.DocObjects.ObjRef) -> None
Rhino.Collections.TransformObjectList.Add(self, rhinoObject: Rhino.DocObjects.RhinoObject) -> None
Rhino.Collections.TransformObjectList.AddObjects(self, go: Rhino.Input.Custom.GetObject, allowGrips: bool) -> int
Rhino.Collections.TransformObjectList.Clear(self) -> None
Rhino.Collections.TransformObjectList.Dispose(self) -> None
Rhino.Collections.TransformObjectList.Dispose(self, disposing: bool) -> None
Rhino.Collections.TransformObjectList.Finalize(self) -> None
Rhino.Collections.TransformObjectList.GetBoundingBox(self, regularObjects: bool, grips: bool) -> BoundingBox
Rhino.Collections.TransformObjectList.GripArray(self) -> List[GripObject]
Rhino.Collections.TransformObjectList.GripOwnerArray(self) -> List[RhinoObject]
Rhino.Collections.TransformObjectList.ObjectArray(self) -> List[RhinoObject]
Rhino.Collections.TransformObjectList.UpdateDisplayFeedbackTransform(self, xform: Rhino.Geometry.Transform) -> bool
Rhino.Collections.TransformObjectList.__init__(self) -> None
Rhino.Commands.Command.DisplayHelp(commandId: System.Guid) -> None
Rhino.Commands.Command.GetCommandContextHelpUrl(commandId: System.Guid) -> str
Rhino.Commands.Command.GetCommandNames(english: bool, loaded: bool) -> List[str]
Rhino.Commands.Command.GetCommandStack() -> List[Guid]
Rhino.Commands.Command.GetMostRecentCommands() -> List[MostRecentCommandDescription]
Rhino.Commands.Command.InCommand() -> bool
Rhino.Commands.Command.InScriptRunnerCommand() -> bool
Rhino.Commands.Command.IsCommand(name: str) -> bool
Rhino.Commands.Command.IsValidCommandName(name: str) -> bool
Rhino.Commands.Command.LookupCommandId(name: str, searchForEnglishName: bool) -> Guid
Rhino.Commands.Command.LookupCommandName(commandId: System.Guid, englishName: bool) -> str
Rhino.Commands.Command.OnHelp(self) -> None
Rhino.Commands.Command.ReplayHistory(self, replayData: Rhino.DocObjects.ReplayHistoryData) -> bool
Rhino.Commands.Command.RunCommand(self, doc: Rhino.RhinoDoc, mode: Rhino.Commands.RunMode) -> Result
Rhino.Commands.Command.RunProxyCommand(arg1: Rhino.Commands.Command.RunCommandDelegate, arg2: Rhino.RhinoDoc, arg3: Any) -> None
Rhino.Commands.Command.__init__(self) -> None
Rhino.Commands.CommandStyleAttribute.__init__(self, styles: Rhino.Commands.Style) -> None
Rhino.Commands.MostRecentCommandDescription.__init__(self) -> None
Rhino.Commands.SelCommand.RunCommand(self, doc: Rhino.RhinoDoc, mode: Rhino.Commands.RunMode) -> Result
Rhino.Commands.SelCommand.SelFilter(self, rhObj: Rhino.DocObjects.RhinoObject) -> bool
Rhino.Commands.SelCommand.SelSubObjectFilter(self, rhObj: Rhino.DocObjects.RhinoObject, indicesToSelect: List[Rhino.Geometry.ComponentIndex]) -> bool
Rhino.Commands.SelCommand.__init__(self) -> None
Rhino.Commands.TransformCommand.DuplicateObjects(self, list: Rhino.Collections.TransformObjectList) -> None
Rhino.Commands.TransformCommand.ResetGrips(self, list: Rhino.Collections.TransformObjectList) -> None
Rhino.Commands.TransformCommand.SelectObjects(self, prompt: str, filter: Rhino.DocObjects.ObjectType, list: Rhino.Collections.TransformObjectList) -> Result
Rhino.Commands.TransformCommand.SelectObjects(self, prompt: str, list: Rhino.Collections.TransformObjectList) -> Result
Rhino.Commands.TransformCommand.TransformObjects(self, list: Rhino.Collections.TransformObjectList, xform: Rhino.Geometry.Transform, copy: bool, autoHistory: bool) -> None
Rhino.Commands.TransformCommand.__init__(self) -> None
Rhino.Display.CalculateBoundingBoxEventArgs.IncludeBoundingBox(self, box: Rhino.Geometry.BoundingBox) -> None
Rhino.Display.Color4f.!=(a: Rhino.Display.Color4f, b: Rhino.Display.Color4f) -> operator
Rhino.Display.Color4f.==(a: Rhino.Display.Color4f, b: Rhino.Display.Color4f) -> operator
Rhino.Display.Color4f.ApplyGamma(col: Rhino.Display.Color4f, gamma: float) -> Rhino.Display.Color4f
Rhino.Display.Color4f.AsSystemColor(self) -> Color
Rhino.Display.Color4f.BlendTo(self, t: float, col: Rhino.Display.Color4f) -> Rhino.Display.Color4f
Rhino.Display.Color4f.Equals(self, obj: Any) -> bool
Rhino.Display.Color4f.FromArgb(a: float, color: Rhino.Display.Color4f) -> Rhino.Display.Color4f
Rhino.Display.Color4f.FromArgb(a: float, r: float, g: float, b: float) -> Rhino.Display.Color4f
Rhino.Display.Color4f.GetHashCode(self) -> int
Rhino.Display.Color4f.__init__(self, argb: int) -> None
Rhino.Display.Color4f.__init__(self, color: Rhino.Display.Color4f) -> None
Rhino.Display.Color4f.__init__(self, color: System.Drawing.Color) -> None
Rhino.Display.Color4f.__init__(self, red: float, green: float, blue: float, alpha: float) -> None
Rhino.Display.ColorCMYK.Color(cmyk: Rhino.Display.ColorCMYK) -> operator
Rhino.Display.ColorCMYK.CreateFromHSL(hsl: Rhino.Display.ColorHSL) -> Rhino.Display.ColorCMYK
Rhino.Display.ColorCMYK.CreateFromHSV(hsv: Rhino.Display.ColorHSV) -> Rhino.Display.ColorCMYK
Rhino.Display.ColorCMYK.CreateFromLAB(lab: Rhino.Display.ColorLAB) -> Rhino.Display.ColorCMYK
Rhino.Display.ColorCMYK.CreateFromLCH(lch: Rhino.Display.ColorLCH) -> Rhino.Display.ColorCMYK
Rhino.Display.ColorCMYK.CreateFromRGBA(rgba: Rhino.Display.ColorRGBA) -> Rhino.Display.ColorCMYK
Rhino.Display.ColorCMYK.CreateFromXYZ(xyz: Rhino.Display.ColorXYZ) -> Rhino.Display.ColorCMYK
Rhino.Display.ColorCMYK.__init__(self, alpha: float, cyan: float, magenta: float, yellow: float, key: float) -> None
Rhino.Display.ColorCMYK.__init__(self, cyan: float, magenta: float, yellow: float) -> None
Rhino.Display.ColorCMYK.__init__(self, cyan: float, magenta: float, yellow: float, key: float) -> None
Rhino.Display.ColorCMYK.__init__(self, rgb: System.Drawing.Color) -> None
Rhino.Display.ColorGradient.Duplicate(self) -> Rhino.Display.ColorGradient
Rhino.Display.ColorGradient.GetColorStops(self) -> List[ColorStop]
Rhino.Display.ColorGradient.SetColorStops(self, stops: Iterable[Rhino.Display.ColorStop]) -> None
Rhino.Display.ColorGradient.__init__(self) -> None
Rhino.Display.ColorHSL.Color(hsl: Rhino.Display.ColorHSL) -> operator
Rhino.Display.ColorHSL.CreateFromCMYK(cmyk: Rhino.Display.ColorCMYK) -> Rhino.Display.ColorHSL
Rhino.Display.ColorHSL.CreateFromHSV(hsv: Rhino.Display.ColorHSV) -> Rhino.Display.ColorHSL
Rhino.Display.ColorHSL.CreateFromLAB(lab: Rhino.Display.ColorLAB) -> Rhino.Display.ColorHSL
Rhino.Display.ColorHSL.CreateFromLCH(lch: Rhino.Display.ColorLCH) -> Rhino.Display.ColorHSL
Rhino.Display.ColorHSL.CreateFromRGBA(rgba: Rhino.Display.ColorRGBA) -> Rhino.Display.ColorHSL
Rhino.Display.ColorHSL.CreateFromXYZ(xyz: Rhino.Display.ColorXYZ) -> Rhino.Display.ColorHSL
Rhino.Display.ColorHSL.ToArgbColor(self) -> Color
Rhino.Display.ColorHSL.__init__(self, alpha: float, hue: float, saturation: float, luminance: float) -> None
Rhino.Display.ColorHSL.__init__(self, hue: float, saturation: float, luminance: float) -> None
Rhino.Display.ColorHSL.__init__(self, rgb: System.Drawing.Color) -> None
Rhino.Display.ColorHSV.Color(hsv: Rhino.Display.ColorHSV) -> operator
Rhino.Display.ColorHSV.CreateFromCMYK(cmyk: Rhino.Display.ColorCMYK) -> Rhino.Display.ColorHSV
Rhino.Display.ColorHSV.CreateFromHSL(hsl: Rhino.Display.ColorHSL) -> Rhino.Display.ColorHSV
Rhino.Display.ColorHSV.CreateFromLAB(lab: Rhino.Display.ColorLAB) -> Rhino.Display.ColorHSV
Rhino.Display.ColorHSV.CreateFromLCH(lch: Rhino.Display.ColorLCH) -> Rhino.Display.ColorHSV
Rhino.Display.ColorHSV.CreateFromRGBA(rgba: Rhino.Display.ColorRGBA) -> Rhino.Display.ColorHSV
Rhino.Display.ColorHSV.CreateFromXYZ(xyz: Rhino.Display.ColorXYZ) -> Rhino.Display.ColorHSV
Rhino.Display.ColorHSV.ToArgbColor(self) -> Color
Rhino.Display.ColorHSV.__init__(self, alpha: float, hue: float, saturation: float, value: float) -> None
Rhino.Display.ColorHSV.__init__(self, hue: float, saturation: float, value: float) -> None
Rhino.Display.ColorHSV.__init__(self, rgb: System.Drawing.Color) -> None
Rhino.Display.ColorLAB.Color(lab: Rhino.Display.ColorLAB) -> operator
Rhino.Display.ColorLAB.CreateFromCMYK(cmyk: Rhino.Display.ColorCMYK) -> Rhino.Display.ColorLAB
Rhino.Display.ColorLAB.CreateFromHSL(hsl: Rhino.Display.ColorHSL) -> Rhino.Display.ColorLAB
Rhino.Display.ColorLAB.CreateFromHSV(hsv: Rhino.Display.ColorHSV) -> Rhino.Display.ColorLAB
Rhino.Display.ColorLAB.CreateFromLCH(lch: Rhino.Display.ColorLCH) -> Rhino.Display.ColorLAB
Rhino.Display.ColorLAB.CreateFromRGBA(rgb: Rhino.Display.ColorRGBA) -> Rhino.Display.ColorLAB
Rhino.Display.ColorLAB.CreateFromXYZ(xyz: Rhino.Display.ColorXYZ) -> Rhino.Display.ColorLAB
Rhino.Display.ColorLAB.__init__(self, alpha: float, lightness: float, a: float, b: float) -> None
Rhino.Display.ColorLAB.__init__(self, lightness: float, a: float, b: float) -> None
Rhino.Display.ColorLAB.__init__(self, rgb: System.Drawing.Color) -> None
Rhino.Display.ColorLCH.Color(lch: Rhino.Display.ColorLCH) -> operator
Rhino.Display.ColorLCH.CreateFromCMYK(cmyk: Rhino.Display.ColorCMYK) -> Rhino.Display.ColorLCH
Rhino.Display.ColorLCH.CreateFromHSL(hsl: Rhino.Display.ColorHSL) -> Rhino.Display.ColorLCH
Rhino.Display.ColorLCH.CreateFromLAB(lab: Rhino.Display.ColorLAB) -> Rhino.Display.ColorLCH
Rhino.Display.ColorLCH.CreateFromRGBA(rgb: Rhino.Display.ColorRGBA) -> Rhino.Display.ColorLCH
Rhino.Display.ColorLCH.CreateFromXYZ(xyz: Rhino.Display.ColorXYZ) -> Rhino.Display.ColorLCH
Rhino.Display.ColorLCH.MakePositive(self) -> None
Rhino.Display.ColorLCH.__init__(self, alpha: float, lightness: float, chroma: float, hue: float) -> None
Rhino.Display.ColorLCH.__init__(self, lightness: float, chroma: float, hue: float) -> None
Rhino.Display.ColorLCH.__init__(self, rgb: System.Drawing.Color) -> None
Rhino.Display.ColorRGBA.!=(a: Rhino.Display.ColorRGBA, b: Rhino.Display.ColorRGBA) -> operator
Rhino.Display.ColorRGBA.==(a: Rhino.Display.ColorRGBA, b: Rhino.Display.ColorRGBA) -> operator
Rhino.Display.ColorRGBA.ApplyGamma(col: Rhino.Display.ColorRGBA, gamma: float) -> Rhino.Display.ColorRGBA
Rhino.Display.ColorRGBA.BlendTo(self, col: Rhino.Display.ColorRGBA, coefficient: float) -> Rhino.Display.ColorRGBA
Rhino.Display.ColorRGBA.Color(value: Rhino.Display.ColorRGBA) -> operator
Rhino.Display.ColorRGBA.CompareTo(self, other: Rhino.Display.ColorRGBA) -> int
Rhino.Display.ColorRGBA.CreateFromArgb(alpha: System.Byte, red: System.Byte, green: System.Byte, blue: System.Byte) -> Rhino.Display.ColorRGBA
Rhino.Display.ColorRGBA.CreateFromArgb(red: System.Byte, green: System.Byte, blue: System.Byte) -> Rhino.Display.ColorRGBA
Rhino.Display.ColorRGBA.CreateFromCMYK(cmyk: Rhino.Display.ColorCMYK) -> Rhino.Display.ColorRGBA
Rhino.Display.ColorRGBA.CreateFromHSL(hsl: Rhino.Display.ColorHSL) -> Rhino.Display.ColorRGBA
Rhino.Display.ColorRGBA.CreateFromHSV(hsv: Rhino.Display.ColorHSV) -> Rhino.Display.ColorRGBA
Rhino.Display.ColorRGBA.CreateFromLAB(lab: Rhino.Display.ColorLAB) -> Rhino.Display.ColorRGBA
Rhino.Display.ColorRGBA.CreateFromLCH(lch: Rhino.Display.ColorLCH) -> Rhino.Display.ColorRGBA
Rhino.Display.ColorRGBA.CreateFromXYZ(xyz: Rhino.Display.ColorXYZ) -> Rhino.Display.ColorRGBA
Rhino.Display.ColorRGBA.EpsilonEquals(self, other: Rhino.Display.ColorRGBA, epsilon: float) -> bool
Rhino.Display.ColorRGBA.Equals(self, obj: Any) -> bool
Rhino.Display.ColorRGBA.Equals(self, other: Rhino.Display.ColorRGBA) -> bool
Rhino.Display.ColorRGBA.GetHashCode(self) -> int
Rhino.Display.ColorRGBA.ToArgb(self) -> int
Rhino.Display.ColorRGBA.ToString(self) -> str
Rhino.Display.ColorRGBA.ToString(self, format: str, formatProvider: System.IFormatProvider) -> str
Rhino.Display.ColorRGBA.__init__(self, argb: int) -> None
Rhino.Display.ColorRGBA.__init__(self, color: Rhino.Display.ColorRGBA) -> None
Rhino.Display.ColorRGBA.__init__(self, color: Rhino.Display.ColorRGBA, alpha: float) -> None
Rhino.Display.ColorRGBA.__init__(self, color: System.Drawing.Color) -> None
Rhino.Display.ColorRGBA.__init__(self, red: float, green: float, blue: float) -> None
Rhino.Display.ColorRGBA.__init__(self, red: float, green: float, blue: float, alpha: float) -> None
Rhino.Display.ColorRGBA.__init__(self, value: System.Drawing.Color) -> None
Rhino.Display.ColorStop.__init__(self, color: System.Drawing.Color, t: float) -> None
Rhino.Display.ColorXYZ.Color(xyz: Rhino.Display.ColorXYZ) -> operator
Rhino.Display.ColorXYZ.CreateFromCMYK(cmyk: Rhino.Display.ColorCMYK) -> Rhino.Display.ColorXYZ
Rhino.Display.ColorXYZ.CreateFromHSL(hsl: Rhino.Display.ColorHSL) -> Rhino.Display.ColorXYZ
Rhino.Display.ColorXYZ.CreateFromHSV(hsv: Rhino.Display.ColorHSV) -> Rhino.Display.ColorXYZ
Rhino.Display.ColorXYZ.CreateFromLAB(lab: Rhino.Display.ColorLAB) -> Rhino.Display.ColorXYZ
Rhino.Display.ColorXYZ.CreateFromLCH(lch: Rhino.Display.ColorLCH) -> Rhino.Display.ColorXYZ
Rhino.Display.ColorXYZ.CreateFromRGBA(rgba: Rhino.Display.ColorRGBA) -> Rhino.Display.ColorXYZ
Rhino.Display.ColorXYZ.__init__(self, alpha: float, x: float, y: float, z: float) -> None
Rhino.Display.ColorXYZ.__init__(self, rgb: System.Drawing.Color) -> None
Rhino.Display.ColorXYZ.__init__(self, x: float, y: float, z: float) -> None
Rhino.Display.CustomDisplay.AddArc(self, arc: Rhino.Geometry.Arc) -> None
Rhino.Display.CustomDisplay.AddArc(self, arc: Rhino.Geometry.Arc, color: System.Drawing.Color) -> None
Rhino.Display.CustomDisplay.AddArc(self, arc: Rhino.Geometry.Arc, color: System.Drawing.Color, thickness: int) -> None
Rhino.Display.CustomDisplay.AddCircle(self, circle: Rhino.Geometry.Circle) -> None
Rhino.Display.CustomDisplay.AddCircle(self, circle: Rhino.Geometry.Circle, color: System.Drawing.Color) -> None
Rhino.Display.CustomDisplay.AddCircle(self, circle: Rhino.Geometry.Circle, color: System.Drawing.Color, thickness: int) -> None
Rhino.Display.CustomDisplay.AddCurve(self, curve: Rhino.Geometry.Curve) -> None
Rhino.Display.CustomDisplay.AddCurve(self, curve: Rhino.Geometry.Curve, color: System.Drawing.Color) -> None
Rhino.Display.CustomDisplay.AddCurve(self, curve: Rhino.Geometry.Curve, color: System.Drawing.Color, thickness: int) -> None
Rhino.Display.CustomDisplay.AddLine(self, line: Rhino.Geometry.Line) -> None
Rhino.Display.CustomDisplay.AddLine(self, line: Rhino.Geometry.Line, color: System.Drawing.Color) -> None
Rhino.Display.CustomDisplay.AddLine(self, line: Rhino.Geometry.Line, color: System.Drawing.Color, thickness: int) -> None
Rhino.Display.CustomDisplay.AddPoint(self, point: Rhino.Geometry.Point3d) -> None
Rhino.Display.CustomDisplay.AddPoint(self, point: Rhino.Geometry.Point3d, color: System.Drawing.Color) -> None
Rhino.Display.CustomDisplay.AddPoint(self, point: Rhino.Geometry.Point3d, color: System.Drawing.Color, style: Rhino.Display.PointStyle, radius: int) -> None
Rhino.Display.CustomDisplay.AddPoints(self, points: Iterable[Rhino.Geometry.Point3d]) -> None
Rhino.Display.CustomDisplay.AddPoints(self, points: Iterable[Rhino.Geometry.Point3d], color: System.Drawing.Color) -> None
Rhino.Display.CustomDisplay.AddPoints(self, points: Iterable[Rhino.Geometry.Point3d], color: System.Drawing.Color, style: Rhino.Display.PointStyle, radius: int) -> None
Rhino.Display.CustomDisplay.AddPolygon(self, polygon: Iterable[Rhino.Geometry.Point3d], fillColor: System.Drawing.Color, edgeColor: System.Drawing.Color, drawFill: bool, drawEdge: bool) -> None
Rhino.Display.CustomDisplay.AddText(self, text: Rhino.Display.Text3d, color: System.Drawing.Color) -> None
Rhino.Display.CustomDisplay.AddText(self, text: str, plane: Rhino.Geometry.Plane, size: float) -> None
Rhino.Display.CustomDisplay.AddText(self, text: str, plane: Rhino.Geometry.Plane, size: float, color: System.Drawing.Color) -> None
Rhino.Display.CustomDisplay.AddVector(self, anchor: Rhino.Geometry.Point3d, span: Rhino.Geometry.Vector3d) -> None
Rhino.Display.CustomDisplay.AddVector(self, anchor: Rhino.Geometry.Point3d, span: Rhino.Geometry.Vector3d, color: System.Drawing.Color) -> None
Rhino.Display.CustomDisplay.AddVector(self, anchor: Rhino.Geometry.Point3d, span: Rhino.Geometry.Vector3d, color: System.Drawing.Color, drawAnchor: bool) -> None
Rhino.Display.CustomDisplay.Clear(self) -> None
Rhino.Display.CustomDisplay.Dispose(self) -> None
Rhino.Display.CustomDisplay.__init__(self, enable: bool) -> None
Rhino.Display.DisplayBitmap.Dispose(self) -> None
Rhino.Display.DisplayBitmap.Dispose(self, disposing: bool) -> None
Rhino.Display.DisplayBitmap.Finalize(self) -> None
Rhino.Display.DisplayBitmap.GetBlendModes(self, source: Rhino.Display.BlendMode@, destination: Rhino.Display.BlendMode@) -> None
Rhino.Display.DisplayBitmap.Load(path: str) -> Rhino.Display.DisplayBitmap
Rhino.Display.DisplayBitmap.SetBlendFunction(self, source: Rhino.Display.BlendMode, destination: Rhino.Display.BlendMode) -> None
Rhino.Display.DisplayBitmap.Update(self, bitmap: System.Drawing.Bitmap) -> None
Rhino.Display.DisplayBitmap.__init__(self, bitmap: System.Drawing.Bitmap) -> None
Rhino.Display.DisplayBitmap.__init__(self, path: str, bitmap: System.Drawing.Bitmap) -> None
Rhino.Display.DisplayBitmapDrawList.SetPoints(self, points: Iterable[Rhino.Geometry.Point3d]) -> None
Rhino.Display.DisplayBitmapDrawList.SetPoints(self, points: Iterable[Rhino.Geometry.Point3d], blendColor: System.Drawing.Color) -> None
Rhino.Display.DisplayBitmapDrawList.SetPoints(self, points: Iterable[Rhino.Geometry.Point3d], colors: Iterable[System.Drawing.Color]) -> None
Rhino.Display.DisplayBitmapDrawList.Sort(self, cameraDirection: Rhino.Geometry.Vector3d) -> List[int]
Rhino.Display.DisplayBitmapDrawList.__init__(self) -> None
Rhino.Display.DisplayConduit.CalculateBoundingBox(self, e: Rhino.Display.CalculateBoundingBoxEventArgs) -> None
Rhino.Display.DisplayConduit.CalculateBoundingBoxZoomExtents(self, e: Rhino.Display.CalculateBoundingBoxEventArgs) -> None
Rhino.Display.DisplayConduit.DrawForeground(self, e: Rhino.Display.DrawEventArgs) -> None
Rhino.Display.DisplayConduit.DrawOverlay(self, e: Rhino.Display.DrawEventArgs) -> None
Rhino.Display.DisplayConduit.GetSelectionFilter(self, on: System.Boolean@, checkSubObjects: System.Boolean@) -> None
Rhino.Display.DisplayConduit.ObjectCulling(self, e: Rhino.Display.CullObjectEventArgs) -> None
Rhino.Display.DisplayConduit.OnEnable(self, enable: bool) -> None
Rhino.Display.DisplayConduit.PostDrawObjects(self, e: Rhino.Display.DrawEventArgs) -> None
Rhino.Display.DisplayConduit.PreDrawObject(self, e: Rhino.Display.DrawObjectEventArgs) -> None
Rhino.Display.DisplayConduit.PreDrawObjects(self, e: Rhino.Display.DrawEventArgs) -> None
Rhino.Display.DisplayConduit.SetObjectIdFilter(self, id: System.Guid) -> None
Rhino.Display.DisplayConduit.SetObjectIdFilter(self, ids: Iterable[System.Guid]) -> None
Rhino.Display.DisplayConduit.SetSelectionFilter(self, on: bool, checkSubObjects: bool) -> None
Rhino.Display.DisplayConduit.__init__(self) -> None
Rhino.Display.DisplayEngine.Dispose(self) -> None
Rhino.Display.DisplayEngine.Finalize(self) -> None
Rhino.Display.DisplayEngine.__init__(self) -> None
Rhino.Display.DisplayMaterial.Dispose(self) -> None
Rhino.Display.DisplayMaterial.Dispose(self, disposing: bool) -> None
Rhino.Display.DisplayMaterial.Finalize(self) -> None
Rhino.Display.DisplayMaterial.GetBitmapTexture(self, front: bool) -> Texture
Rhino.Display.DisplayMaterial.GetBumpTexture(self, front: bool) -> Texture
Rhino.Display.DisplayMaterial.GetEnvironmentTexture(self, front: bool) -> Texture
Rhino.Display.DisplayMaterial.GetTransparencyTexture(self, front: bool) -> Texture
Rhino.Display.DisplayMaterial.SetBitmapTexture(self, filename: str, front: bool) -> bool
Rhino.Display.DisplayMaterial.SetBitmapTexture(self, texture: Rhino.DocObjects.Texture, front: bool) -> bool
Rhino.Display.DisplayMaterial.SetBumpTexture(self, filename: str, front: bool) -> bool
Rhino.Display.DisplayMaterial.SetBumpTexture(self, texture: Rhino.DocObjects.Texture, front: bool) -> bool
Rhino.Display.DisplayMaterial.SetEnvironmentTexture(self, filename: str, front: bool) -> bool
Rhino.Display.DisplayMaterial.SetEnvironmentTexture(self, texture: Rhino.DocObjects.Texture, front: bool) -> bool
Rhino.Display.DisplayMaterial.SetTransparencyTexture(self, filename: str, front: bool) -> bool
Rhino.Display.DisplayMaterial.SetTransparencyTexture(self, texture: Rhino.DocObjects.Texture, front: bool) -> bool
Rhino.Display.DisplayMaterial.__init__(self) -> None
Rhino.Display.DisplayMaterial.__init__(self, diffuse: System.Drawing.Color) -> None
Rhino.Display.DisplayMaterial.__init__(self, diffuse: System.Drawing.Color, specular: System.Drawing.Color, ambient: System.Drawing.Color, emission: System.Drawing.Color, shine: float, transparency: float) -> None
Rhino.Display.DisplayMaterial.__init__(self, diffuse: System.Drawing.Color, transparency: float) -> None
Rhino.Display.DisplayMaterial.__init__(self, material: Rhino.DocObjects.Material) -> None
Rhino.Display.DisplayMaterial.__init__(self, other: Rhino.Display.DisplayMaterial) -> None
Rhino.Display.DisplayModeDescription.AddDisplayMode(displayMode: Rhino.Display.DisplayModeDescription) -> Guid
Rhino.Display.DisplayModeDescription.AddDisplayMode(name: str) -> Guid
Rhino.Display.DisplayModeDescription.CopyDisplayMode(id: System.Guid, name: str) -> Guid
Rhino.Display.DisplayModeDescription.DeleteDisplayMode(id: System.Guid) -> bool
Rhino.Display.DisplayModeDescription.Dispose(self) -> None
Rhino.Display.DisplayModeDescription.Dispose(self, disposing: bool) -> None
Rhino.Display.DisplayModeDescription.ExportToFile(displayMode: Rhino.Display.DisplayModeDescription, filename: str) -> bool
Rhino.Display.DisplayModeDescription.Finalize(self) -> None
Rhino.Display.DisplayModeDescription.FindByName(englishName: str) -> Rhino.Display.DisplayModeDescription
Rhino.Display.DisplayModeDescription.GetDisplayMode(id: System.Guid) -> Rhino.Display.DisplayModeDescription
Rhino.Display.DisplayModeDescription.GetDisplayModes() -> List[Rhino.Display.DisplayModeDescription]
Rhino.Display.DisplayModeDescription.ImportFromFile(filename: str) -> Guid
Rhino.Display.DisplayModeDescription.UpdateDisplayMode(displayMode: Rhino.Display.DisplayModeDescription) -> bool
Rhino.Display.DisplayModeDescription.[ObsoleteAttribute(self, arg1: System.Guid) -> None
Rhino.Display.DisplayPen.Duplicate(self) -> Rhino.Display.DisplayPen
Rhino.Display.DisplayPen.FromLinetype(linetype: Rhino.DocObjects.Linetype, color: System.Drawing.Color, patternScale: float) -> Rhino.Display.DisplayPen
Rhino.Display.DisplayPen.PatternAsArray(self) -> List[float]
Rhino.Display.DisplayPen.SetPattern(self, dashesAndGaps: Iterable[float]) -> None
Rhino.Display.DisplayPen.SetTaper(self, startThickness: float, endThickness: float, taperPoint: Rhino.Geometry.Point2f) -> None
Rhino.Display.DisplayPen.TaperAsArray(self) -> List[Point2f]
Rhino.Display.DisplayPen.__init__(self) -> None
Rhino.Display.DisplayPipeline.AddClippingPlane(self, point: Rhino.Geometry.Point3d, normal: Rhino.Geometry.Vector3d) -> int
Rhino.Display.DisplayPipeline.AvailableOpenGLVersion(coreProfile: System.Boolean@) -> uint
Rhino.Display.DisplayPipeline.ClearFrameBuffer(self, color: System.Drawing.Color) -> None
Rhino.Display.DisplayPipeline.Clone(self, viewport: Rhino.Display.RhinoViewport) -> Rhino.Display.DisplayPipeline
Rhino.Display.DisplayPipeline.Close(self) -> bool
Rhino.Display.DisplayPipeline.CullControlPolygon() -> bool
Rhino.Display.DisplayPipeline.Draw2dLine(self, from: System.Drawing.Point, to: System.Drawing.Point, color: System.Drawing.Color, thickness: float) -> None
Rhino.Display.DisplayPipeline.Draw2dLine(self, from: System.Drawing.PointF, to: System.Drawing.PointF, color: System.Drawing.Color, thickness: float) -> None
Rhino.Display.DisplayPipeline.Draw2dRectangle(self, rectangle: System.Drawing.Rectangle, strokeColor: System.Drawing.Color, thickness: int, fillColor: System.Drawing.Color) -> None
Rhino.Display.DisplayPipeline.Draw2dText(self, text: str, color: System.Drawing.Color, screenCoordinate: Rhino.Geometry.Point2d, middleJustified: bool) -> None
Rhino.Display.DisplayPipeline.Draw2dText(self, text: str, color: System.Drawing.Color, screenCoordinate: Rhino.Geometry.Point2d, middleJustified: bool, height: int) -> None
Rhino.Display.DisplayPipeline.Draw2dText(self, text: str, color: System.Drawing.Color, screenCoordinate: Rhino.Geometry.Point2d, middleJustified: bool, height: int, fontface: str) -> None
Rhino.Display.DisplayPipeline.Draw2dText(self, text: str, color: System.Drawing.Color, worldCoordinate: Rhino.Geometry.Point3d, middleJustified: bool) -> None
Rhino.Display.DisplayPipeline.Draw2dText(self, text: str, color: System.Drawing.Color, worldCoordinate: Rhino.Geometry.Point3d, middleJustified: bool, height: int) -> None
Rhino.Display.DisplayPipeline.Draw2dText(self, text: str, color: System.Drawing.Color, worldCoordinate: Rhino.Geometry.Point3d, middleJustified: bool, height: int, fontface: str) -> None
Rhino.Display.DisplayPipeline.Draw3dText(self, text: Rhino.Display.Text3d, color: System.Drawing.Color) -> None
Rhino.Display.DisplayPipeline.Draw3dText(self, text: Rhino.Display.Text3d, color: System.Drawing.Color, textPlane: Rhino.Geometry.Plane) -> None
Rhino.Display.DisplayPipeline.Draw3dText(self, text: Rhino.Display.Text3d, color: System.Drawing.Color, textPlaneOrigin: Rhino.Geometry.Point3d) -> None
Rhino.Display.DisplayPipeline.Draw3dText(self, text: str, color: System.Drawing.Color, textPlane: Rhino.Geometry.Plane, height: float, fontface: str) -> None
Rhino.Display.DisplayPipeline.Draw3dText(self, text: str, color: System.Drawing.Color, textPlane: Rhino.Geometry.Plane, height: float, fontface: str, bold: bool, italic: bool) -> None
Rhino.Display.DisplayPipeline.Draw3dText(self, text: str, color: System.Drawing.Color, textPlane: Rhino.Geometry.Plane, height: float, fontface: str, bold: bool, italic: bool, horizontalAlignment: Rhino.DocObjects.TextHorizontalAlignment, verticalAlignment: Rhino.DocObjects.TextVerticalAlignment) -> None
Rhino.Display.DisplayPipeline.DrawActivePoint(self, point: Rhino.Geometry.Point3d) -> None
Rhino.Display.DisplayPipeline.DrawAnnotation(self, annotation: Rhino.Geometry.AnnotationBase, color: System.Drawing.Color) -> None
Rhino.Display.DisplayPipeline.DrawAnnotationArrowhead(self, arrowhead: Rhino.Geometry.Arrowhead, xform: Rhino.Geometry.Transform, color: System.Drawing.Color) -> None
Rhino.Display.DisplayPipeline.DrawArc(self, arc: Rhino.Geometry.Arc, color: System.Drawing.Color) -> None
Rhino.Display.DisplayPipeline.DrawArc(self, arc: Rhino.Geometry.Arc, color: System.Drawing.Color, thickness: int) -> None
Rhino.Display.DisplayPipeline.DrawArrow(self, line: Rhino.Geometry.Line, color: System.Drawing.Color) -> None
Rhino.Display.DisplayPipeline.DrawArrow(self, line: Rhino.Geometry.Line, color: System.Drawing.Color, screenSize: float, relativeSize: float) -> None
Rhino.Display.DisplayPipeline.DrawArrowHead(self, tip: Rhino.Geometry.Point3d, direction: Rhino.Geometry.Vector3d, color: System.Drawing.Color, screenSize: float, worldSize: float) -> None
Rhino.Display.DisplayPipeline.DrawArrows(self, lines: Iterable[Rhino.Geometry.Line], color: System.Drawing.Color) -> None
Rhino.Display.DisplayPipeline.DrawArrows(self, lines: List[Rhino.Geometry.Line], color: System.Drawing.Color) -> None
Rhino.Display.DisplayPipeline.DrawBitmap(self, bitmap: Rhino.Display.DisplayBitmap, left: int, top: int) -> None
Rhino.Display.DisplayPipeline.DrawBox(self, box: Rhino.Geometry.BoundingBox, color: System.Drawing.Color) -> None
Rhino.Display.DisplayPipeline.DrawBox(self, box: Rhino.Geometry.BoundingBox, color: System.Drawing.Color, thickness: int) -> None
Rhino.Display.DisplayPipeline.DrawBox(self, box: Rhino.Geometry.Box, color: System.Drawing.Color) -> None
Rhino.Display.DisplayPipeline.DrawBox(self, box: Rhino.Geometry.Box, color: System.Drawing.Color, thickness: int) -> None
Rhino.Display.DisplayPipeline.DrawBoxCorners(self, box: Rhino.Geometry.BoundingBox, color: System.Drawing.Color) -> None
Rhino.Display.DisplayPipeline.DrawBoxCorners(self, box: Rhino.Geometry.BoundingBox, color: System.Drawing.Color, size: float) -> None
Rhino.Display.DisplayPipeline.DrawBoxCorners(self, box: Rhino.Geometry.BoundingBox, color: System.Drawing.Color, size: float, thickness: int) -> None
Rhino.Display.DisplayPipeline.DrawBrepShaded(self, brep: Rhino.Geometry.Brep, material: Rhino.Display.DisplayMaterial) -> None
Rhino.Display.DisplayPipeline.DrawBrepWires(self, brep: Rhino.Geometry.Brep, color: System.Drawing.Color) -> None
Rhino.Display.DisplayPipeline.DrawBrepWires(self, brep: Rhino.Geometry.Brep, color: System.Drawing.Color, wireDensity: int) -> None
Rhino.Display.DisplayPipeline.DrawCircle(self, circle: Rhino.Geometry.Circle, color: System.Drawing.Color) -> None
Rhino.Display.DisplayPipeline.DrawCircle(self, circle: Rhino.Geometry.Circle, color: System.Drawing.Color, thickness: int) -> None
Rhino.Display.DisplayPipeline.DrawCone(self, cone: Rhino.Geometry.Cone, color: System.Drawing.Color) -> None
Rhino.Display.DisplayPipeline.DrawCone(self, cone: Rhino.Geometry.Cone, color: System.Drawing.Color, thickness: int) -> None
Rhino.Display.DisplayPipeline.DrawConstructionPlane(self, constructionPlane: Rhino.DocObjects.ConstructionPlane) -> None
Rhino.Display.DisplayPipeline.DrawCurvatureGraph(self, curve: Rhino.Geometry.Curve, color: System.Drawing.Color) -> None
Rhino.Display.DisplayPipeline.DrawCurvatureGraph(self, curve: Rhino.Geometry.Curve, color: System.Drawing.Color, hairScale: int) -> None
Rhino.Display.DisplayPipeline.DrawCurvatureGraph(self, curve: Rhino.Geometry.Curve, color: System.Drawing.Color, hairScale: int, hairDensity: int, sampleDensity: int) -> None
Rhino.Display.DisplayPipeline.DrawCurve(self, curve: Rhino.Geometry.Curve, color: System.Drawing.Color) -> None
Rhino.Display.DisplayPipeline.DrawCurve(self, curve: Rhino.Geometry.Curve, color: System.Drawing.Color, thickness: int) -> None
Rhino.Display.DisplayPipeline.DrawCurve(self, curve: Rhino.Geometry.Curve, pen: Rhino.Display.DisplayPen) -> None
Rhino.Display.DisplayPipeline.DrawCylinder(self, cylinder: Rhino.Geometry.Cylinder, color: System.Drawing.Color) -> None
Rhino.Display.DisplayPipeline.DrawCylinder(self, cylinder: Rhino.Geometry.Cylinder, color: System.Drawing.Color, thickness: int) -> None
Rhino.Display.DisplayPipeline.DrawDirectionArrow(self, location: Rhino.Geometry.Point3d, direction: Rhino.Geometry.Vector3d, color: System.Drawing.Color) -> None
Rhino.Display.DisplayPipeline.DrawDot(self, dot: Rhino.Geometry.TextDot, fillColor: System.Drawing.Color, textColor: System.Drawing.Color, borderColor: System.Drawing.Color) -> None
Rhino.Display.DisplayPipeline.DrawDot(self, screenX: float, screenY: float, text: str) -> None
Rhino.Display.DisplayPipeline.DrawDot(self, screenX: float, screenY: float, text: str, dotColor: System.Drawing.Color, textColor: System.Drawing.Color) -> None
Rhino.Display.DisplayPipeline.DrawDot(self, worldPosition: Rhino.Geometry.Point3d, text: str) -> None
Rhino.Display.DisplayPipeline.DrawDot(self, worldPosition: Rhino.Geometry.Point3d, text: str, dotColor: System.Drawing.Color, textColor: System.Drawing.Color) -> None
Rhino.Display.DisplayPipeline.DrawDottedLine(self, from: Rhino.Geometry.Point3d, to: Rhino.Geometry.Point3d, color: System.Drawing.Color) -> None
Rhino.Display.DisplayPipeline.DrawDottedLine(self, line: Rhino.Geometry.Line, color: System.Drawing.Color) -> None
Rhino.Display.DisplayPipeline.DrawDottedPolyline(self, points: Iterable[Rhino.Geometry.Point3d], color: System.Drawing.Color, close: bool) -> None
Rhino.Display.DisplayPipeline.DrawExtrusionWires(self, extrusion: Rhino.Geometry.Extrusion, color: System.Drawing.Color) -> None
Rhino.Display.DisplayPipeline.DrawExtrusionWires(self, extrusion: Rhino.Geometry.Extrusion, color: System.Drawing.Color, wireDensity: int) -> None
Rhino.Display.DisplayPipeline.DrawGradientHatch(self, hatch: Rhino.Geometry.Hatch, color1: System.Drawing.Color, color2: System.Drawing.Color, point1: Rhino.Geometry.Point3d, point2: Rhino.Geometry.Point3d, linearGradient: bool, boundaryThickness: float, boundaryColor: System.Drawing.Color) -> None
Rhino.Display.DisplayPipeline.DrawGradientHatch(self, hatch: Rhino.Geometry.Hatch, stops: Iterable[Rhino.Display.ColorStop], point1: Rhino.Geometry.Point3d, point2: Rhino.Geometry.Point3d, linearGradient: bool, repeat: float, boundary: Rhino.Display.DisplayPen, backgroundFillColor: System.Drawing.Color) -> None
Rhino.Display.DisplayPipeline.DrawGradientHatch(self, hatch: Rhino.Geometry.Hatch, stops: Iterable[Rhino.Display.ColorStop], point1: Rhino.Geometry.Point3d, point2: Rhino.Geometry.Point3d, linearGradient: bool, repeat: float, boundaryThickness: float, boundaryColor: System.Drawing.Color) -> None
Rhino.Display.DisplayPipeline.DrawGradientLines(self, lines: Iterable[Rhino.Geometry.Line], strokeWidth: float, stops: Iterable[Rhino.Display.ColorStop], point1: Rhino.Geometry.Point3d, point2: Rhino.Geometry.Point3d, linearGradient: bool, repeat: float) -> None
Rhino.Display.DisplayPipeline.DrawGradientMesh(self, mesh: Rhino.Geometry.Mesh, stops: Iterable[Rhino.Display.ColorStop], point1: Rhino.Geometry.Point3d, point2: Rhino.Geometry.Point3d, linearGradient: bool, repeat: float) -> None
Rhino.Display.DisplayPipeline.DrawHatch(self, hatch: Rhino.Geometry.Hatch, hatchColor: System.Drawing.Color, boundary: Rhino.Display.DisplayPen, backgroundFillColor: System.Drawing.Color) -> None
Rhino.Display.DisplayPipeline.DrawHatch(self, hatch: Rhino.Geometry.Hatch, hatchColor: System.Drawing.Color, boundaryColor: System.Drawing.Color) -> None
Rhino.Display.DisplayPipeline.DrawInferenceLine(self, P: Rhino.Geometry.Point3d, O: Rhino.Geometry.Point3d, color: System.Drawing.Color, arg4: Rhino.Display.DisplayPipeline.InferenceLineType) -> None
Rhino.Display.DisplayPipeline.DrawInstanceDefinition(self, instanceDefinition: Rhino.DocObjects.InstanceDefinition) -> None
Rhino.Display.DisplayPipeline.DrawInstanceDefinition(self, instanceDefinition: Rhino.DocObjects.InstanceDefinition, xform: Rhino.Geometry.Transform) -> None
Rhino.Display.DisplayPipeline.DrawLight(self, light: Rhino.Geometry.Light, wireframeColor: System.Drawing.Color) -> None
Rhino.Display.DisplayPipeline.DrawLine(self, from: Rhino.Geometry.Point3d, to: Rhino.Geometry.Point3d, color: System.Drawing.Color) -> None
Rhino.Display.DisplayPipeline.DrawLine(self, from: Rhino.Geometry.Point3d, to: Rhino.Geometry.Point3d, color: System.Drawing.Color, thickness: int) -> None
Rhino.Display.DisplayPipeline.DrawLine(self, line: Rhino.Geometry.Line, color: System.Drawing.Color) -> None
Rhino.Display.DisplayPipeline.DrawLine(self, line: Rhino.Geometry.Line, color: System.Drawing.Color, thickness: int) -> None
Rhino.Display.DisplayPipeline.DrawLine(self, line: Rhino.Geometry.Line, pen: Rhino.Display.DisplayPen) -> None
Rhino.Display.DisplayPipeline.DrawLineArrow(self, line: Rhino.Geometry.Line, color: System.Drawing.Color, thickness: int, size: float) -> None
Rhino.Display.DisplayPipeline.DrawLineNoClip(self, from: Rhino.Geometry.Point3d, to: Rhino.Geometry.Point3d, color: System.Drawing.Color, thickness: int) -> None
Rhino.Display.DisplayPipeline.DrawLines(self, lines: Iterable[Rhino.Geometry.Line], color: System.Drawing.Color) -> None
Rhino.Display.DisplayPipeline.DrawLines(self, lines: Iterable[Rhino.Geometry.Line], color: System.Drawing.Color, thickness: int) -> None
Rhino.Display.DisplayPipeline.DrawLines(self, lines: List[Rhino.Geometry.Line], pen: Rhino.Display.DisplayPen) -> None
Rhino.Display.DisplayPipeline.DrawLinesNoClip(self, lines: Iterable[Rhino.Geometry.Line], color: System.Drawing.Color, thickness: int) -> None
Rhino.Display.DisplayPipeline.DrawMarker(self, tip: Rhino.Geometry.Point3d, direction: Rhino.Geometry.Vector3d, color: System.Drawing.Color) -> None
Rhino.Display.DisplayPipeline.DrawMarker(self, tip: Rhino.Geometry.Point3d, direction: Rhino.Geometry.Vector3d, color: System.Drawing.Color, thickness: int) -> None
Rhino.Display.DisplayPipeline.DrawMarker(self, tip: Rhino.Geometry.Point3d, direction: Rhino.Geometry.Vector3d, color: System.Drawing.Color, thickness: int, size: float) -> None
Rhino.Display.DisplayPipeline.DrawMarker(self, tip: Rhino.Geometry.Point3d, direction: Rhino.Geometry.Vector3d, color: System.Drawing.Color, thickness: int, size: float, rotation: float) -> None
Rhino.Display.DisplayPipeline.DrawMeshFalseColors(self, mesh: Rhino.Geometry.Mesh) -> None
Rhino.Display.DisplayPipeline.DrawMeshShaded(self, mesh: Rhino.Geometry.Mesh, material: Rhino.Display.DisplayMaterial) -> None
Rhino.Display.DisplayPipeline.DrawMeshShaded(self, mesh: Rhino.Geometry.Mesh, material: Rhino.Display.DisplayMaterial, faceIndices: Iterable[int]) -> None
Rhino.Display.DisplayPipeline.DrawMeshShaded(self, mesh: Rhino.Geometry.Mesh, material: Rhino.Display.DisplayMaterial, faceIndices: List[int]) -> None
Rhino.Display.DisplayPipeline.DrawMeshVertices(self, mesh: Rhino.Geometry.Mesh, color: System.Drawing.Color) -> None
Rhino.Display.DisplayPipeline.DrawMeshWires(self, mesh: Rhino.Geometry.Mesh, color: System.Drawing.Color) -> None
Rhino.Display.DisplayPipeline.DrawMeshWires(self, mesh: Rhino.Geometry.Mesh, color: System.Drawing.Color, thickness: int) -> None
Rhino.Display.DisplayPipeline.DrawObject(self, rhinoObject: Rhino.DocObjects.RhinoObject) -> None
Rhino.Display.DisplayPipeline.DrawObject(self, rhinoObject: Rhino.DocObjects.RhinoObject, xform: Rhino.Geometry.Transform) -> None
Rhino.Display.DisplayPipeline.DrawParticles(self, particles: Rhino.Geometry.ParticleSystem) -> None
Rhino.Display.DisplayPipeline.DrawParticles(self, particles: Rhino.Geometry.ParticleSystem, bitmap: Rhino.Display.DisplayBitmap) -> None
Rhino.Display.DisplayPipeline.DrawParticles(self, particles: Rhino.Geometry.ParticleSystem, bitmaps: List[Rhino.Display.DisplayBitmap]) -> None
Rhino.Display.DisplayPipeline.DrawPatternedLine(self, from: Rhino.Geometry.Point3d, to: Rhino.Geometry.Point3d, color: System.Drawing.Color, pattern: int, thickness: int) -> None
Rhino.Display.DisplayPipeline.DrawPatternedLine(self, line: Rhino.Geometry.Line, color: System.Drawing.Color, pattern: int, thickness: int) -> None
Rhino.Display.DisplayPipeline.DrawPatternedPolyline(self, points: Iterable[Rhino.Geometry.Point3d], color: System.Drawing.Color, pattern: int, thickness: int, close: bool) -> None
Rhino.Display.DisplayPipeline.DrawPoint(self, point: Rhino.Geometry.Point3d) -> None
Rhino.Display.DisplayPipeline.DrawPoint(self, point: Rhino.Geometry.Point3d, color: System.Drawing.Color) -> None
Rhino.Display.DisplayPipeline.DrawPoint(self, point: Rhino.Geometry.Point3d, style: Rhino.Display.PointStyle, radius: float, color: System.Drawing.Color) -> None
Rhino.Display.DisplayPipeline.DrawPoint(self, point: Rhino.Geometry.Point3d, style: Rhino.Display.PointStyle, radius: int, color: System.Drawing.Color) -> None
Rhino.Display.DisplayPipeline.DrawPoint(self, point: Rhino.Geometry.Point3d, style: Rhino.Display.PointStyle, strokeColor: System.Drawing.Color, fillColor: System.Drawing.Color, radius: float, strokeWidth: float, secondarySize: float, rotationRadians: float, diameterIsInPixels: bool, autoScaleForDpi: bool) -> None
Rhino.Display.DisplayPipeline.DrawPointCloud(self, cloud: Rhino.Geometry.PointCloud, size: float) -> None
Rhino.Display.DisplayPipeline.DrawPointCloud(self, cloud: Rhino.Geometry.PointCloud, size: float, color: System.Drawing.Color) -> None
Rhino.Display.DisplayPipeline.DrawPointCloud(self, cloud: Rhino.Geometry.PointCloud, size: int) -> None
Rhino.Display.DisplayPipeline.DrawPointCloud(self, cloud: Rhino.Geometry.PointCloud, size: int, color: System.Drawing.Color) -> None
Rhino.Display.DisplayPipeline.DrawPoints(self, points: Iterable[Rhino.Geometry.Point3d], style: Rhino.Display.PointStyle, radius: float, color: System.Drawing.Color) -> None
Rhino.Display.DisplayPipeline.DrawPoints(self, points: Iterable[Rhino.Geometry.Point3d], style: Rhino.Display.PointStyle, radius: int, color: System.Drawing.Color) -> None
Rhino.Display.DisplayPipeline.DrawPoints(self, points: Iterable[Rhino.Geometry.Point3d], style: Rhino.Display.PointStyle, strokeColor: System.Drawing.Color, fillColor: System.Drawing.Color, radius: float, strokeWidth: float, secondarySize: float, rotationRadians: float, diameterIsInPixels: bool, autoScaleForDpi: bool) -> None
Rhino.Display.DisplayPipeline.DrawPoints(self, points: Rhino.Display.DisplayPointSet) -> None
Rhino.Display.DisplayPipeline.DrawPoints(self, points: Rhino.Display.DisplayPointSet, fallbackAttributes: Rhino.Display.DisplayPointAttributes, overrideAttributes: Rhino.Display.DisplayPointAttributes) -> None
Rhino.Display.DisplayPipeline.DrawPolygon(self, points: Iterable[Rhino.Geometry.Point3d], color: System.Drawing.Color, filled: bool) -> None
Rhino.Display.DisplayPipeline.DrawPolyline(self, polyline: Iterable[Rhino.Geometry.Point3d], color: System.Drawing.Color) -> None
Rhino.Display.DisplayPipeline.DrawPolyline(self, polyline: Iterable[Rhino.Geometry.Point3d], color: System.Drawing.Color, thickness: int) -> None
Rhino.Display.DisplayPipeline.DrawRoundedRectangle(self, center: System.Drawing.PointF, pixelWidth: float, pixelHeight: float, cornerRadius: float, strokeColor: System.Drawing.Color, strokeWidth: float, fillColor: System.Drawing.Color) -> None
Rhino.Display.DisplayPipeline.DrawSphere(self, sphere: Rhino.Geometry.Sphere, color: System.Drawing.Color) -> None
Rhino.Display.DisplayPipeline.DrawSphere(self, sphere: Rhino.Geometry.Sphere, color: System.Drawing.Color, thickness: int) -> None
Rhino.Display.DisplayPipeline.DrawSprite(self, bitmap: Rhino.Display.DisplayBitmap, screenLocation: Rhino.Geometry.Point2d, size: float) -> None
Rhino.Display.DisplayPipeline.DrawSprite(self, bitmap: Rhino.Display.DisplayBitmap, screenLocation: Rhino.Geometry.Point2d, size: float, blendColor: System.Drawing.Color) -> None
Rhino.Display.DisplayPipeline.DrawSprite(self, bitmap: Rhino.Display.DisplayBitmap, screenLocation: Rhino.Geometry.Point2d, width: float, height: float) -> None
Rhino.Display.DisplayPipeline.DrawSprite(self, bitmap: Rhino.Display.DisplayBitmap, worldLocation: Rhino.Geometry.Point3d, size: float, blendColor: System.Drawing.Color, sizeInWorldSpace: bool) -> None
Rhino.Display.DisplayPipeline.DrawSprite(self, bitmap: Rhino.Display.DisplayBitmap, worldLocation: Rhino.Geometry.Point3d, size: float, sizeInWorldSpace: bool) -> None
Rhino.Display.DisplayPipeline.DrawSprites(self, bitmap: Rhino.Display.DisplayBitmap, items: Rhino.Display.DisplayBitmapDrawList, size: float, sizeInWorldSpace: bool) -> None
Rhino.Display.DisplayPipeline.DrawSprites(self, bitmap: Rhino.Display.DisplayBitmap, items: Rhino.Display.DisplayBitmapDrawList, size: float, translation: Rhino.Geometry.Vector3d, sizeInWorldSpace: bool) -> None
Rhino.Display.DisplayPipeline.DrawStereoFrameBuffer(self, viewportLeft: Rhino.DocObjects.ViewportInfo, viewportRight: Rhino.DocObjects.ViewportInfo, handleLeft: System.UInt32@, handleRight: System.UInt32@) -> bool
Rhino.Display.DisplayPipeline.DrawSubDShaded(self, subd: Rhino.Geometry.SubD, material: Rhino.Display.DisplayMaterial) -> None
Rhino.Display.DisplayPipeline.DrawSubDWires(self, subd: Rhino.Geometry.SubD, boundaryPen: Rhino.Display.DisplayPen, smoothInteriorPen: Rhino.Display.DisplayPen, creasePen: Rhino.Display.DisplayPen, nonmanifoldPen: Rhino.Display.DisplayPen) -> None
Rhino.Display.DisplayPipeline.DrawSubDWires(self, subd: Rhino.Geometry.SubD, color: System.Drawing.Color, thickness: float) -> None
Rhino.Display.DisplayPipeline.DrawSurface(self, surface: Rhino.Geometry.Surface, wireColor: System.Drawing.Color, wireDensity: int) -> None
Rhino.Display.DisplayPipeline.DrawText(self, text: Rhino.Geometry.TextEntity, color: System.Drawing.Color) -> None
Rhino.Display.DisplayPipeline.DrawText(self, text: Rhino.Geometry.TextEntity, color: System.Drawing.Color, scale: float) -> None
Rhino.Display.DisplayPipeline.DrawText(self, text: Rhino.Geometry.TextEntity, color: System.Drawing.Color, xform: Rhino.Geometry.Transform) -> None
Rhino.Display.DisplayPipeline.DrawToBitmap(viewport: Rhino.Display.RhinoViewport, width: int, height: int) -> Bitmap
Rhino.Display.DisplayPipeline.DrawTorus(self, torus: Rhino.Geometry.Torus, color: System.Drawing.Color) -> None
Rhino.Display.DisplayPipeline.DrawTorus(self, torus: Rhino.Geometry.Torus, color: System.Drawing.Color, thickness: int) -> None
Rhino.Display.DisplayPipeline.DrawZebraPreview(self, brep: Rhino.Geometry.Brep, color: System.Drawing.Color) -> None
Rhino.Display.DisplayPipeline.DrawZebraPreview(self, mesh: Rhino.Geometry.Mesh, color: System.Drawing.Color) -> None
Rhino.Display.DisplayPipeline.DraweInferencePoint(self, P: Rhino.Geometry.Point3d, color: System.Drawing.Color) -> None
Rhino.Display.DisplayPipeline.EnableClippingPlanes(self, enable: bool) -> None
Rhino.Display.DisplayPipeline.EnableColorWriting(self, enable: bool) -> None
Rhino.Display.DisplayPipeline.EnableDepthTesting(self, enable: bool) -> None
Rhino.Display.DisplayPipeline.EnableDepthWriting(self, enable: bool) -> None
Rhino.Display.DisplayPipeline.EnableLighting(self, enable: bool) -> None
Rhino.Display.DisplayPipeline.Flush(self) -> None
Rhino.Display.DisplayPipeline.GetDrawListSerialNumbers(modelSerialNumber: System.UInt32@, pageSerialNumber: System.UInt32@) -> None
Rhino.Display.DisplayPipeline.GetLights(self) -> List[Light]
Rhino.Display.DisplayPipeline.GetOpenGLCameraToClip(self) -> List[float]
Rhino.Display.DisplayPipeline.GetOpenGLWorldToCamera(self, includeModelTransform: bool) -> List[float]
Rhino.Display.DisplayPipeline.GetOpenGLWorldToClip(self, includeModelTransform: bool) -> List[float]
Rhino.Display.DisplayPipeline.InterruptDrawing(self) -> bool
Rhino.Display.DisplayPipeline.IsActive(self, rhinoObject: Rhino.DocObjects.RhinoObject) -> bool
Rhino.Display.DisplayPipeline.IsInTiledDraw(self, fullSize: System.Drawing.Size@, currentTile: System.Drawing.Rectangle@) -> bool
Rhino.Display.DisplayPipeline.IsVisible(self, bbox: Rhino.Geometry.BoundingBox) -> bool
Rhino.Display.DisplayPipeline.IsVisible(self, rhinoObject: Rhino.DocObjects.RhinoObject) -> bool
Rhino.Display.DisplayPipeline.IsVisible(self, worldCoordinate: Rhino.Geometry.Point3d) -> bool
Rhino.Display.DisplayPipeline.MakeDefaultOpenGLContextCurrent() -> bool
Rhino.Display.DisplayPipeline.Measure2dText(self, text: str, definitionPoint: Rhino.Geometry.Point2d, middleJustified: bool, rotationRadians: float, height: int, fontFace: str) -> Rectangle
Rhino.Display.DisplayPipeline.Open(self) -> bool
Rhino.Display.DisplayPipeline.PopCullFaceMode(self) -> None
Rhino.Display.DisplayPipeline.PopDepthTesting(self) -> None
Rhino.Display.DisplayPipeline.PopDepthWriting(self) -> None
Rhino.Display.DisplayPipeline.PopModelTransform(self) -> None
Rhino.Display.DisplayPipeline.PopProjection(self) -> None
Rhino.Display.DisplayPipeline.Push2dProjection(self) -> None
Rhino.Display.DisplayPipeline.PushCullFaceMode(self, mode: Rhino.Display.CullFaceMode) -> None
Rhino.Display.DisplayPipeline.PushDepthTesting(self, enable: bool) -> None
Rhino.Display.DisplayPipeline.PushDepthWriting(self, enable: bool) -> None
Rhino.Display.DisplayPipeline.PushModelTransform(self, xform: Rhino.Geometry.Transform) -> None
Rhino.Display.DisplayPipeline.RemoveClippingPlane(self, index: int) -> None
Rhino.Display.DisplayPipeline.SetupDisplayMaterial(self, color: System.Drawing.Color) -> DisplayMaterial
Rhino.Display.DisplayPipeline.SetupDisplayMaterial(self, doc: Rhino.RhinoDoc, rhinoObject: Rhino.DocObjects.RhinoObject) -> DisplayMaterial
Rhino.Display.DisplayPipeline.SetupDisplayMaterial(self, doc: Rhino.RhinoDoc, rhinoObject: Rhino.DocObjects.RhinoObject, attributes: Rhino.DocObjects.ObjectAttributes) -> DisplayMaterial
Rhino.Display.DisplayPipeline.SetupDisplayMaterial(self, doc: Rhino.RhinoDoc, rhinoObject: Rhino.DocObjects.RhinoObject, attributes: Rhino.DocObjects.ObjectAttributes, instanceTransform: Rhino.Geometry.Transform) -> DisplayMaterial
Rhino.Display.DisplayPipeline.[ObsoleteAttribute(self) -> None
Rhino.Display.DisplayPipeline.[ObsoleteAttribute(self, arg1: bool) -> None
Rhino.Display.DisplayPipelineAttributes.DisplayPipelineAttributesAddLanguageSpecificTextSet(self) -> None
Rhino.Display.DisplayPipelineAttributes.DisplayPipelineAttributesAddLanguageSpecificTextSet(self) -> None
Rhino.Display.DisplayPipelineAttributes.DisplayPipelineAttributesAddLanguageSpecificTextSet(self) -> None
Rhino.Display.DisplayPipelineAttributes.DisplayPipelineAttributesAddLanguageSpecificTextSet(self) -> None
Rhino.Display.DisplayPipelineAttributes.Dispose(self) -> None
Rhino.Display.DisplayPipelineAttributes.Dispose(self, disposing: bool) -> None
Rhino.Display.DisplayPipelineAttributes.Finalize(self) -> None
Rhino.Display.DisplayPipelineAttributes.GetColorFadeEffect(self, fadeColor: System.Drawing.Color@, fadeAmount: System.Single@) -> None
Rhino.Display.DisplayPipelineAttributes.GetDiagonalHatchEffect(self, hatchStrength: System.Single@, hatchWidth: System.Single@) -> None
Rhino.Display.DisplayPipelineAttributes.GetDitherTransparencyEffect(self) -> float
Rhino.Display.DisplayPipelineAttributes.GetFill(self, topLeft: System.Drawing.Color@, bottomLeft: System.Drawing.Color@, topRight: System.Drawing.Color@, bottomRight: System.Drawing.Color@) -> None
Rhino.Display.DisplayPipelineAttributes.GetObjectData(self, info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext) -> None
Rhino.Display.DisplayPipelineAttributes.GetSurfaceIsoApplyPattern(self, u: System.Boolean@, v: System.Boolean@, w: System.Boolean@) -> None
Rhino.Display.DisplayPipelineAttributes.HasColorFadeEffect(self) -> bool
Rhino.Display.DisplayPipelineAttributes.HasDiagonalHatchEffect(self) -> bool
Rhino.Display.DisplayPipelineAttributes.HasDitherTransparencyEffect(self) -> bool
Rhino.Display.DisplayPipelineAttributes.SetColorFadeEffect(self, fadeColor: System.Drawing.Color@, fadeAmount: System.Single@) -> None
Rhino.Display.DisplayPipelineAttributes.SetDiagonalHatchEffect(self, hatchStrength: System.Single@, hatchWidth: System.Single@) -> None
Rhino.Display.DisplayPipelineAttributes.SetDitherTransparencyEffect(self, transparencyAmount: System.Single@) -> None
Rhino.Display.DisplayPipelineAttributes.SetFill(self, gradientTop: System.Drawing.Color, gradientBottom: System.Drawing.Color) -> None
Rhino.Display.DisplayPipelineAttributes.SetFill(self, gradientTopLeft: System.Drawing.Color, gradientBottomLeft: System.Drawing.Color, gradientTopRight: System.Drawing.Color, gradientBottomRight: System.Drawing.Color) -> None
Rhino.Display.DisplayPipelineAttributes.SetFill(self, singleColor: System.Drawing.Color) -> None
Rhino.Display.DisplayPipelineAttributes.SetSurfaceEdgeThicknessUsage(self, arg1: Rhino.Display.DisplayPipelineAttributes.SurfaceThicknessUse) -> None
Rhino.Display.DisplayPipelineAttributes.SetSurfaceIsoApplyPattern(self, u: bool, v: bool, w: bool) -> None
Rhino.Display.DisplayPipelineAttributes.SetSurfaceIsoColorUsage(self, arg1: Rhino.Display.DisplayPipelineAttributes.SurfaceIsoColorUse) -> None
Rhino.Display.DisplayPipelineAttributes.SetSurfaceIsoThicknessUsage(self, arg1: Rhino.Display.DisplayPipelineAttributes.SurfaceIsoThicknessUse) -> None
Rhino.Display.DisplayPipelineAttributes.SetSurfaceNakedEdgeThicknessUsage(self, arg1: Rhino.Display.DisplayPipelineAttributes.SurfaceNakedEdgeThicknessUse) -> None
Rhino.Display.DisplayPipelineAttributes.__init__(self, info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext) -> None
Rhino.Display.DisplayPoint.WithAttributes(self, attributes: Rhino.Display.DisplayPointAttributes) -> Rhino.Display.DisplayPoint
Rhino.Display.DisplayPoint.__init__(self, location: Rhino.Geometry.Point3d) -> None
Rhino.Display.DisplayPointAttributes.__init__(self) -> None
Rhino.Display.DisplayPointAttributes.__init__(self, attributes: Rhino.Display.DisplayPointAttributes) -> None
Rhino.Display.DisplayPointSet.Create(points: Iterable[Rhino.Display.DisplayPoint]) -> Rhino.Display.DisplayPointSet
Rhino.Display.DisplayPointSet.Dispose(self) -> None
Rhino.Display.DisplayPointSet.Finalize(self) -> None
Rhino.Display.InitFrameBufferEventArgs.SetFill(self, color: System.Drawing.Color) -> None
Rhino.Display.InitFrameBufferEventArgs.SetFill(self, top: System.Drawing.Color, bottom: System.Drawing.Color) -> None
Rhino.Display.InitFrameBufferEventArgs.SetFill(self, topLeft: System.Drawing.Color, bottomLeft: System.Drawing.Color, topRight: System.Drawing.Color, bottomRight: System.Drawing.Color) -> None
Rhino.Display.RhinoPageView.AddDetailView(self, title: str, corner0: Rhino.Geometry.Point2d, corner1: Rhino.Geometry.Point2d, initialProjection: Rhino.Display.DefinedViewportProjection) -> DetailViewObject
Rhino.Display.RhinoPageView.Duplicate(self, duplicatePageGeometry: bool) -> Rhino.Display.RhinoPageView
Rhino.Display.RhinoPageView.GetDetailViews(self) -> List[DetailViewObject]
Rhino.Display.RhinoPageView.GetPreviewImage(self, size: System.Drawing.Size, grayScale: bool) -> Bitmap
Rhino.Display.RhinoPageView.SetActiveDetail(self, detailId: System.Guid) -> bool
Rhino.Display.RhinoPageView.SetActiveDetail(self, detailName: str, compareCase: bool) -> bool
Rhino.Display.RhinoPageView.SetPageAsActive(self) -> None
Rhino.Display.RhinoView.CaptureToBitmap(self) -> Bitmap
Rhino.Display.RhinoView.CaptureToBitmap(self, attributes: Rhino.Display.DisplayPipelineAttributes) -> Bitmap
Rhino.Display.RhinoView.CaptureToBitmap(self, grid: bool, worldAxes: bool, cplaneAxes: bool) -> Bitmap
Rhino.Display.RhinoView.CaptureToBitmap(self, mode: Rhino.Display.DisplayModeDescription) -> Bitmap
Rhino.Display.RhinoView.CaptureToBitmap(self, size: System.Drawing.Size) -> Bitmap
Rhino.Display.RhinoView.CaptureToBitmap(self, size: System.Drawing.Size, attributes: Rhino.Display.DisplayPipelineAttributes) -> Bitmap
Rhino.Display.RhinoView.CaptureToBitmap(self, size: System.Drawing.Size, grid: bool, worldAxes: bool, cplaneAxes: bool) -> Bitmap
Rhino.Display.RhinoView.CaptureToBitmap(self, size: System.Drawing.Size, mode: Rhino.Display.DisplayModeDescription) -> Bitmap
Rhino.Display.RhinoView.ClientToScreen(self, clientPoint: Rhino.Geometry.Point2d) -> Point2d
Rhino.Display.RhinoView.ClientToScreen(self, clientPoint: System.Drawing.Point) -> Point
Rhino.Display.RhinoView.Close(self) -> bool
Rhino.Display.RhinoView.CreateShadedPreviewImage(self, imagePath: str, size: System.Drawing.Size, ignoreHighlights: bool, drawConstructionPlane: bool, useGhostedShading: bool) -> bool
Rhino.Display.RhinoView.CreateWireframePreviewImage(self, imagePath: str, size: System.Drawing.Size, ignoreHighlights: bool, drawConstructionPlane: bool) -> bool
Rhino.Display.RhinoView.Equals(self, obj: Any) -> bool
Rhino.Display.RhinoView.FromRuntimeSerialNumber(serialNumber: System.UInt32) -> Rhino.Display.RhinoView
Rhino.Display.RhinoView.GetHashCode(self) -> int
Rhino.Display.RhinoView.MouseCaptured(self, bIncludeMovement: bool) -> bool
Rhino.Display.RhinoView.Redraw(self) -> None
Rhino.Display.RhinoView.ScreenToClient(self, screenPoint: Rhino.Geometry.Point2d) -> Point2d
Rhino.Display.RhinoView.ScreenToClient(self, screenPoint: System.Drawing.Point) -> Point
Rhino.Display.RhinoView.ShowToast(self, message: str) -> uint
Rhino.Display.RhinoView.ShowToast(self, message: str, textHeight: int) -> uint
Rhino.Display.RhinoView.ShowToast(self, message: str, textHeight: int, location: System.Drawing.PointF) -> uint
Rhino.Display.RhinoView.SpeedTest(self, frameCount: int, freezeDrawList: bool, direction: int, angleDeltaRadians: float) -> float
Rhino.Display.RhinoViewport.ChangeToParallelProjection(self, symmetricFrustum: bool) -> bool
Rhino.Display.RhinoViewport.ChangeToParallelReflectedProjection(self) -> bool
Rhino.Display.RhinoViewport.ChangeToPerspectiveProjection(self, symmetricFrustum: bool, lensLength: float) -> bool
Rhino.Display.RhinoViewport.ChangeToPerspectiveProjection(self, targetDistance: float, symmetricFrustum: bool, lensLength: float) -> bool
Rhino.Display.RhinoViewport.ChangeToTwoPointPerspectiveProjection(self, lensLength: float) -> bool
Rhino.Display.RhinoViewport.ChangeToTwoPointPerspectiveProjection(self, targetDistance: float, up: Rhino.Geometry.Vector3d, lensLength: float) -> bool
Rhino.Display.RhinoViewport.ClearTraceImage(self) -> None
Rhino.Display.RhinoViewport.ClientToScreen(self, clientPoint: Rhino.Geometry.Point2d) -> Point
Rhino.Display.RhinoViewport.ClientToScreen(self, clientPoint: System.Drawing.Point) -> Point
Rhino.Display.RhinoViewport.ClientToWorld(self, clientPoint: Rhino.Geometry.Point2d) -> Line
Rhino.Display.RhinoViewport.ClientToWorld(self, clientPoint: System.Drawing.Point) -> Line
Rhino.Display.RhinoViewport.ConstructionPlane(self) -> Plane
Rhino.Display.RhinoViewport.DeleteAllUserStrings(self) -> None
Rhino.Display.RhinoViewport.DeleteUserString(self, key: str) -> bool
Rhino.Display.RhinoViewport.Dispose(self) -> None
Rhino.Display.RhinoViewport.Dispose(self, disposing: bool) -> None
Rhino.Display.RhinoViewport.Finalize(self) -> None
Rhino.Display.RhinoViewport.FromId(id: System.Guid) -> Rhino.Display.RhinoViewport
Rhino.Display.RhinoViewport.GetCameraAngle(self, halfDiagonalAngle: System.Double@, halfVerticalAngle: System.Double@, halfHorizontalAngle: System.Double@) -> bool
Rhino.Display.RhinoViewport.GetCameraExtents(self, points: Iterable[Rhino.Geometry.Point3d]) -> BoundingBox
Rhino.Display.RhinoViewport.GetCameraFrame(self, frame: Rhino.Geometry.Plane@) -> bool
Rhino.Display.RhinoViewport.GetConstructionPlane(self) -> ConstructionPlane
Rhino.Display.RhinoViewport.GetDepth(self, bbox: Rhino.Geometry.BoundingBox, nearDistance: System.Double@, farDistance: System.Double@) -> bool
Rhino.Display.RhinoViewport.GetDepth(self, point: Rhino.Geometry.Point3d, distance: System.Double@) -> bool
Rhino.Display.RhinoViewport.GetDepth(self, sphere: Rhino.Geometry.Sphere, nearDistance: System.Double@, farDistance: System.Double@) -> bool
Rhino.Display.RhinoViewport.GetFarRect(self) -> List[Point3d]
Rhino.Display.RhinoViewport.GetFrustum(self, left: System.Double@, right: System.Double@, bottom: System.Double@, top: System.Double@, nearDistance: System.Double@, farDistance: System.Double@) -> bool
Rhino.Display.RhinoViewport.GetFrustumBottomPlane(self, plane: Rhino.Geometry.Plane@) -> bool
Rhino.Display.RhinoViewport.GetFrustumBoundingBox(self) -> BoundingBox
Rhino.Display.RhinoViewport.GetFrustumCenter(self, center: Rhino.Geometry.Point3d@) -> bool
Rhino.Display.RhinoViewport.GetFrustumFarPlane(self, plane: Rhino.Geometry.Plane@) -> bool
Rhino.Display.RhinoViewport.GetFrustumLeftPlane(self, plane: Rhino.Geometry.Plane@) -> bool
Rhino.Display.RhinoViewport.GetFrustumLine(self, screenX: float, screenY: float, worldLine: Rhino.Geometry.Line@) -> bool
Rhino.Display.RhinoViewport.GetFrustumNearPlane(self, plane: Rhino.Geometry.Plane@) -> bool
Rhino.Display.RhinoViewport.GetFrustumRightPlane(self, plane: Rhino.Geometry.Plane@) -> bool
Rhino.Display.RhinoViewport.GetFrustumTopPlane(self, plane: Rhino.Geometry.Plane@) -> bool
Rhino.Display.RhinoViewport.GetNearRect(self) -> List[Point3d]
Rhino.Display.RhinoViewport.GetPickTransform(self, clientPoint: System.Drawing.Point) -> Transform
Rhino.Display.RhinoViewport.GetPickTransform(self, clientRectangle: System.Drawing.Rectangle) -> Transform
Rhino.Display.RhinoViewport.GetPickTransform(self, clientX: int, clientY: int) -> Transform
Rhino.Display.RhinoViewport.GetScreenPort(self, portLeft: System.Int32@, portRight: System.Int32@, portBottom: System.Int32@, portTop: System.Int32@, portNear: System.Int32@, portFar: System.Int32@) -> bool
Rhino.Display.RhinoViewport.GetTransform(self, sourceSystem: Rhino.DocObjects.CoordinateSystem, destinationSystem: Rhino.DocObjects.CoordinateSystem) -> Transform
Rhino.Display.RhinoViewport.GetUserString(self, key: str) -> str
Rhino.Display.RhinoViewport.GetUserStrings(self) -> NameValueCollection
Rhino.Display.RhinoViewport.GetViewScale(self) -> List[float]
Rhino.Display.RhinoViewport.GetWorldToScreenScale(self, pointInFrustum: Rhino.Geometry.Point3d, pixelsPerUnit: System.Double@) -> bool
Rhino.Display.RhinoViewport.IsVisible(self, bbox: Rhino.Geometry.BoundingBox) -> bool
Rhino.Display.RhinoViewport.IsVisible(self, point: Rhino.Geometry.Point3d) -> bool
Rhino.Display.RhinoViewport.KeyboardDolly(self, leftRight: bool, amount: float) -> bool
Rhino.Display.RhinoViewport.KeyboardDollyInOut(self, amount: float) -> bool
Rhino.Display.RhinoViewport.KeyboardRotate(self, leftRight: bool, angleRadians: float) -> bool
Rhino.Display.RhinoViewport.Magnify(self, magnificationFactor: float, mode: bool) -> bool
Rhino.Display.RhinoViewport.Magnify(self, magnificationFactor: float, mode: bool, fixedScreenPoint: System.Drawing.Point) -> bool
Rhino.Display.RhinoViewport.MouseAdjustLensLength(self, mousePreviousPoint: System.Drawing.Point, mouseCurrentPoint: System.Drawing.Point, moveTarget: bool) -> bool
Rhino.Display.RhinoViewport.MouseDollyZoom(self, mousePreviousPoint: System.Drawing.Point, mouseCurrentPoint: System.Drawing.Point) -> bool
Rhino.Display.RhinoViewport.MouseInOutDolly(self, mousePreviousPoint: System.Drawing.Point, mouseCurrentPoint: System.Drawing.Point) -> bool
Rhino.Display.RhinoViewport.MouseLateralDolly(self, mousePreviousPoint: System.Drawing.Point, mouseCurrentPoint: System.Drawing.Point) -> bool
Rhino.Display.RhinoViewport.MouseMagnify(self, mousePreviousPoint: System.Drawing.Point, mouseCurrentPoint: System.Drawing.Point) -> bool
Rhino.Display.RhinoViewport.MouseRotateAroundTarget(self, mousePreviousPoint: System.Drawing.Point, mouseCurrentPoint: System.Drawing.Point) -> bool
Rhino.Display.RhinoViewport.MouseRotateCamera(self, mousePreviousPoint: System.Drawing.Point, mouseCurrentPoint: System.Drawing.Point) -> bool
Rhino.Display.RhinoViewport.MouseTilt(self, mousePreviousPoint: System.Drawing.Point, mouseCurrentPoint: System.Drawing.Point) -> bool
Rhino.Display.RhinoViewport.NextConstructionPlane(self) -> bool
Rhino.Display.RhinoViewport.NextViewProjection(self) -> bool
Rhino.Display.RhinoViewport.PopConstructionPlane(self) -> bool
Rhino.Display.RhinoViewport.PopViewProjection(self) -> bool
Rhino.Display.RhinoViewport.PreviousConstructionPlane(self) -> bool
Rhino.Display.RhinoViewport.PreviousViewProjection(self) -> bool
Rhino.Display.RhinoViewport.PushConstructionPlane(self, cplane: Rhino.DocObjects.ConstructionPlane) -> None
Rhino.Display.RhinoViewport.PushViewInfo(self, viewinfo: Rhino.DocObjects.ViewInfo, includeTraceImage: bool) -> bool
Rhino.Display.RhinoViewport.PushViewProjection(self) -> None
Rhino.Display.RhinoViewport.Rotate(self, angleRadians: float, rotationAxis: Rhino.Geometry.Vector3d, rotationCenter: Rhino.Geometry.Point3d) -> bool
Rhino.Display.RhinoViewport.ScreenToClient(self, screenPoint: System.Drawing.Point) -> Point
Rhino.Display.RhinoViewport.SetCameraDirection(self, cameraDirection: Rhino.Geometry.Vector3d, updateTargetLocation: bool) -> None
Rhino.Display.RhinoViewport.SetCameraLocation(self, cameraLocation: Rhino.Geometry.Point3d, updateTargetLocation: bool) -> None
Rhino.Display.RhinoViewport.SetCameraLocations(self, targetLocation: Rhino.Geometry.Point3d, cameraLocation: Rhino.Geometry.Point3d) -> None
Rhino.Display.RhinoViewport.SetCameraTarget(self, targetLocation: Rhino.Geometry.Point3d, updateCameraLocation: bool) -> None
Rhino.Display.RhinoViewport.SetClippingPlanes(self, box: Rhino.Geometry.BoundingBox) -> None
Rhino.Display.RhinoViewport.SetConstructionPlane(self, cplane: Rhino.DocObjects.ConstructionPlane) -> None
Rhino.Display.RhinoViewport.SetConstructionPlane(self, plane: Rhino.Geometry.Plane) -> None
Rhino.Display.RhinoViewport.SetProjection(self, projection: Rhino.Display.DefinedViewportProjection, viewName: str, updateConstructionPlane: bool) -> bool
Rhino.Display.RhinoViewport.SetToPlanView(self, planeOrigin: Rhino.Geometry.Point3d, planeXaxis: Rhino.Geometry.Vector3d, planeYaxis: Rhino.Geometry.Vector3d, setConstructionPlane: bool) -> bool
Rhino.Display.RhinoViewport.SetTraceImage(self, bitmapFileName: str, plane: Rhino.Geometry.Plane, width: float, height: float, grayscale: bool, filtered: bool) -> bool
Rhino.Display.RhinoViewport.SetUserString(self, key: str, value: str) -> bool
Rhino.Display.RhinoViewport.SetUserStrings(self, items: Iterable[KeyValuePair[str, str]], replace: bool) -> bool
Rhino.Display.RhinoViewport.SetViewProjection(self, projection: Rhino.DocObjects.ViewportInfo, updateTargetLocation: bool) -> bool
Rhino.Display.RhinoViewport.SetWallpaper(self, imageFilename: str, grayscale: bool) -> bool
Rhino.Display.RhinoViewport.SetWallpaper(self, imageFilename: str, grayscale: bool, visible: bool) -> bool
Rhino.Display.RhinoViewport.WorldToClient(self, worldPoint: Rhino.Geometry.Point3d) -> Point2d
Rhino.Display.RhinoViewport.ZoomBoundingBox(self, box: Rhino.Geometry.BoundingBox) -> bool
Rhino.Display.RhinoViewport.ZoomExtents(self) -> bool
Rhino.Display.RhinoViewport.ZoomExtentsSelected(self) -> bool
Rhino.Display.RhinoViewport.ZoomWindow(self, rect: System.Drawing.Rectangle) -> bool
Rhino.Display.RhinoViewport.__init__(self) -> None
Rhino.Display.RhinoViewport.__init__(self, other: Rhino.Display.RhinoViewport) -> None
Rhino.Display.Text3d.Dispose(self) -> None
Rhino.Display.Text3d.__init__(self, text: str) -> None
Rhino.Display.Text3d.__init__(self, text: str, plane: Rhino.Geometry.Plane, height: float) -> None
Rhino.Display.ViewCapture.CaptureToBitmap(self, sourceView: Rhino.Display.RhinoView) -> Bitmap
Rhino.Display.ViewCapture.CaptureToBitmap(settings: Rhino.Display.ViewCaptureSettings) -> Bitmap
Rhino.Display.ViewCapture.CaptureToSvg(settings: Rhino.Display.ViewCaptureSettings) -> XmlDocument
Rhino.Display.ViewCapture.SendToPrinter(printerName: str, settings: List[Rhino.Display.ViewCaptureSettings]) -> bool
Rhino.Display.ViewCapture.SendToPrinter(printerName: str, settings: List[Rhino.Display.ViewCaptureSettings], copies: int) -> bool
Rhino.Display.ViewCapture.__init__(self) -> None
Rhino.Display.ViewCaptureSettings.CreatePreviewSettings(self, size: System.Drawing.Size) -> Rhino.Display.ViewCaptureSettings
Rhino.Display.ViewCaptureSettings.Dispose(self) -> None
Rhino.Display.ViewCaptureSettings.Equals(self, other: Rhino.Display.ViewCaptureSettings) -> bool
Rhino.Display.ViewCaptureSettings.Finalize(self) -> None
Rhino.Display.ViewCaptureSettings.GetMargins(self, lengthUnits: Rhino.UnitSystem, left: System.Double@, top: System.Double@, right: System.Double@, bottom: System.Double@) -> bool
Rhino.Display.ViewCaptureSettings.GetModelScale(self, pageUnits: Rhino.UnitSystem, modelUnits: Rhino.UnitSystem) -> float
Rhino.Display.ViewCaptureSettings.GetOffset(self, lengthUnits: Rhino.UnitSystem, fromMargin: System.Boolean@, x: System.Double@, y: System.Double@) -> None
Rhino.Display.ViewCaptureSettings.GetViewport(self) -> RhinoViewport
Rhino.Display.ViewCaptureSettings.Load(self, name: str, settings: Rhino.PersistentSettings) -> bool
Rhino.Display.ViewCaptureSettings.MatchViewportAspectRatio(self) -> bool
Rhino.Display.ViewCaptureSettings.MaximizePrintableArea(self) -> None
Rhino.Display.ViewCaptureSettings.Save(self, name: str, settings: Rhino.PersistentSettings) -> None
Rhino.Display.ViewCaptureSettings.SetLayout(self, mediaSize: System.Drawing.Size, cropRectangle: System.Drawing.Rectangle) -> None
Rhino.Display.ViewCaptureSettings.SetMarginBottom(self, lengthUnits: Rhino.UnitSystem, distance: float) -> bool
Rhino.Display.ViewCaptureSettings.SetMarginLeft(self, lengthUnits: Rhino.UnitSystem, distance: float) -> bool
Rhino.Display.ViewCaptureSettings.SetMarginRight(self, lengthUnits: Rhino.UnitSystem, distance: float) -> bool
Rhino.Display.ViewCaptureSettings.SetMarginTop(self, lengthUnits: Rhino.UnitSystem, distance: float) -> bool
Rhino.Display.ViewCaptureSettings.SetMargins(self, lengthUnits: Rhino.UnitSystem, left: float, top: float, right: float, bottom: float) -> bool
Rhino.Display.ViewCaptureSettings.SetModelScaleToFit(self, promptOnChange: bool) -> None
Rhino.Display.ViewCaptureSettings.SetModelScaleToValue(self, scale: float) -> None
Rhino.Display.ViewCaptureSettings.SetOffset(self, lengthUnits: Rhino.UnitSystem, fromMargin: bool, x: float, y: float) -> None
Rhino.Display.ViewCaptureSettings.SetViewport(self, viewport: Rhino.Display.RhinoViewport) -> None
Rhino.Display.ViewCaptureSettings.SetWindowRect(self, screenPoint1: Rhino.Geometry.Point2d, screenPoint2: Rhino.Geometry.Point2d) -> None
Rhino.Display.ViewCaptureSettings.SetWindowRect(self, worldPoint1: Rhino.Geometry.Point3d, worldPoint2: Rhino.Geometry.Point3d) -> None
Rhino.Display.ViewCaptureSettings.__init__(self) -> None
Rhino.Display.ViewCaptureSettings.__init__(self, other: Rhino.Display.ViewCaptureSettings) -> None
Rhino.Display.ViewCaptureSettings.__init__(self, sourcePageView: Rhino.Display.RhinoPageView, dpi: float) -> None
Rhino.Display.ViewCaptureSettings.__init__(self, sourceView: Rhino.Display.RhinoView, mediaSize: System.Drawing.Size, dpi: float) -> None
Rhino.Display.VisualAnalysisMode.AdjustAnalysisMeshes(doc: Rhino.RhinoDoc, analysisModeId: System.Guid) -> bool
Rhino.Display.VisualAnalysisMode.DrawBrepObject(self, brep: Rhino.DocObjects.BrepObject, pipeline: Rhino.Display.DisplayPipeline) -> None
Rhino.Display.VisualAnalysisMode.DrawCurveObject(self, curve: Rhino.DocObjects.CurveObject, pipeline: Rhino.Display.DisplayPipeline) -> None
Rhino.Display.VisualAnalysisMode.DrawMesh(self, obj: Rhino.DocObjects.RhinoObject, mesh: Rhino.Geometry.Mesh, pipeline: Rhino.Display.DisplayPipeline) -> None
Rhino.Display.VisualAnalysisMode.DrawMeshObject(self, mesh: Rhino.DocObjects.MeshObject, pipeline: Rhino.Display.DisplayPipeline) -> None
Rhino.Display.VisualAnalysisMode.DrawNurbsCurve(self, obj: Rhino.DocObjects.RhinoObject, curve: Rhino.Geometry.NurbsCurve, pipeline: Rhino.Display.DisplayPipeline) -> None
Rhino.Display.VisualAnalysisMode.DrawNurbsSurface(self, obj: Rhino.DocObjects.RhinoObject, surface: Rhino.Geometry.NurbsSurface, pipeline: Rhino.Display.DisplayPipeline) -> None
Rhino.Display.VisualAnalysisMode.DrawPointCloudObject(self, pointCloud: Rhino.DocObjects.PointCloudObject, pipeline: Rhino.Display.DisplayPipeline) -> None
Rhino.Display.VisualAnalysisMode.DrawPointObject(self, point: Rhino.DocObjects.PointObject, pipeline: Rhino.Display.DisplayPipeline) -> None
Rhino.Display.VisualAnalysisMode.EnableUserInterface(self, on: bool) -> None
Rhino.Display.VisualAnalysisMode.Find(id: System.Guid) -> Rhino.Display.VisualAnalysisMode
Rhino.Display.VisualAnalysisMode.Find(t: System.Type) -> Rhino.Display.VisualAnalysisMode
Rhino.Display.VisualAnalysisMode.ObjectSupportsAnalysisMode(self, obj: Rhino.DocObjects.RhinoObject) -> bool
Rhino.Display.VisualAnalysisMode.Register(customAnalysisModeType: System.Type) -> Rhino.Display.VisualAnalysisMode
Rhino.Display.VisualAnalysisMode.SetUpDisplayAttributes(self, obj: Rhino.DocObjects.RhinoObject, attributes: Rhino.Display.DisplayPipelineAttributes) -> None
Rhino.Display.VisualAnalysisMode.UpdateVertexColors(self, obj: Rhino.DocObjects.RhinoObject, meshes: List[Rhino.Geometry.Mesh]) -> None
Rhino.Display.VisualAnalysisMode.__init__(self) -> None
Rhino.Display.ZBufferCapture.Dispose(self) -> None
Rhino.Display.ZBufferCapture.Dispose(self, disposing: bool) -> None
Rhino.Display.ZBufferCapture.Finalize(self) -> None
Rhino.Display.ZBufferCapture.GrayscaleDib(self) -> Bitmap
Rhino.Display.ZBufferCapture.HitCount(self) -> int
Rhino.Display.ZBufferCapture.MaxZ(self) -> float
Rhino.Display.ZBufferCapture.MinZ(self) -> float
Rhino.Display.ZBufferCapture.SetDisplayMode(self, modeId: System.Guid) -> None
Rhino.Display.ZBufferCapture.ShowAnnotations(self, on: bool) -> None
Rhino.Display.ZBufferCapture.ShowCurves(self, on: bool) -> None
Rhino.Display.ZBufferCapture.ShowIsocurves(self, on: bool) -> None
Rhino.Display.ZBufferCapture.ShowLights(self, on: bool) -> None
Rhino.Display.ZBufferCapture.ShowMeshWires(self, on: bool) -> None
Rhino.Display.ZBufferCapture.ShowPoints(self, on: bool) -> None
Rhino.Display.ZBufferCapture.ShowText(self, on: bool) -> None
Rhino.Display.ZBufferCapture.WorldPointAt(self, x: int, y: int) -> Point3d
Rhino.Display.ZBufferCapture.ZValueAt(self, x: int, y: int) -> float
Rhino.Display.ZBufferCapture.__init__(self, viewport: Rhino.Display.RhinoViewport) -> None
Rhino.DisplayDeviceInfo.GpuDeviceInfos() -> List<GpuDeviceInfo>
Rhino.DisplayDeviceInfo.GpuNames() -> List<string>
Rhino.DisplayDeviceInfo.__init__(self) -> None
Rhino.DocObjects.AnimationProperties.Dispose(self) -> None
Rhino.DocObjects.AnimationProperties.Dispose(self, disposing: bool) -> None
Rhino.DocObjects.AnimationProperties.Finalize(self) -> None
Rhino.DocObjects.AnimationProperties.__init__(self) -> None
Rhino.DocObjects.AnimationProperties.__init__(self, source: Rhino.DocObjects.AnimationProperties) -> None
Rhino.DocObjects.BitmapEntry.Save(self, fileName: str) -> bool
Rhino.DocObjects.BrepObject.DuplicateBrepGeometry(self) -> Brep
Rhino.DocObjects.ClippingPlaneObject.AddClipViewport(self, viewport: Rhino.Display.RhinoViewport, commit: bool) -> bool
Rhino.DocObjects.ClippingPlaneObject.RemoveClipViewport(self, viewport: Rhino.Display.RhinoViewport, commit: bool) -> bool
Rhino.DocObjects.ConstructionPlane.__init__(self) -> None
Rhino.DocObjects.ConstructionPlaneGridDefaults.__init__(self) -> None
Rhino.DocObjects.CurveObject.DuplicateCurveGeometry(self) -> Curve
Rhino.DocObjects.CurveObject.GetLinetypeSegments(self) -> List[GeometryBase]
Rhino.DocObjects.CurveObject.GetLinetypeSegments(self, viewport: Rhino.Display.RhinoViewport) -> List[GeometryBase]
Rhino.DocObjects.Custom.ClassIdAttribute.__init__(self, id: str) -> None
Rhino.DocObjects.Custom.CustomBrepObject.Dispose(self, disposing: bool) -> None
Rhino.DocObjects.Custom.CustomBrepObject.Finalize(self) -> None
Rhino.DocObjects.Custom.CustomBrepObject.__init__(self) -> None
Rhino.DocObjects.Custom.CustomBrepObject.__init__(self, brep: Rhino.Geometry.Brep) -> None
Rhino.DocObjects.Custom.CustomCurveObject.Dispose(self) -> None
Rhino.DocObjects.Custom.CustomCurveObject.Dispose(self, disposing: bool) -> None
Rhino.DocObjects.Custom.CustomCurveObject.Finalize(self) -> None
Rhino.DocObjects.Custom.CustomCurveObject.SetCurve(self, curve: Rhino.Geometry.Curve) -> Curve
Rhino.DocObjects.Custom.CustomCurveObject.__init__(self) -> None
Rhino.DocObjects.Custom.CustomCurveObject.__init__(self, curve: Rhino.Geometry.Curve) -> None
Rhino.DocObjects.Custom.CustomGripObject.Dispose(self) -> None
Rhino.DocObjects.Custom.CustomGripObject.Dispose(self, disposing: bool) -> None
Rhino.DocObjects.Custom.CustomGripObject.Finalize(self) -> None
Rhino.DocObjects.Custom.CustomGripObject.NewLocation(self) -> None
Rhino.DocObjects.Custom.CustomGripObject.__init__(self) -> None
Rhino.DocObjects.Custom.CustomMeshObject.Dispose(self) -> None
Rhino.DocObjects.Custom.CustomMeshObject.Dispose(self, disposing: bool) -> None
Rhino.DocObjects.Custom.CustomMeshObject.Finalize(self) -> None
Rhino.DocObjects.Custom.CustomMeshObject.__init__(self) -> None
Rhino.DocObjects.Custom.CustomMeshObject.__init__(self, mesh: Rhino.Geometry.Mesh) -> None
Rhino.DocObjects.Custom.CustomObjectGrips.AddGrip(self, grip: Rhino.DocObjects.Custom.CustomGripObject) -> None
Rhino.DocObjects.Custom.CustomObjectGrips.Dispose(self) -> None
Rhino.DocObjects.Custom.CustomObjectGrips.Dispose(self, disposing: bool) -> None
Rhino.DocObjects.Custom.CustomObjectGrips.Dragging() -> bool
Rhino.DocObjects.Custom.CustomObjectGrips.Finalize(self) -> None
Rhino.DocObjects.Custom.CustomObjectGrips.Grip(self, index: int) -> CustomGripObject
Rhino.DocObjects.Custom.CustomObjectGrips.NeighborGrip(self, gripIndex: int, dr: int, ds: int, dt: int, wrap: bool) -> GripObject
Rhino.DocObjects.Custom.CustomObjectGrips.NewGeometry(self) -> GeometryBase
Rhino.DocObjects.Custom.CustomObjectGrips.NurbsSurface(self) -> NurbsSurface
Rhino.DocObjects.Custom.CustomObjectGrips.NurbsSurfaceGrip(self, i: int, j: int) -> GripObject
Rhino.DocObjects.Custom.CustomObjectGrips.OnDraw(self, args: Rhino.DocObjects.Custom.GripsDrawEventArgs) -> None
Rhino.DocObjects.Custom.CustomObjectGrips.OnReset(self) -> None
Rhino.DocObjects.Custom.CustomObjectGrips.OnResetMeshes(self) -> None
Rhino.DocObjects.Custom.CustomObjectGrips.OnUpdateMesh(self, meshType: Rhino.Geometry.MeshType) -> None
Rhino.DocObjects.Custom.CustomObjectGrips.RegisterGripsEnabler(enabler: Rhino.DocObjects.Custom.TurnOnGripsEventHandler, customGripsType: System.Type) -> None
Rhino.DocObjects.Custom.CustomObjectGrips.__init__(self) -> None
Rhino.DocObjects.Custom.CustomPointObject.Dispose(self) -> None
Rhino.DocObjects.Custom.CustomPointObject.Dispose(self, disposing: bool) -> None
Rhino.DocObjects.Custom.CustomPointObject.Finalize(self) -> None
Rhino.DocObjects.Custom.CustomPointObject.__init__(self) -> None
Rhino.DocObjects.Custom.CustomPointObject.__init__(self, point: Rhino.Geometry.Point) -> None
Rhino.DocObjects.Custom.GripsDrawEventArgs.DrawControlPolygonLine(self, line: Rhino.Geometry.Line, startStatus: Rhino.DocObjects.Custom.GripStatus, endStatus: Rhino.DocObjects.Custom.GripStatus) -> None
Rhino.DocObjects.Custom.GripsDrawEventArgs.DrawControlPolygonLine(self, line: Rhino.Geometry.Line, startStatus: int, endStatus: int) -> None
Rhino.DocObjects.Custom.GripsDrawEventArgs.DrawControlPolygonLine(self, start: Rhino.Geometry.Point3d, end: Rhino.Geometry.Point3d, startStatus: int, endStatus: int) -> None
Rhino.DocObjects.Custom.GripsDrawEventArgs.GripStatus(self, index: int) -> GripStatus
Rhino.DocObjects.Custom.GripsDrawEventArgs.RestoreViewportSettings(self) -> None
Rhino.DocObjects.Custom.UnknownUserData.__init__(self, pointerNativeUserData: System.IntPtr) -> None
Rhino.DocObjects.Custom.UserData.Copy(source: Rhino.Runtime.CommonObject, destination: Rhino.Runtime.CommonObject) -> None
Rhino.DocObjects.Custom.UserData.Dispose(self) -> None
Rhino.DocObjects.Custom.UserData.Dispose(self, disposing: bool) -> None
Rhino.DocObjects.Custom.UserData.Finalize(self) -> None
Rhino.DocObjects.Custom.UserData.MoveUserDataFrom(objectWithUserData: Rhino.Runtime.CommonObject) -> Guid
Rhino.DocObjects.Custom.UserData.MoveUserDataTo(objectToGetUserData: Rhino.Runtime.CommonObject, id: System.Guid, append: bool) -> None
Rhino.DocObjects.Custom.UserData.OnDuplicate(self, source: Rhino.DocObjects.Custom.UserData) -> None
Rhino.DocObjects.Custom.UserData.OnTransform(self, transform: Rhino.Geometry.Transform) -> None
Rhino.DocObjects.Custom.UserData.Read(self, archive: Rhino.FileIO.BinaryArchiveReader) -> bool
Rhino.DocObjects.Custom.UserData.Write(self, archive: Rhino.FileIO.BinaryArchiveWriter) -> bool
Rhino.DocObjects.Custom.UserData.__init__(self) -> None
Rhino.DocObjects.Custom.UserDataList.Add(self, userdata: Rhino.DocObjects.Custom.UserData) -> bool
Rhino.DocObjects.Custom.UserDataList.Contains(self, userdataId: System.Guid) -> bool
Rhino.DocObjects.Custom.UserDataList.Find(self, userdataType: System.Type) -> UserData
Rhino.DocObjects.Custom.UserDataList.GetEnumerator(self) -> IEnumerator<UserData>
Rhino.DocObjects.Custom.UserDataList.Purge(self) -> None
Rhino.DocObjects.Custom.UserDataList.Remove(self, userdata: Rhino.DocObjects.Custom.UserData) -> bool
Rhino.DocObjects.Custom.UserDataListEnumerator.Dispose(self) -> None
Rhino.DocObjects.Custom.UserDataListEnumerator.MoveNext(self) -> bool
Rhino.DocObjects.Custom.UserDataListEnumerator.Reset(self) -> None
Rhino.DocObjects.Custom.UserDataListEnumerator.__init__(self, udl: Rhino.DocObjects.Custom.UserDataList) -> None
Rhino.DocObjects.Custom.UserDictionary.OnDuplicate(self, source: Rhino.DocObjects.Custom.UserData) -> None
Rhino.DocObjects.Custom.UserDictionary.Read(self, archive: Rhino.FileIO.BinaryArchiveReader) -> bool
Rhino.DocObjects.Custom.UserDictionary.Write(self, archive: Rhino.FileIO.BinaryArchiveWriter) -> bool
Rhino.DocObjects.Custom.UserDictionary.__init__(self) -> None
Rhino.DocObjects.DetailViewObject.CommitViewportChanges(self) -> bool
Rhino.DocObjects.DetailViewObject.GetFormattedScale(self, arg1: Rhino.DocObjects.DetailViewObject.ScaleFormat, arg2: System.String@) -> bool
Rhino.DocObjects.DetailViewObject.TryGetModelLength(self, paper: float, model: System.Double@) -> bool
Rhino.DocObjects.DetailViewObject.TryGetPaperLength(self, model: float, paper: System.Double@) -> bool
Rhino.DocObjects.DimensionStyle.AlternateDimensionLengthDisplayUnit(self, model_serial_number: System.UInt32) -> UnitSystem
Rhino.DocObjects.DimensionStyle.ClearAllFieldOverrides(self) -> None
Rhino.DocObjects.DimensionStyle.ClearFieldOverride(self, arg1: Rhino.DocObjects.DimensionStyle.Field) -> None
Rhino.DocObjects.DimensionStyle.CopyFrom(self, source: Rhino.DocObjects.DimensionStyle) -> None
Rhino.DocObjects.DimensionStyle.CreatePreviewBitmap(self, width: int, height: int) -> Bitmap
Rhino.DocObjects.DimensionStyle.DeleteAllUserStrings(self) -> None
Rhino.DocObjects.DimensionStyle.DeleteUserString(self, key: str) -> bool
Rhino.DocObjects.DimensionStyle.DimensionLengthDisplayUnit(self, model_serial_number: System.UInt32) -> UnitSystem
Rhino.DocObjects.DimensionStyle.Duplicate(self) -> Rhino.DocObjects.DimensionStyle
Rhino.DocObjects.DimensionStyle.Duplicate(self, newName: str, newId: System.Guid, newParentId: System.Guid) -> Rhino.DocObjects.DimensionStyle
Rhino.DocObjects.DimensionStyle.GetUserString(self, key: str) -> str
Rhino.DocObjects.DimensionStyle.GetUserStrings(self) -> NameValueCollection
Rhino.DocObjects.DimensionStyle.IsChildOf(self, parentId: System.Guid) -> bool
Rhino.DocObjects.DimensionStyle.IsFieldOverriden(self, arg1: Rhino.DocObjects.DimensionStyle.Field) -> bool
Rhino.DocObjects.DimensionStyle.ScaleLengthValues(self, scale: float) -> None
Rhino.DocObjects.DimensionStyle.SetFieldOverride(self, arg1: Rhino.DocObjects.DimensionStyle.Field) -> None
Rhino.DocObjects.DimensionStyle.SetUserString(self, key: str, value: str) -> bool
Rhino.DocObjects.DimensionStyle.__init__(self) -> None
Rhino.DocObjects.DimensionStyle.__init__(self, info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext) -> None
Rhino.DocObjects.EarthAnchorPoint.Dispose(self) -> None
Rhino.DocObjects.EarthAnchorPoint.Dispose(self, disposing: bool) -> None
Rhino.DocObjects.EarthAnchorPoint.EarthLocationIsSet(self) -> bool
Rhino.DocObjects.EarthAnchorPoint.Finalize(self) -> None
Rhino.DocObjects.EarthAnchorPoint.GetEarthAnchorPlane(self, anchorNorth: Rhino.Geometry.Vector3d@) -> Plane
Rhino.DocObjects.EarthAnchorPoint.GetModelCompass(self) -> Plane
Rhino.DocObjects.EarthAnchorPoint.GetModelToEarthTransform(self, modelUnitSystem: Rhino.UnitSystem) -> Transform
Rhino.DocObjects.EarthAnchorPoint.ModelLocationIsSet(self) -> bool
Rhino.DocObjects.EarthAnchorPoint.__init__(self) -> None
Rhino.DocObjects.Environment.__init__(self) -> None
Rhino.DocObjects.ExtrusionObject.DuplicateExtrusionGeometry(self) -> Extrusion
Rhino.DocObjects.Font.AvailableFontFaceNames() -> List[str]
Rhino.DocObjects.Font.FromQuartetProperties(quartetName: str, bold: bool, italic: bool) -> Rhino.DocObjects.Font
Rhino.DocObjects.Font.GetObjectData(self, info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext) -> None
Rhino.DocObjects.Font.GetSubstituteFont(self) -> Rhino.DocObjects.Font
Rhino.DocObjects.Font.InstalledFonts() -> List[Rhino.DocObjects.Font]
Rhino.DocObjects.Font.InstalledFonts(familyName: str) -> List[Rhino.DocObjects.Font]
Rhino.DocObjects.Font.InstalledFontsAsQuartets() -> List[FontQuartet]
Rhino.DocObjects.Font.__init__(self, arg1: str, arg2: Rhino.DocObjects.Font.FontWeight, arg3: Rhino.DocObjects.Font.FontStyle, arg4: Rhino.DocObjects.Font.FontStretch, arg5: bool, arg6: bool) -> None
Rhino.DocObjects.Font.__init__(self, arg1: str, arg2: Rhino.DocObjects.Font.FontWeight, arg3: Rhino.DocObjects.Font.FontStyle, arg4: bool, arg5: bool) -> None
Rhino.DocObjects.Font.__init__(self, familyName: str) -> None
Rhino.DocObjects.FontQuartet.ToString(self) -> str
Rhino.DocObjects.FontQuartet.__init__(self, name: str, supportsRegular: bool, supportsBold: bool, supportsItalic: bool, supportsBoldItalic: bool) -> None
Rhino.DocObjects.GripObject.GetCageParameters(self, u: System.Double@, v: System.Double@, w: System.Double@) -> bool
Rhino.DocObjects.GripObject.GetCurveCVIndices(self, cvIndices: System.Int32[]@) -> int
Rhino.DocObjects.GripObject.GetCurveParameters(self, t: System.Double@) -> bool
Rhino.DocObjects.GripObject.GetGripDirections(self, u: Rhino.Geometry.Vector3d@, v: Rhino.Geometry.Vector3d@, normal: Rhino.Geometry.Vector3d@) -> bool
Rhino.DocObjects.GripObject.GetSurfaceCVIndices(self, cvIndices: System.Tuple{System.Int32,System.Int32}[]@) -> int
Rhino.DocObjects.GripObject.GetSurfaceParameters(self, u: System.Double@, v: System.Double@) -> bool
Rhino.DocObjects.GripObject.Move(self, delta: Rhino.Geometry.Vector3d) -> None
Rhino.DocObjects.GripObject.Move(self, newLocation: Rhino.Geometry.Point3d) -> None
Rhino.DocObjects.GripObject.Move(self, xform: Rhino.Geometry.Transform) -> None
Rhino.DocObjects.GripObject.NeighborGrip(self, directionR: int, directionS: int, directionT: int, wrap: bool) -> Rhino.DocObjects.GripObject
Rhino.DocObjects.GripObject.UndoMove(self) -> None
Rhino.DocObjects.Group.DeleteAllUserStrings(self) -> None
Rhino.DocObjects.Group.DeleteUserString(self, key: str) -> bool
Rhino.DocObjects.Group.GetUserString(self, key: str) -> str
Rhino.DocObjects.Group.GetUserStrings(self) -> NameValueCollection
Rhino.DocObjects.Group.SetUserString(self, key: str, value: str) -> bool
Rhino.DocObjects.HatchLine.AppendDash(self, dash: float) -> None
Rhino.DocObjects.HatchLine.DashAt(self, dashIndex: int) -> float
Rhino.DocObjects.HatchLine.Dispose(self) -> None
Rhino.DocObjects.HatchLine.Dispose(self, disposing: bool) -> None
Rhino.DocObjects.HatchLine.Finalize(self) -> None
Rhino.DocObjects.HatchLine.SetDashes(self, dashes: Iterable[float]) -> None
Rhino.DocObjects.HatchLine.__init__(self) -> None
Rhino.DocObjects.HatchLine.__init__(self, hatchLine: Rhino.DocObjects.HatchLine) -> None
Rhino.DocObjects.HatchPattern.AddHatchLine(self, hatchLine: Rhino.DocObjects.HatchLine) -> int
Rhino.DocObjects.HatchPattern.CreatePreviewGeometry(self, width: int, height: int, angle: float) -> List[Line]
Rhino.DocObjects.HatchPattern.DeleteAllUserStrings(self) -> None
Rhino.DocObjects.HatchPattern.DeleteUserString(self, key: str) -> bool
Rhino.DocObjects.HatchPattern.GetUserString(self, key: str) -> str
Rhino.DocObjects.HatchPattern.GetUserStrings(self) -> NameValueCollection
Rhino.DocObjects.HatchPattern.HatchLineAt(self, hatchLineIndex: int) -> HatchLine
Rhino.DocObjects.HatchPattern.ReadFromFile(filename: str, quiet: bool) -> List[Rhino.DocObjects.HatchPattern]
Rhino.DocObjects.HatchPattern.RemoveAllHatchLines(self) -> None
Rhino.DocObjects.HatchPattern.RemoveHatchLine(self, hatchLineIndex: int) -> bool
Rhino.DocObjects.HatchPattern.SetHatchLines(self, hatchLines: Iterable[Rhino.DocObjects.HatchLine]) -> int
Rhino.DocObjects.HatchPattern.SetUserString(self, key: str, value: str) -> bool
Rhino.DocObjects.HatchPattern.WriteToFile(filename: str, hatchPattern: Rhino.DocObjects.HatchPattern) -> bool
Rhino.DocObjects.HatchPattern.WriteToFile(filename: str, hatchPatterns: Iterable[Rhino.DocObjects.HatchPattern]) -> bool
Rhino.DocObjects.HatchPattern.__init__(self) -> None
Rhino.DocObjects.HatchPattern.__init__(self, other: Rhino.DocObjects.HatchPattern) -> None
Rhino.DocObjects.HistoryRecord.Dispose(self) -> None
Rhino.DocObjects.HistoryRecord.Dispose(self, disposing: bool) -> None
Rhino.DocObjects.HistoryRecord.Finalize(self) -> None
Rhino.DocObjects.HistoryRecord.SetBool(self, id: int, value: bool) -> bool
Rhino.DocObjects.HistoryRecord.SetBools(self, id: int, values: Iterable[bool]) -> bool
Rhino.DocObjects.HistoryRecord.SetBrep(self, id: int, value: Rhino.Geometry.Brep) -> bool
Rhino.DocObjects.HistoryRecord.SetColor(self, id: int, value: System.Drawing.Color) -> bool
Rhino.DocObjects.HistoryRecord.SetColors(self, id: int, values: Iterable[System.Drawing.Color]) -> bool
Rhino.DocObjects.HistoryRecord.SetCurve(self, id: int, value: Rhino.Geometry.Curve) -> bool
Rhino.DocObjects.HistoryRecord.SetDouble(self, id: int, value: float) -> bool
Rhino.DocObjects.HistoryRecord.SetDoubles(self, id: int, values: Iterable[float]) -> bool
Rhino.DocObjects.HistoryRecord.SetGuid(self, id: int, value: System.Guid) -> bool
Rhino.DocObjects.HistoryRecord.SetGuids(self, id: int, values: Iterable[System.Guid]) -> bool
Rhino.DocObjects.HistoryRecord.SetHistoryVersion(self, historyVersion: int) -> bool
Rhino.DocObjects.HistoryRecord.SetInt(self, id: int, value: int) -> bool
Rhino.DocObjects.HistoryRecord.SetInts(self, id: int, values: Iterable[int]) -> bool
Rhino.DocObjects.HistoryRecord.SetMesh(self, id: int, value: Rhino.Geometry.Mesh) -> bool
Rhino.DocObjects.HistoryRecord.SetObjRef(self, id: int, value: Rhino.DocObjects.ObjRef) -> bool
Rhino.DocObjects.HistoryRecord.SetPoint3d(self, id: int, value: Rhino.Geometry.Point3d) -> bool
Rhino.DocObjects.HistoryRecord.SetPoint3dOnObject(self, id: int, objref: Rhino.DocObjects.ObjRef, value: Rhino.Geometry.Point3d) -> bool
Rhino.DocObjects.HistoryRecord.SetPoint3ds(self, id: int, values: Iterable[Rhino.Geometry.Point3d]) -> bool
Rhino.DocObjects.HistoryRecord.SetString(self, id: int, value: str) -> bool
Rhino.DocObjects.HistoryRecord.SetStrings(self, id: int, values: Iterable[str]) -> bool
Rhino.DocObjects.HistoryRecord.SetSurface(self, id: int, value: Rhino.Geometry.Surface) -> bool
Rhino.DocObjects.HistoryRecord.SetTransorm(self, id: int, value: Rhino.Geometry.Transform) -> bool
Rhino.DocObjects.HistoryRecord.SetVector3d(self, id: int, value: Rhino.Geometry.Vector3d) -> bool
Rhino.DocObjects.HistoryRecord.SetVector3ds(self, id: int, values: Iterable[Rhino.Geometry.Vector3d]) -> bool
Rhino.DocObjects.HistoryRecord.__init__(self, command: Rhino.Commands.Command, version: int) -> None
Rhino.DocObjects.InstanceDefinition.CreatePreviewBitmap(self, definedViewportProjection: Rhino.Display.DefinedViewportProjection, bitmapSize: System.Drawing.Size) -> Bitmap
Rhino.DocObjects.InstanceDefinition.CreatePreviewBitmap(self, definedViewportProjection: Rhino.Display.DefinedViewportProjection, bitmapSize: System.Drawing.Size, applyDpiScaling: bool) -> Bitmap
Rhino.DocObjects.InstanceDefinition.CreatePreviewBitmap(self, definedViewportProjection: Rhino.Display.DefinedViewportProjection, displayMode: Rhino.DocObjects.DisplayMode, bitmapSize: System.Drawing.Size) -> Bitmap
Rhino.DocObjects.InstanceDefinition.CreatePreviewBitmap(self, definedViewportProjection: Rhino.Display.DefinedViewportProjection, displayMode: Rhino.DocObjects.DisplayMode, bitmapSize: System.Drawing.Size, applyDpiScaling: bool) -> Bitmap
Rhino.DocObjects.InstanceDefinition.CreatePreviewBitmap(self, definitionObjectId: System.Guid, viewportProjection: Rhino.Display.DefinedViewportProjection, displayMode: Rhino.DocObjects.DisplayMode, bitmapSize: System.Drawing.Size, applyDpiScaling: bool) -> Bitmap
Rhino.DocObjects.InstanceDefinition.CreatePreviewBitmap(self, displayModeId: System.Guid, viewportProjection: Rhino.Display.DefinedViewportProjection, isometricCamera: Rhino.Display.IsometricCamera, drawDecorations: bool, bitmapSize: System.Drawing.Size, applyDpiScaling: bool) -> Bitmap
Rhino.DocObjects.InstanceDefinition.Equals(self, obj: Any) -> bool
Rhino.DocObjects.InstanceDefinition.GetContainers(self) -> List[Rhino.DocObjects.InstanceDefinition]
Rhino.DocObjects.InstanceDefinition.GetHashCode(self) -> int
Rhino.DocObjects.InstanceDefinition.GetObjects(self) -> List[RhinoObject]
Rhino.DocObjects.InstanceDefinition.GetReferences(self, wheretoLook: int) -> List[InstanceObject]
Rhino.DocObjects.InstanceDefinition.InUse(self, wheretoLook: int) -> bool
Rhino.DocObjects.InstanceDefinition.Object(self, index: int) -> RhinoObject
Rhino.DocObjects.InstanceDefinition.UseCount(self) -> int
Rhino.DocObjects.InstanceDefinition.UseCount(self, topLevelReferenceCount: System.Int32@, nestedReferenceCount: System.Int32@) -> int
Rhino.DocObjects.InstanceDefinition.UsesDefinition(self, otherIdefIndex: int) -> int
Rhino.DocObjects.InstanceDefinition.UsesLayer(self, layerIndex: int) -> bool
Rhino.DocObjects.InstanceDefinition.UsesLinetype(self, linetypeIndex: int) -> bool
Rhino.DocObjects.InstanceObject.Explode(self, explodeNestedInstances: bool, pieces: Rhino.DocObjects.RhinoObject[]@, pieceAttributes: Rhino.DocObjects.ObjectAttributes[]@, pieceTransforms: Rhino.Geometry.Transform[]@) -> None
Rhino.DocObjects.InstanceObject.Explode(self, skipHiddenPieces: bool, viewportId: System.Guid, explodeNestedInstances: bool, pieces: Rhino.DocObjects.RhinoObject[]@, pieceAttributes: Rhino.DocObjects.ObjectAttributes[]@, pieceTransforms: Rhino.Geometry.Transform[]@) -> None
Rhino.DocObjects.InstanceObject.SubObjectFromComponentIndex(self, ci: Rhino.Geometry.ComponentIndex) -> RhinoObject
Rhino.DocObjects.InstanceObject.UsesDefinition(self, definitionIndex: int, nestingLevel: System.Int32@) -> bool
Rhino.DocObjects.Layer.!=(left: Rhino.DocObjects.Layer, right: Rhino.DocObjects.Layer) -> operator
Rhino.DocObjects.Layer.==(left: Rhino.DocObjects.Layer, right: Rhino.DocObjects.Layer) -> operator
Rhino.DocObjects.Layer.CopyAttributesFrom(self, otherLayer: Rhino.DocObjects.Layer) -> None
Rhino.DocObjects.Layer.Default(self) -> None
Rhino.DocObjects.Layer.DeleteAllUserStrings(self) -> None
Rhino.DocObjects.Layer.DeleteModelVisible(self) -> None
Rhino.DocObjects.Layer.DeletePerViewportColor(self, viewportId: System.Guid) -> None
Rhino.DocObjects.Layer.DeletePerViewportPlotColor(self, viewportId: System.Guid) -> None
Rhino.DocObjects.Layer.DeletePerViewportPlotWeight(self, viewportId: System.Guid) -> None
Rhino.DocObjects.Layer.DeletePerViewportSettings(self, viewportId: System.Guid) -> None
Rhino.DocObjects.Layer.DeletePerViewportVisible(self, viewportId: System.Guid) -> None
Rhino.DocObjects.Layer.DeleteUserString(self, key: str) -> bool
Rhino.DocObjects.Layer.Equals(self, obj: Any) -> bool
Rhino.DocObjects.Layer.Equals(self, other: Rhino.DocObjects.Layer) -> bool
Rhino.DocObjects.Layer.GetChildren(self) -> List[Rhino.DocObjects.Layer]
Rhino.DocObjects.Layer.GetChildren(self, allChildren: bool) -> List[Rhino.DocObjects.Layer]
Rhino.DocObjects.Layer.GetCustomSectionStyle(self) -> SectionStyle
Rhino.DocObjects.Layer.GetDefaultLayerProperties() -> Rhino.DocObjects.Layer
Rhino.DocObjects.Layer.GetHashCode(self) -> int
Rhino.DocObjects.Layer.GetLeafName(fullPath: str) -> str
Rhino.DocObjects.Layer.GetLeafName(layer: Rhino.DocObjects.Layer) -> str
Rhino.DocObjects.Layer.GetParentName(fullPath: str) -> str
Rhino.DocObjects.Layer.GetParentName(layer: Rhino.DocObjects.Layer) -> str
Rhino.DocObjects.Layer.GetPersistentLocking(self) -> bool
Rhino.DocObjects.Layer.GetPersistentVisibility(self) -> bool
Rhino.DocObjects.Layer.GetUserString(self, key: str) -> str
Rhino.DocObjects.Layer.GetUserStrings(self) -> NameValueCollection
Rhino.DocObjects.Layer.HasPerViewportSettings(self, viewportId: System.Guid) -> bool
Rhino.DocObjects.Layer.HasSelectedObjects(self, checkSubObjects: bool) -> bool
Rhino.DocObjects.Layer.IsChildOf(self, layerIndex: int) -> bool
Rhino.DocObjects.Layer.IsChildOf(self, otherLayer: Rhino.DocObjects.Layer) -> bool
Rhino.DocObjects.Layer.IsChildOf(self, otherlayerId: System.Guid) -> bool
Rhino.DocObjects.Layer.IsParentOf(self, layerIndex: int) -> bool
Rhino.DocObjects.Layer.IsParentOf(self, otherLayer: Rhino.DocObjects.Layer) -> bool
Rhino.DocObjects.Layer.IsParentOf(self, otherLayer: System.Guid) -> bool
Rhino.DocObjects.Layer.ParentLayer(self, rootLevelParent: bool) -> Rhino.DocObjects.Layer
Rhino.DocObjects.Layer.PerViewportColor(self, viewportId: System.Guid) -> Color
Rhino.DocObjects.Layer.PerViewportIsVisible(self, viewportId: System.Guid) -> bool
Rhino.DocObjects.Layer.PerViewportPersistentVisibility(self, viewportId: System.Guid) -> bool
Rhino.DocObjects.Layer.PerViewportPlotColor(self, viewportId: System.Guid) -> Color
Rhino.DocObjects.Layer.PerViewportPlotWeight(self, viewportId: System.Guid) -> float
Rhino.DocObjects.Layer.RemoveCustomSectionStyle(self) -> None
Rhino.DocObjects.Layer.SetCustomSectionStyle(self, sectionStyle: Rhino.DocObjects.SectionStyle) -> None
Rhino.DocObjects.Layer.SetPerViewportColor(self, viewportId: System.Guid, color: System.Drawing.Color) -> None
Rhino.DocObjects.Layer.SetPerViewportPersistentVisibility(self, viewportId: System.Guid, persistentVisibility: bool) -> None
Rhino.DocObjects.Layer.SetPerViewportPlotColor(self, viewportId: System.Guid, color: System.Drawing.Color) -> None
Rhino.DocObjects.Layer.SetPerViewportPlotWeight(self, viewportId: System.Guid, plotWeight: float) -> None
Rhino.DocObjects.Layer.SetPerViewportVisible(self, viewportId: System.Guid, visible: bool) -> None
Rhino.DocObjects.Layer.SetPersistentLocking(self, persistentLocking: bool) -> None
Rhino.DocObjects.Layer.SetPersistentVisibility(self, persistentVisibility: bool) -> None
Rhino.DocObjects.Layer.SetUserString(self, key: str, value: str) -> bool
Rhino.DocObjects.Layer.ToString(self) -> str
Rhino.DocObjects.Layer.UnsetModelPersistentVisibility(self) -> None
Rhino.DocObjects.Layer.UnsetPerViewportPersistentVisibility(self, viewportId: System.Guid) -> None
Rhino.DocObjects.Layer.UnsetPersistentLocking(self) -> None
Rhino.DocObjects.Layer.UnsetPersistentVisibility(self) -> None
Rhino.DocObjects.Layer.__init__(self) -> None
Rhino.DocObjects.LightObject.DuplicateLightGeometry(self) -> Light
Rhino.DocObjects.Linetype.AppendSegment(self, length: float, isSolid: bool) -> int
Rhino.DocObjects.Linetype.CommitChanges(self) -> bool
Rhino.DocObjects.Linetype.CreateFromPatternString(patternString: str, millimeters: bool) -> Rhino.DocObjects.Linetype
Rhino.DocObjects.Linetype.Default(self) -> None
Rhino.DocObjects.Linetype.DeleteAllUserStrings(self) -> None
Rhino.DocObjects.Linetype.DeleteUserString(self, key: str) -> bool
Rhino.DocObjects.Linetype.DuplicateLinetype(self) -> Rhino.DocObjects.Linetype
Rhino.DocObjects.Linetype.GetSegment(self, index: int, length: System.Double@, isSolid: System.Boolean@) -> None
Rhino.DocObjects.Linetype.GetTaperPoints(self) -> List[Point2d]
Rhino.DocObjects.Linetype.GetUserString(self, key: str) -> str
Rhino.DocObjects.Linetype.GetUserStrings(self) -> NameValueCollection
Rhino.DocObjects.Linetype.PatternString(self, millimeters: bool) -> str
Rhino.DocObjects.Linetype.ReadFromFile(path: str) -> List[Rhino.DocObjects.Linetype]
Rhino.DocObjects.Linetype.RemoveSegment(self, index: int) -> bool
Rhino.DocObjects.Linetype.RemoveTaper(self) -> None
Rhino.DocObjects.Linetype.SetSegment(self, index: int, length: float, isSolid: bool) -> bool
Rhino.DocObjects.Linetype.SetSegments(self, segments: Iterable[float]) -> bool
Rhino.DocObjects.Linetype.SetTaper(self, startWidth: float, endWidth: float) -> None
Rhino.DocObjects.Linetype.SetTaper(self, startWidth: float, taperPoint: Rhino.Geometry.Point2d, endWidth: float) -> None
Rhino.DocObjects.Linetype.SetUserString(self, key: str, value: str) -> bool
Rhino.DocObjects.Linetype.__init__(self) -> None
Rhino.DocObjects.Linetype.__init__(self, other: Rhino.DocObjects.Linetype) -> None
Rhino.DocObjects.Material.ClearMaterialChannels(self) -> None
Rhino.DocObjects.Material.CommitChanges(self) -> bool
Rhino.DocObjects.Material.CopyFrom(self, other: Rhino.DocObjects.Material) -> None
Rhino.DocObjects.Material.Default(self) -> None
Rhino.DocObjects.Material.GetBitmapTexture(self) -> Texture
Rhino.DocObjects.Material.GetBumpTexture(self) -> Texture
Rhino.DocObjects.Material.GetEnvironmentTexture(self) -> Texture
Rhino.DocObjects.Material.GetTexture(self, which: Rhino.DocObjects.TextureType) -> Texture
Rhino.DocObjects.Material.GetTextures(self) -> List[Texture]
Rhino.DocObjects.Material.GetTransparencyTexture(self) -> Texture
Rhino.DocObjects.Material.GetUserString(self, key: str) -> str
Rhino.DocObjects.Material.GetUserStrings(self) -> NameValueCollection
Rhino.DocObjects.Material.MaterialChannelIdFromIndex(self, material_channel_index: int) -> Guid
Rhino.DocObjects.Material.MaterialChannelIndexFromId(self, material_channel_id: System.Guid, bAddIdIfNotPresent: bool) -> int
Rhino.DocObjects.Material.SetBitmapTexture(self, filename: str) -> bool
Rhino.DocObjects.Material.SetBitmapTexture(self, texture: Rhino.DocObjects.Texture) -> bool
Rhino.DocObjects.Material.SetBumpTexture(self, filename: str) -> bool
Rhino.DocObjects.Material.SetBumpTexture(self, texture: Rhino.DocObjects.Texture) -> bool
Rhino.DocObjects.Material.SetEnvironmentTexture(self, filename: str) -> bool
Rhino.DocObjects.Material.SetEnvironmentTexture(self, texture: Rhino.DocObjects.Texture) -> bool
Rhino.DocObjects.Material.SetTexture(self, texture: Rhino.DocObjects.Texture, which: Rhino.DocObjects.TextureType) -> bool
Rhino.DocObjects.Material.SetTransparencyTexture(self, filename: str) -> bool
Rhino.DocObjects.Material.SetTransparencyTexture(self, texture: Rhino.DocObjects.Texture) -> bool
Rhino.DocObjects.Material.SetUserString(self, key: str, value: str) -> bool
Rhino.DocObjects.Material.ToPhysicallyBased(self) -> None
Rhino.DocObjects.Material.__init__(self) -> None
Rhino.DocObjects.Material.__init__(self, other: Rhino.DocObjects.Material) -> None
Rhino.DocObjects.MaterialRef.Dispose(self) -> None
Rhino.DocObjects.MaterialRef.Finalize(self) -> None
Rhino.DocObjects.MaterialRefCreateParams.__init__(self) -> None
Rhino.DocObjects.MaterialRefs.Add(self, item: KeyValuePair[System.Guid, Rhino.DocObjects.MaterialRef]) -> None
Rhino.DocObjects.MaterialRefs.Add(self, key: System.Guid, value: Rhino.DocObjects.MaterialRef) -> None
Rhino.DocObjects.MaterialRefs.Clear(self) -> None
Rhino.DocObjects.MaterialRefs.Contains(self, item: KeyValuePair[System.Guid, Rhino.DocObjects.MaterialRef]) -> bool
Rhino.DocObjects.MaterialRefs.ContainsKey(self, key: System.Guid) -> bool
Rhino.DocObjects.MaterialRefs.CopyTo(self, array: List[KeyValuePair[System.Guid, Rhino.DocObjects.MaterialRef]], arrayIndex: int) -> None
Rhino.DocObjects.MaterialRefs.Create(self, createParams: Rhino.DocObjects.MaterialRefCreateParams) -> MaterialRef
Rhino.DocObjects.MaterialRefs.GetEnumerator(self) -> MaterialRef>>
Rhino.DocObjects.MaterialRefs.Remove(self, item: KeyValuePair[System.Guid, Rhino.DocObjects.MaterialRef]) -> bool
Rhino.DocObjects.MaterialRefs.Remove(self, key: System.Guid) -> bool
Rhino.DocObjects.MaterialRefs.TryGetValue(self, key: System.Guid, value: Rhino.DocObjects.MaterialRef@) -> bool
Rhino.DocObjects.MeshObject.CheckMeshes(meshObjects: Iterable[Rhino.DocObjects.MeshObject], textLog: Rhino.FileIO.TextLog, parameters: Rhino.Geometry.MeshCheckParameters@) -> bool
Rhino.DocObjects.MeshObject.DuplicateMeshGeometry(self) -> Mesh
Rhino.DocObjects.MeshObject.SetMesh(self, mesh: Rhino.Geometry.Mesh) -> Mesh
Rhino.DocObjects.ModelComponent.ClearId(self) -> None
Rhino.DocObjects.ModelComponent.ClearIndex(self) -> None
Rhino.DocObjects.ModelComponent.ClearName(self) -> None
Rhino.DocObjects.ModelComponent.DataCRC(self, currentRemainder: System.UInt32) -> uint
Rhino.DocObjects.ModelComponent.IsValidComponentName(name: str) -> bool
Rhino.DocObjects.ModelComponent.LockId(self) -> None
Rhino.DocObjects.ModelComponent.LockIndex(self) -> None
Rhino.DocObjects.ModelComponent.LockName(self) -> None
Rhino.DocObjects.ModelComponent.ModelComponentTypeIgnoresCase(type: Rhino.DocObjects.ModelComponentType) -> bool
Rhino.DocObjects.ModelComponent.ModelComponentTypeIncludesParent(type: Rhino.DocObjects.ModelComponentType) -> bool
Rhino.DocObjects.ModelComponent.ModelComponentTypeRequiresUniqueName(type: Rhino.DocObjects.ModelComponentType) -> bool
Rhino.DocObjects.ModelComponent.ToString(self) -> str
Rhino.DocObjects.ObjRef.Brep(self) -> Brep
Rhino.DocObjects.ObjRef.ClippingPlaneSurface(self) -> ClippingPlaneSurface
Rhino.DocObjects.ObjRef.Curve(self) -> Curve
Rhino.DocObjects.ObjRef.CurveParameter(self, parameter: System.Double@) -> Curve
Rhino.DocObjects.ObjRef.Dispose(self) -> None
Rhino.DocObjects.ObjRef.Dispose(self, disposing: bool) -> None
Rhino.DocObjects.ObjRef.Edge(self) -> BrepEdge
Rhino.DocObjects.ObjRef.Face(self) -> BrepFace
Rhino.DocObjects.ObjRef.Finalize(self) -> None
Rhino.DocObjects.ObjRef.Geometry(self) -> GeometryBase
Rhino.DocObjects.ObjRef.Hatch(self) -> Hatch
Rhino.DocObjects.ObjRef.InstanceDefinitionPart(self) -> RhinoObject
Rhino.DocObjects.ObjRef.Light(self) -> Light
Rhino.DocObjects.ObjRef.Mesh(self) -> Mesh
Rhino.DocObjects.ObjRef.Object(self) -> RhinoObject
Rhino.DocObjects.ObjRef.Point(self) -> Point
Rhino.DocObjects.ObjRef.PointCloud(self) -> PointCloud
Rhino.DocObjects.ObjRef.SelectionMethod(self) -> SelectionMethod
Rhino.DocObjects.ObjRef.SelectionPoint(self) -> Point3d
Rhino.DocObjects.ObjRef.SelectionView(self) -> RhinoView
Rhino.DocObjects.ObjRef.SelectionViewDetailSerialNumber(self) -> uint
Rhino.DocObjects.ObjRef.SetSelectionComponent(self, componentIndex: Rhino.Geometry.ComponentIndex) -> None
Rhino.DocObjects.ObjRef.SubD(self) -> SubD
Rhino.DocObjects.ObjRef.SubDEdge(self) -> SubDEdge
Rhino.DocObjects.ObjRef.SubDFace(self) -> SubDFace
Rhino.DocObjects.ObjRef.SubDVertex(self) -> SubDVertex
Rhino.DocObjects.ObjRef.Surface(self) -> Surface
Rhino.DocObjects.ObjRef.SurfaceParameter(self, u: System.Double@, v: System.Double@) -> Surface
Rhino.DocObjects.ObjRef.TextDot(self) -> TextDot
Rhino.DocObjects.ObjRef.TextEntity(self) -> TextEntity
Rhino.DocObjects.ObjRef.Trim(self) -> BrepTrim
Rhino.DocObjects.ObjRef.__init__(self, arg1: System.Guid) -> None
Rhino.DocObjects.ObjRef.__init__(self, arg1: System.Guid, arg2: Rhino.Geometry.ComponentIndex) -> None
Rhino.DocObjects.ObjRef.__init__(self, doc: Rhino.RhinoDoc, id: System.Guid) -> None
Rhino.DocObjects.ObjRef.__init__(self, doc: Rhino.RhinoDoc, id: System.Guid, ci: Rhino.Geometry.ComponentIndex) -> None
Rhino.DocObjects.ObjRef.__init__(self, other: Rhino.DocObjects.ObjRef) -> None
Rhino.DocObjects.ObjRef.__init__(self, rhinoObject: Rhino.DocObjects.RhinoObject) -> None
Rhino.DocObjects.ObjRef.__init__(self, rhinoObject: Rhino.DocObjects.RhinoObject, pickContext: Rhino.Input.Custom.PickContext) -> None
Rhino.DocObjects.ObjectAttributes.AddHideInDetailOverride(self, detailId: System.Guid) -> bool
Rhino.DocObjects.ObjectAttributes.AddToGroup(self, groupIndex: int) -> None
Rhino.DocObjects.ObjectAttributes.ComputedPlotColor(self, document: Rhino.RhinoDoc) -> Color
Rhino.DocObjects.ObjectAttributes.ComputedPlotColor(self, document: Rhino.RhinoDoc, viewportId: System.Guid) -> Color
Rhino.DocObjects.ObjectAttributes.ComputedPlotWeight(self, document: Rhino.RhinoDoc) -> float
Rhino.DocObjects.ObjectAttributes.ComputedPlotWeight(self, document: Rhino.RhinoDoc, viewportId: System.Guid) -> float
Rhino.DocObjects.ObjectAttributes.DeleteAllUserStrings(self) -> None
Rhino.DocObjects.ObjectAttributes.DeleteUserString(self, key: str) -> bool
Rhino.DocObjects.ObjectAttributes.DrawColor(self, document: Rhino.RhinoDoc) -> Color
Rhino.DocObjects.ObjectAttributes.DrawColor(self, document: Rhino.RhinoDoc, viewportId: System.Guid) -> Color
Rhino.DocObjects.ObjectAttributes.Duplicate(self) -> Rhino.DocObjects.ObjectAttributes
Rhino.DocObjects.ObjectAttributes.GetCustomLinetype(self) -> Linetype
Rhino.DocObjects.ObjectAttributes.GetCustomSectionStyle(self) -> SectionStyle
Rhino.DocObjects.ObjectAttributes.GetDisplayModeOverride(self, viewportId: System.Guid) -> Guid
Rhino.DocObjects.ObjectAttributes.GetGroupList(self) -> List[int]
Rhino.DocObjects.ObjectAttributes.GetHideInDetailOverrides(self) -> List[Guid]
Rhino.DocObjects.ObjectAttributes.GetUserString(self, key: str) -> str
Rhino.DocObjects.ObjectAttributes.GetUserStrings(self) -> NameValueCollection
Rhino.DocObjects.ObjectAttributes.HasDisplayModeOverride(self, viewportId: System.Guid) -> bool
Rhino.DocObjects.ObjectAttributes.HasHideInDetailOverrideSet(self, detailId: System.Guid) -> bool
Rhino.DocObjects.ObjectAttributes.IsInGroup(self, groupIndex: int) -> bool
Rhino.DocObjects.ObjectAttributes.ObjectFrame(self) -> Plane
Rhino.DocObjects.ObjectAttributes.RemoveCustomLinetype(self) -> None
Rhino.DocObjects.ObjectAttributes.RemoveCustomSectionStyle(self) -> None
Rhino.DocObjects.ObjectAttributes.RemoveDisplayModeOverride(self) -> None
Rhino.DocObjects.ObjectAttributes.RemoveDisplayModeOverride(self, rhinoViewportId: System.Guid) -> None
Rhino.DocObjects.ObjectAttributes.RemoveFromAllGroups(self) -> None
Rhino.DocObjects.ObjectAttributes.RemoveFromGroup(self, groupIndex: int) -> None
Rhino.DocObjects.ObjectAttributes.RemoveHideInDetailOverride(self, detailId: System.Guid) -> bool
Rhino.DocObjects.ObjectAttributes.SetCustomLinetype(self, linetype: Rhino.DocObjects.Linetype) -> None
Rhino.DocObjects.ObjectAttributes.SetCustomSectionStyle(self, sectionStyle: Rhino.DocObjects.SectionStyle) -> None
Rhino.DocObjects.ObjectAttributes.SetDisplayModeOverride(self, mode: Rhino.Display.DisplayModeDescription) -> bool
Rhino.DocObjects.ObjectAttributes.SetDisplayModeOverride(self, mode: Rhino.Display.DisplayModeDescription, rhinoViewportId: System.Guid) -> bool
Rhino.DocObjects.ObjectAttributes.SetObjectFrame(self, plane: Rhino.Geometry.Plane) -> None
Rhino.DocObjects.ObjectAttributes.SetObjectFrame(self, xform: Rhino.Geometry.Transform) -> None
Rhino.DocObjects.ObjectAttributes.SetUserString(self, key: str, value: str) -> bool
Rhino.DocObjects.ObjectAttributes.Transform(self, xform: Rhino.Geometry.Transform) -> bool
Rhino.DocObjects.ObjectAttributes.__init__(self) -> None
Rhino.DocObjects.ObjectAttributes.__init__(self, info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext) -> None
Rhino.DocObjects.ObjectEnumeratorSettings.__init__(self) -> None
Rhino.DocObjects.PhysicallyBasedMaterial.GetTexture(self, which: Rhino.DocObjects.TextureType) -> Texture
Rhino.DocObjects.PhysicallyBasedMaterial.GetTextures(self) -> List[Texture]
Rhino.DocObjects.PhysicallyBasedMaterial.SetTexture(self, texture: Rhino.DocObjects.Texture, which: Rhino.DocObjects.TextureType) -> bool
Rhino.DocObjects.PhysicallyBasedMaterial.SynchronizeLegacyMaterial(self) -> None
Rhino.DocObjects.PointCloudObject.DuplicatePointCloudGeometry(self) -> PointCloud
Rhino.DocObjects.PointObject.DuplicatePointGeometry(self) -> Point
Rhino.DocObjects.ProxyObject.CreateMeshes(self, meshType: Rhino.Geometry.MeshType, parameters: Rhino.Geometry.MeshingParameters, ignoreCustomParameters: bool) -> int
Rhino.DocObjects.ProxyObject.GetMeshes(self, meshType: Rhino.Geometry.MeshType) -> List[Mesh]
Rhino.DocObjects.ReplayHistoryData.AppendHistoryResult(self) -> ReplayHistoryResult
Rhino.DocObjects.ReplayHistoryData.Dispose(self) -> None
Rhino.DocObjects.ReplayHistoryData.GetRhinoObjRef(self, id: int) -> ObjRef
Rhino.DocObjects.ReplayHistoryData.TryGetBool(self, id: int, value: System.Boolean@) -> bool
Rhino.DocObjects.ReplayHistoryData.TryGetColor(self, id: int, value: System.Drawing.Color@) -> bool
Rhino.DocObjects.ReplayHistoryData.TryGetDouble(self, id: int, value: System.Double@) -> bool
Rhino.DocObjects.ReplayHistoryData.TryGetDoubles(self, id: int, values: System.Double[]@) -> bool
Rhino.DocObjects.ReplayHistoryData.TryGetGuid(self, id: int, value: System.Guid@) -> bool
Rhino.DocObjects.ReplayHistoryData.TryGetGuids(self, id: int, values: System.Guid[]@) -> bool
Rhino.DocObjects.ReplayHistoryData.TryGetInt(self, id: int, value: System.Int32@) -> bool
Rhino.DocObjects.ReplayHistoryData.TryGetPoint3d(self, id: int, value: Rhino.Geometry.Point3d@) -> bool
Rhino.DocObjects.ReplayHistoryData.TryGetPoint3dOnObject(self, id: int, value: Rhino.Geometry.Point3d@) -> bool
Rhino.DocObjects.ReplayHistoryData.TryGetString(self, id: int, value: System.String@) -> bool
Rhino.DocObjects.ReplayHistoryData.TryGetTransform(self, id: int, value: Rhino.Geometry.Transform@) -> bool
Rhino.DocObjects.ReplayHistoryData.TryGetVector3d(self, id: int, value: Rhino.Geometry.Vector3d@) -> bool
Rhino.DocObjects.ReplayHistoryData.UpdateResultArray(self, newResults: Iterable[Rhino.DocObjects.ReplayHistoryResult]) -> None
Rhino.DocObjects.ReplayHistoryResult.UpdateToAngularDimension(self, dimension: Rhino.Geometry.AngularDimension, attributes: Rhino.DocObjects.ObjectAttributes) -> bool
Rhino.DocObjects.ReplayHistoryResult.UpdateToArc(self, arc: Rhino.Geometry.Arc, attributes: Rhino.DocObjects.ObjectAttributes) -> bool
Rhino.DocObjects.ReplayHistoryResult.UpdateToBrep(self, brep: Rhino.Geometry.Brep, attributes: Rhino.DocObjects.ObjectAttributes) -> bool
Rhino.DocObjects.ReplayHistoryResult.UpdateToCircle(self, circle: Rhino.Geometry.Circle, attributes: Rhino.DocObjects.ObjectAttributes) -> bool
Rhino.DocObjects.ReplayHistoryResult.UpdateToClippingPlane(self, plane: Rhino.Geometry.Plane, uMagnitude: float, vMagnitude: float, clippedViewportId: System.Guid, attributes: Rhino.DocObjects.ObjectAttributes) -> bool
Rhino.DocObjects.ReplayHistoryResult.UpdateToClippingPlane(self, plane: Rhino.Geometry.Plane, uMagnitude: float, vMagnitude: float, clippedViewportIds: Iterable[System.Guid], attributes: Rhino.DocObjects.ObjectAttributes) -> bool
Rhino.DocObjects.ReplayHistoryResult.UpdateToCurve(self, curve: Rhino.Geometry.Curve, attributes: Rhino.DocObjects.ObjectAttributes) -> bool
Rhino.DocObjects.ReplayHistoryResult.UpdateToEllipse(self, ellipse: Rhino.Geometry.Ellipse, attributes: Rhino.DocObjects.ObjectAttributes) -> bool
Rhino.DocObjects.ReplayHistoryResult.UpdateToExtrusion(self, extrusion: Rhino.Geometry.Extrusion, attributes: Rhino.DocObjects.ObjectAttributes) -> bool
Rhino.DocObjects.ReplayHistoryResult.UpdateToHatch(self, hatch: Rhino.Geometry.Hatch, attributes: Rhino.DocObjects.ObjectAttributes) -> bool
Rhino.DocObjects.ReplayHistoryResult.UpdateToInstanceReferenceGeometry(self, instanceReference: Rhino.Geometry.InstanceReferenceGeometry, attributes: Rhino.DocObjects.ObjectAttributes) -> bool
Rhino.DocObjects.ReplayHistoryResult.UpdateToLeader(self, leader: Rhino.Geometry.Leader, attributes: Rhino.DocObjects.ObjectAttributes) -> bool
Rhino.DocObjects.ReplayHistoryResult.UpdateToLine(self, from: Rhino.Geometry.Point3d, to: Rhino.Geometry.Point3d, attributes: Rhino.DocObjects.ObjectAttributes) -> bool
Rhino.DocObjects.ReplayHistoryResult.UpdateToLinearDimension(self, dimension: Rhino.Geometry.LinearDimension, attributes: Rhino.DocObjects.ObjectAttributes) -> bool
Rhino.DocObjects.ReplayHistoryResult.UpdateToMesh(self, mesh: Rhino.Geometry.Mesh, attributes: Rhino.DocObjects.ObjectAttributes) -> bool
Rhino.DocObjects.ReplayHistoryResult.UpdateToPoint(self, point: Rhino.Geometry.Point3d, attributes: Rhino.DocObjects.ObjectAttributes) -> bool
Rhino.DocObjects.ReplayHistoryResult.UpdateToPointCloud(self, cloud: Rhino.Geometry.PointCloud, attributes: Rhino.DocObjects.ObjectAttributes) -> bool
Rhino.DocObjects.ReplayHistoryResult.UpdateToPointCloud(self, points: Iterable[Rhino.Geometry.Point3d], attributes: Rhino.DocObjects.ObjectAttributes) -> bool
Rhino.DocObjects.ReplayHistoryResult.UpdateToPolyline(self, points: Iterable[Rhino.Geometry.Point3d], attributes: Rhino.DocObjects.ObjectAttributes) -> bool
Rhino.DocObjects.ReplayHistoryResult.UpdateToRadialDimension(self, dimension: Rhino.Geometry.RadialDimension, attributes: Rhino.DocObjects.ObjectAttributes) -> bool
Rhino.DocObjects.ReplayHistoryResult.UpdateToSphere(self, sphere: Rhino.Geometry.Sphere, attributes: Rhino.DocObjects.ObjectAttributes) -> bool
Rhino.DocObjects.ReplayHistoryResult.UpdateToSubD(self, subD: Rhino.Geometry.SubD, attributes: Rhino.DocObjects.ObjectAttributes) -> bool
Rhino.DocObjects.ReplayHistoryResult.UpdateToSurface(self, surface: Rhino.Geometry.Surface, attributes: Rhino.DocObjects.ObjectAttributes) -> bool
Rhino.DocObjects.ReplayHistoryResult.UpdateToText(self, text: Rhino.Geometry.TextEntity, attributes: Rhino.DocObjects.ObjectAttributes) -> bool
Rhino.DocObjects.ReplayHistoryResult.UpdateToText(self, text: str, plane: Rhino.Geometry.Plane, height: float, fontName: str, bold: bool, italic: bool, justification: Rhino.Geometry.TextJustification, attributes: Rhino.DocObjects.ObjectAttributes) -> bool
Rhino.DocObjects.ReplayHistoryResult.UpdateToTextDot(self, dot: Rhino.Geometry.TextDot, attributes: Rhino.DocObjects.ObjectAttributes) -> bool
Rhino.DocObjects.RhinoObject.CommitChanges(self) -> bool
Rhino.DocObjects.RhinoObject.CopyHistoryOnReplace(self) -> bool
Rhino.DocObjects.RhinoObject.CreateMeshes(self, meshType: Rhino.Geometry.MeshType, parameters: Rhino.Geometry.MeshingParameters, ignoreCustomParameters: bool) -> int
Rhino.DocObjects.RhinoObject.CustomRenderMeshesBoundingBox(self, arg1: Rhino.Geometry.MeshType, arg2: Rhino.DocObjects.ViewportInfo, arg3: Rhino.Render.CustomRenderMeshes.RenderMeshProvider.Flags@, arg4: Rhino.PlugIns.PlugIn, arg5: Rhino.Display.DisplayPipelineAttributes, arg6: Rhino.Geometry.BoundingBox@) -> bool
Rhino.DocObjects.RhinoObject.Description(self, textLog: Rhino.FileIO.TextLog) -> None
Rhino.DocObjects.RhinoObject.DuplicateGeometry(self) -> GeometryBase
Rhino.DocObjects.RhinoObject.EnableCustomGrips(self, customGrips: Rhino.DocObjects.Custom.CustomObjectGrips) -> bool
Rhino.DocObjects.RhinoObject.EnableVisualAnalysisMode(self, mode: Rhino.Display.VisualAnalysisMode, enable: bool) -> bool
Rhino.DocObjects.RhinoObject.FromRuntimeSerialNumber(serialNumber: System.UInt32) -> Rhino.DocObjects.RhinoObject
Rhino.DocObjects.RhinoObject.GetActiveVisualAnalysisModes(self) -> List[VisualAnalysisMode]
Rhino.DocObjects.RhinoObject.GetBoundingBox(self, viewport: Rhino.Display.RhinoViewport) -> BoundingBox
Rhino.DocObjects.RhinoObject.GetCustomRenderMeshParameter(self, providerId: System.Guid, parameterName: str) -> IConvertible
Rhino.DocObjects.RhinoObject.GetDynamicTransform(self, transform: Rhino.Geometry.Transform@) -> bool
Rhino.DocObjects.RhinoObject.GetFillSurfaces(rhinoObject: Rhino.DocObjects.RhinoObject, clippingPlaneObject: Rhino.DocObjects.ClippingPlaneObject) -> List[Brep]
Rhino.DocObjects.RhinoObject.GetFillSurfaces(rhinoObject: Rhino.DocObjects.RhinoObject, clippingPlaneObjects: Iterable[Rhino.DocObjects.ClippingPlaneObject]) -> List[Brep]
Rhino.DocObjects.RhinoObject.GetFillSurfaces(rhinoObject: Rhino.DocObjects.RhinoObject, clippingPlaneObjects: Iterable[Rhino.DocObjects.ClippingPlaneObject], unclippedFills: bool) -> List[Brep]
Rhino.DocObjects.RhinoObject.GetGrips(self) -> List[GripObject]
Rhino.DocObjects.RhinoObject.GetGroupList(self) -> List[int]
Rhino.DocObjects.RhinoObject.GetHighlightedSubObjects(self) -> List[ComponentIndex]
Rhino.DocObjects.RhinoObject.GetMaterial(self, componentIndex: Rhino.Geometry.ComponentIndex) -> Material
Rhino.DocObjects.RhinoObject.GetMaterial(self, componentIndex: Rhino.Geometry.ComponentIndex, plugInId: System.Guid) -> Material
Rhino.DocObjects.RhinoObject.GetMaterial(self, componentIndex: Rhino.Geometry.ComponentIndex, plugInId: System.Guid, attributes: Rhino.DocObjects.ObjectAttributes) -> Material
Rhino.DocObjects.RhinoObject.GetMaterial(self, frontMaterial: bool) -> Material
Rhino.DocObjects.RhinoObject.GetMeshes(self, meshType: Rhino.Geometry.MeshType) -> List[Mesh]
Rhino.DocObjects.RhinoObject.GetRenderMaterial(self, componentIndex: Rhino.Geometry.ComponentIndex) -> RenderMaterial
Rhino.DocObjects.RhinoObject.GetRenderMaterial(self, componentIndex: Rhino.Geometry.ComponentIndex, plugInId: System.Guid) -> RenderMaterial
Rhino.DocObjects.RhinoObject.GetRenderMaterial(self, componentIndex: Rhino.Geometry.ComponentIndex, plugInId: System.Guid, attributes: Rhino.DocObjects.ObjectAttributes) -> RenderMaterial
Rhino.DocObjects.RhinoObject.GetRenderMaterial(self, frontMaterial: bool) -> RenderMaterial
Rhino.DocObjects.RhinoObject.GetRenderMeshParameters(self) -> MeshingParameters
Rhino.DocObjects.RhinoObject.GetRenderMeshParameters(self, returnDocumentParametersIfUnset: bool) -> MeshingParameters
Rhino.DocObjects.RhinoObject.GetSelectedSubObjects(self) -> List[ComponentIndex]
Rhino.DocObjects.RhinoObject.GetSubObjects(self) -> List[Rhino.DocObjects.RhinoObject]
Rhino.DocObjects.RhinoObject.GetTextureChannels(self) -> List[int]
Rhino.DocObjects.RhinoObject.GetTextureMapping(self, channel: int) -> TextureMapping
Rhino.DocObjects.RhinoObject.GetTextureMapping(self, channel: int, objectTransform: Rhino.Geometry.Transform@) -> TextureMapping
Rhino.DocObjects.RhinoObject.GetTightBoundingBox(rhinoObjects: Iterable[Rhino.DocObjects.RhinoObject], boundingBox: Rhino.Geometry.BoundingBox@) -> bool
Rhino.DocObjects.RhinoObject.GetTightBoundingBox(rhinoObjects: Iterable[Rhino.DocObjects.RhinoObject], plane: Rhino.Geometry.Plane, boundingBox: Rhino.Geometry.BoundingBox@) -> bool
Rhino.DocObjects.RhinoObject.GetTightBoundingBox(self, tightBox: Rhino.Geometry.BoundingBox@, growBox: bool, xform: Rhino.Geometry.Transform) -> bool
Rhino.DocObjects.RhinoObject.HasCustomRenderMeshes(self, arg1: Rhino.Geometry.MeshType, arg2: Rhino.DocObjects.ViewportInfo, arg3: Rhino.Render.CustomRenderMeshes.RenderMeshProvider.Flags@, arg4: Rhino.PlugIns.PlugIn, arg5: Rhino.Display.DisplayPipelineAttributes) -> bool
Rhino.DocObjects.RhinoObject.HasHistoryRecord(self) -> bool
Rhino.DocObjects.RhinoObject.HasTextureMapping(self) -> bool
Rhino.DocObjects.RhinoObject.Highlight(self, enable: bool) -> bool
Rhino.DocObjects.RhinoObject.HighlightSubObject(self, componentIndex: Rhino.Geometry.ComponentIndex, highlight: bool) -> bool
Rhino.DocObjects.RhinoObject.HistoryChildren(self) -> List[Guid]
Rhino.DocObjects.RhinoObject.HistoryParents(self) -> List[Guid]
Rhino.DocObjects.RhinoObject.InVisualAnalysisMode(self) -> bool
Rhino.DocObjects.RhinoObject.InVisualAnalysisMode(self, mode: Rhino.Display.VisualAnalysisMode) -> bool
Rhino.DocObjects.RhinoObject.IsActiveInViewport(self, viewport: Rhino.Display.RhinoViewport) -> bool
Rhino.DocObjects.RhinoObject.IsHighlighted(self, checkSubObjects: bool) -> int
Rhino.DocObjects.RhinoObject.IsMeshable(self, meshType: Rhino.Geometry.MeshType) -> bool
Rhino.DocObjects.RhinoObject.IsSelectable(self) -> bool
Rhino.DocObjects.RhinoObject.IsSelectable(self, ignoreSelectionState: bool, ignoreGripsState: bool, ignoreLayerLocking: bool, ignoreLayerVisibility: bool) -> bool
Rhino.DocObjects.RhinoObject.IsSelected(self, checkSubObjects: bool) -> int
Rhino.DocObjects.RhinoObject.IsSubObjectHighlighted(self, componentIndex: Rhino.Geometry.ComponentIndex) -> bool
Rhino.DocObjects.RhinoObject.IsSubObjectSelectable(self, componentIndex: Rhino.Geometry.ComponentIndex, ignoreSelectionState: bool) -> bool
Rhino.DocObjects.RhinoObject.IsSubObjectSelected(self, componentIndex: Rhino.Geometry.ComponentIndex) -> bool
Rhino.DocObjects.RhinoObject.MemoryEstimate(self) -> uint
Rhino.DocObjects.RhinoObject.MeshCount(self, meshType: Rhino.Geometry.MeshType, parameters: Rhino.Geometry.MeshingParameters) -> int
Rhino.DocObjects.RhinoObject.MeshObjects(rhinoObjects: Iterable[Rhino.DocObjects.RhinoObject], parameters: Rhino.Geometry.MeshingParameters, meshes: Rhino.Geometry.Mesh[]@, attributes: Rhino.DocObjects.ObjectAttributes[]@) -> Result
Rhino.DocObjects.RhinoObject.MeshObjects(rhinoObjects: Iterable[Rhino.DocObjects.RhinoObject], parameters: Rhino.Geometry.MeshingParameters, meshes: Rhino.Geometry.Mesh[]@, attributes: Rhino.DocObjects.ObjectAttributes[]@, useWorkerThread: bool) -> Result
Rhino.DocObjects.RhinoObject.MeshObjects(rhinoObjects: Iterable[Rhino.DocObjects.RhinoObject], parameters: Rhino.Geometry.MeshingParameters@, simpleDialog: System.Boolean@, meshes: Rhino.Geometry.Mesh[]@, attributes: Rhino.DocObjects.ObjectAttributes[]@) -> Result
Rhino.DocObjects.RhinoObject.MeshObjects(rhinoObjects: Iterable[Rhino.DocObjects.RhinoObject], parameters: Rhino.Geometry.MeshingParameters@, uiStyle: System.Int32@, xform: Rhino.Geometry.Transform, meshes: Rhino.Geometry.Mesh[]@, attributes: Rhino.DocObjects.ObjectAttributes[]@) -> Result
Rhino.DocObjects.RhinoObject.ObjectFrame(self) -> Plane
Rhino.DocObjects.RhinoObject.ObjectFrame(self, arg1: Rhino.DocObjects.RhinoObject.ObjectFrameFlags) -> Plane
Rhino.DocObjects.RhinoObject.OnAddToDocument(self, doc: Rhino.RhinoDoc) -> None
Rhino.DocObjects.RhinoObject.OnDeleteFromDocument(self, doc: Rhino.RhinoDoc) -> None
Rhino.DocObjects.RhinoObject.OnDraw(self, e: Rhino.Display.DrawEventArgs) -> None
Rhino.DocObjects.RhinoObject.OnDuplicate(self, source: Rhino.DocObjects.RhinoObject) -> None
Rhino.DocObjects.RhinoObject.OnPick(self, context: Rhino.Input.Custom.PickContext) -> IEnumerable<ObjRef>
Rhino.DocObjects.RhinoObject.OnPicked(self, context: Rhino.Input.Custom.PickContext, pickedItems: Iterable[Rhino.DocObjects.ObjRef]) -> None
Rhino.DocObjects.RhinoObject.OnSelectionChanged(self) -> None
Rhino.DocObjects.RhinoObject.OnSpaceMorph(self, morph: Rhino.Geometry.SpaceMorph) -> None
Rhino.DocObjects.RhinoObject.OnTransform(self, transform: Rhino.Geometry.Transform) -> None
Rhino.DocObjects.RhinoObject.RenderMeshes(self, arg1: Rhino.Geometry.MeshType, arg2: Rhino.DocObjects.ViewportInfo, arg3: List[Rhino.DocObjects.InstanceObject], arg4: Rhino.Render.CustomRenderMeshes.RenderMeshProvider.Flags@, arg5: Rhino.PlugIns.PlugIn, arg6: Rhino.Display.DisplayPipelineAttributes) -> RenderMeshes
Rhino.DocObjects.RhinoObject.Select(self, on: bool) -> int
Rhino.DocObjects.RhinoObject.Select(self, on: bool, syncHighlight: bool) -> int
Rhino.DocObjects.RhinoObject.Select(self, on: bool, syncHighlight: bool, persistentSelect: bool, ignoreGripsState: bool, ignoreLayerLocking: bool, ignoreLayerVisibility: bool) -> int
Rhino.DocObjects.RhinoObject.SelectSubObject(self, componentIndex: Rhino.Geometry.ComponentIndex, select: bool, syncHighlight: bool) -> int
Rhino.DocObjects.RhinoObject.SelectSubObject(self, componentIndex: Rhino.Geometry.ComponentIndex, select: bool, syncHighlight: bool, persistentSelect: bool) -> int
Rhino.DocObjects.RhinoObject.SetCopyHistoryOnReplace(self, bCopy: bool) -> None
Rhino.DocObjects.RhinoObject.SetCustomRenderMeshParameter(self, providerId: System.Guid, parameterName: str, value: Any) -> None
Rhino.DocObjects.RhinoObject.SetHistory(self, history: Rhino.DocObjects.HistoryRecord) -> bool
Rhino.DocObjects.RhinoObject.SetObjectFrame(self, plane: Rhino.Geometry.Plane) -> None
Rhino.DocObjects.RhinoObject.SetObjectFrame(self, xform: Rhino.Geometry.Transform) -> None
Rhino.DocObjects.RhinoObject.SetRenderMeshParameters(self, mp: Rhino.Geometry.MeshingParameters) -> bool
Rhino.DocObjects.RhinoObject.SetTextureMapping(self, channel: int, tm: Rhino.Render.TextureMapping) -> int
Rhino.DocObjects.RhinoObject.SetTextureMapping(self, channel: int, tm: Rhino.Render.TextureMapping, objectTransform: Rhino.Geometry.Transform) -> int
Rhino.DocObjects.RhinoObject.ShortDescription(self, plural: bool) -> str
Rhino.DocObjects.RhinoObject.ShortDescriptionWithClosedStatus(self, prepend: bool, plural: bool, status: System.Int32@) -> str
Rhino.DocObjects.RhinoObject.TryGetGumballFrame(self, frame: Rhino.UI.Gumball.GumballFrame@) -> bool
Rhino.DocObjects.RhinoObject.UnhighlightAllSubObjects(self) -> int
Rhino.DocObjects.RhinoObject.UnselectAllSubObjects(self) -> int
Rhino.DocObjects.RhinoObject.[ObsoleteAttribute(self, arg1: Iterable[Rhino.DocObjects.RhinoObject], arg2: bool, arg3: bool) -> None
Rhino.DocObjects.RhinoObject.[ObsoleteAttribute(self, arg1: Iterable[Rhino.DocObjects.RhinoObject], arg2: bool, arg3: bool, arg4: bool, arg5: bool) -> None
Rhino.DocObjects.RhinoObject.[ObsoleteAttribute(self, arg1: Rhino.DocObjects.ViewportInfo, arg2: Rhino.Display.DisplayPipelineAttributes) -> None
Rhino.DocObjects.RhinoObject.[ObsoleteAttribute(self, arg1: Rhino.DocObjects.ViewportInfo, arg2: Rhino.Display.DisplayPipelineAttributes, arg3: Rhino.Geometry.BoundingBox@) -> None
Rhino.DocObjects.RhinoObject.[ObsoleteAttribute(self, arg1: Rhino.DocObjects.ViewportInfo, arg2: bool) -> None
Rhino.DocObjects.RhinoObject.[ObsoleteAttribute(self, arg1: Rhino.DocObjects.ViewportInfo, arg2: bool, arg3: Rhino.Geometry.BoundingBox@) -> None
Rhino.DocObjects.RhinoObject.[ObsoleteAttribute(self, ie: Rhino.DocObjects.ViewportInfo, arg2: Rhino.Display.DisplayPipelineAttributes) -> None
Rhino.DocObjects.RhinoObject.[ObsoleteAttribute(self, ie: Rhino.DocObjects.ViewportInfo, arg2: bool) -> None
Rhino.DocObjects.SectionStyle.GetBoundaryLinetype(self) -> Linetype
Rhino.DocObjects.SectionStyle.RemoveBoundaryLinetype(self) -> None
Rhino.DocObjects.SectionStyle.SetBoundaryLinetype(self, linetype: Rhino.DocObjects.Linetype) -> None
Rhino.DocObjects.SectionStyle.__init__(self) -> None
Rhino.DocObjects.SectionStyle.__init__(self, other: Rhino.DocObjects.SectionStyle) -> None
Rhino.DocObjects.SnapShots.SnapShotsClient.AnimateDocument(self, doc: Rhino.RhinoDoc, dPos: float, archive_start: Rhino.FileIO.BinaryArchiveReader, archive_stop: Rhino.FileIO.BinaryArchiveReader) -> bool
Rhino.DocObjects.SnapShots.SnapShotsClient.AnimateObject(self, doc: Rhino.RhinoDoc, doc_object: Rhino.DocObjects.RhinoObject, transform: Rhino.Geometry.Transform@, dPos: float, archive_start: Rhino.FileIO.BinaryArchiveReader, archive_stop: Rhino.FileIO.BinaryArchiveReader) -> bool
Rhino.DocObjects.SnapShots.SnapShotsClient.AnimationStart(self, doc: Rhino.RhinoDoc, iFrames: int) -> None
Rhino.DocObjects.SnapShots.SnapShotsClient.AnimationStop(self, doc: Rhino.RhinoDoc) -> bool
Rhino.DocObjects.SnapShots.SnapShotsClient.ApplicationCategory() -> str
Rhino.DocObjects.SnapShots.SnapShotsClient.Category(self) -> str
Rhino.DocObjects.SnapShots.SnapShotsClient.ClientId(self) -> Guid
Rhino.DocObjects.SnapShots.SnapShotsClient.Dispose(self) -> None
Rhino.DocObjects.SnapShots.SnapShotsClient.DocumentCategory() -> str
Rhino.DocObjects.SnapShots.SnapShotsClient.ExtendBoundingBoxForDocumentAnimation(self, doc: Rhino.RhinoDoc, archive_start: Rhino.FileIO.BinaryArchiveReader, archive_stop: Rhino.FileIO.BinaryArchiveReader, bbox: Rhino.Geometry.BoundingBox@) -> None
Rhino.DocObjects.SnapShots.SnapShotsClient.ExtendBoundingBoxForObjectAnimation(self, doc: Rhino.RhinoDoc, doc_object: Rhino.DocObjects.RhinoObject, transform: Rhino.Geometry.Transform@, archive_start: Rhino.FileIO.BinaryArchiveReader, archive_stop: Rhino.FileIO.BinaryArchiveReader, bbox: Rhino.Geometry.BoundingBox@) -> None
Rhino.DocObjects.SnapShots.SnapShotsClient.IsCurrentModelStateInAnySnapshot(self, doc: Rhino.RhinoDoc, archive: Rhino.FileIO.BinaryArchiveReader, archive_array: Rhino.Runtime.InteropWrappers.SimpleArrayBinaryArchiveReader, text_log: Rhino.FileIO.TextLog) -> bool
Rhino.DocObjects.SnapShots.SnapShotsClient.IsCurrentModelStateInAnySnapshot(self, doc: Rhino.RhinoDoc, doc_object: Rhino.DocObjects.RhinoObject, archive: Rhino.FileIO.BinaryArchiveReader, archive_array: Rhino.Runtime.InteropWrappers.SimpleArrayBinaryArchiveReader, text_log: Rhino.FileIO.TextLog) -> bool
Rhino.DocObjects.SnapShots.SnapShotsClient.LayersCategory() -> str
Rhino.DocObjects.SnapShots.SnapShotsClient.LightsCategory() -> str
Rhino.DocObjects.SnapShots.SnapShotsClient.Name(self) -> str
Rhino.DocObjects.SnapShots.SnapShotsClient.ObjectTransformNotification(self, doc: Rhino.RhinoDoc, doc_object: Rhino.DocObjects.RhinoObject, transform: Rhino.Geometry.Transform@, archive: Rhino.FileIO.BinaryArchiveReader) -> bool
Rhino.DocObjects.SnapShots.SnapShotsClient.ObjectsCategory() -> str
Rhino.DocObjects.SnapShots.SnapShotsClient.PlugInId(self) -> Guid
Rhino.DocObjects.SnapShots.SnapShotsClient.PrepareForDocumentAnimation(self, doc: Rhino.RhinoDoc, archive_start: Rhino.FileIO.BinaryArchiveReader, archive_stop: Rhino.FileIO.BinaryArchiveReader) -> bool
Rhino.DocObjects.SnapShots.SnapShotsClient.PrepareForObjectAnimation(self, doc: Rhino.RhinoDoc, doc_object: Rhino.DocObjects.RhinoObject, transform: Rhino.Geometry.Transform@, archive_start: Rhino.FileIO.BinaryArchiveReader, archive_stop: Rhino.FileIO.BinaryArchiveReader) -> bool
Rhino.DocObjects.SnapShots.SnapShotsClient.RegisterSnapShotClient(client: Rhino.DocObjects.SnapShots.SnapShotsClient) -> bool
Rhino.DocObjects.SnapShots.SnapShotsClient.RenderingCategory() -> str
Rhino.DocObjects.SnapShots.SnapShotsClient.RestoreDocument(self, doc: Rhino.RhinoDoc, archive: Rhino.FileIO.BinaryArchiveReader) -> bool
Rhino.DocObjects.SnapShots.SnapShotsClient.RestoreObject(self, doc: Rhino.RhinoDoc, doc_object: Rhino.DocObjects.RhinoObject, transform: Rhino.Geometry.Transform@, archive: Rhino.FileIO.BinaryArchiveReader) -> bool
Rhino.DocObjects.SnapShots.SnapShotsClient.SaveDocument(self, doc: Rhino.RhinoDoc, archive: Rhino.FileIO.BinaryArchiveWriter) -> bool
Rhino.DocObjects.SnapShots.SnapShotsClient.SaveObject(self, doc: Rhino.RhinoDoc, doc_object: Rhino.DocObjects.RhinoObject, transform: Rhino.Geometry.Transform@, archive: Rhino.FileIO.BinaryArchiveWriter) -> bool
Rhino.DocObjects.SnapShots.SnapShotsClient.SnapshotRestored(self, doc: Rhino.RhinoDoc) -> None
Rhino.DocObjects.SnapShots.SnapShotsClient.SupportsAnimation(self) -> bool
Rhino.DocObjects.SnapShots.SnapShotsClient.SupportsDocument(self) -> bool
Rhino.DocObjects.SnapShots.SnapShotsClient.SupportsObject(self, doc_object: Rhino.DocObjects.RhinoObject) -> bool
Rhino.DocObjects.SnapShots.SnapShotsClient.SupportsObjects(self) -> bool
Rhino.DocObjects.SnapShots.SnapShotsClient.ViewsCategory() -> str
Rhino.DocObjects.SnapShots.SnapShotsClient.__init__(self) -> None
Rhino.DocObjects.SurfaceObject.DuplicateSurfaceGeometry(self) -> Surface
Rhino.DocObjects.Tables.BitmapTable.AddBitmap(self, bitmapFilename: str, replaceExisting: bool) -> int
Rhino.DocObjects.Tables.BitmapTable.Delete(self, item: Rhino.DocObjects.BitmapEntry) -> bool
Rhino.DocObjects.Tables.BitmapTable.DeleteBitmap(self, bitmapFilename: str) -> bool
Rhino.DocObjects.Tables.BitmapTable.ExportToFile(self, index: int, path: str) -> bool
Rhino.DocObjects.Tables.BitmapTable.ExportToFiles(self, directoryPath: str, overwrite: int) -> int
Rhino.DocObjects.Tables.BitmapTable.Find(self, name: str, createFile: bool, fileName: System.String@) -> BitmapEntry
Rhino.DocObjects.Tables.BitmapTable.FindIndex(self, index: int) -> BitmapEntry
Rhino.DocObjects.Tables.DimStyleTable.Add(self, dimstyle: Rhino.DocObjects.DimensionStyle, reference: bool) -> int
Rhino.DocObjects.Tables.DimStyleTable.Add(self, name: str) -> int
Rhino.DocObjects.Tables.DimStyleTable.Add(self, name: str, reference: bool) -> int
Rhino.DocObjects.Tables.DimStyleTable.Delete(self, index: int, quiet: bool) -> bool
Rhino.DocObjects.Tables.DimStyleTable.Delete(self, item: Rhino.DocObjects.DimensionStyle) -> bool
Rhino.DocObjects.Tables.DimStyleTable.Find(self, styleId: System.Guid, ignoreDeleted: bool) -> DimensionStyle
Rhino.DocObjects.Tables.DimStyleTable.FindIndex(self, index: int) -> DimensionStyle
Rhino.DocObjects.Tables.DimStyleTable.FindName(self, name: str) -> DimensionStyle
Rhino.DocObjects.Tables.DimStyleTable.FindRoot(self, styleId: System.Guid, ignoreDeleted: bool) -> DimensionStyle
Rhino.DocObjects.Tables.DimStyleTable.GetEnumerator(self) -> IEnumerator<DimensionStyle>
Rhino.DocObjects.Tables.DimStyleTable.GetUnusedStyleName(self) -> str
Rhino.DocObjects.Tables.DimStyleTable.GetUnusedStyleName(self, rootName: str) -> str
Rhino.DocObjects.Tables.DimStyleTable.Modify(self, dimstyle: Rhino.DocObjects.DimensionStyle, annotation: Rhino.Geometry.AnnotationBase) -> ModifyType
Rhino.DocObjects.Tables.DimStyleTable.Modify(self, newSettings: Rhino.DocObjects.DimensionStyle, dimstyleId: System.Guid, quiet: bool) -> bool
Rhino.DocObjects.Tables.DimStyleTable.Modify(self, newSettings: Rhino.DocObjects.DimensionStyle, dimstyleIndex: int, quiet: bool) -> bool
Rhino.DocObjects.Tables.DimStyleTable.SetCurrent(self, index: int, quiet: bool) -> bool
Rhino.DocObjects.Tables.DimStyleTable.[ObsoleteAttribute(self, arg1: int, arg2: bool) -> None
Rhino.DocObjects.Tables.DimStyleTable.[ObsoleteAttribute(self, arg1: str, arg2: bool) -> None
Rhino.DocObjects.Tables.FontTable.FindOrCreate(self, face: str, bold: bool, italic: bool) -> int
Rhino.DocObjects.Tables.FontTable.FindOrCreate(self, face: str, bold: bool, italic: bool, template_style: Rhino.DocObjects.DimensionStyle) -> int
Rhino.DocObjects.Tables.FontTable.GetEnumerator(self) -> IEnumerator<Font>
Rhino.DocObjects.Tables.GroupTable.Add(self) -> int
Rhino.DocObjects.Tables.GroupTable.Add(self, groupName: str) -> int
Rhino.DocObjects.Tables.GroupTable.Add(self, groupName: str, objectIds: Iterable[System.Guid]) -> int
Rhino.DocObjects.Tables.GroupTable.Add(self, objectIds: Iterable[System.Guid]) -> int
Rhino.DocObjects.Tables.GroupTable.AddToGroup(self, groupIndex: int, objectId: System.Guid) -> bool
Rhino.DocObjects.Tables.GroupTable.AddToGroup(self, groupIndex: int, objectIds: Iterable[System.Guid]) -> bool
Rhino.DocObjects.Tables.GroupTable.ChangeGroupName(self, groupIndex: int, newName: str) -> bool
Rhino.DocObjects.Tables.GroupTable.Delete(self, groupIndex: int) -> bool
Rhino.DocObjects.Tables.GroupTable.Delete(self, item: Rhino.DocObjects.Group) -> bool
Rhino.DocObjects.Tables.GroupTable.FindIndex(self, index: int) -> Group
Rhino.DocObjects.Tables.GroupTable.FindName(self, name: str) -> Group
Rhino.DocObjects.Tables.GroupTable.FindNameHash(self, nameHash: Rhino.FileIO.NameHash) -> Group
Rhino.DocObjects.Tables.GroupTable.GroupMembers(self, groupIndex: int) -> List[RhinoObject]
Rhino.DocObjects.Tables.GroupTable.GroupName(self, groupIndex: int) -> str
Rhino.DocObjects.Tables.GroupTable.GroupNames(self, ignoreDeletedGroups: bool) -> List[str]
Rhino.DocObjects.Tables.GroupTable.GroupObjectCount(self, groupIndex: int) -> int
Rhino.DocObjects.Tables.GroupTable.Hide(self, groupIndex: int) -> int
Rhino.DocObjects.Tables.GroupTable.IsDeleted(self, groupIndex: int) -> bool
Rhino.DocObjects.Tables.GroupTable.Lock(self, groupIndex: int) -> int
Rhino.DocObjects.Tables.GroupTable.RemapObjects(self, rhinoObjects: Iterable[Rhino.DocObjects.RhinoObject]) -> int
Rhino.DocObjects.Tables.GroupTable.RemapObjects(self, rhinoObjects: Iterable[Rhino.DocObjects.RhinoObject], indexMap: System.Collections.Generic.Dictionary{System.Int32,System.Int32}@) -> int
Rhino.DocObjects.Tables.GroupTable.Show(self, groupIndex: int) -> int
Rhino.DocObjects.Tables.GroupTable.Undelete(self, groupIndex: int) -> bool
Rhino.DocObjects.Tables.GroupTable.Unlock(self, groupIndex: int) -> int
Rhino.DocObjects.Tables.HatchPatternTable.Add(self, pattern: Rhino.DocObjects.HatchPattern) -> int
Rhino.DocObjects.Tables.HatchPatternTable.Delete(self, hatchPatternIndex: int) -> bool
Rhino.DocObjects.Tables.HatchPatternTable.Delete(self, hatchPatternIndex: int, quiet: bool) -> bool
Rhino.DocObjects.Tables.HatchPatternTable.Delete(self, item: Rhino.DocObjects.HatchPattern) -> bool
Rhino.DocObjects.Tables.HatchPatternTable.Delete(self, item: Rhino.DocObjects.HatchPattern, quiet: bool) -> bool
Rhino.DocObjects.Tables.HatchPatternTable.FindIndex(self, index: int) -> HatchPattern
Rhino.DocObjects.Tables.HatchPatternTable.FindName(self, name: str) -> HatchPattern
Rhino.DocObjects.Tables.HatchPatternTable.FindNameHash(self, nameHash: Rhino.FileIO.NameHash) -> HatchPattern
Rhino.DocObjects.Tables.HatchPatternTable.Modify(self, hatchPattern: Rhino.DocObjects.HatchPattern, hatchPatternIndex: int, quiet: bool) -> bool
Rhino.DocObjects.Tables.HatchPatternTable.Rename(self, hatchPatternIndex: int, hatchPatternName: str) -> bool
Rhino.DocObjects.Tables.HatchPatternTable.Rename(self, item: Rhino.DocObjects.HatchPattern, hatchPatternName: str) -> bool
Rhino.DocObjects.Tables.HatchPatternTable.[ObsoleteAttribute(self, arg1: str, arg2: bool) -> None
Rhino.DocObjects.Tables.InstanceDefinitionTable.Add(self, name: str, description: str, basePoint: Rhino.Geometry.Point3d, geometry: Iterable[Rhino.Geometry.GeometryBase]) -> int
Rhino.DocObjects.Tables.InstanceDefinitionTable.Add(self, name: str, description: str, basePoint: Rhino.Geometry.Point3d, geometry: Iterable[Rhino.Geometry.GeometryBase], attributes: Iterable[Rhino.DocObjects.ObjectAttributes]) -> int
Rhino.DocObjects.Tables.InstanceDefinitionTable.Add(self, name: str, description: str, basePoint: Rhino.Geometry.Point3d, geometry: Rhino.Geometry.GeometryBase, attributes: Rhino.DocObjects.ObjectAttributes) -> int
Rhino.DocObjects.Tables.InstanceDefinitionTable.Add(self, name: str, description: str, url: str, urlTag: str, basePoint: Rhino.Geometry.Point3d, geometry: Iterable[Rhino.Geometry.GeometryBase], attributes: Iterable[Rhino.DocObjects.ObjectAttributes]) -> int
Rhino.DocObjects.Tables.InstanceDefinitionTable.Compact(self, ignoreUndoReferences: bool) -> None
Rhino.DocObjects.Tables.InstanceDefinitionTable.Delete(self, idefIndex: int, deleteReferences: bool, quiet: bool) -> bool
Rhino.DocObjects.Tables.InstanceDefinitionTable.Delete(self, item: Rhino.DocObjects.InstanceDefinition) -> bool
Rhino.DocObjects.Tables.InstanceDefinitionTable.DestroySourceArchive(self, definition: Rhino.DocObjects.InstanceDefinition, quiet: bool) -> bool
Rhino.DocObjects.Tables.InstanceDefinitionTable.Find(self, instanceDefinitionName: str) -> InstanceDefinition
Rhino.DocObjects.Tables.InstanceDefinitionTable.Find(self, instanceId: System.Guid, ignoreDeletedInstanceDefinitions: bool) -> InstanceDefinition
Rhino.DocObjects.Tables.InstanceDefinitionTable.GetEnumerator(self) -> IEnumerator<InstanceDefinition>
Rhino.DocObjects.Tables.InstanceDefinitionTable.GetList(self, ignoreDeleted: bool) -> List[InstanceDefinition]
Rhino.DocObjects.Tables.InstanceDefinitionTable.GetUnusedInstanceDefinitionName(self) -> str
Rhino.DocObjects.Tables.InstanceDefinitionTable.GetUnusedInstanceDefinitionName(self, root: str) -> str
Rhino.DocObjects.Tables.InstanceDefinitionTable.InstanceDefinitionIndex(self, instanceId: System.Guid, ignoreDeletedInstanceDefinitions: bool) -> int
Rhino.DocObjects.Tables.InstanceDefinitionTable.Modify(self, idef: Rhino.DocObjects.InstanceDefinition, newName: str, newDescription: str, newUrl: str, newUrlTag: str, quiet: bool) -> bool
Rhino.DocObjects.Tables.InstanceDefinitionTable.Modify(self, idef: Rhino.DocObjects.InstanceDefinition, newName: str, newDescription: str, quiet: bool) -> bool
Rhino.DocObjects.Tables.InstanceDefinitionTable.Modify(self, idefIndex: int, newName: str, newDescription: str, newUrl: str, newUrlTag: str, quiet: bool) -> bool
Rhino.DocObjects.Tables.InstanceDefinitionTable.Modify(self, idefIndex: int, newName: str, newDescription: str, quiet: bool) -> bool
Rhino.DocObjects.Tables.InstanceDefinitionTable.Modify(self, idefIndex: int, userData: Rhino.DocObjects.Custom.UserData, quiet: bool) -> bool
Rhino.DocObjects.Tables.InstanceDefinitionTable.ModifyGeometry(self, idefIndex: int, newGeometry: Iterable[Rhino.Geometry.GeometryBase]) -> bool
Rhino.DocObjects.Tables.InstanceDefinitionTable.ModifyGeometry(self, idefIndex: int, newGeometry: Iterable[Rhino.Geometry.GeometryBase], newAttributes: Iterable[Rhino.DocObjects.ObjectAttributes]) -> bool
Rhino.DocObjects.Tables.InstanceDefinitionTable.ModifyGeometry(self, idefIndex: int, newGeometry: Rhino.Geometry.GeometryBase, newAttributes: Rhino.DocObjects.ObjectAttributes) -> bool
Rhino.DocObjects.Tables.InstanceDefinitionTable.ModifySourceArchive(self, idefIndex: int, sourceArchive: Rhino.FileIO.FileReference, updateType: Rhino.DocObjects.InstanceDefinitionUpdateType, quiet: bool) -> bool
Rhino.DocObjects.Tables.InstanceDefinitionTable.Purge(self, idefIndex: int) -> bool
Rhino.DocObjects.Tables.InstanceDefinitionTable.RefreshLinkedBlock(self, definition: Rhino.DocObjects.InstanceDefinition) -> bool
Rhino.DocObjects.Tables.InstanceDefinitionTable.Undelete(self, idefIndex: int) -> bool
Rhino.DocObjects.Tables.InstanceDefinitionTable.UndoModify(self, idefIndex: int) -> bool
Rhino.DocObjects.Tables.InstanceDefinitionTable.UpdateLinkedInstanceDefinition(self, idefIndex: int, filename: str, updateNestedLinks: bool, quiet: bool) -> bool
Rhino.DocObjects.Tables.InstanceDefinitionTable.[ObsoleteAttribute(self, arg1: Rhino.DocObjects.InstanceDefinition, arg2: bool, arg3: bool) -> None
Rhino.DocObjects.Tables.InstanceDefinitionTable.[ObsoleteAttribute(self, arg1: str, arg2: System.UInt32) -> None
Rhino.DocObjects.Tables.InstanceDefinitionTable.[ObsoleteAttribute(self, arg1: str, arg2: bool) -> None
Rhino.DocObjects.Tables.LayerTable.Add(self) -> int
Rhino.DocObjects.Tables.LayerTable.Add(self, layer: Rhino.DocObjects.Layer) -> int
Rhino.DocObjects.Tables.LayerTable.Add(self, layerName: str, layerColor: System.Drawing.Color) -> int
Rhino.DocObjects.Tables.LayerTable.AddPath(self, layerPath: str) -> int
Rhino.DocObjects.Tables.LayerTable.AddPath(self, layerPath: str, layerColor: System.Drawing.Color) -> int
Rhino.DocObjects.Tables.LayerTable.AddReferenceLayer(self) -> int
Rhino.DocObjects.Tables.LayerTable.AddReferenceLayer(self, layer: Rhino.DocObjects.Layer) -> int
Rhino.DocObjects.Tables.LayerTable.CreateLayer(self, arg1: Rhino.DocObjects.Layer, arg2: Rhino.DocObjects.Tables.LayerTable.LayerType, arg3: System.UInt32, arg4: System.UInt32) -> int
Rhino.DocObjects.Tables.LayerTable.Delete(self, layer: Rhino.DocObjects.Layer) -> bool
Rhino.DocObjects.Tables.LayerTable.Delete(self, layer: Rhino.DocObjects.Layer, quiet: bool) -> bool
Rhino.DocObjects.Tables.LayerTable.Delete(self, layerId: System.Guid, quiet: bool) -> bool
Rhino.DocObjects.Tables.LayerTable.Delete(self, layerIndex: int, quiet: bool) -> bool
Rhino.DocObjects.Tables.LayerTable.Delete(self, layerIndices: Iterable[int], quiet: bool) -> int
Rhino.DocObjects.Tables.LayerTable.Duplicate(self, layerIndex: int, duplicateObjects: bool, duplicateSublayers: bool) -> List[int]
Rhino.DocObjects.Tables.LayerTable.Duplicate(self, layerIndices: Iterable[int], duplicateObjects: bool, duplicateSublayers: bool) -> List[int]
Rhino.DocObjects.Tables.LayerTable.FindByFullPath(self, layerPath: str, notFoundReturnValue: int) -> int
Rhino.DocObjects.Tables.LayerTable.FindIndex(self, index: int) -> Layer
Rhino.DocObjects.Tables.LayerTable.FindName(self, layerName: str) -> Layer
Rhino.DocObjects.Tables.LayerTable.FindName(self, layerName: str, startIndex: int) -> Layer
Rhino.DocObjects.Tables.LayerTable.FindNameHash(self, nameHash: Rhino.FileIO.NameHash) -> Layer
Rhino.DocObjects.Tables.LayerTable.ForceLayerVisible(self, layerId: System.Guid) -> bool
Rhino.DocObjects.Tables.LayerTable.ForceLayerVisible(self, layerIndex: int) -> bool
Rhino.DocObjects.Tables.LayerTable.GetEnumerator(self) -> IEnumerator<Layer>
Rhino.DocObjects.Tables.LayerTable.GetSelected(self, layerIndices: System.Collections.Generic.List{System.Int32}@) -> bool
Rhino.DocObjects.Tables.LayerTable.GetSorted(self) -> List[int]
Rhino.DocObjects.Tables.LayerTable.GetUnusedLayerName(self) -> str
Rhino.DocObjects.Tables.LayerTable.Modify(self, newSettings: Rhino.DocObjects.Layer, layerId: System.Guid, quiet: bool) -> bool
Rhino.DocObjects.Tables.LayerTable.Modify(self, newSettings: Rhino.DocObjects.Layer, layerIndex: int, quiet: bool) -> bool
Rhino.DocObjects.Tables.LayerTable.Purge(self, layerId: System.Guid, quiet: bool) -> bool
Rhino.DocObjects.Tables.LayerTable.Purge(self, layerIndex: int, quiet: bool) -> bool
Rhino.DocObjects.Tables.LayerTable.Select(self, layerIndices: Iterable[int], bDeselect: bool) -> bool
Rhino.DocObjects.Tables.LayerTable.SetCurrentLayerIndex(self, layerIndex: int, quiet: bool) -> bool
Rhino.DocObjects.Tables.LayerTable.Sort(self, layerIndices: Iterable[int]) -> None
Rhino.DocObjects.Tables.LayerTable.SortByLayerName(self, bAscending: bool) -> None
Rhino.DocObjects.Tables.LayerTable.Undelete(self, layerIndex: int) -> bool
Rhino.DocObjects.Tables.LayerTable.UndoModify(self, layerId: System.Guid) -> bool
Rhino.DocObjects.Tables.LayerTable.UndoModify(self, layerId: System.Guid, undoRecordSerialNumber: System.UInt32) -> bool
Rhino.DocObjects.Tables.LayerTable.UndoModify(self, layerIndex: int) -> bool
Rhino.DocObjects.Tables.LayerTable.UndoModify(self, layerIndex: int, undoRecordSerialNumber: System.UInt32) -> bool
Rhino.DocObjects.Tables.LayerTable.[ObsoleteAttribute(self, arg1: bool) -> None
Rhino.DocObjects.Tables.LightTable.Add(self, light: Rhino.Geometry.Light) -> int
Rhino.DocObjects.Tables.LightTable.Add(self, light: Rhino.Geometry.Light, attributes: Rhino.DocObjects.ObjectAttributes) -> int
Rhino.DocObjects.Tables.LightTable.Delete(self, index: int, quiet: bool) -> bool
Rhino.DocObjects.Tables.LightTable.Delete(self, item: Rhino.DocObjects.LightObject) -> bool
Rhino.DocObjects.Tables.LightTable.Find(self, id: System.Guid, ignoreDeleted: bool) -> int
Rhino.DocObjects.Tables.LightTable.FindIndex(self, index: int) -> LightObject
Rhino.DocObjects.Tables.LightTable.FindName(self, name: str) -> LightObject
Rhino.DocObjects.Tables.LightTable.FindNameHash(self, nameHash: Rhino.FileIO.NameHash) -> LightObject
Rhino.DocObjects.Tables.LightTable.GetEnumerator(self) -> IEnumerator<LightObject>
Rhino.DocObjects.Tables.LightTable.Modify(self, id: System.Guid, light: Rhino.Geometry.Light) -> bool
Rhino.DocObjects.Tables.LightTable.Modify(self, index: int, light: Rhino.Geometry.Light) -> bool
Rhino.DocObjects.Tables.LightTable.Undelete(self, index: int) -> bool
Rhino.DocObjects.Tables.LinetypeTable.Add(self, linetype: Rhino.DocObjects.Linetype) -> int
Rhino.DocObjects.Tables.LinetypeTable.Add(self, name: str, segmentLengths: Iterable[float]) -> int
Rhino.DocObjects.Tables.LinetypeTable.AddReferenceLinetype(self, linetype: Rhino.DocObjects.Linetype) -> int
Rhino.DocObjects.Tables.LinetypeTable.Delete(self, index: int, quiet: bool) -> bool
Rhino.DocObjects.Tables.LinetypeTable.Delete(self, indices: Iterable[int], quiet: bool) -> bool
Rhino.DocObjects.Tables.LinetypeTable.Delete(self, item: Rhino.DocObjects.Linetype) -> bool
Rhino.DocObjects.Tables.LinetypeTable.Find(self, id: System.Guid, ignoreDeletedLinetypes: bool) -> int
Rhino.DocObjects.Tables.LinetypeTable.Find(self, name: str) -> int
Rhino.DocObjects.Tables.LinetypeTable.FindIndex(self, index: int) -> Linetype
Rhino.DocObjects.Tables.LinetypeTable.FindName(self, name: str) -> Linetype
Rhino.DocObjects.Tables.LinetypeTable.GetEnumerator(self) -> IEnumerator<Linetype>
Rhino.DocObjects.Tables.LinetypeTable.GetUnusedLinetypeName(self) -> str
Rhino.DocObjects.Tables.LinetypeTable.LinetypeIndexForObject(self, rhinoObject: Rhino.DocObjects.RhinoObject) -> int
Rhino.DocObjects.Tables.LinetypeTable.LoadDefaultLinetypes(self) -> int
Rhino.DocObjects.Tables.LinetypeTable.LoadDefaultLinetypes(self, ignoreDeleted: bool) -> int
Rhino.DocObjects.Tables.LinetypeTable.Modify(self, linetype: Rhino.DocObjects.Linetype, index: int, quiet: bool) -> bool
Rhino.DocObjects.Tables.LinetypeTable.SetCurrentLinetypeIndex(self, linetypeIndex: int, quiet: bool) -> bool
Rhino.DocObjects.Tables.LinetypeTable.Undelete(self, index: int) -> bool
Rhino.DocObjects.Tables.LinetypeTable.UndoModify(self, index: int) -> bool
Rhino.DocObjects.Tables.LinetypeTable.[ObsoleteAttribute(self, arg1: bool) -> None
Rhino.DocObjects.Tables.MaterialTable.Add(self) -> int
Rhino.DocObjects.Tables.MaterialTable.Add(self, material: Rhino.DocObjects.Material) -> int
Rhino.DocObjects.Tables.MaterialTable.Add(self, material: Rhino.DocObjects.Material, reference: bool) -> int
Rhino.DocObjects.Tables.MaterialTable.Delete(self, item: Rhino.DocObjects.Material) -> bool
Rhino.DocObjects.Tables.MaterialTable.DeleteAt(self, materialIndex: int) -> bool
Rhino.DocObjects.Tables.MaterialTable.Find(self, material: Rhino.DocObjects.Material, ignoreDeletedMaterials: bool) -> int
Rhino.DocObjects.Tables.MaterialTable.Find(self, materialId: System.Guid, ignoreDeletedMaterials: bool) -> int
Rhino.DocObjects.Tables.MaterialTable.Find(self, materialName: str, ignoreDeletedMaterials: bool) -> int
Rhino.DocObjects.Tables.MaterialTable.FindIndex(self, index: int) -> Material
Rhino.DocObjects.Tables.MaterialTable.Modify(self, newSettings: Rhino.DocObjects.Material, materialIndex: int, quiet: bool) -> bool
Rhino.DocObjects.Tables.MaterialTable.ResetMaterial(self, materialIndex: int) -> bool
Rhino.DocObjects.Tables.NamedConstructionPlaneTable.Add(self, constructionPlane: Rhino.DocObjects.ConstructionPlane) -> int
Rhino.DocObjects.Tables.NamedConstructionPlaneTable.Add(self, name: str, plane: Rhino.Geometry.Plane) -> int
Rhino.DocObjects.Tables.NamedConstructionPlaneTable.Delete(self, index: int) -> bool
Rhino.DocObjects.Tables.NamedConstructionPlaneTable.Delete(self, name: str) -> bool
Rhino.DocObjects.Tables.NamedConstructionPlaneTable.Find(self, name: str) -> int
Rhino.DocObjects.Tables.NamedConstructionPlaneTable.GetEnumerator(self) -> IEnumerator<ConstructionPlane>
Rhino.DocObjects.Tables.NamedLayerStateTable.Delete(self, name: str) -> bool
Rhino.DocObjects.Tables.NamedLayerStateTable.FindName(self, name: str) -> int
Rhino.DocObjects.Tables.NamedLayerStateTable.Import(self, filename: str) -> int
Rhino.DocObjects.Tables.NamedLayerStateTable.Rename(self, oldName: str, newName: str) -> bool
Rhino.DocObjects.Tables.NamedLayerStateTable.Restore(self, name: str, properties: Rhino.DocObjects.Tables.RestoreLayerProperties) -> bool
Rhino.DocObjects.Tables.NamedLayerStateTable.Restore(self, name: str, properties: Rhino.DocObjects.Tables.RestoreLayerProperties, viewportId: System.Guid) -> bool
Rhino.DocObjects.Tables.NamedLayerStateTable.Save(self, name: str) -> int
Rhino.DocObjects.Tables.NamedLayerStateTable.Save(self, name: str, viewportId: System.Guid) -> int
Rhino.DocObjects.Tables.NamedPositionTable.Append(self, id: System.Guid, objectIds: Iterable[System.Guid]) -> bool
Rhino.DocObjects.Tables.NamedPositionTable.Append(self, id: System.Guid, objects: Iterable[Rhino.DocObjects.RhinoObject]) -> bool
Rhino.DocObjects.Tables.NamedPositionTable.Append(self, name: str, objectIds: Iterable[System.Guid]) -> bool
Rhino.DocObjects.Tables.NamedPositionTable.Append(self, name: str, objects: Iterable[Rhino.DocObjects.RhinoObject]) -> bool
Rhino.DocObjects.Tables.NamedPositionTable.Delete(self, id: System.Guid) -> bool
Rhino.DocObjects.Tables.NamedPositionTable.Delete(self, name: str) -> bool
Rhino.DocObjects.Tables.NamedPositionTable.Id(self, name: str) -> Guid
Rhino.DocObjects.Tables.NamedPositionTable.Name(self, id: System.Guid) -> str
Rhino.DocObjects.Tables.NamedPositionTable.ObjectIds(self, id: System.Guid) -> List[Guid]
Rhino.DocObjects.Tables.NamedPositionTable.ObjectIds(self, name: str) -> List[Guid]
Rhino.DocObjects.Tables.NamedPositionTable.ObjectXform(self, id: System.Guid, obj: Rhino.DocObjects.RhinoObject, xform: Rhino.Geometry.Transform@) -> bool
Rhino.DocObjects.Tables.NamedPositionTable.ObjectXform(self, id: System.Guid, objId: System.Guid, xform: Rhino.Geometry.Transform@) -> bool
Rhino.DocObjects.Tables.NamedPositionTable.Objects(self, id: System.Guid) -> List[RhinoObject]
Rhino.DocObjects.Tables.NamedPositionTable.Objects(self, name: str) -> List[RhinoObject]
Rhino.DocObjects.Tables.NamedPositionTable.Rename(self, id: System.Guid, name: str) -> bool
Rhino.DocObjects.Tables.NamedPositionTable.Rename(self, oldName: str, name: str) -> bool
Rhino.DocObjects.Tables.NamedPositionTable.Restore(self, id: System.Guid) -> bool
Rhino.DocObjects.Tables.NamedPositionTable.Restore(self, name: str) -> bool
Rhino.DocObjects.Tables.NamedPositionTable.Save(self, name: str, objectIds: Iterable[System.Guid]) -> Guid
Rhino.DocObjects.Tables.NamedPositionTable.Save(self, name: str, objects: Iterable[Rhino.DocObjects.RhinoObject]) -> Guid
Rhino.DocObjects.Tables.NamedPositionTable.Update(self, id: System.Guid) -> bool
Rhino.DocObjects.Tables.NamedPositionTable.Update(self, name: str) -> bool
Rhino.DocObjects.Tables.NamedViewTable.Add(self, name: str, viewportId: System.Guid) -> int
Rhino.DocObjects.Tables.NamedViewTable.Add(self, view: Rhino.DocObjects.ViewInfo) -> int
Rhino.DocObjects.Tables.NamedViewTable.Delete(self, index: int) -> bool
Rhino.DocObjects.Tables.NamedViewTable.Delete(self, name: str) -> bool
Rhino.DocObjects.Tables.NamedViewTable.FindByName(self, name: str) -> int
Rhino.DocObjects.Tables.NamedViewTable.GetEnumerator(self) -> IEnumerator<ViewInfo>
Rhino.DocObjects.Tables.NamedViewTable.Rename(self, index: int, newName: str) -> bool
Rhino.DocObjects.Tables.NamedViewTable.Rename(self, oldName: str, newName: str) -> bool
Rhino.DocObjects.Tables.NamedViewTable.Restore(self, index: int, viewport: Rhino.Display.RhinoViewport) -> bool
Rhino.DocObjects.Tables.NamedViewTable.RestoreAnimatedConstantSpeed(self, index: int, viewport: Rhino.Display.RhinoViewport, units_per_frame: float, ms_delay: int) -> bool
Rhino.DocObjects.Tables.NamedViewTable.RestoreAnimatedConstantTime(self, index: int, viewport: Rhino.Display.RhinoViewport, frames: int, ms_delay: int) -> bool
Rhino.DocObjects.Tables.NamedViewTable.RestoreWithAspectRatio(self, index: int, viewport: Rhino.Display.RhinoViewport) -> bool
Rhino.DocObjects.Tables.NamedViewTable.[ObsoleteAttribute(self, arg1: int, arg2: Rhino.Display.RhinoView, arg3: bool) -> None
Rhino.DocObjects.Tables.NamedViewTable.[ObsoleteAttribute(self, arg1: int, arg2: Rhino.Display.RhinoView, arg3: bool) -> None
Rhino.DocObjects.Tables.NamedViewTable.[ObsoleteAttribute(self, arg1: int, arg2: Rhino.Display.RhinoView, arg3: bool, arg4: int, arg5: int) -> None
Rhino.DocObjects.Tables.NamedViewTable.[ObsoleteAttribute(self, arg1: int, arg2: Rhino.Display.RhinoViewport, arg3: bool) -> None
Rhino.DocObjects.Tables.NamedViewTable.[ObsoleteAttribute(self, arg1: int, arg2: Rhino.Display.RhinoViewport, arg3: bool) -> None
Rhino.DocObjects.Tables.NamedViewTable.[ObsoleteAttribute(self, arg1: int, arg2: Rhino.Display.RhinoViewport, arg3: bool, arg4: int, arg5: int) -> None
Rhino.DocObjects.Tables.ObjectTable.Add(self, geometry: Rhino.Geometry.GeometryBase) -> Guid
Rhino.DocObjects.Tables.ObjectTable.Add(self, geometry: Rhino.Geometry.GeometryBase, attributes: Rhino.DocObjects.ObjectAttributes) -> Guid
Rhino.DocObjects.Tables.ObjectTable.Add(self, geometry: Rhino.Geometry.GeometryBase, attributes: Rhino.DocObjects.ObjectAttributes, history: Rhino.DocObjects.HistoryRecord, reference: bool) -> Guid
Rhino.DocObjects.Tables.ObjectTable.AddAngularDimension(self, dimension: Rhino.Geometry.AngularDimension) -> Guid
Rhino.DocObjects.Tables.ObjectTable.AddAngularDimension(self, dimension: Rhino.Geometry.AngularDimension, attributes: Rhino.DocObjects.ObjectAttributes) -> Guid
Rhino.DocObjects.Tables.ObjectTable.AddAngularDimension(self, dimension: Rhino.Geometry.AngularDimension, attributes: Rhino.DocObjects.ObjectAttributes, history: Rhino.DocObjects.HistoryRecord, reference: bool) -> Guid
Rhino.DocObjects.Tables.ObjectTable.AddArc(self, arc: Rhino.Geometry.Arc) -> Guid
Rhino.DocObjects.Tables.ObjectTable.AddArc(self, arc: Rhino.Geometry.Arc, attributes: Rhino.DocObjects.ObjectAttributes) -> Guid
Rhino.DocObjects.Tables.ObjectTable.AddArc(self, arc: Rhino.Geometry.Arc, attributes: Rhino.DocObjects.ObjectAttributes, history: Rhino.DocObjects.HistoryRecord, reference: bool) -> Guid
Rhino.DocObjects.Tables.ObjectTable.AddBox(self, box: Rhino.Geometry.Box) -> Guid
Rhino.DocObjects.Tables.ObjectTable.AddBox(self, box: Rhino.Geometry.Box, attributes: Rhino.DocObjects.ObjectAttributes) -> Guid
Rhino.DocObjects.Tables.ObjectTable.AddBox(self, box: Rhino.Geometry.Box, attributes: Rhino.DocObjects.ObjectAttributes, history: Rhino.DocObjects.HistoryRecord, reference: bool) -> Guid
Rhino.DocObjects.Tables.ObjectTable.AddBrep(self, brep: Rhino.Geometry.Brep) -> Guid
Rhino.DocObjects.Tables.ObjectTable.AddBrep(self, brep: Rhino.Geometry.Brep, attributes: Rhino.DocObjects.ObjectAttributes) -> Guid
Rhino.DocObjects.Tables.ObjectTable.AddBrep(self, brep: Rhino.Geometry.Brep, attributes: Rhino.DocObjects.ObjectAttributes, history: Rhino.DocObjects.HistoryRecord, reference: bool) -> Guid
Rhino.DocObjects.Tables.ObjectTable.AddBrep(self, brep: Rhino.Geometry.Brep, attributes: Rhino.DocObjects.ObjectAttributes, history: Rhino.DocObjects.HistoryRecord, reference: bool, splitKinkySurfaces: bool) -> Guid
Rhino.DocObjects.Tables.ObjectTable.AddCentermark(self, centermark: Rhino.Geometry.Centermark, attributes: Rhino.DocObjects.ObjectAttributes, history: Rhino.DocObjects.HistoryRecord, reference: bool) -> Guid
Rhino.DocObjects.Tables.ObjectTable.AddCircle(self, circle: Rhino.Geometry.Circle) -> Guid
Rhino.DocObjects.Tables.ObjectTable.AddCircle(self, circle: Rhino.Geometry.Circle, attributes: Rhino.DocObjects.ObjectAttributes) -> Guid
Rhino.DocObjects.Tables.ObjectTable.AddCircle(self, circle: Rhino.Geometry.Circle, attributes: Rhino.DocObjects.ObjectAttributes, history: Rhino.DocObjects.HistoryRecord, reference: bool) -> Guid
Rhino.DocObjects.Tables.ObjectTable.AddClippingPlane(self, plane: Rhino.Geometry.Plane, uMagnitude: float, vMagnitude: float, clippedViewportId: System.Guid) -> Guid
Rhino.DocObjects.Tables.ObjectTable.AddClippingPlane(self, plane: Rhino.Geometry.Plane, uMagnitude: float, vMagnitude: float, clippedViewportId: System.Guid, attributes: Rhino.DocObjects.ObjectAttributes, history: Rhino.DocObjects.HistoryRecord, reference: bool) -> Guid
Rhino.DocObjects.Tables.ObjectTable.AddClippingPlane(self, plane: Rhino.Geometry.Plane, uMagnitude: float, vMagnitude: float, clippedViewportIds: Iterable[System.Guid]) -> Guid
Rhino.DocObjects.Tables.ObjectTable.AddClippingPlane(self, plane: Rhino.Geometry.Plane, uMagnitude: float, vMagnitude: float, clippedViewportIds: Iterable[System.Guid], attributes: Rhino.DocObjects.ObjectAttributes) -> Guid
Rhino.DocObjects.Tables.ObjectTable.AddClippingPlane(self, plane: Rhino.Geometry.Plane, uMagnitude: float, vMagnitude: float, clippedViewportIds: Iterable[System.Guid], attributes: Rhino.DocObjects.ObjectAttributes, history: Rhino.DocObjects.HistoryRecord, reference: bool) -> Guid
Rhino.DocObjects.Tables.ObjectTable.AddClippingPlaneSurface(self, clippingPlane: Rhino.Geometry.ClippingPlaneSurface, attributes: Rhino.DocObjects.ObjectAttributes, history: Rhino.DocObjects.HistoryRecord, reference: bool) -> Guid
Rhino.DocObjects.Tables.ObjectTable.AddCurve(self, curve: Rhino.Geometry.Curve) -> Guid
Rhino.DocObjects.Tables.ObjectTable.AddCurve(self, curve: Rhino.Geometry.Curve, attributes: Rhino.DocObjects.ObjectAttributes) -> Guid
Rhino.DocObjects.Tables.ObjectTable.AddCurve(self, curve: Rhino.Geometry.Curve, attributes: Rhino.DocObjects.ObjectAttributes, history: Rhino.DocObjects.HistoryRecord, reference: bool) -> Guid
Rhino.DocObjects.Tables.ObjectTable.AddEllipse(self, ellipse: Rhino.Geometry.Ellipse) -> Guid
Rhino.DocObjects.Tables.ObjectTable.AddEllipse(self, ellipse: Rhino.Geometry.Ellipse, attributes: Rhino.DocObjects.ObjectAttributes) -> Guid
Rhino.DocObjects.Tables.ObjectTable.AddEllipse(self, ellipse: Rhino.Geometry.Ellipse, attributes: Rhino.DocObjects.ObjectAttributes, history: Rhino.DocObjects.HistoryRecord, reference: bool) -> Guid
Rhino.DocObjects.Tables.ObjectTable.AddExplodedInstancePieces(self, instance: Rhino.DocObjects.InstanceObject, explodeNestedInstances: bool, deleteInstance: bool) -> List[Guid]
Rhino.DocObjects.Tables.ObjectTable.AddExtrusion(self, extrusion: Rhino.Geometry.Extrusion) -> Guid
Rhino.DocObjects.Tables.ObjectTable.AddExtrusion(self, extrusion: Rhino.Geometry.Extrusion, attributes: Rhino.DocObjects.ObjectAttributes) -> Guid
Rhino.DocObjects.Tables.ObjectTable.AddExtrusion(self, extrusion: Rhino.Geometry.Extrusion, attributes: Rhino.DocObjects.ObjectAttributes, history: Rhino.DocObjects.HistoryRecord, reference: bool) -> Guid
Rhino.DocObjects.Tables.ObjectTable.AddHatch(self, hatch: Rhino.Geometry.Hatch) -> Guid
Rhino.DocObjects.Tables.ObjectTable.AddHatch(self, hatch: Rhino.Geometry.Hatch, attributes: Rhino.DocObjects.ObjectAttributes) -> Guid
Rhino.DocObjects.Tables.ObjectTable.AddHatch(self, hatch: Rhino.Geometry.Hatch, attributes: Rhino.DocObjects.ObjectAttributes, history: Rhino.DocObjects.HistoryRecord, reference: bool) -> Guid
Rhino.DocObjects.Tables.ObjectTable.AddInstanceObject(self, instanceDefinitionIndex: int, instanceXform: Rhino.Geometry.Transform) -> Guid
Rhino.DocObjects.Tables.ObjectTable.AddInstanceObject(self, instanceDefinitionIndex: int, instanceXform: Rhino.Geometry.Transform, attributes: Rhino.DocObjects.ObjectAttributes) -> Guid
Rhino.DocObjects.Tables.ObjectTable.AddInstanceObject(self, instanceDefinitionIndex: int, instanceXform: Rhino.Geometry.Transform, attributes: Rhino.DocObjects.ObjectAttributes, history: Rhino.DocObjects.HistoryRecord, reference: bool) -> Guid
Rhino.DocObjects.Tables.ObjectTable.AddLeader(self, leader: Rhino.Geometry.Leader) -> Guid
Rhino.DocObjects.Tables.ObjectTable.AddLeader(self, leader: Rhino.Geometry.Leader, attributes: Rhino.DocObjects.ObjectAttributes) -> Guid
Rhino.DocObjects.Tables.ObjectTable.AddLeader(self, leader: Rhino.Geometry.Leader, attributes: Rhino.DocObjects.ObjectAttributes, history: Rhino.DocObjects.HistoryRecord, reference: bool) -> Guid
Rhino.DocObjects.Tables.ObjectTable.AddLeader(self, plane: Rhino.Geometry.Plane, points: Iterable[Rhino.Geometry.Point2d]) -> Guid
Rhino.DocObjects.Tables.ObjectTable.AddLeader(self, plane: Rhino.Geometry.Plane, points: Iterable[Rhino.Geometry.Point2d], attributes: Rhino.DocObjects.ObjectAttributes) -> Guid
Rhino.DocObjects.Tables.ObjectTable.AddLeader(self, points: Iterable[Rhino.Geometry.Point3d]) -> Guid
Rhino.DocObjects.Tables.ObjectTable.AddLeader(self, text: str, plane: Rhino.Geometry.Plane, points: Iterable[Rhino.Geometry.Point2d]) -> Guid
Rhino.DocObjects.Tables.ObjectTable.AddLeader(self, text: str, plane: Rhino.Geometry.Plane, points: Iterable[Rhino.Geometry.Point2d], attributes: Rhino.DocObjects.ObjectAttributes) -> Guid
Rhino.DocObjects.Tables.ObjectTable.AddLeader(self, text: str, plane: Rhino.Geometry.Plane, points: Iterable[Rhino.Geometry.Point2d], attributes: Rhino.DocObjects.ObjectAttributes, history: Rhino.DocObjects.HistoryRecord, reference: bool) -> Guid
Rhino.DocObjects.Tables.ObjectTable.AddLeader(self, text: str, points: Iterable[Rhino.Geometry.Point3d]) -> Guid
Rhino.DocObjects.Tables.ObjectTable.AddLine(self, from: Rhino.Geometry.Point3d, to: Rhino.Geometry.Point3d) -> Guid
Rhino.DocObjects.Tables.ObjectTable.AddLine(self, from: Rhino.Geometry.Point3d, to: Rhino.Geometry.Point3d, attributes: Rhino.DocObjects.ObjectAttributes) -> Guid
Rhino.DocObjects.Tables.ObjectTable.AddLine(self, from: Rhino.Geometry.Point3d, to: Rhino.Geometry.Point3d, attributes: Rhino.DocObjects.ObjectAttributes, history: Rhino.DocObjects.HistoryRecord, reference: bool) -> Guid
Rhino.DocObjects.Tables.ObjectTable.AddLine(self, line: Rhino.Geometry.Line) -> Guid
Rhino.DocObjects.Tables.ObjectTable.AddLine(self, line: Rhino.Geometry.Line, attributes: Rhino.DocObjects.ObjectAttributes) -> Guid
Rhino.DocObjects.Tables.ObjectTable.AddLinearDimension(self, dimension: Rhino.Geometry.LinearDimension) -> Guid
Rhino.DocObjects.Tables.ObjectTable.AddLinearDimension(self, dimension: Rhino.Geometry.LinearDimension, attributes: Rhino.DocObjects.ObjectAttributes) -> Guid
Rhino.DocObjects.Tables.ObjectTable.AddLinearDimension(self, dimension: Rhino.Geometry.LinearDimension, attributes: Rhino.DocObjects.ObjectAttributes, history: Rhino.DocObjects.HistoryRecord, reference: bool) -> Guid
Rhino.DocObjects.Tables.ObjectTable.AddMesh(self, mesh: Rhino.Geometry.Mesh) -> Guid
Rhino.DocObjects.Tables.ObjectTable.AddMesh(self, mesh: Rhino.Geometry.Mesh, attributes: Rhino.DocObjects.ObjectAttributes) -> Guid
Rhino.DocObjects.Tables.ObjectTable.AddMesh(self, mesh: Rhino.Geometry.Mesh, attributes: Rhino.DocObjects.ObjectAttributes, history: Rhino.DocObjects.HistoryRecord, reference: bool) -> Guid
Rhino.DocObjects.Tables.ObjectTable.AddMesh(self, mesh: Rhino.Geometry.Mesh, attributes: Rhino.DocObjects.ObjectAttributes, history: Rhino.DocObjects.HistoryRecord, reference: bool, requireValidMesh: bool) -> Guid
Rhino.DocObjects.Tables.ObjectTable.AddMorphControl(self, morphControl: Rhino.Geometry.MorphControl) -> Guid
Rhino.DocObjects.Tables.ObjectTable.AddMorphControl(self, morphControl: Rhino.Geometry.MorphControl, attributes: Rhino.DocObjects.ObjectAttributes) -> Guid
Rhino.DocObjects.Tables.ObjectTable.AddMorphControl(self, morphControl: Rhino.Geometry.MorphControl, attributes: Rhino.DocObjects.ObjectAttributes, history: Rhino.DocObjects.HistoryRecord, reference: bool) -> Guid
Rhino.DocObjects.Tables.ObjectTable.AddOrderedPointCloud(self, xCt: int, yCt: int, zCt: int, min: Rhino.Geometry.Point3d, max: Rhino.Geometry.Point3d, attributes: Rhino.DocObjects.ObjectAttributes, history: Rhino.DocObjects.HistoryRecord, reference: bool) -> Guid
Rhino.DocObjects.Tables.ObjectTable.AddOrdinateDimension(self, dimordinate: Rhino.Geometry.OrdinateDimension, attributes: Rhino.DocObjects.ObjectAttributes, history: Rhino.DocObjects.HistoryRecord, reference: bool) -> Guid
Rhino.DocObjects.Tables.ObjectTable.AddPictureFrame(self, plane: Rhino.Geometry.Plane, texturePath: str, asMesh: bool, width: float, height: float, selfIllumination: bool, embedBitmap: bool) -> Guid
Rhino.DocObjects.Tables.ObjectTable.AddPoint(self, point: Rhino.Geometry.Point, attributes: Rhino.DocObjects.ObjectAttributes, history: Rhino.DocObjects.HistoryRecord, reference: bool) -> Guid
Rhino.DocObjects.Tables.ObjectTable.AddPoint(self, point: Rhino.Geometry.Point3d) -> Guid
Rhino.DocObjects.Tables.ObjectTable.AddPoint(self, point: Rhino.Geometry.Point3d, attributes: Rhino.DocObjects.ObjectAttributes) -> Guid
Rhino.DocObjects.Tables.ObjectTable.AddPoint(self, point: Rhino.Geometry.Point3d, attributes: Rhino.DocObjects.ObjectAttributes, history: Rhino.DocObjects.HistoryRecord, reference: bool) -> Guid
Rhino.DocObjects.Tables.ObjectTable.AddPoint(self, point: Rhino.Geometry.Point3f) -> Guid
Rhino.DocObjects.Tables.ObjectTable.AddPoint(self, point: Rhino.Geometry.Point3f, attributes: Rhino.DocObjects.ObjectAttributes) -> Guid
Rhino.DocObjects.Tables.ObjectTable.AddPoint(self, x: float, y: float, z: float) -> Guid
Rhino.DocObjects.Tables.ObjectTable.AddPointCloud(self, cloud: Rhino.Geometry.PointCloud) -> Guid
Rhino.DocObjects.Tables.ObjectTable.AddPointCloud(self, cloud: Rhino.Geometry.PointCloud, attributes: Rhino.DocObjects.ObjectAttributes) -> Guid
Rhino.DocObjects.Tables.ObjectTable.AddPointCloud(self, cloud: Rhino.Geometry.PointCloud, attributes: Rhino.DocObjects.ObjectAttributes, history: Rhino.DocObjects.HistoryRecord, reference: bool) -> Guid
Rhino.DocObjects.Tables.ObjectTable.AddPointCloud(self, points: Iterable[Rhino.Geometry.Point3d]) -> Guid
Rhino.DocObjects.Tables.ObjectTable.AddPointCloud(self, points: Iterable[Rhino.Geometry.Point3d], attributes: Rhino.DocObjects.ObjectAttributes) -> Guid
Rhino.DocObjects.Tables.ObjectTable.AddPointCloud(self, points: Iterable[Rhino.Geometry.Point3d], attributes: Rhino.DocObjects.ObjectAttributes, history: Rhino.DocObjects.HistoryRecord, reference: bool) -> Guid
Rhino.DocObjects.Tables.ObjectTable.AddPoints(self, points: Iterable[Rhino.Geometry.Point3d]) -> RhinoList<Guid>
Rhino.DocObjects.Tables.ObjectTable.AddPoints(self, points: Iterable[Rhino.Geometry.Point3d], attributes: Rhino.DocObjects.ObjectAttributes) -> RhinoList<Guid>
Rhino.DocObjects.Tables.ObjectTable.AddPoints(self, points: Iterable[Rhino.Geometry.Point3f]) -> RhinoList<Guid>
Rhino.DocObjects.Tables.ObjectTable.AddPoints(self, points: Iterable[Rhino.Geometry.Point3f], attributes: Rhino.DocObjects.ObjectAttributes) -> RhinoList<Guid>
Rhino.DocObjects.Tables.ObjectTable.AddPolyline(self, points: Iterable[Rhino.Geometry.Point3d]) -> Guid
Rhino.DocObjects.Tables.ObjectTable.AddPolyline(self, points: Iterable[Rhino.Geometry.Point3d], attributes: Rhino.DocObjects.ObjectAttributes) -> Guid
Rhino.DocObjects.Tables.ObjectTable.AddPolyline(self, points: Iterable[Rhino.Geometry.Point3d], attributes: Rhino.DocObjects.ObjectAttributes, history: Rhino.DocObjects.HistoryRecord, reference: bool) -> Guid
Rhino.DocObjects.Tables.ObjectTable.AddRadialDimension(self, dimension: Rhino.Geometry.RadialDimension) -> Guid
Rhino.DocObjects.Tables.ObjectTable.AddRadialDimension(self, dimension: Rhino.Geometry.RadialDimension, attributes: Rhino.DocObjects.ObjectAttributes) -> Guid
Rhino.DocObjects.Tables.ObjectTable.AddRadialDimension(self, dimension: Rhino.Geometry.RadialDimension, attributes: Rhino.DocObjects.ObjectAttributes, history: Rhino.DocObjects.HistoryRecord, reference: bool) -> Guid
Rhino.DocObjects.Tables.ObjectTable.AddRectangle(self, rectangle: Rhino.Geometry.Rectangle3d) -> Guid
Rhino.DocObjects.Tables.ObjectTable.AddRectangle(self, rectangle: Rhino.Geometry.Rectangle3d, attributes: Rhino.DocObjects.ObjectAttributes) -> Guid
Rhino.DocObjects.Tables.ObjectTable.AddRectangle(self, rectangle: Rhino.Geometry.Rectangle3d, attributes: Rhino.DocObjects.ObjectAttributes, history: Rhino.DocObjects.HistoryRecord, reference: bool) -> Guid
Rhino.DocObjects.Tables.ObjectTable.AddRhinoObject(self, brepObject: Rhino.DocObjects.BrepObject, brep: Rhino.Geometry.Brep) -> None
Rhino.DocObjects.Tables.ObjectTable.AddRhinoObject(self, brepObject: Rhino.DocObjects.Custom.CustomBrepObject) -> None
Rhino.DocObjects.Tables.ObjectTable.AddRhinoObject(self, brepObject: Rhino.DocObjects.Custom.CustomBrepObject, history: Rhino.DocObjects.HistoryRecord) -> None
Rhino.DocObjects.Tables.ObjectTable.AddRhinoObject(self, curveObject: Rhino.DocObjects.CurveObject, curve: Rhino.Geometry.Curve) -> None
Rhino.DocObjects.Tables.ObjectTable.AddRhinoObject(self, curveObject: Rhino.DocObjects.Custom.CustomCurveObject, history: Rhino.DocObjects.HistoryRecord) -> None
Rhino.DocObjects.Tables.ObjectTable.AddRhinoObject(self, meshObject: Rhino.DocObjects.Custom.CustomMeshObject) -> None
Rhino.DocObjects.Tables.ObjectTable.AddRhinoObject(self, meshObject: Rhino.DocObjects.Custom.CustomMeshObject, history: Rhino.DocObjects.HistoryRecord) -> None
Rhino.DocObjects.Tables.ObjectTable.AddRhinoObject(self, meshObject: Rhino.DocObjects.MeshObject, mesh: Rhino.Geometry.Mesh) -> None
Rhino.DocObjects.Tables.ObjectTable.AddRhinoObject(self, pointObject: Rhino.DocObjects.Custom.CustomPointObject) -> None
Rhino.DocObjects.Tables.ObjectTable.AddRhinoObject(self, pointObject: Rhino.DocObjects.Custom.CustomPointObject, history: Rhino.DocObjects.HistoryRecord) -> None
Rhino.DocObjects.Tables.ObjectTable.AddRhinoObject(self, pointObject: Rhino.DocObjects.PointObject, point: Rhino.Geometry.Point) -> None
Rhino.DocObjects.Tables.ObjectTable.AddSphere(self, sphere: Rhino.Geometry.Sphere) -> Guid
Rhino.DocObjects.Tables.ObjectTable.AddSphere(self, sphere: Rhino.Geometry.Sphere, attributes: Rhino.DocObjects.ObjectAttributes) -> Guid
Rhino.DocObjects.Tables.ObjectTable.AddSphere(self, sphere: Rhino.Geometry.Sphere, attributes: Rhino.DocObjects.ObjectAttributes, history: Rhino.DocObjects.HistoryRecord, reference: bool) -> Guid
Rhino.DocObjects.Tables.ObjectTable.AddSubD(self, subD: Rhino.Geometry.SubD) -> Guid
Rhino.DocObjects.Tables.ObjectTable.AddSubD(self, subD: Rhino.Geometry.SubD, attributes: Rhino.DocObjects.ObjectAttributes) -> Guid
Rhino.DocObjects.Tables.ObjectTable.AddSubD(self, subD: Rhino.Geometry.SubD, attributes: Rhino.DocObjects.ObjectAttributes, history: Rhino.DocObjects.HistoryRecord, reference: bool) -> Guid
Rhino.DocObjects.Tables.ObjectTable.AddSurface(self, surface: Rhino.Geometry.Surface) -> Guid
Rhino.DocObjects.Tables.ObjectTable.AddSurface(self, surface: Rhino.Geometry.Surface, attributes: Rhino.DocObjects.ObjectAttributes) -> Guid
Rhino.DocObjects.Tables.ObjectTable.AddSurface(self, surface: Rhino.Geometry.Surface, attributes: Rhino.DocObjects.ObjectAttributes, history: Rhino.DocObjects.HistoryRecord, reference: bool) -> Guid
Rhino.DocObjects.Tables.ObjectTable.AddText(self, text3d: Rhino.Display.Text3d) -> Guid
Rhino.DocObjects.Tables.ObjectTable.AddText(self, text3d: Rhino.Display.Text3d, attributes: Rhino.DocObjects.ObjectAttributes) -> Guid
Rhino.DocObjects.Tables.ObjectTable.AddText(self, text: Rhino.Geometry.TextEntity) -> Guid
Rhino.DocObjects.Tables.ObjectTable.AddText(self, text: Rhino.Geometry.TextEntity, attributes: Rhino.DocObjects.ObjectAttributes) -> Guid
Rhino.DocObjects.Tables.ObjectTable.AddText(self, text: Rhino.Geometry.TextEntity, attributes: Rhino.DocObjects.ObjectAttributes, history: Rhino.DocObjects.HistoryRecord, reference: bool) -> Guid
Rhino.DocObjects.Tables.ObjectTable.AddText(self, text: str, plane: Rhino.Geometry.Plane, height: float, fontName: str, bold: bool, italic: bool) -> Guid
Rhino.DocObjects.Tables.ObjectTable.AddText(self, text: str, plane: Rhino.Geometry.Plane, height: float, fontName: str, bold: bool, italic: bool, attributes: Rhino.DocObjects.ObjectAttributes) -> Guid
Rhino.DocObjects.Tables.ObjectTable.AddText(self, text: str, plane: Rhino.Geometry.Plane, height: float, fontName: str, bold: bool, italic: bool, attributes: Rhino.DocObjects.ObjectAttributes, history: Rhino.DocObjects.HistoryRecord, reference: bool) -> Guid
Rhino.DocObjects.Tables.ObjectTable.AddText(self, text: str, plane: Rhino.Geometry.Plane, height: float, fontName: str, bold: bool, italic: bool, justification: Rhino.Geometry.TextJustification) -> Guid
Rhino.DocObjects.Tables.ObjectTable.AddText(self, text: str, plane: Rhino.Geometry.Plane, height: float, fontName: str, bold: bool, italic: bool, justification: Rhino.Geometry.TextJustification, attributes: Rhino.DocObjects.ObjectAttributes) -> Guid
Rhino.DocObjects.Tables.ObjectTable.AddText(self, text: str, plane: Rhino.Geometry.Plane, height: float, fontName: str, bold: bool, italic: bool, justification: Rhino.Geometry.TextJustification, attributes: Rhino.DocObjects.ObjectAttributes, history: Rhino.DocObjects.HistoryRecord, reference: bool) -> Guid
Rhino.DocObjects.Tables.ObjectTable.AddTextDot(self, dot: Rhino.Geometry.TextDot) -> Guid
Rhino.DocObjects.Tables.ObjectTable.AddTextDot(self, dot: Rhino.Geometry.TextDot, attributes: Rhino.DocObjects.ObjectAttributes) -> Guid
Rhino.DocObjects.Tables.ObjectTable.AddTextDot(self, dot: Rhino.Geometry.TextDot, attributes: Rhino.DocObjects.ObjectAttributes, history: Rhino.DocObjects.HistoryRecord, reference: bool) -> Guid
Rhino.DocObjects.Tables.ObjectTable.AddTextDot(self, text: str, location: Rhino.Geometry.Point3d) -> Guid
Rhino.DocObjects.Tables.ObjectTable.AddTextDot(self, text: str, location: Rhino.Geometry.Point3d, attributes: Rhino.DocObjects.ObjectAttributes) -> Guid
Rhino.DocObjects.Tables.ObjectTable.AllObjectsSince(self, runtimeSerialNumber: System.UInt32) -> List[RhinoObject]
Rhino.DocObjects.Tables.ObjectTable.Delete(self, item: Rhino.DocObjects.RhinoObject) -> bool
Rhino.DocObjects.Tables.ObjectTable.Delete(self, obj: Rhino.DocObjects.RhinoObject, quiet: bool) -> bool
Rhino.DocObjects.Tables.ObjectTable.Delete(self, obj: Rhino.DocObjects.RhinoObject, quiet: bool, ignoreModes: bool) -> bool
Rhino.DocObjects.Tables.ObjectTable.Delete(self, objectId: System.Guid, quiet: bool) -> bool
Rhino.DocObjects.Tables.ObjectTable.Delete(self, objectIds: Iterable[System.Guid], quiet: bool) -> int
Rhino.DocObjects.Tables.ObjectTable.Delete(self, objref: Rhino.DocObjects.ObjRef, quiet: bool) -> bool
Rhino.DocObjects.Tables.ObjectTable.Delete(self, objref: Rhino.DocObjects.ObjRef, quiet: bool, ignoreModes: bool) -> bool
Rhino.DocObjects.Tables.ObjectTable.DeleteGrip(self, grip: Rhino.DocObjects.GripObject) -> bool
Rhino.DocObjects.Tables.ObjectTable.DeleteGrip(self, gripId: System.Guid) -> bool
Rhino.DocObjects.Tables.ObjectTable.DeleteGrip(self, gripRef: Rhino.DocObjects.ObjRef) -> bool
Rhino.DocObjects.Tables.ObjectTable.DeleteGrips(self, gripIds: Iterable[System.Guid]) -> int
Rhino.DocObjects.Tables.ObjectTable.DeleteGrips(self, gripRefs: Iterable[Rhino.DocObjects.ObjRef]) -> int
Rhino.DocObjects.Tables.ObjectTable.DeleteGrips(self, grips: Iterable[Rhino.DocObjects.GripObject]) -> int
Rhino.DocObjects.Tables.ObjectTable.DeleteGrips(self, owner: Rhino.DocObjects.RhinoObject, gripIndices: Iterable[int]) -> int
Rhino.DocObjects.Tables.ObjectTable.Duplicate(self, obj: Rhino.DocObjects.RhinoObject) -> Guid
Rhino.DocObjects.Tables.ObjectTable.Duplicate(self, objectId: System.Guid) -> Guid
Rhino.DocObjects.Tables.ObjectTable.Duplicate(self, objref: Rhino.DocObjects.ObjRef) -> Guid
Rhino.DocObjects.Tables.ObjectTable.Find(self, runtimeSerialNumber: System.UInt32) -> RhinoObject
Rhino.DocObjects.Tables.ObjectTable.FindByCrossingWindowRegion(self, viewport: Rhino.Display.RhinoViewport, region: Iterable[Rhino.Geometry.Point3d], inside: bool, filter: Rhino.DocObjects.ObjectType) -> List[RhinoObject]
Rhino.DocObjects.Tables.ObjectTable.FindByCrossingWindowRegion(self, viewport: Rhino.Display.RhinoViewport, screen1: Rhino.Geometry.Point2d, screen2: Rhino.Geometry.Point2d, inside: bool, filter: Rhino.DocObjects.ObjectType) -> List[RhinoObject]
Rhino.DocObjects.Tables.ObjectTable.FindByDrawColor(self, drawColor: System.Drawing.Color, includeLights: bool) -> List[RhinoObject]
Rhino.DocObjects.Tables.ObjectTable.FindByFilter(self, filter: Rhino.DocObjects.ObjectEnumeratorSettings) -> List[RhinoObject]
Rhino.DocObjects.Tables.ObjectTable.FindByGroup(self, groupIndex: int) -> List[RhinoObject]
Rhino.DocObjects.Tables.ObjectTable.FindByLayer(self, layer: Rhino.DocObjects.Layer) -> List[RhinoObject]
Rhino.DocObjects.Tables.ObjectTable.FindByLayer(self, layerName: str) -> List[RhinoObject]
Rhino.DocObjects.Tables.ObjectTable.FindByObjectType(self, typeFilter: Rhino.DocObjects.ObjectType) -> List[RhinoObject]
Rhino.DocObjects.Tables.ObjectTable.FindByUserString(self, key: str, value: str, caseSensitive: bool) -> List[RhinoObject]
Rhino.DocObjects.Tables.ObjectTable.FindByUserString(self, key: str, value: str, caseSensitive: bool, searchGeometry: bool, searchAttributes: bool, filter: Rhino.DocObjects.ObjectEnumeratorSettings) -> List[RhinoObject]
Rhino.DocObjects.Tables.ObjectTable.FindByUserString(self, key: str, value: str, caseSensitive: bool, searchGeometry: bool, searchAttributes: bool, filter: Rhino.DocObjects.ObjectType) -> List[RhinoObject]
Rhino.DocObjects.Tables.ObjectTable.FindByWindowRegion(self, viewport: Rhino.Display.RhinoViewport, region: Iterable[Rhino.Geometry.Point3d], inside: bool, filter: Rhino.DocObjects.ObjectType) -> List[RhinoObject]
Rhino.DocObjects.Tables.ObjectTable.FindByWindowRegion(self, viewport: Rhino.Display.RhinoViewport, screen1: Rhino.Geometry.Point2d, screen2: Rhino.Geometry.Point2d, inside: bool, filter: Rhino.DocObjects.ObjectType) -> List[RhinoObject]
Rhino.DocObjects.Tables.ObjectTable.FindClippingPlanesForViewport(self, viewport: Rhino.Display.RhinoViewport) -> List[ClippingPlaneObject]
Rhino.DocObjects.Tables.ObjectTable.FindGeometry(self, id: System.Guid) -> GeometryBase
Rhino.DocObjects.Tables.ObjectTable.FindId(self, id: System.Guid) -> RhinoObject
Rhino.DocObjects.Tables.ObjectTable.GetEnumerator(self) -> IEnumerator<RhinoObject>
Rhino.DocObjects.Tables.ObjectTable.GetObjectList(self, settings: Rhino.DocObjects.ObjectEnumeratorSettings) -> IEnumerable<RhinoObject>
Rhino.DocObjects.Tables.ObjectTable.GetObjectList(self, typeFilter: Rhino.DocObjects.ObjectType) -> IEnumerable<RhinoObject>
Rhino.DocObjects.Tables.ObjectTable.GetObjectList(self, typeFilter: System.Type) -> IEnumerable<RhinoObject>
Rhino.DocObjects.Tables.ObjectTable.GetObjectsByType<T>(self) -> IEnumerable<T>
Rhino.DocObjects.Tables.ObjectTable.GetObjectsByType<T>(self, settings: Rhino.DocObjects.ObjectEnumeratorSettings) -> IEnumerable<T>
Rhino.DocObjects.Tables.ObjectTable.GetSelectedObjectCount(self, checkSubObjects: bool) -> uint
Rhino.DocObjects.Tables.ObjectTable.GetSelectedObjectTypes(self) -> ObjectType
Rhino.DocObjects.Tables.ObjectTable.GetSelectedObjects(self, includeLights: bool, includeGrips: bool) -> IEnumerable<RhinoObject>
Rhino.DocObjects.Tables.ObjectTable.GripUpdate(self, obj: Rhino.DocObjects.RhinoObject, deleteOriginal: bool) -> RhinoObject
Rhino.DocObjects.Tables.ObjectTable.Hide(self, obj: Rhino.DocObjects.RhinoObject, ignoreLayerMode: bool) -> bool
Rhino.DocObjects.Tables.ObjectTable.Hide(self, objectId: System.Guid, ignoreLayerMode: bool) -> bool
Rhino.DocObjects.Tables.ObjectTable.Hide(self, objref: Rhino.DocObjects.ObjRef, ignoreLayerMode: bool) -> bool
Rhino.DocObjects.Tables.ObjectTable.InvalidateBoundingBox(self) -> None
Rhino.DocObjects.Tables.ObjectTable.Lock(self, obj: Rhino.DocObjects.RhinoObject, ignoreLayerMode: bool) -> bool
Rhino.DocObjects.Tables.ObjectTable.Lock(self, objectId: System.Guid, ignoreLayerMode: bool) -> bool
Rhino.DocObjects.Tables.ObjectTable.Lock(self, objref: Rhino.DocObjects.ObjRef, ignoreLayerMode: bool) -> bool
Rhino.DocObjects.Tables.ObjectTable.ModifyAttributes(self, obj: Rhino.DocObjects.RhinoObject, newAttributes: Rhino.DocObjects.ObjectAttributes, quiet: bool) -> bool
Rhino.DocObjects.Tables.ObjectTable.ModifyAttributes(self, objectId: System.Guid, newAttributes: Rhino.DocObjects.ObjectAttributes, quiet: bool) -> bool
Rhino.DocObjects.Tables.ObjectTable.ModifyAttributes(self, objref: Rhino.DocObjects.ObjRef, newAttributes: Rhino.DocObjects.ObjectAttributes, quiet: bool) -> bool
Rhino.DocObjects.Tables.ObjectTable.ModifyRenderMaterial(self, obj: Rhino.DocObjects.RhinoObject, material: Rhino.Render.RenderMaterial) -> bool
Rhino.DocObjects.Tables.ObjectTable.ModifyRenderMaterial(self, objRef: Rhino.DocObjects.ObjRef, material: Rhino.Render.RenderMaterial) -> bool
Rhino.DocObjects.Tables.ObjectTable.ModifyRenderMaterial(self, objectId: System.Guid, material: Rhino.Render.RenderMaterial) -> bool
Rhino.DocObjects.Tables.ObjectTable.ModifyTextureMapping(self, obj: Rhino.DocObjects.RhinoObject, channel: int, mapping: Rhino.Render.TextureMapping) -> bool
Rhino.DocObjects.Tables.ObjectTable.ModifyTextureMapping(self, objId: System.Guid, channel: int, mapping: Rhino.Render.TextureMapping) -> bool
Rhino.DocObjects.Tables.ObjectTable.ModifyTextureMapping(self, objRef: Rhino.DocObjects.ObjRef, channel: int, mapping: Rhino.Render.TextureMapping) -> bool
Rhino.DocObjects.Tables.ObjectTable.MostRecentObject(self) -> RhinoObject
Rhino.DocObjects.Tables.ObjectTable.ObjectCount(self, filter: Rhino.DocObjects.ObjectEnumeratorSettings) -> int
Rhino.DocObjects.Tables.ObjectTable.PickObjects(self, pickContext: Rhino.Input.Custom.PickContext) -> List[ObjRef]
Rhino.DocObjects.Tables.ObjectTable.Purge(self, rhinoObject: Rhino.DocObjects.RhinoObject) -> bool
Rhino.DocObjects.Tables.ObjectTable.Purge(self, runtimeSerialNumber: System.UInt32) -> bool
Rhino.DocObjects.Tables.ObjectTable.Replace(self, objectId: System.Guid, arc: Rhino.Geometry.Arc) -> bool
Rhino.DocObjects.Tables.ObjectTable.Replace(self, objectId: System.Guid, brep: Rhino.Geometry.Brep) -> bool
Rhino.DocObjects.Tables.ObjectTable.Replace(self, objectId: System.Guid, brep: Rhino.Geometry.Brep, splitKinkySurfaces: bool) -> bool
Rhino.DocObjects.Tables.ObjectTable.Replace(self, objectId: System.Guid, circle: Rhino.Geometry.Circle) -> bool
Rhino.DocObjects.Tables.ObjectTable.Replace(self, objectId: System.Guid, curve: Rhino.Geometry.Curve) -> bool
Rhino.DocObjects.Tables.ObjectTable.Replace(self, objectId: System.Guid, dot: Rhino.Geometry.TextDot) -> bool
Rhino.DocObjects.Tables.ObjectTable.Replace(self, objectId: System.Guid, extrusion: Rhino.Geometry.Extrusion) -> bool
Rhino.DocObjects.Tables.ObjectTable.Replace(self, objectId: System.Guid, geometry: Rhino.Geometry.GeometryBase, ignoreModes: bool) -> bool
Rhino.DocObjects.Tables.ObjectTable.Replace(self, objectId: System.Guid, hatch: Rhino.Geometry.Hatch) -> bool
Rhino.DocObjects.Tables.ObjectTable.Replace(self, objectId: System.Guid, leader: Rhino.Geometry.Leader) -> bool
Rhino.DocObjects.Tables.ObjectTable.Replace(self, objectId: System.Guid, line: Rhino.Geometry.Line) -> bool
Rhino.DocObjects.Tables.ObjectTable.Replace(self, objectId: System.Guid, mesh: Rhino.Geometry.Mesh) -> bool
Rhino.DocObjects.Tables.ObjectTable.Replace(self, objectId: System.Guid, point: Rhino.Geometry.Point) -> bool
Rhino.DocObjects.Tables.ObjectTable.Replace(self, objectId: System.Guid, point: Rhino.Geometry.Point3d) -> bool
Rhino.DocObjects.Tables.ObjectTable.Replace(self, objectId: System.Guid, pointcloud: Rhino.Geometry.PointCloud) -> bool
Rhino.DocObjects.Tables.ObjectTable.Replace(self, objectId: System.Guid, polyline: Rhino.Geometry.Polyline) -> bool
Rhino.DocObjects.Tables.ObjectTable.Replace(self, objectId: System.Guid, subD: Rhino.Geometry.SubD) -> bool
Rhino.DocObjects.Tables.ObjectTable.Replace(self, objectId: System.Guid, surface: Rhino.Geometry.Surface) -> bool
Rhino.DocObjects.Tables.ObjectTable.Replace(self, objectId: System.Guid, text: Rhino.Geometry.TextEntity) -> bool
Rhino.DocObjects.Tables.ObjectTable.Replace(self, objref: Rhino.DocObjects.ObjRef, arc: Rhino.Geometry.Arc) -> bool
Rhino.DocObjects.Tables.ObjectTable.Replace(self, objref: Rhino.DocObjects.ObjRef, brep: Rhino.Geometry.Brep) -> bool
Rhino.DocObjects.Tables.ObjectTable.Replace(self, objref: Rhino.DocObjects.ObjRef, brep: Rhino.Geometry.Brep, splitKinkySurfaces: bool) -> bool
Rhino.DocObjects.Tables.ObjectTable.Replace(self, objref: Rhino.DocObjects.ObjRef, circle: Rhino.Geometry.Circle) -> bool
Rhino.DocObjects.Tables.ObjectTable.Replace(self, objref: Rhino.DocObjects.ObjRef, curve: Rhino.Geometry.Curve) -> bool
Rhino.DocObjects.Tables.ObjectTable.Replace(self, objref: Rhino.DocObjects.ObjRef, dot: Rhino.Geometry.TextDot) -> bool
Rhino.DocObjects.Tables.ObjectTable.Replace(self, objref: Rhino.DocObjects.ObjRef, extrusion: Rhino.Geometry.Extrusion) -> bool
Rhino.DocObjects.Tables.ObjectTable.Replace(self, objref: Rhino.DocObjects.ObjRef, geometry: Rhino.Geometry.GeometryBase, ignoreModes: bool) -> bool
Rhino.DocObjects.Tables.ObjectTable.Replace(self, objref: Rhino.DocObjects.ObjRef, hatch: Rhino.Geometry.Hatch) -> bool
Rhino.DocObjects.Tables.ObjectTable.Replace(self, objref: Rhino.DocObjects.ObjRef, leader: Rhino.Geometry.Leader) -> bool
Rhino.DocObjects.Tables.ObjectTable.Replace(self, objref: Rhino.DocObjects.ObjRef, line: Rhino.Geometry.Line) -> bool
Rhino.DocObjects.Tables.ObjectTable.Replace(self, objref: Rhino.DocObjects.ObjRef, mesh: Rhino.Geometry.Mesh) -> bool
Rhino.DocObjects.Tables.ObjectTable.Replace(self, objref: Rhino.DocObjects.ObjRef, newObject: Rhino.DocObjects.RhinoObject) -> bool
Rhino.DocObjects.Tables.ObjectTable.Replace(self, objref: Rhino.DocObjects.ObjRef, point: Rhino.Geometry.Point) -> bool
Rhino.DocObjects.Tables.ObjectTable.Replace(self, objref: Rhino.DocObjects.ObjRef, point: Rhino.Geometry.Point3d) -> bool
Rhino.DocObjects.Tables.ObjectTable.Replace(self, objref: Rhino.DocObjects.ObjRef, pointcloud: Rhino.Geometry.PointCloud) -> bool
Rhino.DocObjects.Tables.ObjectTable.Replace(self, objref: Rhino.DocObjects.ObjRef, polyline: Rhino.Geometry.Polyline) -> bool
Rhino.DocObjects.Tables.ObjectTable.Replace(self, objref: Rhino.DocObjects.ObjRef, subD: Rhino.Geometry.SubD) -> bool
Rhino.DocObjects.Tables.ObjectTable.Replace(self, objref: Rhino.DocObjects.ObjRef, surface: Rhino.Geometry.Surface) -> bool
Rhino.DocObjects.Tables.ObjectTable.Replace(self, objref: Rhino.DocObjects.ObjRef, text: Rhino.Geometry.TextEntity) -> bool
Rhino.DocObjects.Tables.ObjectTable.ReplaceInstanceObject(self, objectId: System.Guid, instanceDefinitionIndex: int) -> bool
Rhino.DocObjects.Tables.ObjectTable.ReplaceInstanceObject(self, objref: Rhino.DocObjects.ObjRef, instanceDefinitionIndex: int) -> bool
Rhino.DocObjects.Tables.ObjectTable.Select(self, objRefs: Iterable[Rhino.DocObjects.ObjRef]) -> int
Rhino.DocObjects.Tables.ObjectTable.Select(self, objRefs: Iterable[Rhino.DocObjects.ObjRef], select: bool) -> int
Rhino.DocObjects.Tables.ObjectTable.Select(self, objectId: System.Guid) -> bool
Rhino.DocObjects.Tables.ObjectTable.Select(self, objectId: System.Guid, select: bool) -> bool
Rhino.DocObjects.Tables.ObjectTable.Select(self, objectId: System.Guid, select: bool, syncHighlight: bool) -> bool
Rhino.DocObjects.Tables.ObjectTable.Select(self, objectId: System.Guid, select: bool, syncHighlight: bool, persistentSelect: bool) -> bool
Rhino.DocObjects.Tables.ObjectTable.Select(self, objectId: System.Guid, select: bool, syncHighlight: bool, persistentSelect: bool, ignoreGripsState: bool, ignoreLayerLocking: bool, ignoreLayerVisibility: bool) -> bool
Rhino.DocObjects.Tables.ObjectTable.Select(self, objectIds: Iterable[System.Guid]) -> int
Rhino.DocObjects.Tables.ObjectTable.Select(self, objectIds: Iterable[System.Guid], select: bool) -> int
Rhino.DocObjects.Tables.ObjectTable.Select(self, objref: Rhino.DocObjects.ObjRef) -> bool
Rhino.DocObjects.Tables.ObjectTable.Select(self, objref: Rhino.DocObjects.ObjRef, select: bool) -> bool
Rhino.DocObjects.Tables.ObjectTable.Select(self, objref: Rhino.DocObjects.ObjRef, select: bool, syncHighlight: bool) -> bool
Rhino.DocObjects.Tables.ObjectTable.Select(self, objref: Rhino.DocObjects.ObjRef, select: bool, syncHighlight: bool, persistentSelect: bool) -> bool
Rhino.DocObjects.Tables.ObjectTable.Select(self, objref: Rhino.DocObjects.ObjRef, select: bool, syncHighlight: bool, persistentSelect: bool, ignoreGripsState: bool, ignoreLayerLocking: bool, ignoreLayerVisibility: bool) -> bool
Rhino.DocObjects.Tables.ObjectTable.SelectedObjectsExist(self, objectType: Rhino.DocObjects.ObjectType, checkSubObjects: bool) -> bool
Rhino.DocObjects.Tables.ObjectTable.Show(self, obj: Rhino.DocObjects.RhinoObject, ignoreLayerMode: bool) -> bool
Rhino.DocObjects.Tables.ObjectTable.Show(self, objectId: System.Guid, ignoreLayerMode: bool) -> bool
Rhino.DocObjects.Tables.ObjectTable.Show(self, objref: Rhino.DocObjects.ObjRef, ignoreLayerMode: bool) -> bool
Rhino.DocObjects.Tables.ObjectTable.Transform(self, obj: Rhino.DocObjects.RhinoObject, xform: Rhino.Geometry.Transform, deleteOriginal: bool) -> Guid
Rhino.DocObjects.Tables.ObjectTable.Transform(self, objectId: System.Guid, xform: Rhino.Geometry.Transform, deleteOriginal: bool) -> Guid
Rhino.DocObjects.Tables.ObjectTable.Transform(self, objref: Rhino.DocObjects.ObjRef, xform: Rhino.Geometry.Transform, deleteOriginal: bool) -> Guid
Rhino.DocObjects.Tables.ObjectTable.TransformWithHistory(self, obj: Rhino.DocObjects.RhinoObject, xform: Rhino.Geometry.Transform) -> Guid
Rhino.DocObjects.Tables.ObjectTable.TransformWithHistory(self, objectId: System.Guid, xform: Rhino.Geometry.Transform) -> Guid
Rhino.DocObjects.Tables.ObjectTable.TransformWithHistory(self, objref: Rhino.DocObjects.ObjRef, xform: Rhino.Geometry.Transform) -> Guid
Rhino.DocObjects.Tables.ObjectTable.TryFindPoint(self, id: System.Guid, point: Rhino.Geometry.Point3d@) -> bool
Rhino.DocObjects.Tables.ObjectTable.Undelete(self, rhinoObject: Rhino.DocObjects.RhinoObject) -> bool
Rhino.DocObjects.Tables.ObjectTable.Undelete(self, runtimeSerialNumber: System.UInt32) -> bool
Rhino.DocObjects.Tables.ObjectTable.Unlock(self, obj: Rhino.DocObjects.RhinoObject, ignoreLayerMode: bool) -> bool
Rhino.DocObjects.Tables.ObjectTable.Unlock(self, objectId: System.Guid, ignoreLayerMode: bool) -> bool
Rhino.DocObjects.Tables.ObjectTable.Unlock(self, objref: Rhino.DocObjects.ObjRef, ignoreLayerMode: bool) -> bool
Rhino.DocObjects.Tables.ObjectTable.UnselectAll(self) -> int
Rhino.DocObjects.Tables.ObjectTable.UnselectAll(self, ignorePersistentSelections: bool) -> int
Rhino.DocObjects.Tables.RuntimeDocumentDataTable.GetValue<T>(self, key: Any, newT: Func[Rhino.RhinoDoc, ``0]) -> T
Rhino.DocObjects.Tables.RuntimeDocumentDataTable.TryGetValue<T>(self, key: Any) -> T
Rhino.DocObjects.Tables.StringTable.Delete(self, key: str) -> None
Rhino.DocObjects.Tables.StringTable.Delete(self, section: str, entry: str) -> None
Rhino.DocObjects.Tables.StringTable.GetEntryNames(self, section: str) -> List[str]
Rhino.DocObjects.Tables.StringTable.GetKey(self, i: int) -> str
Rhino.DocObjects.Tables.StringTable.GetSectionNames(self) -> List[str]
Rhino.DocObjects.Tables.StringTable.GetValue(self, i: int) -> str
Rhino.DocObjects.Tables.StringTable.GetValue(self, key: str) -> str
Rhino.DocObjects.Tables.StringTable.GetValue(self, section: str, entry: str) -> str
Rhino.DocObjects.Tables.StringTable.SetString(self, key: str, value: str) -> str
Rhino.DocObjects.Tables.StringTable.SetString(self, section: str, entry: str, value: str) -> str
Rhino.DocObjects.Tables.ViewTable.Add(self, title: str, projection: Rhino.Display.DefinedViewportProjection, position: System.Drawing.Rectangle, floating: bool) -> RhinoView
Rhino.DocObjects.Tables.ViewTable.AddPageView(self, title: str) -> RhinoPageView
Rhino.DocObjects.Tables.ViewTable.AddPageView(self, title: str, pageWidth: float, pageHeight: float) -> RhinoPageView
Rhino.DocObjects.Tables.ViewTable.DefaultViewLayout(self) -> None
Rhino.DocObjects.Tables.ViewTable.EnableCameraIcon(self, view: Rhino.Display.RhinoView) -> None
Rhino.DocObjects.Tables.ViewTable.EnableRedraw(self, enable: bool, redrawDocument: bool, redrawLayers: bool) -> None
Rhino.DocObjects.Tables.ViewTable.Find(self, mainViewportId: System.Guid) -> RhinoView
Rhino.DocObjects.Tables.ViewTable.Find(self, mainViewportName: str, compareCase: bool) -> RhinoView
Rhino.DocObjects.Tables.ViewTable.FlashObjects(self, list: Iterable[Rhino.DocObjects.RhinoObject], useSelectionColor: bool) -> None
Rhino.DocObjects.Tables.ViewTable.FourViewLayout(self, useMatchingViews: bool) -> None
Rhino.DocObjects.Tables.ViewTable.GetEnumerator(self) -> IEnumerator<RhinoView>
Rhino.DocObjects.Tables.ViewTable.GetPageViews(self) -> List[RhinoPageView]
Rhino.DocObjects.Tables.ViewTable.GetStandardRhinoViews(self) -> List[RhinoView]
Rhino.DocObjects.Tables.ViewTable.GetViewList(self, filter: Rhino.Display.ViewTypeFilter) -> List[RhinoView]
Rhino.DocObjects.Tables.ViewTable.GetViewList(self, includeStandardViews: bool, includePageViews: bool) -> List[RhinoView]
Rhino.DocObjects.Tables.ViewTable.IsCameraIconVisible(self, view: Rhino.Display.RhinoView) -> bool
Rhino.DocObjects.Tables.ViewTable.Redraw(self) -> None
Rhino.DocObjects.Tables.ViewTable.ThreeViewLayout(self, useMatchingViews: bool) -> None
Rhino.DocObjects.TextObject.GetTextCorners(self, viewport: Rhino.Display.RhinoViewport) -> List[Point3d]
Rhino.DocObjects.Texture.GetAlphaBlendValues(self, constant: System.Double@, a0: System.Double@, a1: System.Double@, a2: System.Double@, a3: System.Double@) -> None
Rhino.DocObjects.Texture.SetAlphaBlendValues(self, constant: float, a0: float, a1: float, a2: float, a3: float) -> None
Rhino.DocObjects.Texture.SetRGBBlendValues(self, color: System.Drawing.Color, a0: float, a1: float, a2: float, a3: float) -> None
Rhino.DocObjects.Texture.__init__(self) -> None
Rhino.DocObjects.Texture.__init__(self, info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext) -> None
Rhino.DocObjects.ViewInfo.ClippingPlaneSurfaces(self) -> List[ClippingPlaneSurface]
Rhino.DocObjects.ViewInfo.Dispose(self) -> None
Rhino.DocObjects.ViewInfo.Dispose(self, disposing: bool) -> None
Rhino.DocObjects.ViewInfo.Finalize(self) -> None
Rhino.DocObjects.ViewInfo.__init__(self) -> None
Rhino.DocObjects.ViewInfo.__init__(self, docRuntimeSerialNumber: System.UInt32) -> None
Rhino.DocObjects.ViewInfo.__init__(self, rhinoViewPort: Rhino.Display.RhinoViewport) -> None
Rhino.DocObjects.ViewportInfo.CalculateCameraRotationAngle(direction: Rhino.Geometry.Vector3d, up: Rhino.Geometry.Vector3d) -> float
Rhino.DocObjects.ViewportInfo.CalculateCameraUpDirection(location: Rhino.Geometry.Point3d, direction: Rhino.Geometry.Vector3d, angle: float) -> Vector3d
Rhino.DocObjects.ViewportInfo.ChangeToParallelProjection(self, symmetricFrustum: bool) -> bool
Rhino.DocObjects.ViewportInfo.ChangeToParallelReflectedProjection(self) -> bool
Rhino.DocObjects.ViewportInfo.ChangeToPerspectiveProjection(self, targetDistance: float, symmetricFrustum: bool, lensLength: float) -> bool
Rhino.DocObjects.ViewportInfo.ChangeToSymmetricFrustum(self, isLeftRightSymmetric: bool, isTopBottomSymmetric: bool, targetDistance: float) -> bool
Rhino.DocObjects.ViewportInfo.ChangeToTwoPointPerspectiveProjection(self, targetDistance: float, up: Rhino.Geometry.Vector3d, lensLength: float) -> bool
Rhino.DocObjects.ViewportInfo.DollyCamera(self, dollyVector: Rhino.Geometry.Vector3d) -> bool
Rhino.DocObjects.ViewportInfo.DollyExtents(self, cameraCoordinateBoundingBox: Rhino.Geometry.BoundingBox, border: float) -> bool
Rhino.DocObjects.ViewportInfo.DollyExtents(self, geometry: Iterable[Rhino.Geometry.GeometryBase], border: float) -> bool
Rhino.DocObjects.ViewportInfo.DollyFrustum(self, dollyDistance: float) -> bool
Rhino.DocObjects.ViewportInfo.Extents(self, halfViewAngleRadians: float, bbox: Rhino.Geometry.BoundingBox) -> bool
Rhino.DocObjects.ViewportInfo.Extents(self, halfViewAngleRadians: float, sphere: Rhino.Geometry.Sphere) -> bool
Rhino.DocObjects.ViewportInfo.FrustumCenterPoint(self, targetDistance: float) -> Point3d
Rhino.DocObjects.ViewportInfo.GetBoundingBoxDepth(self, bbox: Rhino.Geometry.BoundingBox, nearDistance: System.Double@, farDistance: System.Double@) -> bool
Rhino.DocObjects.ViewportInfo.GetCameraAngles(self, halfDiagonalAngleRadians: System.Double@, halfVerticalAngleRadians: System.Double@, halfHorizontalAngleRadians: System.Double@) -> bool
Rhino.DocObjects.ViewportInfo.GetCameraFrame(self, location: Rhino.Geometry.Point3d@, cameraX: Rhino.Geometry.Vector3d@, cameraY: Rhino.Geometry.Vector3d@, cameraZ: Rhino.Geometry.Vector3d@) -> bool
Rhino.DocObjects.ViewportInfo.GetDollyCameraVector(self, screen0: System.Drawing.Point, screen1: System.Drawing.Point, projectionPlaneDistance: float) -> Vector3d
Rhino.DocObjects.ViewportInfo.GetDollyCameraVector(self, screenX0: int, screenY0: int, screenX1: int, screenY1: int, projectionPlaneDistance: float) -> Vector3d
Rhino.DocObjects.ViewportInfo.GetFarPlaneCorners(self) -> List[Point3d]
Rhino.DocObjects.ViewportInfo.GetFramePlaneCorners(self, depth: float) -> List[Point3d]
Rhino.DocObjects.ViewportInfo.GetFrustum(self, left: System.Double@, right: System.Double@, bottom: System.Double@, top: System.Double@, nearDistance: System.Double@, farDistance: System.Double@) -> bool
Rhino.DocObjects.ViewportInfo.GetFrustumLine(self, screenPoint: System.Drawing.Point) -> Line
Rhino.DocObjects.ViewportInfo.GetFrustumLine(self, screenPoint: System.Drawing.PointF) -> Line
Rhino.DocObjects.ViewportInfo.GetFrustumLine(self, screenX: float, screenY: float) -> Line
Rhino.DocObjects.ViewportInfo.GetNearPlaneCorners(self) -> List[Point3d]
Rhino.DocObjects.ViewportInfo.GetPointDepth(self, point: Rhino.Geometry.Point3d, distance: System.Double@) -> bool
Rhino.DocObjects.ViewportInfo.GetScreenPort(self) -> Rectangle
Rhino.DocObjects.ViewportInfo.GetScreenPort(self, near: System.Int32@, far: System.Int32@) -> Rectangle
Rhino.DocObjects.ViewportInfo.GetScreenPortLocation(self, left: System.Int32@, top: System.Int32@, right: System.Int32@, bottom: System.Int32@) -> None
Rhino.DocObjects.ViewportInfo.GetSphereDepth(self, sphere: Rhino.Geometry.Sphere, nearDistance: System.Double@, farDistance: System.Double@) -> bool
Rhino.DocObjects.ViewportInfo.GetViewScale(self) -> List[float]
Rhino.DocObjects.ViewportInfo.GetWorldToScreenScale(self, pointInFrustum: Rhino.Geometry.Point3d) -> float
Rhino.DocObjects.ViewportInfo.GetXform(self, sourceSystem: Rhino.DocObjects.CoordinateSystem, destinationSystem: Rhino.DocObjects.CoordinateSystem) -> Transform
Rhino.DocObjects.ViewportInfo.RotateCamera(self, rotationAngleRadians: float, rotationAxis: Rhino.Geometry.Vector3d, rotationCenter: Rhino.Geometry.Point3d) -> bool
Rhino.DocObjects.ViewportInfo.SetCameraDirection(self, direction: Rhino.Geometry.Vector3d) -> bool
Rhino.DocObjects.ViewportInfo.SetCameraLocation(self, location: Rhino.Geometry.Point3d) -> bool
Rhino.DocObjects.ViewportInfo.SetCameraUp(self, up: Rhino.Geometry.Vector3d) -> bool
Rhino.DocObjects.ViewportInfo.SetFrustum(self, left: float, right: float, bottom: float, top: float, nearDistance: float, farDistance: float) -> bool
Rhino.DocObjects.ViewportInfo.SetFrustumNearFar(self, boundingBox: Rhino.Geometry.BoundingBox) -> bool
Rhino.DocObjects.ViewportInfo.SetFrustumNearFar(self, center: Rhino.Geometry.Point3d, radius: float) -> bool
Rhino.DocObjects.ViewportInfo.SetFrustumNearFar(self, nearDistance: float, farDistance: float) -> bool
Rhino.DocObjects.ViewportInfo.SetFrustumNearFar(self, nearDistance: float, farDistance: float, minNearDistance: float, minNearOverFar: float, targetDistance: float) -> bool
Rhino.DocObjects.ViewportInfo.SetScreenPort(self, left: int, right: int, bottom: int, top: int, near: int, far: int) -> bool
Rhino.DocObjects.ViewportInfo.SetScreenPort(self, windowRectangle: System.Drawing.Rectangle) -> bool
Rhino.DocObjects.ViewportInfo.SetScreenPort(self, windowRectangle: System.Drawing.Rectangle, near: int, far: int) -> bool
Rhino.DocObjects.ViewportInfo.SetViewScale(self, scaleX: float, scaleY: float, scaleZ: float) -> None
Rhino.DocObjects.ViewportInfo.TargetDistance(self, useFrustumCenterFallback: bool) -> float
Rhino.DocObjects.ViewportInfo.TransformCamera(self, xform: Rhino.Geometry.Transform) -> bool
Rhino.DocObjects.ViewportInfo.UnlockCamera(self) -> None
Rhino.DocObjects.ViewportInfo.UnlockFrustumSymmetry(self) -> None
Rhino.DocObjects.ViewportInfo.ZoomToScreenRect(self, left: int, top: int, right: int, bottom: int) -> bool
Rhino.DocObjects.ViewportInfo.ZoomToScreenRect(self, windowRectangle: System.Drawing.Rectangle) -> bool
Rhino.DocObjects.ViewportInfo.__init__(self) -> None
Rhino.DocObjects.ViewportInfo.__init__(self, other: Rhino.DocObjects.ViewportInfo) -> None
Rhino.DocObjects.ViewportInfo.__init__(self, rhinoViewport: Rhino.Display.RhinoViewport) -> None
Rhino.DocObjects.Worksession.FileNameFromRuntimeSerialNumber(runtimeSerialNumber: System.UInt32) -> str
Rhino.DocObjects.Worksession.ModelPathFromSerialNumber(self, modelSerialNumber: System.UInt32) -> str
Rhino.FileIO.BinaryArchiveException.__init__(self, message: str) -> None
Rhino.FileIO.BinaryArchiveFile.Close(self) -> None
Rhino.FileIO.BinaryArchiveFile.Dispose(self) -> None
Rhino.FileIO.BinaryArchiveFile.Finalize(self) -> None
Rhino.FileIO.BinaryArchiveFile.Open(self) -> bool
Rhino.FileIO.BinaryArchiveFile.__init__(self, filename: str, mode: Rhino.FileIO.BinaryArchiveMode) -> None
Rhino.FileIO.BinaryArchiveReader.AtEnd(self) -> bool
Rhino.FileIO.BinaryArchiveReader.BeginRead3dmChunk(self, expectedTypeCode: System.UInt32, majorVersion: System.Int32@, minorVersion: System.Int32@) -> bool
Rhino.FileIO.BinaryArchiveReader.BeginRead3dmChunk(self, typeCode: System.UInt32@, value: System.Int64@) -> bool
Rhino.FileIO.BinaryArchiveReader.Dump3dmChunk(self, log: Rhino.FileIO.TextLog) -> uint
Rhino.FileIO.BinaryArchiveReader.EnableCRCCalculation(self, enable: bool) -> bool
Rhino.FileIO.BinaryArchiveReader.EndRead3dmChunk(self, suppressPartiallyReadChunkWarning: bool) -> bool
Rhino.FileIO.BinaryArchiveReader.Read3dmChunkVersion(self, major: System.Int32@, minor: System.Int32@) -> None
Rhino.FileIO.BinaryArchiveReader.Read3dmStartSection(self, version: System.Int32@, comment: System.String@) -> bool
Rhino.FileIO.BinaryArchiveReader.ReadBool(self) -> bool
Rhino.FileIO.BinaryArchiveReader.ReadBoolArray(self) -> List[bool]
Rhino.FileIO.BinaryArchiveReader.ReadBoundingBox(self) -> BoundingBox
Rhino.FileIO.BinaryArchiveReader.ReadByte(self) -> byte
Rhino.FileIO.BinaryArchiveReader.ReadByteArray(self) -> List[byte]
Rhino.FileIO.BinaryArchiveReader.ReadColor(self) -> Color
Rhino.FileIO.BinaryArchiveReader.ReadCompressedBuffer(self) -> List[byte]
Rhino.FileIO.BinaryArchiveReader.ReadDictionary(self) -> ArchivableDictionary
Rhino.FileIO.BinaryArchiveReader.ReadDouble(self) -> float
Rhino.FileIO.BinaryArchiveReader.ReadDoubleArray(self) -> List[float]
Rhino.FileIO.BinaryArchiveReader.ReadFont(self) -> Font
Rhino.FileIO.BinaryArchiveReader.ReadGeometry(self) -> GeometryBase
Rhino.FileIO.BinaryArchiveReader.ReadGeometryArray(self) -> List[GeometryBase]
Rhino.FileIO.BinaryArchiveReader.ReadGuid(self) -> Guid
Rhino.FileIO.BinaryArchiveReader.ReadGuidArray(self) -> List[Guid]
Rhino.FileIO.BinaryArchiveReader.ReadInt(self) -> int
Rhino.FileIO.BinaryArchiveReader.ReadInt64(self) -> int
Rhino.FileIO.BinaryArchiveReader.ReadIntArray(self) -> List[int]
Rhino.FileIO.BinaryArchiveReader.ReadInterval(self) -> Interval
Rhino.FileIO.BinaryArchiveReader.ReadLine(self) -> Line
Rhino.FileIO.BinaryArchiveReader.ReadMeshingParameters(self) -> MeshingParameters
Rhino.FileIO.BinaryArchiveReader.ReadObjRef(self) -> ObjRef
Rhino.FileIO.BinaryArchiveReader.ReadObjRefArray(self) -> List[ObjRef]
Rhino.FileIO.BinaryArchiveReader.ReadPlane(self) -> Plane
Rhino.FileIO.BinaryArchiveReader.ReadPoint(self) -> Point
Rhino.FileIO.BinaryArchiveReader.ReadPoint2d(self) -> Point2d
Rhino.FileIO.BinaryArchiveReader.ReadPoint3d(self) -> Point3d
Rhino.FileIO.BinaryArchiveReader.ReadPoint3f(self) -> Point3f
Rhino.FileIO.BinaryArchiveReader.ReadPoint4d(self) -> Point4d
Rhino.FileIO.BinaryArchiveReader.ReadPointF(self) -> PointF
Rhino.FileIO.BinaryArchiveReader.ReadRay3d(self) -> Ray3d
Rhino.FileIO.BinaryArchiveReader.ReadRectangle(self) -> Rectangle
Rhino.FileIO.BinaryArchiveReader.ReadRectangleF(self) -> RectangleF
Rhino.FileIO.BinaryArchiveReader.ReadRenderSettings(self) -> RenderSettings
Rhino.FileIO.BinaryArchiveReader.ReadSByte(self) -> sbyte
Rhino.FileIO.BinaryArchiveReader.ReadSByteArray(self) -> List[sbyte]
Rhino.FileIO.BinaryArchiveReader.ReadShort(self) -> short
Rhino.FileIO.BinaryArchiveReader.ReadShortArray(self) -> List[short]
Rhino.FileIO.BinaryArchiveReader.ReadSingle(self) -> float
Rhino.FileIO.BinaryArchiveReader.ReadSingleArray(self) -> List[float]
Rhino.FileIO.BinaryArchiveReader.ReadSize(self) -> Size
Rhino.FileIO.BinaryArchiveReader.ReadSizeF(self) -> SizeF
Rhino.FileIO.BinaryArchiveReader.ReadString(self) -> str
Rhino.FileIO.BinaryArchiveReader.ReadStringArray(self) -> List[str]
Rhino.FileIO.BinaryArchiveReader.ReadTransform(self) -> Transform
Rhino.FileIO.BinaryArchiveReader.ReadUInt(self) -> uint
Rhino.FileIO.BinaryArchiveReader.ReadUShort(self) -> ushort
Rhino.FileIO.BinaryArchiveReader.ReadUtf8String(self) -> str
Rhino.FileIO.BinaryArchiveReader.ReadVector2d(self) -> Vector2d
Rhino.FileIO.BinaryArchiveReader.ReadVector3d(self) -> Vector3d
Rhino.FileIO.BinaryArchiveReader.ReadVector3f(self) -> Vector3f
Rhino.FileIO.BinaryArchiveReader.SeekFromCurrentPosition(self, byteOffset: System.UInt64, forward: bool) -> bool
Rhino.FileIO.BinaryArchiveReader.SeekFromCurrentPosition(self, byteOffset: int) -> bool
Rhino.FileIO.BinaryArchiveReader.SeekFromStart(self, byteOffset: System.UInt64) -> bool
Rhino.FileIO.BinaryArchiveWriter.BeginWrite3dmChunk(self, typecode: System.UInt32, majorVersion: int, minorVersion: int) -> bool
Rhino.FileIO.BinaryArchiveWriter.BeginWrite3dmChunk(self, typecode: System.UInt32, value: int) -> bool
Rhino.FileIO.BinaryArchiveWriter.EnableCRCCalculation(self, enable: bool) -> bool
Rhino.FileIO.BinaryArchiveWriter.EndWrite3dmChunk(self) -> bool
Rhino.FileIO.BinaryArchiveWriter.Write3dmChunkVersion(self, major: int, minor: int) -> None
Rhino.FileIO.BinaryArchiveWriter.WriteBool(self, value: bool) -> None
Rhino.FileIO.BinaryArchiveWriter.WriteBoolArray(self, value: Iterable[bool]) -> None
Rhino.FileIO.BinaryArchiveWriter.WriteBoundingBox(self, value: Rhino.Geometry.BoundingBox) -> None
Rhino.FileIO.BinaryArchiveWriter.WriteByte(self, value: System.Byte) -> None
Rhino.FileIO.BinaryArchiveWriter.WriteByteArray(self, value: Iterable[System.Byte]) -> None
Rhino.FileIO.BinaryArchiveWriter.WriteColor(self, value: System.Drawing.Color) -> None
Rhino.FileIO.BinaryArchiveWriter.WriteCompressedBuffer(self, value: Iterable[System.Byte]) -> None
Rhino.FileIO.BinaryArchiveWriter.WriteDictionary(self, dictionary: Rhino.Collections.ArchivableDictionary) -> None
Rhino.FileIO.BinaryArchiveWriter.WriteDouble(self, value: float) -> None
Rhino.FileIO.BinaryArchiveWriter.WriteDoubleArray(self, value: Iterable[float]) -> None
Rhino.FileIO.BinaryArchiveWriter.WriteFont(self, value: System.Drawing.Font) -> None
Rhino.FileIO.BinaryArchiveWriter.WriteGeometry(self, value: Rhino.Geometry.GeometryBase) -> None
Rhino.FileIO.BinaryArchiveWriter.WriteGeometryArray(self, geometry: Iterable[Rhino.Geometry.GeometryBase]) -> None
Rhino.FileIO.BinaryArchiveWriter.WriteGuid(self, value: System.Guid) -> None
Rhino.FileIO.BinaryArchiveWriter.WriteGuidArray(self, value: Iterable[System.Guid]) -> None
Rhino.FileIO.BinaryArchiveWriter.WriteInt(self, value: int) -> None
Rhino.FileIO.BinaryArchiveWriter.WriteInt64(self, value: int) -> None
Rhino.FileIO.BinaryArchiveWriter.WriteIntArray(self, value: Iterable[int]) -> None
Rhino.FileIO.BinaryArchiveWriter.WriteInterval(self, value: Rhino.Geometry.Interval) -> None
Rhino.FileIO.BinaryArchiveWriter.WriteLine(self, value: Rhino.Geometry.Line) -> None
Rhino.FileIO.BinaryArchiveWriter.WriteMeshingParameters(self, value: Rhino.Geometry.MeshingParameters) -> None
Rhino.FileIO.BinaryArchiveWriter.WriteObjRef(self, objref: Rhino.DocObjects.ObjRef) -> None
Rhino.FileIO.BinaryArchiveWriter.WriteObjRefArray(self, objrefs: Iterable[Rhino.DocObjects.ObjRef]) -> None
Rhino.FileIO.BinaryArchiveWriter.WritePlane(self, value: Rhino.Geometry.Plane) -> None
Rhino.FileIO.BinaryArchiveWriter.WritePoint(self, value: System.Drawing.Point) -> None
Rhino.FileIO.BinaryArchiveWriter.WritePoint2d(self, value: Rhino.Geometry.Point2d) -> None
Rhino.FileIO.BinaryArchiveWriter.WritePoint3d(self, value: Rhino.Geometry.Point3d) -> None
Rhino.FileIO.BinaryArchiveWriter.WritePoint3f(self, value: Rhino.Geometry.Point3f) -> None
Rhino.FileIO.BinaryArchiveWriter.WritePoint4d(self, value: Rhino.Geometry.Point4d) -> None
Rhino.FileIO.BinaryArchiveWriter.WritePointF(self, value: System.Drawing.PointF) -> None
Rhino.FileIO.BinaryArchiveWriter.WriteRay3d(self, value: Rhino.Geometry.Ray3d) -> None
Rhino.FileIO.BinaryArchiveWriter.WriteRectangle(self, value: System.Drawing.Rectangle) -> None
Rhino.FileIO.BinaryArchiveWriter.WriteRectangleF(self, value: System.Drawing.RectangleF) -> None
Rhino.FileIO.BinaryArchiveWriter.WriteRenderSettings(self, value: Rhino.Render.RenderSettings) -> None
Rhino.FileIO.BinaryArchiveWriter.WriteSByte(self, value: System.SByte) -> None
Rhino.FileIO.BinaryArchiveWriter.WriteSByteArray(self, value: Iterable[System.SByte]) -> None
Rhino.FileIO.BinaryArchiveWriter.WriteShort(self, value: System.Int16) -> None
Rhino.FileIO.BinaryArchiveWriter.WriteShortArray(self, value: Iterable[System.Int16]) -> None
Rhino.FileIO.BinaryArchiveWriter.WriteSingle(self, value: float) -> None
Rhino.FileIO.BinaryArchiveWriter.WriteSingleArray(self, value: Iterable[float]) -> None
Rhino.FileIO.BinaryArchiveWriter.WriteSize(self, value: System.Drawing.Size) -> None
Rhino.FileIO.BinaryArchiveWriter.WriteSizeF(self, value: System.Drawing.SizeF) -> None
Rhino.FileIO.BinaryArchiveWriter.WriteString(self, value: str) -> None
Rhino.FileIO.BinaryArchiveWriter.WriteStringArray(self, value: Iterable[str]) -> None
Rhino.FileIO.BinaryArchiveWriter.WriteTransform(self, value: Rhino.Geometry.Transform) -> None
Rhino.FileIO.BinaryArchiveWriter.WriteUInt(self, value: System.UInt32) -> None
Rhino.FileIO.BinaryArchiveWriter.WriteUShort(self, value: System.UInt16) -> None
Rhino.FileIO.BinaryArchiveWriter.WriteUtf8String(self, value: str) -> None
Rhino.FileIO.BinaryArchiveWriter.WriteVector2d(self, value: Rhino.Geometry.Vector2d) -> None
Rhino.FileIO.BinaryArchiveWriter.WriteVector3d(self, value: Rhino.Geometry.Vector3d) -> None
Rhino.FileIO.BinaryArchiveWriter.WriteVector3f(self, value: Rhino.Geometry.Vector3f) -> None
Rhino.FileIO.CommonComponentTable`1.Clear(self) -> None
Rhino.FileIO.CommonComponentTable`1.Delete(self, item: `0) -> bool
Rhino.FileIO.CommonComponentTable`1.FindId(self, id: System.Guid) -> T
Rhino.FileIO.CommonComponentTable`1.GetEnumerator(self) -> IEnumerator<T>
Rhino.FileIO.ContentHash.!=(left: Rhino.FileIO.ContentHash, right: Rhino.FileIO.ContentHash) -> operator
Rhino.FileIO.ContentHash.==(left: Rhino.FileIO.ContentHash, right: Rhino.FileIO.ContentHash) -> operator
Rhino.FileIO.ContentHash.Clone(self) -> Rhino.FileIO.ContentHash
Rhino.FileIO.ContentHash.CreateFromFile(path: str) -> Rhino.FileIO.ContentHash
Rhino.FileIO.ContentHash.Equals(self, obj: Any) -> bool
Rhino.FileIO.ContentHash.Equals(self, other: Rhino.FileIO.ContentHash) -> bool
Rhino.FileIO.ContentHash.GetHashCode(self) -> int
Rhino.FileIO.ContentHash.__init__(self, other: Rhino.FileIO.ContentHash) -> None
Rhino.FileIO.DracoCompression.Compress(mesh: Rhino.Geometry.Mesh) -> Rhino.FileIO.DracoCompression
Rhino.FileIO.DracoCompression.Compress(mesh: Rhino.Geometry.Mesh, options: Rhino.FileIO.DracoCompressionOptions) -> Rhino.FileIO.DracoCompression
Rhino.FileIO.DracoCompression.Compress(pointCloud: Rhino.Geometry.PointCloud) -> Rhino.FileIO.DracoCompression
Rhino.FileIO.DracoCompression.Compress(pointCloud: Rhino.Geometry.PointCloud, options: Rhino.FileIO.DracoCompressionOptions) -> Rhino.FileIO.DracoCompression
Rhino.FileIO.DracoCompression.DecompressBase64String(encoded: str) -> GeometryBase
Rhino.FileIO.DracoCompression.DecompressByteArray(bytes: List[System.Byte]) -> GeometryBase
Rhino.FileIO.DracoCompression.DecompressFile(path: str) -> GeometryBase
Rhino.FileIO.DracoCompression.Dispose(self) -> None
Rhino.FileIO.DracoCompression.Finalize(self) -> None
Rhino.FileIO.DracoCompression.ToBase64String(self) -> str
Rhino.FileIO.DracoCompression.ToByteArray(self) -> List[byte]
Rhino.FileIO.DracoCompression.Write(self, path: str) -> bool
Rhino.FileIO.DracoCompressionOptions.__init__(self) -> None
Rhino.FileIO.File3dm.Dispose(self) -> None
Rhino.FileIO.File3dm.Dispose(self, disposing: bool) -> None
Rhino.FileIO.File3dm.Dump(self) -> str
Rhino.FileIO.File3dm.DumpSummary(self) -> str
Rhino.FileIO.File3dm.DumpToTextLog(self, log: Rhino.FileIO.TextLog) -> None
Rhino.FileIO.File3dm.Finalize(self) -> None
Rhino.FileIO.File3dm.FromByteArray(bytes: List[System.Byte]) -> Rhino.FileIO.File3dm
Rhino.FileIO.File3dm.GetPreviewImage(self) -> Bitmap
Rhino.FileIO.File3dm.Read(arg1: str, arg2: Rhino.FileIO.File3dm.TableTypeFilter, arg3: Rhino.FileIO.File3dm.ObjectTypeFilter) -> Rhino.FileIO.File3dm
Rhino.FileIO.File3dm.Read(path: str) -> Rhino.FileIO.File3dm
Rhino.FileIO.File3dm.ReadApplicationData(path: str, applicationName: System.String@, applicationUrl: System.String@, applicationDetails: System.String@) -> None
Rhino.FileIO.File3dm.ReadArchiveVersion(path: str) -> int
Rhino.FileIO.File3dm.ReadDimensionStyles(path: str) -> List[DimensionStyle]
Rhino.FileIO.File3dm.ReadEarthAnchorPoint(path: str) -> EarthAnchorPoint
Rhino.FileIO.File3dm.ReadNotes(path: str) -> str
Rhino.FileIO.File3dm.ReadPreviewImage(path: str) -> Bitmap
Rhino.FileIO.File3dm.ReadRevisionHistory(path: str, createdBy: System.String@, lastEditedBy: System.String@, revision: System.Int32@, createdOn: System.DateTime@, lastEditedOn: System.DateTime@) -> bool
Rhino.FileIO.File3dm.ReadWithLog(arg1: str, arg2: Rhino.FileIO.File3dm.TableTypeFilter, arg3: Rhino.FileIO.File3dm.ObjectTypeFilter, arg4: System.String@) -> Rhino.FileIO.File3dm
Rhino.FileIO.File3dm.ReadWithLog(path: str, errorLog: System.String@) -> Rhino.FileIO.File3dm
Rhino.FileIO.File3dm.SetPreviewImage(self, image: System.Drawing.Bitmap) -> None
Rhino.FileIO.File3dm.ToByteArray(self) -> List[byte]
Rhino.FileIO.File3dm.ToByteArray(self, options: Rhino.FileIO.File3dmWriteOptions) -> List[byte]
Rhino.FileIO.File3dm.Write(self, path: str, options: Rhino.FileIO.File3dmWriteOptions) -> bool
Rhino.FileIO.File3dm.Write(self, path: str, version: int) -> bool
Rhino.FileIO.File3dm.WriteMultipleObjects(path: str, geometry: Iterable[Rhino.Geometry.GeometryBase]) -> bool
Rhino.FileIO.File3dm.WriteOneObject(path: str, geometry: Rhino.Geometry.GeometryBase) -> bool
Rhino.FileIO.File3dm.WriteWithLog(self, path: str, options: Rhino.FileIO.File3dmWriteOptions, errorLog: System.String@) -> bool
Rhino.FileIO.File3dm.WriteWithLog(self, path: str, version: int, errorLog: System.String@) -> bool
Rhino.FileIO.File3dm.[ObsoleteAttribute(self) -> None
Rhino.FileIO.File3dm.[ObsoleteAttribute(self, arg1: Rhino.FileIO.TextLog) -> None
Rhino.FileIO.File3dm.[ObsoleteAttribute(self, arg1: System.String@) -> None
Rhino.FileIO.File3dm.[ObsoleteAttribute(self, arg1: bool, arg2: System.Int32@, arg3: System.String@, arg4: System.Int32[]@) -> None
Rhino.FileIO.File3dm.__init__(self) -> None
Rhino.FileIO.File3dmCommonComponentTable`1.Add(self, item: `0) -> None
Rhino.FileIO.File3dmCommonComponentTable`1.Delete(self, index: int) -> None
Rhino.FileIO.File3dmCommonComponentTable`1.Delete(self, item: `0) -> bool
Rhino.FileIO.File3dmCommonComponentTable`1.Dump(self) -> str
Rhino.FileIO.File3dmDimStyleTable.FindIndex(self, index: int) -> DimensionStyle
Rhino.FileIO.File3dmDimStyleTable.FindName(self, name: str) -> DimensionStyle
Rhino.FileIO.File3dmDimStyleTable.FindNameHash(self, nameHash: Rhino.FileIO.NameHash) -> DimensionStyle
Rhino.FileIO.File3dmDisplacement.AddSubItem(self, face_index: int, on: bool, texture: System.Guid, mapping_channel: int, black_point: float, white_point: float) -> bool
Rhino.FileIO.File3dmDisplacement.DeleteAllSubItems(self) -> None
Rhino.FileIO.File3dmDisplacement.DeleteSubItem(self, face_index: int) -> None
Rhino.FileIO.File3dmDisplacement.GetSubItemFaceIndexes(self) -> List[int]
Rhino.FileIO.File3dmDisplacement.SetSubItemBlackPoint(self, face_index: int, black_point: float) -> None
Rhino.FileIO.File3dmDisplacement.SetSubItemMappingChannel(self, face_index: int, chan: int) -> None
Rhino.FileIO.File3dmDisplacement.SetSubItemOn(self, face_index: int, on: bool) -> None
Rhino.FileIO.File3dmDisplacement.SetSubItemTexture(self, face_index: int, texture_id: System.Guid) -> None
Rhino.FileIO.File3dmDisplacement.SetSubItemWhitePoint(self, face_index: int, white_point: float) -> None
Rhino.FileIO.File3dmDisplacement.SubItemBlackPoint(self, face_index: int) -> float
Rhino.FileIO.File3dmDisplacement.SubItemMappingChannel(self, face_index: int) -> int
Rhino.FileIO.File3dmDisplacement.SubItemOn(self, face_index: int) -> bool
Rhino.FileIO.File3dmDisplacement.SubItemTexture(self, face_index: int) -> Guid
Rhino.FileIO.File3dmDisplacement.SubItemWhitePoint(self, face_index: int) -> float
Rhino.FileIO.File3dmEmbeddedFile.SaveToFile(self, filename: str) -> bool
Rhino.FileIO.File3dmEmbeddedFile.__init__(self) -> None
Rhino.FileIO.File3dmEmbeddedFiles.Add(self, filename: str) -> bool
Rhino.FileIO.File3dmEmbeddedFiles.GetEnumerator(self) -> IEnumerator<File3dmEmbeddedFile>
Rhino.FileIO.File3dmEmbeddedFiles.__init__(self, f: Rhino.FileIO.File3dm) -> None
Rhino.FileIO.File3dmGroupTable.AddGroup(self) -> int
Rhino.FileIO.File3dmGroupTable.FindIndex(self, groupIndex: int) -> Group
Rhino.FileIO.File3dmGroupTable.FindName(self, name: str) -> Group
Rhino.FileIO.File3dmGroupTable.FindNameHash(self, nameHash: Rhino.FileIO.NameHash) -> Group
Rhino.FileIO.File3dmGroupTable.GroupMembers(self, groupIndex: int) -> List[File3dmObject]
Rhino.FileIO.File3dmHatchPatternTable.FindIndex(self, index: int) -> HatchPattern
Rhino.FileIO.File3dmHatchPatternTable.FindName(self, name: str) -> HatchPattern
Rhino.FileIO.File3dmHatchPatternTable.FindNameHash(self, nameHash: Rhino.FileIO.NameHash) -> HatchPattern
Rhino.FileIO.File3dmInstanceDefinitionTable.Add(self, name: str, description: str, basePoint: Rhino.Geometry.Point3d, geometry: Iterable[Rhino.Geometry.GeometryBase]) -> int
Rhino.FileIO.File3dmInstanceDefinitionTable.Add(self, name: str, description: str, basePoint: Rhino.Geometry.Point3d, geometry: Iterable[Rhino.Geometry.GeometryBase], attributes: Iterable[Rhino.DocObjects.ObjectAttributes]) -> int
Rhino.FileIO.File3dmInstanceDefinitionTable.Add(self, name: str, description: str, basePoint: Rhino.Geometry.Point3d, geometry: Rhino.Geometry.GeometryBase, attributes: Rhino.DocObjects.ObjectAttributes) -> int
Rhino.FileIO.File3dmInstanceDefinitionTable.Add(self, name: str, description: str, url: str, urlTag: str, basePoint: Rhino.Geometry.Point3d, geometry: Iterable[Rhino.Geometry.GeometryBase], attributes: Iterable[Rhino.DocObjects.ObjectAttributes]) -> int
Rhino.FileIO.File3dmInstanceDefinitionTable.AddLinked(self, filename: str, name: str, description: str) -> int
Rhino.FileIO.File3dmInstanceDefinitionTable.FindName(self, name: str) -> InstanceDefinitionGeometry
Rhino.FileIO.File3dmInstanceDefinitionTable.FindNameHash(self, nameHash: Rhino.FileIO.NameHash) -> InstanceDefinitionGeometry
Rhino.FileIO.File3dmLayerTable.AddDefaultLayer(self, name: str, color: System.Drawing.Color) -> int
Rhino.FileIO.File3dmLayerTable.AddLayer(self, name: str, color: System.Drawing.Color) -> int
Rhino.FileIO.File3dmLayerTable.AddLayer(self, name: str, color: System.Drawing.Color, parentId: System.Guid) -> int
Rhino.FileIO.File3dmLayerTable.FindIndex(self, index: int) -> Layer
Rhino.FileIO.File3dmLayerTable.FindName(self, name: str, parentId: System.Guid) -> Layer
Rhino.FileIO.File3dmLayerTable.FindNameHash(self, nameHash: Rhino.FileIO.NameHash) -> Layer
Rhino.FileIO.File3dmLinetypeTable.FindIndex(self, index: int) -> Linetype
Rhino.FileIO.File3dmLinetypeTable.FindName(self, name: str) -> Linetype
Rhino.FileIO.File3dmLinetypeTable.FindNameHash(self, nameHash: Rhino.FileIO.NameHash) -> Linetype
Rhino.FileIO.File3dmMaterialTable.AddMaterial(self, material: Rhino.DocObjects.Material) -> int
Rhino.FileIO.File3dmMaterialTable.FindIndex(self, index: int) -> Material
Rhino.FileIO.File3dmNamedConstructionPlanes.Add(self, cplane: Rhino.DocObjects.ConstructionPlane) -> None
Rhino.FileIO.File3dmNamedConstructionPlanes.Add(self, name: str, plane: Rhino.Geometry.Plane) -> int
Rhino.FileIO.File3dmNamedConstructionPlanes.Clear(self) -> None
Rhino.FileIO.File3dmNamedConstructionPlanes.Contains(self, cplane: Rhino.DocObjects.ConstructionPlane) -> bool
Rhino.FileIO.File3dmNamedConstructionPlanes.CopyTo(self, array: List[Rhino.DocObjects.ConstructionPlane], arrayIndex: int) -> None
Rhino.FileIO.File3dmNamedConstructionPlanes.Delete(self, cplane: Rhino.DocObjects.ConstructionPlane) -> bool
Rhino.FileIO.File3dmNamedConstructionPlanes.Delete(self, index: int) -> bool
Rhino.FileIO.File3dmNamedConstructionPlanes.FindName(self, name: str) -> ConstructionPlane
Rhino.FileIO.File3dmNamedConstructionPlanes.GetEnumerator(self) -> IEnumerator<ConstructionPlane>
Rhino.FileIO.File3dmNamedConstructionPlanes.IndexOf(self, cplane: Rhino.DocObjects.ConstructionPlane) -> int
Rhino.FileIO.File3dmNotes.__init__(self) -> None
Rhino.FileIO.File3dmObject.Equals(self, obj: Any) -> bool
Rhino.FileIO.File3dmObject.Equals(self, other: Rhino.FileIO.File3dmObject) -> bool
Rhino.FileIO.File3dmObject.GetHashCode(self) -> int
Rhino.FileIO.File3dmObject.GetTextureMapping(self, mappingChannelId: int, xform: Rhino.Geometry.Transform@) -> TextureMapping
Rhino.FileIO.File3dmObject.TryReadUserData(self, userDataId: System.Guid, readFromAttributes: bool, dataReader: Func[Rhino.FileIO.File3dm, Rhino.FileIO.BinaryArchiveReader, bool]) -> bool
Rhino.FileIO.File3dmObjectTable.Add(self, item: Rhino.FileIO.File3dmObject) -> None
Rhino.FileIO.File3dmObjectTable.Add(self, item: Rhino.Geometry.GeometryBase, attributes: Rhino.DocObjects.ObjectAttributes) -> Guid
Rhino.FileIO.File3dmObjectTable.AddAngularDimension(self, dimension: Rhino.Geometry.AngularDimension) -> Guid
Rhino.FileIO.File3dmObjectTable.AddAngularDimension(self, dimension: Rhino.Geometry.AngularDimension, attributes: Rhino.DocObjects.ObjectAttributes) -> Guid
Rhino.FileIO.File3dmObjectTable.AddArc(self, arc: Rhino.Geometry.Arc) -> Guid
Rhino.FileIO.File3dmObjectTable.AddArc(self, arc: Rhino.Geometry.Arc, attributes: Rhino.DocObjects.ObjectAttributes) -> Guid
Rhino.FileIO.File3dmObjectTable.AddBrep(self, brep: Rhino.Geometry.Brep) -> Guid
Rhino.FileIO.File3dmObjectTable.AddBrep(self, brep: Rhino.Geometry.Brep, attributes: Rhino.DocObjects.ObjectAttributes) -> Guid
Rhino.FileIO.File3dmObjectTable.AddCircle(self, circle: Rhino.Geometry.Circle) -> Guid
Rhino.FileIO.File3dmObjectTable.AddCircle(self, circle: Rhino.Geometry.Circle, attributes: Rhino.DocObjects.ObjectAttributes) -> Guid
Rhino.FileIO.File3dmObjectTable.AddClippingPlane(self, plane: Rhino.Geometry.Plane, uMagnitude: float, vMagnitude: float, clippedViewportId: System.Guid) -> Guid
Rhino.FileIO.File3dmObjectTable.AddClippingPlane(self, plane: Rhino.Geometry.Plane, uMagnitude: float, vMagnitude: float, clippedViewportIds: Iterable[System.Guid]) -> Guid
Rhino.FileIO.File3dmObjectTable.AddClippingPlane(self, plane: Rhino.Geometry.Plane, uMagnitude: float, vMagnitude: float, clippedViewportIds: Iterable[System.Guid], attributes: Rhino.DocObjects.ObjectAttributes) -> Guid
Rhino.FileIO.File3dmObjectTable.AddCurve(self, curve: Rhino.Geometry.Curve) -> Guid
Rhino.FileIO.File3dmObjectTable.AddCurve(self, curve: Rhino.Geometry.Curve, attributes: Rhino.DocObjects.ObjectAttributes) -> Guid
Rhino.FileIO.File3dmObjectTable.AddEllipse(self, ellipse: Rhino.Geometry.Ellipse) -> Guid
Rhino.FileIO.File3dmObjectTable.AddEllipse(self, ellipse: Rhino.Geometry.Ellipse, attributes: Rhino.DocObjects.ObjectAttributes) -> Guid
Rhino.FileIO.File3dmObjectTable.AddExtrusion(self, extrusion: Rhino.Geometry.Extrusion) -> Guid
Rhino.FileIO.File3dmObjectTable.AddExtrusion(self, extrusion: Rhino.Geometry.Extrusion, attributes: Rhino.DocObjects.ObjectAttributes) -> Guid
Rhino.FileIO.File3dmObjectTable.AddHatch(self, hatch: Rhino.Geometry.Hatch) -> Guid
Rhino.FileIO.File3dmObjectTable.AddHatch(self, hatch: Rhino.Geometry.Hatch, attributes: Rhino.DocObjects.ObjectAttributes) -> Guid
Rhino.FileIO.File3dmObjectTable.AddInstanceObject(self, instanceDefinitionIndex: int, instanceXform: Rhino.Geometry.Transform) -> Guid
Rhino.FileIO.File3dmObjectTable.AddInstanceObject(self, instanceDefinitionIndex: int, instanceXform: Rhino.Geometry.Transform, attributes: Rhino.DocObjects.ObjectAttributes) -> Guid
Rhino.FileIO.File3dmObjectTable.AddInstanceObject(self, instanceReference: Rhino.Geometry.InstanceReferenceGeometry) -> Guid
Rhino.FileIO.File3dmObjectTable.AddInstanceObject(self, instanceReference: Rhino.Geometry.InstanceReferenceGeometry, attributes: Rhino.DocObjects.ObjectAttributes) -> Guid
Rhino.FileIO.File3dmObjectTable.AddLeader(self, plane: Rhino.Geometry.Plane, points: Iterable[Rhino.Geometry.Point2d]) -> Guid
Rhino.FileIO.File3dmObjectTable.AddLeader(self, plane: Rhino.Geometry.Plane, points: Iterable[Rhino.Geometry.Point2d], attributes: Rhino.DocObjects.ObjectAttributes) -> Guid
Rhino.FileIO.File3dmObjectTable.AddLeader(self, points: Iterable[Rhino.Geometry.Point3d]) -> Guid
Rhino.FileIO.File3dmObjectTable.AddLeader(self, text: str, plane: Rhino.Geometry.Plane, points: Iterable[Rhino.Geometry.Point2d]) -> Guid
Rhino.FileIO.File3dmObjectTable.AddLeader(self, text: str, plane: Rhino.Geometry.Plane, points: Iterable[Rhino.Geometry.Point2d], attributes: Rhino.DocObjects.ObjectAttributes) -> Guid
Rhino.FileIO.File3dmObjectTable.AddLeader(self, text: str, points: Iterable[Rhino.Geometry.Point3d]) -> Guid
Rhino.FileIO.File3dmObjectTable.AddLine(self, from: Rhino.Geometry.Point3d, to: Rhino.Geometry.Point3d) -> Guid
Rhino.FileIO.File3dmObjectTable.AddLine(self, from: Rhino.Geometry.Point3d, to: Rhino.Geometry.Point3d, attributes: Rhino.DocObjects.ObjectAttributes) -> Guid
Rhino.FileIO.File3dmObjectTable.AddLine(self, line: Rhino.Geometry.Line) -> Guid
Rhino.FileIO.File3dmObjectTable.AddLine(self, line: Rhino.Geometry.Line, attributes: Rhino.DocObjects.ObjectAttributes) -> Guid
Rhino.FileIO.File3dmObjectTable.AddLinearDimension(self, dimension: Rhino.Geometry.LinearDimension) -> Guid
Rhino.FileIO.File3dmObjectTable.AddLinearDimension(self, dimension: Rhino.Geometry.LinearDimension, attributes: Rhino.DocObjects.ObjectAttributes) -> Guid
Rhino.FileIO.File3dmObjectTable.AddMesh(self, mesh: Rhino.Geometry.Mesh) -> Guid
Rhino.FileIO.File3dmObjectTable.AddMesh(self, mesh: Rhino.Geometry.Mesh, attributes: Rhino.DocObjects.ObjectAttributes) -> Guid
Rhino.FileIO.File3dmObjectTable.AddOrdinateDimension(self, dimension: Rhino.Geometry.OrdinateDimension) -> Guid
Rhino.FileIO.File3dmObjectTable.AddOrdinateDimension(self, dimension: Rhino.Geometry.OrdinateDimension, attributes: Rhino.DocObjects.ObjectAttributes) -> Guid
Rhino.FileIO.File3dmObjectTable.AddPoint(self, point: Rhino.Geometry.Point3d) -> Guid
Rhino.FileIO.File3dmObjectTable.AddPoint(self, point: Rhino.Geometry.Point3d, attributes: Rhino.DocObjects.ObjectAttributes) -> Guid
Rhino.FileIO.File3dmObjectTable.AddPoint(self, point: Rhino.Geometry.Point3f) -> Guid
Rhino.FileIO.File3dmObjectTable.AddPoint(self, point: Rhino.Geometry.Point3f, attributes: Rhino.DocObjects.ObjectAttributes) -> Guid
Rhino.FileIO.File3dmObjectTable.AddPoint(self, x: float, y: float, z: float) -> Guid
Rhino.FileIO.File3dmObjectTable.AddPointCloud(self, cloud: Rhino.Geometry.PointCloud) -> Guid
Rhino.FileIO.File3dmObjectTable.AddPointCloud(self, cloud: Rhino.Geometry.PointCloud, attributes: Rhino.DocObjects.ObjectAttributes) -> Guid
Rhino.FileIO.File3dmObjectTable.AddPointCloud(self, points: Iterable[Rhino.Geometry.Point3d]) -> Guid
Rhino.FileIO.File3dmObjectTable.AddPointCloud(self, points: Iterable[Rhino.Geometry.Point3d], attributes: Rhino.DocObjects.ObjectAttributes) -> Guid
Rhino.FileIO.File3dmObjectTable.AddPoints(self, points: Iterable[Rhino.Geometry.Point3d]) -> List[Guid]
Rhino.FileIO.File3dmObjectTable.AddPoints(self, points: Iterable[Rhino.Geometry.Point3d], attributes: Rhino.DocObjects.ObjectAttributes) -> List[Guid]
Rhino.FileIO.File3dmObjectTable.AddPoints(self, points: Iterable[Rhino.Geometry.Point3f]) -> List[Guid]
Rhino.FileIO.File3dmObjectTable.AddPoints(self, points: Iterable[Rhino.Geometry.Point3f], attributes: Rhino.DocObjects.ObjectAttributes) -> List[Guid]
Rhino.FileIO.File3dmObjectTable.AddPolyline(self, points: Iterable[Rhino.Geometry.Point3d]) -> Guid
Rhino.FileIO.File3dmObjectTable.AddPolyline(self, points: Iterable[Rhino.Geometry.Point3d], attributes: Rhino.DocObjects.ObjectAttributes) -> Guid
Rhino.FileIO.File3dmObjectTable.AddRadialDimension(self, dimension: Rhino.Geometry.RadialDimension) -> Guid
Rhino.FileIO.File3dmObjectTable.AddRadialDimension(self, dimension: Rhino.Geometry.RadialDimension, attributes: Rhino.DocObjects.ObjectAttributes) -> Guid
Rhino.FileIO.File3dmObjectTable.AddSphere(self, sphere: Rhino.Geometry.Sphere) -> Guid
Rhino.FileIO.File3dmObjectTable.AddSphere(self, sphere: Rhino.Geometry.Sphere, attributes: Rhino.DocObjects.ObjectAttributes) -> Guid
Rhino.FileIO.File3dmObjectTable.AddSubD(self, subd: Rhino.Geometry.SubD) -> Guid
Rhino.FileIO.File3dmObjectTable.AddSubD(self, subd: Rhino.Geometry.SubD, attributes: Rhino.DocObjects.ObjectAttributes) -> Guid
Rhino.FileIO.File3dmObjectTable.AddSurface(self, surface: Rhino.Geometry.Surface) -> Guid
Rhino.FileIO.File3dmObjectTable.AddSurface(self, surface: Rhino.Geometry.Surface, attributes: Rhino.DocObjects.ObjectAttributes) -> Guid
Rhino.FileIO.File3dmObjectTable.AddText(self, text3d: Rhino.Display.Text3d) -> Guid
Rhino.FileIO.File3dmObjectTable.AddText(self, text3d: Rhino.Display.Text3d, attributes: Rhino.DocObjects.ObjectAttributes) -> Guid
Rhino.FileIO.File3dmObjectTable.AddText(self, text: str, plane: Rhino.Geometry.Plane, height: float, fontName: str, bold: bool, italic: bool) -> Guid
Rhino.FileIO.File3dmObjectTable.AddText(self, text: str, plane: Rhino.Geometry.Plane, height: float, fontName: str, bold: bool, italic: bool, attributes: Rhino.DocObjects.ObjectAttributes) -> Guid
Rhino.FileIO.File3dmObjectTable.AddText(self, text: str, plane: Rhino.Geometry.Plane, height: float, fontName: str, bold: bool, italic: bool, justification: Rhino.Geometry.TextJustification) -> Guid
Rhino.FileIO.File3dmObjectTable.AddText(self, text: str, plane: Rhino.Geometry.Plane, height: float, fontName: str, bold: bool, italic: bool, justification: Rhino.Geometry.TextJustification, attributes: Rhino.DocObjects.ObjectAttributes) -> Guid
Rhino.FileIO.File3dmObjectTable.AddTextDot(self, dot: Rhino.Geometry.TextDot) -> Guid
Rhino.FileIO.File3dmObjectTable.AddTextDot(self, dot: Rhino.Geometry.TextDot, attributes: Rhino.DocObjects.ObjectAttributes) -> Guid
Rhino.FileIO.File3dmObjectTable.AddTextDot(self, text: str, location: Rhino.Geometry.Point3d) -> Guid
Rhino.FileIO.File3dmObjectTable.AddTextDot(self, text: str, location: Rhino.Geometry.Point3d, attributes: Rhino.DocObjects.ObjectAttributes) -> Guid
Rhino.FileIO.File3dmObjectTable.Delete(self, objectId: System.Guid) -> bool
Rhino.FileIO.File3dmObjectTable.Delete(self, objectIds: Iterable[System.Guid]) -> int
Rhino.FileIO.File3dmObjectTable.FindByGroup(self, group: Rhino.DocObjects.Group) -> List[File3dmObject]
Rhino.FileIO.File3dmObjectTable.FindByLayer(self, layer: Rhino.DocObjects.Layer) -> List[File3dmObject]
Rhino.FileIO.File3dmObjectTable.FindByLayer(self, layer: str) -> List[File3dmObject]
Rhino.FileIO.File3dmObjectTable.GetBoundingBox(self) -> BoundingBox
Rhino.FileIO.File3dmObjectTable.GetEnumerator(self) -> IEnumerator<File3dmObject>
Rhino.FileIO.File3dmPlugInDataTable.Clear(self) -> None
Rhino.FileIO.File3dmPlugInDataTable.Dump(self) -> str
Rhino.FileIO.File3dmPlugInDataTable.GetEnumerator(self) -> IEnumerator<File3dmPlugInData>
Rhino.FileIO.File3dmPlugInDataTable.TryRead(self, pluginData: Rhino.FileIO.File3dmPlugInData, dataReader: Func[Rhino.FileIO.File3dm, Rhino.FileIO.BinaryArchiveReader, bool]) -> bool
Rhino.FileIO.File3dmRenderContent.ChildSlotOn(self, child_slot_name: str) -> bool
Rhino.FileIO.File3dmRenderContent.DeleteChild(self, child_slot_name: str) -> bool
Rhino.FileIO.File3dmRenderContent.FindChild(self, child_slot_name: str) -> Rhino.FileIO.File3dmRenderContent
Rhino.FileIO.File3dmRenderContent.GetParameter(self, param: str) -> IConvertible
Rhino.FileIO.File3dmRenderContent.SetParameter(self, param: str, value: Any) -> bool
Rhino.FileIO.File3dmRenderContent.XML(self, recursive: bool) -> str
Rhino.FileIO.File3dmRenderEnvironment.ToEnvironment(self) -> Environment
Rhino.FileIO.File3dmRenderEnvironments.Find(self, g: System.Guid) -> File3dmRenderEnvironment
Rhino.FileIO.File3dmRenderEnvironments.GetEnumerator(self) -> IEnumerator<File3dmRenderEnvironment>
Rhino.FileIO.File3dmRenderEnvironments.__init__(self, f: Rhino.FileIO.File3dm) -> None
Rhino.FileIO.File3dmRenderMaterial.ToMaterial(self) -> Material
Rhino.FileIO.File3dmRenderMaterials.Find(self, g: System.Guid) -> File3dmRenderMaterial
Rhino.FileIO.File3dmRenderMaterials.GetEnumerator(self) -> IEnumerator<File3dmRenderMaterial>
Rhino.FileIO.File3dmRenderMaterials.__init__(self, f: Rhino.FileIO.File3dm) -> None
Rhino.FileIO.File3dmRenderTexture.ToTexture(self) -> Texture
Rhino.FileIO.File3dmRenderTextures.Find(self, g: System.Guid) -> File3dmRenderTexture
Rhino.FileIO.File3dmRenderTextures.GetEnumerator(self) -> IEnumerator<File3dmRenderTexture>
Rhino.FileIO.File3dmRenderTextures.__init__(self, f: Rhino.FileIO.File3dm) -> None
Rhino.FileIO.File3dmShutLining.AddCurve(self) -> Guid
Rhino.FileIO.File3dmShutLining.CurveEnabled(self, curve_id: System.Guid) -> bool
Rhino.FileIO.File3dmShutLining.CurveIsBump(self, curve_id: System.Guid) -> bool
Rhino.FileIO.File3dmShutLining.CurveProfile(self, curve_id: System.Guid) -> int
Rhino.FileIO.File3dmShutLining.CurvePull(self, curve_id: System.Guid) -> bool
Rhino.FileIO.File3dmShutLining.CurveRadius(self, curve_id: System.Guid) -> float
Rhino.FileIO.File3dmShutLining.DeleteAllCurves(self) -> None
Rhino.FileIO.File3dmShutLining.GetCurves(self) -> List[Guid]
Rhino.FileIO.File3dmShutLining.SetCurveEnabled(self, curve_id: System.Guid, enabled: bool) -> None
Rhino.FileIO.File3dmShutLining.SetCurveIsBump(self, curve_id: System.Guid, b: bool) -> None
Rhino.FileIO.File3dmShutLining.SetCurveProfile(self, curve_id: System.Guid, profile: int) -> None
Rhino.FileIO.File3dmShutLining.SetCurvePull(self, curve_id: System.Guid, pull: bool) -> None
Rhino.FileIO.File3dmShutLining.SetCurveRadius(self, curve_id: System.Guid, radius: float) -> None
Rhino.FileIO.File3dmStringTable.Delete(self, key: str) -> None
Rhino.FileIO.File3dmStringTable.Delete(self, section: str, entry: str) -> None
Rhino.FileIO.File3dmStringTable.GetEntryNames(self, section: str) -> List[str]
Rhino.FileIO.File3dmStringTable.GetKey(self, i: int) -> str
Rhino.FileIO.File3dmStringTable.GetSectionNames(self) -> List[str]
Rhino.FileIO.File3dmStringTable.GetValue(self, i: int) -> str
Rhino.FileIO.File3dmStringTable.GetValue(self, key: str) -> str
Rhino.FileIO.File3dmStringTable.GetValue(self, section: str, entry: str) -> str
Rhino.FileIO.File3dmStringTable.SetString(self, key: str, value: str) -> str
Rhino.FileIO.File3dmStringTable.SetString(self, section: str, entry: str, value: str) -> str
Rhino.FileIO.File3dmViewTable.Add(self, item: Rhino.DocObjects.ViewInfo) -> None
Rhino.FileIO.File3dmViewTable.Clear(self) -> None
Rhino.FileIO.File3dmViewTable.Contains(self, item: Rhino.DocObjects.ViewInfo) -> bool
Rhino.FileIO.File3dmViewTable.CopyTo(self, array: List[Rhino.DocObjects.ViewInfo], arrayIndex: int) -> None
Rhino.FileIO.File3dmViewTable.Delete(self, index: int) -> bool
Rhino.FileIO.File3dmViewTable.Delete(self, item: Rhino.DocObjects.ViewInfo) -> bool
Rhino.FileIO.File3dmViewTable.FindName(self, name: str) -> ViewInfo
Rhino.FileIO.File3dmViewTable.GetEnumerator(self) -> IEnumerator<ViewInfo>
Rhino.FileIO.File3dmViewTable.IndexOf(self, item: Rhino.DocObjects.ViewInfo) -> int
Rhino.FileIO.File3dmWriteOptions.EnableAnalysisMeshes(self, objectType: Rhino.DocObjects.ObjectType, enable: bool) -> None
Rhino.FileIO.File3dmWriteOptions.EnableRenderMeshes(self, objectType: Rhino.DocObjects.ObjectType, enable: bool) -> None
Rhino.FileIO.File3dmWriteOptions.__init__(self) -> None
Rhino.FileIO.File3ds.Read(path: str, doc: Rhino.RhinoDoc, options: Rhino.FileIO.File3dsReadOptions) -> bool
Rhino.FileIO.File3ds.Write(path: str, doc: Rhino.RhinoDoc, options: Rhino.FileIO.File3dsWriteOptions) -> bool
Rhino.FileIO.File3dsReadOptions.ToDictionary(self) -> ArchivableDictionary
Rhino.FileIO.File3dsReadOptions.__init__(self) -> None
Rhino.FileIO.File3dsWriteOptions.ToDictionary(self) -> ArchivableDictionary
Rhino.FileIO.File3dsWriteOptions.__init__(self) -> None
Rhino.FileIO.File3mf.Write(path: str, doc: Rhino.RhinoDoc, options: Rhino.FileIO.File3mfWriteOptions) -> bool
Rhino.FileIO.File3mfWriteOptions.ToDictionary(self) -> ArchivableDictionary
Rhino.FileIO.File3mfWriteOptions.__init__(self) -> None
Rhino.FileIO.FileAi.Read(path: str, doc: Rhino.RhinoDoc, options: Rhino.FileIO.FileAiReadOptions) -> bool
Rhino.FileIO.FileAi.Write(path: str, doc: Rhino.RhinoDoc, options: Rhino.FileIO.FileAiWriteOptions) -> bool
Rhino.FileIO.FileAiReadOptions.ToDictionary(self) -> ArchivableDictionary
Rhino.FileIO.FileAiReadOptions.__init__(self) -> None
Rhino.FileIO.FileAiWriteOptions.ToDictionary(self) -> ArchivableDictionary
Rhino.FileIO.FileAiWriteOptions.__init__(self) -> None
Rhino.FileIO.FileAmf.Write(path: str, doc: Rhino.RhinoDoc, options: Rhino.FileIO.FileAmfWriteOptions) -> bool
Rhino.FileIO.FileAmfWriteOptions.ToDictionary(self) -> ArchivableDictionary
Rhino.FileIO.FileAmfWriteOptions.__init__(self) -> None
Rhino.FileIO.FileCd.Write(path: str, doc: Rhino.RhinoDoc, options: Rhino.FileIO.FileCdWriteOptions) -> bool
Rhino.FileIO.FileCdWriteOptions.ToDictionary(self) -> ArchivableDictionary
Rhino.FileIO.FileCdWriteOptions.__init__(self) -> None
Rhino.FileIO.FileCsv.Write(path: str, doc: Rhino.RhinoDoc, options: Rhino.FileIO.FileCsvWriteOptions) -> bool
Rhino.FileIO.FileCsvWriteOptions.ToDictionary(self) -> ArchivableDictionary
Rhino.FileIO.FileCsvWriteOptions.__init__(self) -> None
Rhino.FileIO.FileDgn.Read(path: str, doc: Rhino.RhinoDoc, options: Rhino.FileIO.FileDgnReadOptions) -> bool
Rhino.FileIO.FileDgnReadOptions.ToDictionary(self) -> ArchivableDictionary
Rhino.FileIO.FileDgnReadOptions.__init__(self) -> None
Rhino.FileIO.FileDst.Read(path: str, doc: Rhino.RhinoDoc, options: Rhino.FileIO.FileDstReadOptions) -> bool
Rhino.FileIO.FileDstReadOptions.ToDictionary(self) -> ArchivableDictionary
Rhino.FileIO.FileDstReadOptions.__init__(self) -> None
Rhino.FileIO.FileDwg.Read(path: str, doc: Rhino.RhinoDoc, options: Rhino.FileIO.FileDwgReadOptions) -> bool
Rhino.FileIO.FileDwg.Write(path: str, doc: Rhino.RhinoDoc, options: Rhino.FileIO.FileDwgWriteOptions) -> bool
Rhino.FileIO.FileDwgReadOptions.ToDictionary(self) -> ArchivableDictionary
Rhino.FileIO.FileDwgReadOptions.__init__(self) -> None
Rhino.FileIO.FileDwgWriteOptions.ToDictionary(self) -> ArchivableDictionary
Rhino.FileIO.FileDwgWriteOptions.__init__(self) -> None
Rhino.FileIO.FileEps.Read(path: str, doc: Rhino.RhinoDoc, options: Rhino.FileIO.FileEpsReadOptions) -> bool
Rhino.FileIO.FileEpsReadOptions.ToDictionary(self) -> ArchivableDictionary
Rhino.FileIO.FileEpsReadOptions.__init__(self) -> None
Rhino.FileIO.FileFbx.Read(path: str, doc: Rhino.RhinoDoc, options: Rhino.FileIO.FileFbxReadOptions) -> bool
Rhino.FileIO.FileFbx.Write(path: str, doc: Rhino.RhinoDoc, options: Rhino.FileIO.FileFbxWriteOptions) -> bool
Rhino.FileIO.FileFbxReadOptions.ToDictionary(self) -> ArchivableDictionary
Rhino.FileIO.FileFbxReadOptions.__init__(self) -> None
Rhino.FileIO.FileFbxWriteOptions.ToDictionary(self) -> ArchivableDictionary
Rhino.FileIO.FileFbxWriteOptions.__init__(self) -> None
Rhino.FileIO.FileGHS.Read(path: str, doc: Rhino.RhinoDoc, options: Rhino.FileIO.FileGHSReadOptions) -> bool
Rhino.FileIO.FileGHSReadOptions.ToDictionary(self) -> ArchivableDictionary
Rhino.FileIO.FileGHSReadOptions.__init__(self) -> None
Rhino.FileIO.FileGltf.Write(filename: str, doc: Rhino.RhinoDoc, options: Rhino.FileIO.FileGltfWriteOptions) -> bool
Rhino.FileIO.FileGltf.__init__(self) -> None
Rhino.FileIO.FileGltfWriteOptions.ToDictionary(self) -> ArchivableDictionary
Rhino.FileIO.FileGltfWriteOptions.__init__(self) -> None
Rhino.FileIO.FileGts.Write(path: str, doc: Rhino.RhinoDoc, options: Rhino.FileIO.FileGtsWriteOptions) -> bool
Rhino.FileIO.FileGtsWriteOptions.ToDictionary(self) -> ArchivableDictionary
Rhino.FileIO.FileGtsWriteOptions.__init__(self) -> None
Rhino.FileIO.FileIgs.Write(path: str, doc: Rhino.RhinoDoc, options: Rhino.FileIO.FileIgsWriteOptions) -> bool
Rhino.FileIO.FileIgsWriteOptions.ToDictionary(self) -> ArchivableDictionary
Rhino.FileIO.FileIgsWriteOptions.__init__(self) -> None
Rhino.FileIO.FileLwo.Read(path: str, doc: Rhino.RhinoDoc, options: Rhino.FileIO.FileLwoReadOptions) -> bool
Rhino.FileIO.FileLwo.Write(path: str, doc: Rhino.RhinoDoc, options: Rhino.FileIO.FileLwoWriteOptions) -> bool
Rhino.FileIO.FileLwoReadOptions.ToDictionary(self) -> ArchivableDictionary
Rhino.FileIO.FileLwoReadOptions.__init__(self) -> None
Rhino.FileIO.FileLwoWriteOptions.ToDictionary(self) -> ArchivableDictionary
Rhino.FileIO.FileLwoWriteOptions.__init__(self) -> None
Rhino.FileIO.FileObj.Read(filename: str, doc: Rhino.RhinoDoc, options: Rhino.FileIO.FileObjReadOptions) -> bool
Rhino.FileIO.FileObj.Write(filename: str, doc: Rhino.RhinoDoc, options: Rhino.FileIO.FileObjWriteOptions) -> WriteFileResult
Rhino.FileIO.FileObj.Write(filename: str, meshes: List[Rhino.Geometry.Mesh], options: Rhino.FileIO.FileObjWriteOptions) -> WriteFileResult
Rhino.FileIO.FileObj.Write(stream: System.IO.StreamWriter, doc: Rhino.RhinoDoc, options: Rhino.FileIO.FileObjWriteOptions) -> WriteFileResult
Rhino.FileIO.FileObjReadOptions.GetTransform(self) -> Transform
Rhino.FileIO.FileObjReadOptions.__init__(self, readOptions: Rhino.FileIO.FileReadOptions) -> None
Rhino.FileIO.FileObjWriteOptions.GetTransform(self) -> Transform
Rhino.FileIO.FileObjWriteOptions.__init__(self, writeOptions: Rhino.FileIO.FileWriteOptions) -> None
Rhino.FileIO.FilePdf.AddPage(self, settings: Rhino.Display.ViewCaptureSettings) -> int
Rhino.FileIO.FilePdf.AddPage(self, widthInDots: int, heightInDots: int, dotsPerInch: int) -> int
Rhino.FileIO.FilePdf.Create() -> Rhino.FileIO.FilePdf
Rhino.FileIO.FilePdf.DrawBitmap(self, pageNumber: int, bitmap: System.Drawing.Bitmap, left: float, top: float, width: float, height: float, rotationInDegrees: float) -> None
Rhino.FileIO.FilePdf.DrawLine(self, pageNumber: int, from: System.Drawing.PointF, to: System.Drawing.PointF, strokeColor: System.Drawing.Color, strokeWidth: float) -> None
Rhino.FileIO.FilePdf.DrawPolyline(self, pageNumber: int, polyline: List[System.Drawing.PointF], fillColor: System.Drawing.Color, strokeColor: System.Drawing.Color, strokeWidth: float) -> None
Rhino.FileIO.FilePdf.DrawText(self, pageNumber: int, text: str, x: float, y: float, heightPoints: float, onfont: Rhino.DocObjects.Font, fillColor: System.Drawing.Color, strokeColor: System.Drawing.Color, strokeWidth: float, angleDegrees: float, horizontalAlignment: Rhino.DocObjects.TextHorizontalAlignment, verticalAlignment: Rhino.DocObjects.TextVerticalAlignment) -> None
Rhino.FileIO.FilePdf.FirePreWriteEvent(self) -> None
Rhino.FileIO.FilePdf.PdfDocumentImplementation(self) -> Object
Rhino.FileIO.FilePdf.Read(path: str, doc: Rhino.RhinoDoc, options: Rhino.FileIO.FilePdfReadOptions) -> bool
Rhino.FileIO.FilePdf.Write(self, filename: str) -> None
Rhino.FileIO.FilePdf.Write(self, stream: System.IO.Stream) -> None
Rhino.FileIO.FilePdf.__init__(self) -> None
Rhino.FileIO.FilePdfReadOptions.ToDictionary(self) -> ArchivableDictionary
Rhino.FileIO.FilePdfReadOptions.__init__(self) -> None
Rhino.FileIO.FilePly.Read(path: str, doc: Rhino.RhinoDoc, options: Rhino.FileIO.FilePlyReadOptions) -> bool
Rhino.FileIO.FilePly.Write(filename: str, doc: Rhino.RhinoDoc, options: Rhino.FileIO.FilePlyWriteOptions) -> WriteFileResult
Rhino.FileIO.FilePlyReadOptions.ToDictionary(self) -> ArchivableDictionary
Rhino.FileIO.FilePlyReadOptions.__init__(self) -> None
Rhino.FileIO.FilePlyWriteOptions.__init__(self, writeOptions: Rhino.FileIO.FileWriteOptions) -> None
Rhino.FileIO.FilePov.Write(path: str, doc: Rhino.RhinoDoc, options: Rhino.FileIO.FilePovWriteOptions) -> bool
Rhino.FileIO.FilePovWriteOptions.ToDictionary(self) -> ArchivableDictionary
Rhino.FileIO.FilePovWriteOptions.__init__(self) -> None
Rhino.FileIO.FileRaw.Read(path: str, doc: Rhino.RhinoDoc, options: Rhino.FileIO.FileRawReadOptions) -> bool
Rhino.FileIO.FileRaw.Write(path: str, doc: Rhino.RhinoDoc, options: Rhino.FileIO.FileRawWriteOptions) -> bool
Rhino.FileIO.FileRawReadOptions.ToDictionary(self) -> ArchivableDictionary
Rhino.FileIO.FileRawReadOptions.__init__(self) -> None
Rhino.FileIO.FileRawWriteOptions.ToDictionary(self) -> ArchivableDictionary
Rhino.FileIO.FileRawWriteOptions.__init__(self) -> None
Rhino.FileIO.FileReadOptions.Dispose(self) -> None
Rhino.FileIO.FileReadOptions.Dispose(self, disposing: bool) -> None
Rhino.FileIO.FileReadOptions.Finalize(self) -> None
Rhino.FileIO.FileReadOptions.__init__(self) -> None
Rhino.FileIO.FileReference.CreateFromFullAndRelativePaths(fullPath: str, relativePath: str) -> Rhino.FileIO.FileReference
Rhino.FileIO.FileReference.CreateFromFullPath(fullPath: str) -> Rhino.FileIO.FileReference
Rhino.FileIO.FileReference.Dispose(self) -> None
Rhino.FileIO.FileReference.Finalize(self) -> None
Rhino.FileIO.FileReference.__init__(self, fullPath: str, relativePath: str, hash: Rhino.FileIO.ContentHash, status: Rhino.FileIO.FileReferenceStatus) -> None
Rhino.FileIO.FileSW.Read(path: str, doc: Rhino.RhinoDoc, options: Rhino.FileIO.FileSwReadOptions) -> bool
Rhino.FileIO.FileSat.Write(filename: str, doc: Rhino.RhinoDoc, options: Rhino.FileIO.FileSatWriteOptions) -> bool
Rhino.FileIO.FileSatWriteOptions.ToDictionary(self) -> ArchivableDictionary
Rhino.FileIO.FileSatWriteOptions.__init__(self) -> None
Rhino.FileIO.FileSkp.Read(path: str, doc: Rhino.RhinoDoc, options: Rhino.FileIO.FileSkpReadOptions) -> bool
Rhino.FileIO.FileSkp.Write(filename: str, doc: Rhino.RhinoDoc, options: Rhino.FileIO.FileSkpWriteOptions) -> bool
Rhino.FileIO.FileSkpReadOptions.ToDictionary(self) -> ArchivableDictionary
Rhino.FileIO.FileSkpReadOptions.__init__(self) -> None
Rhino.FileIO.FileSkpWriteOptions.ToDictionary(self) -> ArchivableDictionary
Rhino.FileIO.FileSkpWriteOptions.__init__(self) -> None
Rhino.FileIO.FileSlc.Write(filename: str, doc: Rhino.RhinoDoc, options: Rhino.FileIO.FileSlcWriteOptions) -> bool
Rhino.FileIO.FileSlcWriteOptions.__init__(self) -> None
Rhino.FileIO.FileStl.Read(path: str, doc: Rhino.RhinoDoc, options: Rhino.FileIO.FileStlReadOptions) -> bool
Rhino.FileIO.FileStl.Write(path: str, doc: Rhino.RhinoDoc, options: Rhino.FileIO.FileStlWriteOptions) -> bool
Rhino.FileIO.FileStlReadOptions.ToDictionary(self) -> ArchivableDictionary
Rhino.FileIO.FileStlReadOptions.__init__(self) -> None
Rhino.FileIO.FileStlWriteOptions.ToDictionary(self) -> ArchivableDictionary
Rhino.FileIO.FileStlWriteOptions.__init__(self) -> None
Rhino.FileIO.FileStp.Read(path: str, doc: Rhino.RhinoDoc, options: Rhino.FileIO.FileStpReadOptions) -> bool
Rhino.FileIO.FileStp.Write(filename: str, doc: Rhino.RhinoDoc, options: Rhino.FileIO.FileStpWriteOptions) -> bool
Rhino.FileIO.FileStpReadOptions.ToDictionary(self) -> ArchivableDictionary
Rhino.FileIO.FileStpReadOptions.__init__(self) -> None
Rhino.FileIO.FileStpWriteOptions.ToDictionary(self) -> ArchivableDictionary
Rhino.FileIO.FileStpWriteOptions.__init__(self) -> None
Rhino.FileIO.FileSvg.Read(path: str, doc: Rhino.RhinoDoc, options: Rhino.FileIO.FileSvgReadOptions) -> bool
Rhino.FileIO.FileSvgReadOptions.ToDictionary(self) -> ArchivableDictionary
Rhino.FileIO.FileSvgReadOptions.__init__(self) -> None
Rhino.FileIO.FileSwReadOptions.ToDictionary(self) -> ArchivableDictionary
Rhino.FileIO.FileSwReadOptions.__init__(self) -> None
Rhino.FileIO.FileTxt.Read(path: str, doc: Rhino.RhinoDoc, options: Rhino.FileIO.FileTxtReadOptions) -> bool
Rhino.FileIO.FileTxt.Write(path: str, doc: Rhino.RhinoDoc, options: Rhino.FileIO.FileTxtWriteOptions) -> bool
Rhino.FileIO.FileTxtReadOptions.ToDictionary(self) -> ArchivableDictionary
Rhino.FileIO.FileTxtReadOptions.__init__(self) -> None
Rhino.FileIO.FileTxtWriteOptions.ToDictionary(self) -> ArchivableDictionary
Rhino.FileIO.FileTxtWriteOptions.__init__(self) -> None
Rhino.FileIO.FileType.__init__(self, extension: str, description: str) -> None
Rhino.FileIO.FileUdo.Write(path: str, doc: Rhino.RhinoDoc, options: Rhino.FileIO.FileUdoWriteOptions) -> bool
Rhino.FileIO.FileUdoWriteOptions.ToDictionary(self) -> ArchivableDictionary
Rhino.FileIO.FileUdoWriteOptions.__init__(self) -> None
Rhino.FileIO.FileUsd.Write(path: str, doc: Rhino.RhinoDoc, options: Rhino.FileIO.FileUsdWriteOptions) -> bool
Rhino.FileIO.FileUsdWriteOptions.ToDictionary(self) -> ArchivableDictionary
Rhino.FileIO.FileUsdWriteOptions.__init__(self) -> None
Rhino.FileIO.FileVda.Write(path: str, doc: Rhino.RhinoDoc, options: Rhino.FileIO.FileVdaWriteOptions) -> bool
Rhino.FileIO.FileVdaWriteOptions.ToDictionary(self) -> ArchivableDictionary
Rhino.FileIO.FileVdaWriteOptions.__init__(self) -> None
Rhino.FileIO.FileVrml.Write(path: str, doc: Rhino.RhinoDoc, options: Rhino.FileIO.FileVrmlWriteOptions) -> bool
Rhino.FileIO.FileVrmlWriteOptions.ToDictionary(self) -> ArchivableDictionary
Rhino.FileIO.FileVrmlWriteOptions.__init__(self) -> None
Rhino.FileIO.FileWriteOptions.Dispose(self) -> None
Rhino.FileIO.FileWriteOptions.Dispose(self, disposing: bool) -> None
Rhino.FileIO.FileWriteOptions.Finalize(self) -> None
Rhino.FileIO.FileWriteOptions.__init__(self) -> None
Rhino.FileIO.FileX3dv.Write(path: str, doc: Rhino.RhinoDoc, options: Rhino.FileIO.FileX3dvWriteOptions) -> bool
Rhino.FileIO.FileX3dvWriteOptions.ToDictionary(self) -> ArchivableDictionary
Rhino.FileIO.FileX3dvWriteOptions.__init__(self) -> None
Rhino.FileIO.FileX_T.Write(filename: str, doc: Rhino.RhinoDoc, options: Rhino.FileIO.FileX_TWriteOptions) -> bool
Rhino.FileIO.FileX_TWriteOptions.ToDictionary(self) -> ArchivableDictionary
Rhino.FileIO.FileX_TWriteOptions.__init__(self) -> None
Rhino.FileIO.FileXaml.Write(path: str, doc: Rhino.RhinoDoc, options: Rhino.FileIO.FileFbxWriteOptions) -> bool
Rhino.FileIO.FileXamlWriteOptions.ToDictionary(self) -> ArchivableDictionary
Rhino.FileIO.FileXamlWriteOptions.__init__(self) -> None
Rhino.FileIO.ICommonComponentTable`1.FindId(self, id: System.Guid) -> T
Rhino.FileIO.ICommonComponentTable`1.FindNameHash(self, nameHash: Rhino.FileIO.NameHash) -> T
Rhino.FileIO.ImageFile.SupportsAlphaChannel(filename: str) -> bool
Rhino.FileIO.ManifestTable.ActiveObjectCount(self, type: Rhino.DocObjects.ModelComponentType) -> int
Rhino.FileIO.ManifestTable.Clear(self) -> None
Rhino.FileIO.ManifestTable.Contains(self, item: Rhino.DocObjects.ModelComponent) -> bool
Rhino.FileIO.ManifestTable.CopyTo(self, array: List[Rhino.DocObjects.ModelComponent], arrayIndex: int) -> None
Rhino.FileIO.ManifestTable.FindId(self, id: System.Guid) -> ModelComponent
Rhino.FileIO.ManifestTable.FindId(self, id: System.Guid, type: Rhino.DocObjects.ModelComponentType) -> ModelComponent
Rhino.FileIO.ManifestTable.FindId<T>(self, id: System.Guid) -> T
Rhino.FileIO.ManifestTable.FindIndex(self, index: int, type: Rhino.DocObjects.ModelComponentType) -> ModelComponent
Rhino.FileIO.ManifestTable.FindIndex<T>(self, index: int) -> T
Rhino.FileIO.ManifestTable.FindName(self, name: str, type: Rhino.DocObjects.ModelComponentType, parent: System.Guid) -> ModelComponent
Rhino.FileIO.ManifestTable.FindName<T>(self, name: str, parent: System.Guid) -> T
Rhino.FileIO.ManifestTable.FindNameHash(self, nameHash: Rhino.FileIO.NameHash, type: Rhino.DocObjects.ModelComponentType) -> ModelComponent
Rhino.FileIO.ManifestTable.FindNameHash<T>(self, nameHash: Rhino.FileIO.NameHash) -> T
Rhino.FileIO.ManifestTable.GetEnumerator(self) -> IEnumerator<ModelComponent>
Rhino.FileIO.ManifestTable.GetEnumerator(self, type: Rhino.DocObjects.ModelComponentType) -> IEnumerator<ModelComponent>
Rhino.FileIO.ManifestTable.GetEnumerator<T>(self) -> IEnumerator<T>
Rhino.FileIO.ManifestTable.GetModelComponentTypeFromGenericType<T>() -> ModelComponentType
Rhino.FileIO.NameHash.!=(left: Rhino.FileIO.NameHash, right: Rhino.FileIO.NameHash) -> operator
Rhino.FileIO.NameHash.==(left: Rhino.FileIO.NameHash, right: Rhino.FileIO.NameHash) -> operator
Rhino.FileIO.NameHash.Clone(self) -> Rhino.FileIO.NameHash
Rhino.FileIO.NameHash.CreateFilePathHash(path: str) -> Rhino.FileIO.NameHash
Rhino.FileIO.NameHash.Equals(self, obj: Any) -> bool
Rhino.FileIO.NameHash.Equals(self, other: Rhino.FileIO.NameHash) -> bool
Rhino.FileIO.NameHash.GetHashCode(self) -> int
Rhino.FileIO.NameHash.__init__(self, name: str) -> None
Rhino.FileIO.NameHash.__init__(self, name: str, parentId: System.Guid) -> None
Rhino.FileIO.NameHash.__init__(self, name: str, parentId: System.Guid, ignoreCase: bool) -> None
Rhino.FileIO.NameHash.__init__(self, name: str, parentId: System.Guid, type: Rhino.DocObjects.ModelComponentType) -> None
Rhino.FileIO.NameHash.__init__(self, other: Rhino.FileIO.NameHash) -> None
Rhino.FileIO.SHA1OpenNURBS.FileSystemPathHash(path: str, ignoreCase: Optional[bool]) -> List[byte]
Rhino.FileIO.SHA1OpenNURBS.Finalize(self) -> None
Rhino.FileIO.SHA1OpenNURBS.Initialize(self) -> None
Rhino.FileIO.SHA1OpenNURBS.StringHash(input: str) -> List[byte]
Rhino.FileIO.SHA1OpenNURBS.__init__(self) -> None
Rhino.FileIO.SerializationOptions.__init__(self) -> None
Rhino.FileIO.TextLog.Dispose(self) -> None
Rhino.FileIO.TextLog.Dispose(self, disposing: bool) -> None
Rhino.FileIO.TextLog.Finalize(self) -> None
Rhino.FileIO.TextLog.NewCommandLine() -> Rhino.FileIO.TextLog
Rhino.FileIO.TextLog.PopIndent(self) -> None
Rhino.FileIO.TextLog.Print(self, format: str, arg0: Any) -> None
Rhino.FileIO.TextLog.Print(self, format: str, arg0: Any, arg1: Any) -> None
Rhino.FileIO.TextLog.Print(self, text: str) -> None
Rhino.FileIO.TextLog.PrintWrappedText(self, text: str, lineLength: int) -> None
Rhino.FileIO.TextLog.PushIndent(self) -> None
Rhino.FileIO.TextLog.ToString(self) -> str
Rhino.FileIO.TextLog.__init__(self) -> None
Rhino.FileIO.TextLog.__init__(self, filename: str) -> None
Rhino.FileIO.TextLog.__init__(self, ptr: System.IntPtr) -> None
Rhino.Geometry.AngularDimension.AdjustFromPoints(self, plane: Rhino.Geometry.Plane, centerpoint: Rhino.Geometry.Point3d, defpoint1: Rhino.Geometry.Point3d, defpoint2: Rhino.Geometry.Point3d, dimlinepoint: Rhino.Geometry.Point3d) -> bool
Rhino.Geometry.AngularDimension.AdjustFromPoints(self, plane: Rhino.Geometry.Plane, extpoint1: Rhino.Geometry.Point3d, extpoint2: Rhino.Geometry.Point3d, dirpoint1: Rhino.Geometry.Point3d, dirpoint2: Rhino.Geometry.Point3d, dimlinepoint: Rhino.Geometry.Point3d) -> bool
Rhino.Geometry.AngularDimension.Create(dimStyle: Rhino.DocObjects.DimensionStyle, line1: Rhino.Geometry.Line, pointOnLine1: Rhino.Geometry.Point3d, line2: Rhino.Geometry.Line, pointOnLine2: Rhino.Geometry.Point3d, pointOnAngularDimensionArc: Rhino.Geometry.Point3d, bSetExtensionPoints: bool) -> Rhino.Geometry.AngularDimension
Rhino.Geometry.AngularDimension.Create(dimStyle: Rhino.DocObjects.DimensionStyle, plane: Rhino.Geometry.Plane, horizontal: Rhino.Geometry.Vector3d, centerpoint: Rhino.Geometry.Point3d, defpoint1: Rhino.Geometry.Point3d, defpoint2: Rhino.Geometry.Point3d, dimlinepoint: Rhino.Geometry.Point3d) -> Rhino.Geometry.AngularDimension
Rhino.Geometry.AngularDimension.Create(dimStyle: Rhino.DocObjects.DimensionStyle, plane: Rhino.Geometry.Plane, horizontal: Rhino.Geometry.Vector3d, extpoint1: Rhino.Geometry.Point3d, extpoint2: Rhino.Geometry.Point3d, dirpoint1: Rhino.Geometry.Point3d, dirpoint2: Rhino.Geometry.Point3d, dimlinepoint: Rhino.Geometry.Point3d) -> Rhino.Geometry.AngularDimension
Rhino.Geometry.AngularDimension.Get3dPoints(self, centerpoint: Rhino.Geometry.Point3d@, defpoint1: Rhino.Geometry.Point3d@, defpoint2: Rhino.Geometry.Point3d@, arrowpoint1: Rhino.Geometry.Point3d@, arrowpoint2: Rhino.Geometry.Point3d@, dimlinepoint: Rhino.Geometry.Point3d@, textpoint: Rhino.Geometry.Point3d@) -> bool
Rhino.Geometry.AngularDimension.GetAngleDisplayText(self, style: Rhino.DocObjects.DimensionStyle) -> str
Rhino.Geometry.AngularDimension.GetDisplayLines(self, style: Rhino.DocObjects.DimensionStyle, scale: float, lines: Rhino.Geometry.Line[]@, arcs: Rhino.Geometry.Arc[]@) -> bool
Rhino.Geometry.AngularDimension.GetTextRectangle(self, corners: Rhino.Geometry.Point3d[]@) -> bool
Rhino.Geometry.AngularDimension.[ObsoleteAttribute(self, arg1: System.Guid, arg2: Rhino.Geometry.Plane, arg3: Rhino.Geometry.Point3d, arg4: Rhino.Geometry.Point3d, arg5: Rhino.Geometry.Point3d, arg6: Rhino.Geometry.Point3d, arg7: Rhino.Geometry.Point3d) -> None
Rhino.Geometry.AngularDimension.__init__(self) -> None
Rhino.Geometry.AngularDimension.__init__(self, arc: Rhino.Geometry.Arc, offset: float) -> None
Rhino.Geometry.AngularDimension.__init__(self, info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext) -> None
Rhino.Geometry.AngularDimension.__init__(self, line1: Rhino.Geometry.Line, pointOnLine1: Rhino.Geometry.Point3d, line2: Rhino.Geometry.Line, pointOnLine2: Rhino.Geometry.Point3d, pointOnAngularDimensionArc: Rhino.Geometry.Point3d, bSetExtensionPoints: bool) -> None
Rhino.Geometry.AngularDimension.__init__(self, plane: Rhino.Geometry.Plane, horizontal: Rhino.Geometry.Vector3d, centerpoint: Rhino.Geometry.Point3d, defpoint1: Rhino.Geometry.Point3d, defpoint2: Rhino.Geometry.Point3d, dimlinepoint: Rhino.Geometry.Point3d) -> None
Rhino.Geometry.AngularDimension.__init__(self, plane: Rhino.Geometry.Plane, horizontal: Rhino.Geometry.Vector3d, extpoint1: Rhino.Geometry.Point3d, extpoint2: Rhino.Geometry.Point3d, dirpoint1: Rhino.Geometry.Point3d, dirpoint2: Rhino.Geometry.Point3d, dimlinepoint: Rhino.Geometry.Point3d) -> None
Rhino.Geometry.AnnotationBase.ClearPropertyOverrides(self) -> bool
Rhino.Geometry.AnnotationBase.FirstCharProperties(rtf_str: str, bold: System.Boolean@, italic: System.Boolean@, underline: System.Boolean@, facename: System.String@) -> bool
Rhino.Geometry.AnnotationBase.FormatRtfString(rtf_in: str, clear_bold: bool, set_bold: bool, clear_italic: bool, set_italic: bool, clear_underline: bool, set_underline: bool, clear_facename: bool, set_facename: bool, facename: str) -> str
Rhino.Geometry.AnnotationBase.GetBoundingBox(self, xform: Rhino.Geometry.Transform) -> BoundingBox
Rhino.Geometry.AnnotationBase.GetDimensionScale(doc: Rhino.RhinoDoc, dimstyle: Rhino.DocObjects.DimensionStyle, vport: Rhino.Display.RhinoViewport) -> float
Rhino.Geometry.AnnotationBase.GetDimensionStyle(self, parentDimStyle: Rhino.DocObjects.DimensionStyle) -> DimensionStyle
Rhino.Geometry.AnnotationBase.GetPlainTextWithRunMap(self, map: System.Int32[]@) -> str
Rhino.Geometry.AnnotationBase.IsAllBold(self) -> bool
Rhino.Geometry.AnnotationBase.IsAllItalic(self) -> bool
Rhino.Geometry.AnnotationBase.IsAllUnderlined(self) -> bool
Rhino.Geometry.AnnotationBase.IsPropertyOverridden(self, arg1: Rhino.DocObjects.DimensionStyle.Field) -> bool
Rhino.Geometry.AnnotationBase.PlainTextToRtf(str: str) -> str
Rhino.Geometry.AnnotationBase.RunReplace(self, replaceString: str, startRunIndex: int, startRunPosition: int, endRunIndex: int, endRunPosition: int) -> bool
Rhino.Geometry.AnnotationBase.SetBold(self, set_on: bool) -> bool
Rhino.Geometry.AnnotationBase.SetFacename(self, set_on: bool, facename: str) -> bool
Rhino.Geometry.AnnotationBase.SetItalic(self, set_on: bool) -> bool
Rhino.Geometry.AnnotationBase.SetOverrideDimStyle(self, OverrideStyle: Rhino.DocObjects.DimensionStyle) -> bool
Rhino.Geometry.AnnotationBase.SetRichText(self, rtfText: str, dimstyle: Rhino.DocObjects.DimensionStyle) -> None
Rhino.Geometry.AnnotationBase.SetUnderline(self, set_on: bool) -> bool
Rhino.Geometry.AnnotationBase.WrapText(self) -> None
Rhino.Geometry.AnnotationBase.__init__(self) -> None
Rhino.Geometry.AnnotationBase.__init__(self, info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext) -> None
Rhino.Geometry.Arc.!=(a: Rhino.Geometry.Arc, b: Rhino.Geometry.Arc) -> operator
Rhino.Geometry.Arc.==(a: Rhino.Geometry.Arc, b: Rhino.Geometry.Arc) -> operator
Rhino.Geometry.Arc.BoundingBox(self) -> BoundingBox
Rhino.Geometry.Arc.ClosestParameter(self, testPoint: Rhino.Geometry.Point3d) -> float
Rhino.Geometry.Arc.ClosestPoint(self, testPoint: Rhino.Geometry.Point3d) -> Point3d
Rhino.Geometry.Arc.EpsilonEquals(self, other: Rhino.Geometry.Arc, epsilon: float) -> bool
Rhino.Geometry.Arc.Equals(self, obj: Any) -> bool
Rhino.Geometry.Arc.Equals(self, other: Rhino.Geometry.Arc) -> bool
Rhino.Geometry.Arc.GetHashCode(self) -> int
Rhino.Geometry.Arc.PointAt(self, t: float) -> Point3d
Rhino.Geometry.Arc.Reverse(self) -> None
Rhino.Geometry.Arc.TangentAt(self, t: float) -> Vector3d
Rhino.Geometry.Arc.ToNurbsCurve(self) -> NurbsCurve
Rhino.Geometry.Arc.ToNurbsCurve(self, degree: int, cvCount: int) -> NurbsCurve
Rhino.Geometry.Arc.Transform(self, xform: Rhino.Geometry.Transform) -> bool
Rhino.Geometry.Arc.Trim(self, domain: Rhino.Geometry.Interval) -> bool
Rhino.Geometry.Arc.__init__(self, center: Rhino.Geometry.Point3d, radius: float, angleRadians: float) -> None
Rhino.Geometry.Arc.__init__(self, circle: Rhino.Geometry.Circle, angleIntervalRadians: Rhino.Geometry.Interval) -> None
Rhino.Geometry.Arc.__init__(self, circle: Rhino.Geometry.Circle, angleRadians: float) -> None
Rhino.Geometry.Arc.__init__(self, plane: Rhino.Geometry.Plane, center: Rhino.Geometry.Point3d, radius: float, angleRadians: float) -> None
Rhino.Geometry.Arc.__init__(self, plane: Rhino.Geometry.Plane, radius: float, angleRadians: float) -> None
Rhino.Geometry.Arc.__init__(self, pointA: Rhino.Geometry.Point3d, tangentA: Rhino.Geometry.Vector3d, pointB: Rhino.Geometry.Point3d) -> None
Rhino.Geometry.Arc.__init__(self, startPoint: Rhino.Geometry.Point3d, pointOnInterior: Rhino.Geometry.Point3d, endPoint: Rhino.Geometry.Point3d) -> None
Rhino.Geometry.ArcCurve.__init__(self) -> None
Rhino.Geometry.ArcCurve.__init__(self, arc: Rhino.Geometry.Arc) -> None
Rhino.Geometry.ArcCurve.__init__(self, arc: Rhino.Geometry.Arc, t0: float, t1: float) -> None
Rhino.Geometry.ArcCurve.__init__(self, circle: Rhino.Geometry.Circle) -> None
Rhino.Geometry.ArcCurve.__init__(self, circle: Rhino.Geometry.Circle, t0: float, t1: float) -> None
Rhino.Geometry.ArcCurve.__init__(self, info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext) -> None
Rhino.Geometry.ArcCurve.__init__(self, other: Rhino.Geometry.ArcCurve) -> None
Rhino.Geometry.AreaMassProperties.CentroidCoordinatesPrincipalMoments(self, x: System.Double@, xaxis: Rhino.Geometry.Vector3d@, y: System.Double@, yaxis: Rhino.Geometry.Vector3d@, z: System.Double@, zaxis: Rhino.Geometry.Vector3d@) -> bool
Rhino.Geometry.AreaMassProperties.CentroidCoordinatesPrincipalMomentsOfInertia(self, x: System.Double@, xaxis: Rhino.Geometry.Vector3d@, y: System.Double@, yaxis: Rhino.Geometry.Vector3d@, z: System.Double@, zaxis: Rhino.Geometry.Vector3d@) -> bool
Rhino.Geometry.AreaMassProperties.Compute(brep: Rhino.Geometry.Brep) -> Rhino.Geometry.AreaMassProperties
Rhino.Geometry.AreaMassProperties.Compute(brep: Rhino.Geometry.Brep, area: bool, firstMoments: bool, secondMoments: bool, productMoments: bool) -> Rhino.Geometry.AreaMassProperties
Rhino.Geometry.AreaMassProperties.Compute(brep: Rhino.Geometry.Brep, area: bool, firstMoments: bool, secondMoments: bool, productMoments: bool, relativeTolerance: float, absoluteTolerance: float) -> Rhino.Geometry.AreaMassProperties
Rhino.Geometry.AreaMassProperties.Compute(closedPlanarCurve: Rhino.Geometry.Curve) -> Rhino.Geometry.AreaMassProperties
Rhino.Geometry.AreaMassProperties.Compute(closedPlanarCurve: Rhino.Geometry.Curve, planarTolerance: float) -> Rhino.Geometry.AreaMassProperties
Rhino.Geometry.AreaMassProperties.Compute(geometry: Iterable[Rhino.Geometry.GeometryBase]) -> Rhino.Geometry.AreaMassProperties
Rhino.Geometry.AreaMassProperties.Compute(geometry: Iterable[Rhino.Geometry.GeometryBase], area: bool, firstMoments: bool, secondMoments: bool, productMoments: bool) -> Rhino.Geometry.AreaMassProperties
Rhino.Geometry.AreaMassProperties.Compute(hatch: Rhino.Geometry.Hatch) -> Rhino.Geometry.AreaMassProperties
Rhino.Geometry.AreaMassProperties.Compute(mesh: Rhino.Geometry.Mesh) -> Rhino.Geometry.AreaMassProperties
Rhino.Geometry.AreaMassProperties.Compute(mesh: Rhino.Geometry.Mesh, area: bool, firstMoments: bool, secondMoments: bool, productMoments: bool) -> Rhino.Geometry.AreaMassProperties
Rhino.Geometry.AreaMassProperties.Compute(surface: Rhino.Geometry.Surface) -> Rhino.Geometry.AreaMassProperties
Rhino.Geometry.AreaMassProperties.Compute(surface: Rhino.Geometry.Surface, area: bool, firstMoments: bool, secondMoments: bool, productMoments: bool) -> Rhino.Geometry.AreaMassProperties
Rhino.Geometry.AreaMassProperties.Dispose(self) -> None
Rhino.Geometry.AreaMassProperties.Dispose(self, disposing: bool) -> None
Rhino.Geometry.AreaMassProperties.Finalize(self) -> None
Rhino.Geometry.AreaMassProperties.WorldCoordinatesPrincipalMoments(self, x: System.Double@, xaxis: Rhino.Geometry.Vector3d@, y: System.Double@, yaxis: Rhino.Geometry.Vector3d@, z: System.Double@, zaxis: Rhino.Geometry.Vector3d@) -> bool
Rhino.Geometry.AreaMassProperties.WorldCoordinatesPrincipalMomentsOfInertia(self, x: System.Double@, xaxis: Rhino.Geometry.Vector3d@, y: System.Double@, yaxis: Rhino.Geometry.Vector3d@, z: System.Double@, zaxis: Rhino.Geometry.Vector3d@) -> bool
Rhino.Geometry.Arrowhead.__init__(self) -> None
Rhino.Geometry.Arrowhead.__init__(self, arg1: Rhino.DocObjects.DimensionStyle.ArrowType, arg2: System.Guid) -> None
Rhino.Geometry.BezierCurve.ChangeDimension(self, desiredDimension: int) -> bool
Rhino.Geometry.BezierCurve.CreateBeziers(sourceCurve: Rhino.Geometry.Curve) -> List[Rhino.Geometry.BezierCurve]
Rhino.Geometry.BezierCurve.CreateCubicBeziers(sourceCurve: Rhino.Geometry.Curve, distanceTolerance: float, kinkTolerance: float) -> List[Rhino.Geometry.BezierCurve]
Rhino.Geometry.BezierCurve.CreateLoftedBezier(points: Iterable[Rhino.Geometry.Point2d]) -> Rhino.Geometry.BezierCurve
Rhino.Geometry.BezierCurve.CreateLoftedBezier(points: Iterable[Rhino.Geometry.Point3d]) -> Rhino.Geometry.BezierCurve
Rhino.Geometry.BezierCurve.CurvatureAt(self, t: float) -> Vector3d
Rhino.Geometry.BezierCurve.Dispose(self) -> None
Rhino.Geometry.BezierCurve.Dispose(self, disposing: bool) -> None
Rhino.Geometry.BezierCurve.Finalize(self) -> None
Rhino.Geometry.BezierCurve.GetBoundingBox(self, accurate: bool) -> BoundingBox
Rhino.Geometry.BezierCurve.GetControlVertex2d(self, index: int) -> Point2d
Rhino.Geometry.BezierCurve.GetControlVertex3d(self, index: int) -> Point3d
Rhino.Geometry.BezierCurve.GetControlVertex4d(self, index: int) -> Point4d
Rhino.Geometry.BezierCurve.GetObjectData(self, info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext) -> None
Rhino.Geometry.BezierCurve.IncreaseDegree(self, desiredDegree: int) -> bool
Rhino.Geometry.BezierCurve.MakeNonRational(self) -> bool
Rhino.Geometry.BezierCurve.MakeRational(self) -> bool
Rhino.Geometry.BezierCurve.PointAt(self, t: float) -> Point3d
Rhino.Geometry.BezierCurve.Split(self, t: float, left: Rhino.Geometry.BezierCurve@, right: Rhino.Geometry.BezierCurve@) -> bool
Rhino.Geometry.BezierCurve.TangentAt(self, t: float) -> Vector3d
Rhino.Geometry.BezierCurve.ToNurbsCurve(self) -> NurbsCurve
Rhino.Geometry.BezierCurve.__init__(self, controlPoints: Iterable[Rhino.Geometry.Point2d]) -> None
Rhino.Geometry.BezierCurve.__init__(self, controlPoints: Iterable[Rhino.Geometry.Point3d]) -> None
Rhino.Geometry.BezierCurve.__init__(self, controlPoints: Iterable[Rhino.Geometry.Point4d]) -> None
Rhino.Geometry.BezierCurve.__init__(self, info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext) -> None
Rhino.Geometry.BezierSurface.ControlVertexCount(self, direction: int) -> int
Rhino.Geometry.BezierSurface.CreateLoftedBezier(curves: Iterable[Rhino.Geometry.BezierCurve]) -> Rhino.Geometry.BezierSurface
Rhino.Geometry.BezierSurface.Dispose(self) -> None
Rhino.Geometry.BezierSurface.Dispose(self, disposing: bool) -> None
Rhino.Geometry.BezierSurface.Domain(self, direction: int) -> Interval
Rhino.Geometry.BezierSurface.Finalize(self) -> None
Rhino.Geometry.BezierSurface.GetBoundingBox(self, accurate: bool) -> BoundingBox
Rhino.Geometry.BezierSurface.GetControlVertex2d(self, i: int, j: int) -> Point2d
Rhino.Geometry.BezierSurface.GetControlVertex3d(self, i: int, j: int) -> Point3d
Rhino.Geometry.BezierSurface.GetControlVertex4d(self, i: int, j: int) -> Point4d
Rhino.Geometry.BezierSurface.MakeNonRational(self) -> bool
Rhino.Geometry.BezierSurface.MakeRational(self) -> bool
Rhino.Geometry.BezierSurface.PointAt(self, u: float, v: float) -> Point3d
Rhino.Geometry.BezierSurface.Reverse(self, direction: int) -> Rhino.Geometry.BezierSurface
Rhino.Geometry.BezierSurface.Split(self, direction: int, t: float, left: Rhino.Geometry.BezierSurface@, right: Rhino.Geometry.BezierSurface@) -> bool
Rhino.Geometry.BezierSurface.ToNurbsSurface(self) -> NurbsSurface
Rhino.Geometry.BezierSurface.Transform(self, xform: Rhino.Geometry.Transform) -> bool
Rhino.Geometry.BezierSurface.Transpose(self) -> Rhino.Geometry.BezierSurface
Rhino.Geometry.BoundingBox.ClosestPoint(self, point: Rhino.Geometry.Point3d) -> Point3d
Rhino.Geometry.BoundingBox.ClosestPoint(self, point: Rhino.Geometry.Point3d, includeInterior: bool) -> Point3d
Rhino.Geometry.BoundingBox.Contains(self, box: Rhino.Geometry.BoundingBox) -> bool
Rhino.Geometry.BoundingBox.Contains(self, box: Rhino.Geometry.BoundingBox, strict: bool) -> bool
Rhino.Geometry.BoundingBox.Contains(self, point: Rhino.Geometry.Point3d) -> bool
Rhino.Geometry.BoundingBox.Contains(self, point: Rhino.Geometry.Point3d, strict: bool) -> bool
Rhino.Geometry.BoundingBox.Corner(self, minX: bool, minY: bool, minZ: bool) -> Point3d
Rhino.Geometry.BoundingBox.FurthestPoint(self, point: Rhino.Geometry.Point3d) -> Point3d
Rhino.Geometry.BoundingBox.GetCorners(self) -> List[Point3d]
Rhino.Geometry.BoundingBox.GetEdges(self) -> List[Line]
Rhino.Geometry.BoundingBox.Inflate(self, amount: float) -> None
Rhino.Geometry.BoundingBox.Inflate(self, xAmount: float, yAmount: float, zAmount: float) -> None
Rhino.Geometry.BoundingBox.Intersection(a: Rhino.Geometry.BoundingBox, b: Rhino.Geometry.BoundingBox) -> Rhino.Geometry.BoundingBox
Rhino.Geometry.BoundingBox.IsDegenerate(self, tolerance: float) -> int
Rhino.Geometry.BoundingBox.MakeValid(self) -> bool
Rhino.Geometry.BoundingBox.PointAt(self, tx: float, ty: float, tz: float) -> Point3d
Rhino.Geometry.BoundingBox.ToBrep(self) -> Brep
Rhino.Geometry.BoundingBox.ToString(self) -> str
Rhino.Geometry.BoundingBox.Transform(self, xform: Rhino.Geometry.Transform) -> bool
Rhino.Geometry.BoundingBox.Union(a: Rhino.Geometry.BoundingBox, b: Rhino.Geometry.BoundingBox) -> Rhino.Geometry.BoundingBox
Rhino.Geometry.BoundingBox.Union(box: Rhino.Geometry.BoundingBox, point: Rhino.Geometry.Point3d) -> Rhino.Geometry.BoundingBox
Rhino.Geometry.BoundingBox.Union(self, other: Rhino.Geometry.BoundingBox) -> None
Rhino.Geometry.BoundingBox.Union(self, point: Rhino.Geometry.Point3d) -> None
Rhino.Geometry.BoundingBox.__init__(self, min: Rhino.Geometry.Point3d, max: Rhino.Geometry.Point3d) -> None
Rhino.Geometry.BoundingBox.__init__(self, minX: float, minY: float, minZ: float, maxX: float, maxY: float, maxZ: float) -> None
Rhino.Geometry.BoundingBox.__init__(self, points: Iterable[Rhino.Geometry.Point3d]) -> None
Rhino.Geometry.BoundingBox.__init__(self, points: Iterable[Rhino.Geometry.Point3d], xform: Rhino.Geometry.Transform) -> None
Rhino.Geometry.Box.ClosestPoint(self, point: Rhino.Geometry.Point3d) -> Point3d
Rhino.Geometry.Box.Contains(self, box: Rhino.Geometry.BoundingBox) -> bool
Rhino.Geometry.Box.Contains(self, box: Rhino.Geometry.BoundingBox, strict: bool) -> bool
Rhino.Geometry.Box.Contains(self, box: Rhino.Geometry.Box) -> bool
Rhino.Geometry.Box.Contains(self, box: Rhino.Geometry.Box, strict: bool) -> bool
Rhino.Geometry.Box.Contains(self, point: Rhino.Geometry.Point3d) -> bool
Rhino.Geometry.Box.Contains(self, point: Rhino.Geometry.Point3d, strict: bool) -> bool
Rhino.Geometry.Box.EpsilonEquals(self, other: Rhino.Geometry.Box, epsilon: float) -> bool
Rhino.Geometry.Box.FurthestPoint(self, point: Rhino.Geometry.Point3d) -> Point3d
Rhino.Geometry.Box.GetCorners(self) -> List[Point3d]
Rhino.Geometry.Box.Inflate(self, amount: float) -> None
Rhino.Geometry.Box.Inflate(self, xAmount: float, yAmount: float, zAmount: float) -> None
Rhino.Geometry.Box.MakeValid(self) -> bool
Rhino.Geometry.Box.PointAt(self, x: float, y: float, z: float) -> Point3d
Rhino.Geometry.Box.RepositionBasePlane(self, origin: Rhino.Geometry.Point3d) -> None
Rhino.Geometry.Box.ToBrep(self) -> Brep
Rhino.Geometry.Box.ToExtrusion(self) -> Extrusion
Rhino.Geometry.Box.Transform(self, xform: Rhino.Geometry.Transform) -> bool
Rhino.Geometry.Box.Union(self, point: Rhino.Geometry.Point3d) -> None
Rhino.Geometry.Box.__init__(self, basePlane: Rhino.Geometry.Plane, boundingbox: Rhino.Geometry.BoundingBox) -> None
Rhino.Geometry.Box.__init__(self, basePlane: Rhino.Geometry.Plane, geometry: Rhino.Geometry.GeometryBase) -> None
Rhino.Geometry.Box.__init__(self, basePlane: Rhino.Geometry.Plane, points: Iterable[Rhino.Geometry.Point3d]) -> None
Rhino.Geometry.Box.__init__(self, basePlane: Rhino.Geometry.Plane, xSize: Rhino.Geometry.Interval, ySize: Rhino.Geometry.Interval, zSize: Rhino.Geometry.Interval) -> None
Rhino.Geometry.Box.__init__(self, bbox: Rhino.Geometry.BoundingBox) -> None
Rhino.Geometry.Box.__init__(self, other: Rhino.Geometry.Box) -> None
Rhino.Geometry.Brep.AddEdgeCurve(self, curve: Rhino.Geometry.Curve) -> int
Rhino.Geometry.Brep.AddSurface(self, surface: Rhino.Geometry.Surface) -> int
Rhino.Geometry.Brep.AddTrimCurve(self, curve: Rhino.Geometry.Curve) -> int
Rhino.Geometry.Brep.Append(self, other: Rhino.Geometry.Brep) -> None
Rhino.Geometry.Brep.CapPlanarHoles(self, tolerance: float) -> Rhino.Geometry.Brep
Rhino.Geometry.Brep.ChangeSeam(face: Rhino.Geometry.BrepFace, direction: int, parameter: float, tolerance: float) -> Rhino.Geometry.Brep
Rhino.Geometry.Brep.ClosestPoint(self, testPoint: Rhino.Geometry.Point3d) -> Point3d
Rhino.Geometry.Brep.ClosestPoint(self, testPoint: Rhino.Geometry.Point3d, closestPoint: Rhino.Geometry.Point3d@, ci: Rhino.Geometry.ComponentIndex@, s: System.Double@, t: System.Double@, maximumDistance: float, normal: Rhino.Geometry.Vector3d@) -> bool
Rhino.Geometry.Brep.Compact(self) -> None
Rhino.Geometry.Brep.CopyTrimCurves(trimSource: Rhino.Geometry.BrepFace, surfaceSource: Rhino.Geometry.Surface, tolerance: float) -> Rhino.Geometry.Brep
Rhino.Geometry.Brep.CreateBaseballSphere(center: Rhino.Geometry.Point3d, radius: float, tolerance: float) -> Rhino.Geometry.Brep
Rhino.Geometry.Brep.CreateBlendShape(face0: Rhino.Geometry.BrepFace, edge0: Rhino.Geometry.BrepEdge, t0: float, rev0: bool, continuity0: Rhino.Geometry.BlendContinuity, face1: Rhino.Geometry.BrepFace, edge1: Rhino.Geometry.BrepEdge, t1: float, rev1: bool, continuity1: Rhino.Geometry.BlendContinuity) -> Curve
Rhino.Geometry.Brep.CreateBlendSurface(face0: Rhino.Geometry.BrepFace, edge0: Rhino.Geometry.BrepEdge, domain0: Rhino.Geometry.Interval, rev0: bool, continuity0: Rhino.Geometry.BlendContinuity, face1: Rhino.Geometry.BrepFace, edge1: Rhino.Geometry.BrepEdge, domain1: Rhino.Geometry.Interval, rev1: bool, continuity1: Rhino.Geometry.BlendContinuity) -> List[Rhino.Geometry.Brep]
Rhino.Geometry.Brep.CreateBooleanDifference(firstBrep: Rhino.Geometry.Brep, secondBrep: Rhino.Geometry.Brep, tolerance: float) -> List[Rhino.Geometry.Brep]
Rhino.Geometry.Brep.CreateBooleanDifference(firstBrep: Rhino.Geometry.Brep, secondBrep: Rhino.Geometry.Brep, tolerance: float, manifoldOnly: bool) -> List[Rhino.Geometry.Brep]
Rhino.Geometry.Brep.CreateBooleanDifference(firstSet: Iterable[Rhino.Geometry.Brep], secondSet: Iterable[Rhino.Geometry.Brep], tolerance: float) -> List[Rhino.Geometry.Brep]
Rhino.Geometry.Brep.CreateBooleanDifference(firstSet: Iterable[Rhino.Geometry.Brep], secondSet: Iterable[Rhino.Geometry.Brep], tolerance: float, manifoldOnly: bool) -> List[Rhino.Geometry.Brep]
Rhino.Geometry.Brep.CreateBooleanDifferenceWithIndexMap(firstSet: Iterable[Rhino.Geometry.Brep], secondSet: Iterable[Rhino.Geometry.Brep], tolerance: float, manifoldOnly: bool, indexMap: System.Int32[]@) -> List[Rhino.Geometry.Brep]
Rhino.Geometry.Brep.CreateBooleanIntersection(firstBrep: Rhino.Geometry.Brep, secondBrep: Rhino.Geometry.Brep, tolerance: float) -> List[Rhino.Geometry.Brep]
Rhino.Geometry.Brep.CreateBooleanIntersection(firstBrep: Rhino.Geometry.Brep, secondBrep: Rhino.Geometry.Brep, tolerance: float, manifoldOnly: bool) -> List[Rhino.Geometry.Brep]
Rhino.Geometry.Brep.CreateBooleanIntersection(firstSet: Iterable[Rhino.Geometry.Brep], secondSet: Iterable[Rhino.Geometry.Brep], tolerance: float) -> List[Rhino.Geometry.Brep]
Rhino.Geometry.Brep.CreateBooleanIntersection(firstSet: Iterable[Rhino.Geometry.Brep], secondSet: Iterable[Rhino.Geometry.Brep], tolerance: float, manifoldOnly: bool) -> List[Rhino.Geometry.Brep]
Rhino.Geometry.Brep.CreateBooleanSplit(firstBrep: Rhino.Geometry.Brep, secondBrep: Rhino.Geometry.Brep, tolerance: float) -> List[Rhino.Geometry.Brep]
Rhino.Geometry.Brep.CreateBooleanSplit(firstSet: Iterable[Rhino.Geometry.Brep], secondSet: Iterable[Rhino.Geometry.Brep], tolerance: float) -> List[Rhino.Geometry.Brep]
Rhino.Geometry.Brep.CreateBooleanUnion(breps: Iterable[Rhino.Geometry.Brep], tolerance: float) -> List[Rhino.Geometry.Brep]
Rhino.Geometry.Brep.CreateBooleanUnion(breps: Iterable[Rhino.Geometry.Brep], tolerance: float, manifoldOnly: bool) -> List[Rhino.Geometry.Brep]
Rhino.Geometry.Brep.CreateBooleanUnion(breps: Iterable[Rhino.Geometry.Brep], tolerance: float, manifoldOnly: bool, nakedEdgePoints: Rhino.Geometry.Point3d[]@, badIntersectionPoints: Rhino.Geometry.Point3d[]@, nonManifoldEdgePoints: Rhino.Geometry.Point3d[]@) -> List[Rhino.Geometry.Brep]
Rhino.Geometry.Brep.CreateChamferSurface(face0: Rhino.Geometry.BrepFace, uv0: Rhino.Geometry.Point2d, radius0: float, face1: Rhino.Geometry.BrepFace, uv1: Rhino.Geometry.Point2d, radius1: float, extend: bool, tolerance: float) -> List[Rhino.Geometry.Brep]
Rhino.Geometry.Brep.CreateChamferSurface(face0: Rhino.Geometry.BrepFace, uv0: Rhino.Geometry.Point2d, radius0: float, face1: Rhino.Geometry.BrepFace, uv1: Rhino.Geometry.Point2d, radius1: float, trim: bool, extend: bool, tolerance: float, outBreps0: Rhino.Geometry.Brep[]@, outBreps1: Rhino.Geometry.Brep[]@) -> List[Rhino.Geometry.Brep]
Rhino.Geometry.Brep.CreateContourCurves(brepToContour: Rhino.Geometry.Brep, contourStart: Rhino.Geometry.Point3d, contourEnd: Rhino.Geometry.Point3d, interval: float) -> List[Curve]
Rhino.Geometry.Brep.CreateContourCurves(brepToContour: Rhino.Geometry.Brep, sectionPlane: Rhino.Geometry.Plane) -> List[Curve]
Rhino.Geometry.Brep.CreateCurvatureAnalysisMesh(brep: Rhino.Geometry.Brep, state: Rhino.ApplicationSettings.CurvatureAnalysisSettingsState) -> List[Mesh]
Rhino.Geometry.Brep.CreateDevelopableLoft(crv0: Rhino.Geometry.Curve, crv1: Rhino.Geometry.Curve, reverse0: bool, reverse1: bool, density: int) -> List[Rhino.Geometry.Brep]
Rhino.Geometry.Brep.CreateDevelopableLoft(rail0: Rhino.Geometry.NurbsCurve, rail1: Rhino.Geometry.NurbsCurve, fixedRulings: Iterable[Rhino.Geometry.Point2d]) -> List[Rhino.Geometry.Brep]
Rhino.Geometry.Brep.CreateEdgeSurface(curves: Iterable[Rhino.Geometry.Curve]) -> Rhino.Geometry.Brep
Rhino.Geometry.Brep.CreateFilletEdges(brep: Rhino.Geometry.Brep, edgeIndices: Iterable[int], startRadii: Iterable[float], endRadii: Iterable[float], blendType: Rhino.Geometry.BlendType, railType: Rhino.Geometry.RailType, setbackFillets: bool, tolerance: float, angleTolerance: float) -> List[Rhino.Geometry.Brep]
Rhino.Geometry.Brep.CreateFilletEdges(brep: Rhino.Geometry.Brep, edgeIndices: Iterable[int], startRadii: Iterable[float], endRadii: Iterable[float], blendType: Rhino.Geometry.BlendType, railType: Rhino.Geometry.RailType, tolerance: float) -> List[Rhino.Geometry.Brep]
Rhino.Geometry.Brep.CreateFilletEdgesVariableRadius(brep: Rhino.Geometry.Brep, edgeIndices: Iterable[int], edgeDistances: Dict[int, List[Rhino.Geometry.BrepEdgeFilletDistance]], blendType: Rhino.Geometry.BlendType, railType: Rhino.Geometry.RailType, setbackFillets: bool, tolerance: float, angleTolerance: float) -> List[Rhino.Geometry.Brep]
Rhino.Geometry.Brep.CreateFilletSurface(face0: Rhino.Geometry.BrepFace, uv0: Rhino.Geometry.Point2d, face1: Rhino.Geometry.BrepFace, uv1: Rhino.Geometry.Point2d, radius: float, extend: bool, tolerance: float) -> List[Rhino.Geometry.Brep]
Rhino.Geometry.Brep.CreateFilletSurface(face0: Rhino.Geometry.BrepFace, uv0: Rhino.Geometry.Point2d, face1: Rhino.Geometry.BrepFace, uv1: Rhino.Geometry.Point2d, radius: float, trim: bool, extend: bool, tolerance: float, outBreps0: Rhino.Geometry.Brep[]@, outBreps1: Rhino.Geometry.Brep[]@) -> List[Rhino.Geometry.Brep]
Rhino.Geometry.Brep.CreateFromBox(box: Rhino.Geometry.BoundingBox) -> Rhino.Geometry.Brep
Rhino.Geometry.Brep.CreateFromBox(box: Rhino.Geometry.Box) -> Rhino.Geometry.Brep
Rhino.Geometry.Brep.CreateFromBox(corners: Iterable[Rhino.Geometry.Point3d]) -> Rhino.Geometry.Brep
Rhino.Geometry.Brep.CreateFromCone(cone: Rhino.Geometry.Cone, capBottom: bool) -> Rhino.Geometry.Brep
Rhino.Geometry.Brep.CreateFromCornerPoints(corner1: Rhino.Geometry.Point3d, corner2: Rhino.Geometry.Point3d, corner3: Rhino.Geometry.Point3d, corner4: Rhino.Geometry.Point3d, tolerance: float) -> Rhino.Geometry.Brep
Rhino.Geometry.Brep.CreateFromCornerPoints(corner1: Rhino.Geometry.Point3d, corner2: Rhino.Geometry.Point3d, corner3: Rhino.Geometry.Point3d, tolerance: float) -> Rhino.Geometry.Brep
Rhino.Geometry.Brep.CreateFromCylinder(cylinder: Rhino.Geometry.Cylinder, capBottom: bool, capTop: bool) -> Rhino.Geometry.Brep
Rhino.Geometry.Brep.CreateFromJoinedEdges(brep0: Rhino.Geometry.Brep, edgeIndex0: int, brep1: Rhino.Geometry.Brep, edgeIndex1: int, joinTolerance: float) -> Rhino.Geometry.Brep
Rhino.Geometry.Brep.CreateFromLoft(curves: Iterable[Rhino.Geometry.Curve], start: Rhino.Geometry.Point3d, end: Rhino.Geometry.Point3d, StartTangent: bool, EndTangent: bool, StartTrim: Rhino.Geometry.BrepTrim, EndTrim: Rhino.Geometry.BrepTrim, loftType: Rhino.Geometry.LoftType, closed: bool) -> List[Rhino.Geometry.Brep]
Rhino.Geometry.Brep.CreateFromLoft(curves: Iterable[Rhino.Geometry.Curve], start: Rhino.Geometry.Point3d, end: Rhino.Geometry.Point3d, loftType: Rhino.Geometry.LoftType, closed: bool) -> List[Rhino.Geometry.Brep]
Rhino.Geometry.Brep.CreateFromLoft(curves: Iterable[Rhino.Geometry.Curve], start: Rhino.Geometry.Point3d, end: Rhino.Geometry.Point3d, loftType: Rhino.Geometry.LoftType, closed: bool, angleTol: float) -> List[Rhino.Geometry.Brep]
Rhino.Geometry.Brep.CreateFromLoftRebuild(curves: Iterable[Rhino.Geometry.Curve], start: Rhino.Geometry.Point3d, end: Rhino.Geometry.Point3d, loftType: Rhino.Geometry.LoftType, closed: bool, angleTol: float, rebuildPointCount: int) -> List[Rhino.Geometry.Brep]
Rhino.Geometry.Brep.CreateFromLoftRebuild(curves: Iterable[Rhino.Geometry.Curve], start: Rhino.Geometry.Point3d, end: Rhino.Geometry.Point3d, loftType: Rhino.Geometry.LoftType, closed: bool, rebuildPointCount: int) -> List[Rhino.Geometry.Brep]
Rhino.Geometry.Brep.CreateFromLoftRefit(curves: Iterable[Rhino.Geometry.Curve], start: Rhino.Geometry.Point3d, end: Rhino.Geometry.Point3d, loftType: Rhino.Geometry.LoftType, closed: bool, angleTol: float, refitTolerance: float) -> List[Rhino.Geometry.Brep]
Rhino.Geometry.Brep.CreateFromLoftRefit(curves: Iterable[Rhino.Geometry.Curve], start: Rhino.Geometry.Point3d, end: Rhino.Geometry.Point3d, loftType: Rhino.Geometry.LoftType, closed: bool, refitTolerance: float) -> List[Rhino.Geometry.Brep]
Rhino.Geometry.Brep.CreateFromMatch(edge: Rhino.Geometry.BrepEdge, targetCurve: Rhino.Geometry.Curve, settings: Rhino.Geometry.MatchSrfSettings, matched: Rhino.Geometry.Brep@, target: Rhino.Geometry.Brep@) -> bool
Rhino.Geometry.Brep.CreateFromMatch(edge: Rhino.Geometry.BrepEdge, targetCurves: Iterable[Rhino.Geometry.Curve], settings: Rhino.Geometry.MatchSrfSettings, matched: Rhino.Geometry.Brep@, target: Rhino.Geometry.Brep@) -> bool
Rhino.Geometry.Brep.CreateFromMesh(mesh: Rhino.Geometry.Mesh, trimmedTriangles: bool) -> Rhino.Geometry.Brep
Rhino.Geometry.Brep.CreateFromOffsetFace(face: Rhino.Geometry.BrepFace, offsetDistance: float, offsetTolerance: float, bothSides: bool, createSolid: bool) -> Rhino.Geometry.Brep
Rhino.Geometry.Brep.CreateFromRevSurface(surface: Rhino.Geometry.RevSurface, capStart: bool, capEnd: bool) -> Rhino.Geometry.Brep
Rhino.Geometry.Brep.CreateFromSphere(sphere: Rhino.Geometry.Sphere) -> Rhino.Geometry.Brep
Rhino.Geometry.Brep.CreateFromSurface(surface: Rhino.Geometry.Surface) -> Rhino.Geometry.Brep
Rhino.Geometry.Brep.CreateFromSweep(rail1: Rhino.Geometry.Curve, rail2: Rhino.Geometry.Curve, shape: Rhino.Geometry.Curve, closed: bool, tolerance: float) -> List[Rhino.Geometry.Brep]
Rhino.Geometry.Brep.CreateFromSweep(rail1: Rhino.Geometry.Curve, rail2: Rhino.Geometry.Curve, shapes: Iterable[Rhino.Geometry.Curve], closed: bool, tolerance: float) -> List[Rhino.Geometry.Brep]
Rhino.Geometry.Brep.CreateFromSweep(rail1: Rhino.Geometry.Curve, rail2: Rhino.Geometry.Curve, shapes: Iterable[Rhino.Geometry.Curve], start: Rhino.Geometry.Point3d, end: Rhino.Geometry.Point3d, closed: bool, tolerance: float, rebuild: Rhino.Geometry.SweepRebuild, rebuildPointCount: int, refitTolerance: float, preserveHeight: bool) -> List[Rhino.Geometry.Brep]
Rhino.Geometry.Brep.CreateFromSweep(rail1: Rhino.Geometry.Curve, rail2: Rhino.Geometry.Curve, shapes: Iterable[Rhino.Geometry.Curve], start: Rhino.Geometry.Point3d, end: Rhino.Geometry.Point3d, closed: bool, tolerance: float, rebuild: Rhino.Geometry.SweepRebuild, rebuildPointCount: int, refitTolerance: float, preserveHeight: bool, autoAdjust: bool) -> List[Rhino.Geometry.Brep]
Rhino.Geometry.Brep.CreateFromSweep(rail: Rhino.Geometry.Curve, shape: Rhino.Geometry.Curve, closed: bool, tolerance: float) -> List[Rhino.Geometry.Brep]
Rhino.Geometry.Brep.CreateFromSweep(rail: Rhino.Geometry.Curve, shapes: Iterable[Rhino.Geometry.Curve], closed: bool, tolerance: float) -> List[Rhino.Geometry.Brep]
Rhino.Geometry.Brep.CreateFromSweep(rail: Rhino.Geometry.Curve, shapes: Iterable[Rhino.Geometry.Curve], startPoint: Rhino.Geometry.Point3d, endPoint: Rhino.Geometry.Point3d, frameType: Rhino.Geometry.SweepFrame, roadlikeNormal: Rhino.Geometry.Vector3d, closed: bool, blendType: Rhino.Geometry.SweepBlend, miterType: Rhino.Geometry.SweepMiter, tolerance: float, rebuildType: Rhino.Geometry.SweepRebuild, rebuildPointCount: int, refitTolerance: float) -> List[Rhino.Geometry.Brep]
Rhino.Geometry.Brep.CreateFromSweepInParts(rail1: Rhino.Geometry.Curve, rail2: Rhino.Geometry.Curve, shapes: Iterable[Rhino.Geometry.Curve], rail_params: Iterable[Rhino.Geometry.Point2d], closed: bool, tolerance: float) -> List[Rhino.Geometry.Brep]
Rhino.Geometry.Brep.CreateFromSweepSegmented(rail: Rhino.Geometry.Curve, shape: Rhino.Geometry.Curve, closed: bool, tolerance: float) -> List[Rhino.Geometry.Brep]
Rhino.Geometry.Brep.CreateFromSweepSegmented(rail: Rhino.Geometry.Curve, shapes: Iterable[Rhino.Geometry.Curve], closed: bool, tolerance: float) -> List[Rhino.Geometry.Brep]
Rhino.Geometry.Brep.CreateFromSweepSegmented(rail: Rhino.Geometry.Curve, shapes: Iterable[Rhino.Geometry.Curve], startPoint: Rhino.Geometry.Point3d, endPoint: Rhino.Geometry.Point3d, frameType: Rhino.Geometry.SweepFrame, roadlikeNormal: Rhino.Geometry.Vector3d, closed: bool, blendType: Rhino.Geometry.SweepBlend, miterType: Rhino.Geometry.SweepMiter, tolerance: float, rebuildType: Rhino.Geometry.SweepRebuild, rebuildPointCount: int, refitTolerance: float) -> List[Rhino.Geometry.Brep]
Rhino.Geometry.Brep.CreateFromTaperedExtrude(curveToExtrude: Rhino.Geometry.Curve, distance: float, direction: Rhino.Geometry.Vector3d, basePoint: Rhino.Geometry.Point3d, draftAngleRadians: float, cornerType: Rhino.Geometry.ExtrudeCornerType, tolerance: float, angleToleranceRadians: float) -> List[Rhino.Geometry.Brep]
Rhino.Geometry.Brep.CreateFromTaperedExtrudeWithRef(curve: Rhino.Geometry.Curve, direction: Rhino.Geometry.Vector3d, distance: float, draftAngle: float, plane: Rhino.Geometry.Plane, tolerance: float) -> List[Rhino.Geometry.Brep]
Rhino.Geometry.Brep.CreateFromTorus(torus: Rhino.Geometry.Torus) -> Rhino.Geometry.Brep
Rhino.Geometry.Brep.CreateOffsetBrep(brep: Rhino.Geometry.Brep, distance: float, solid: bool, extend: bool, shrink: bool, tolerance: float, outBlends: Rhino.Geometry.Brep[]@, outWalls: Rhino.Geometry.Brep[]@) -> List[Rhino.Geometry.Brep]
Rhino.Geometry.Brep.CreateOffsetBrep(brep: Rhino.Geometry.Brep, distance: float, solid: bool, extend: bool, tolerance: float, outBlends: Rhino.Geometry.Brep[]@, outWalls: Rhino.Geometry.Brep[]@) -> List[Rhino.Geometry.Brep]
Rhino.Geometry.Brep.CreatePatch(geometry: Iterable[Rhino.Geometry.GeometryBase], startingSurface: Rhino.Geometry.Surface, tolerance: float) -> Rhino.Geometry.Brep
Rhino.Geometry.Brep.CreatePatch(geometry: Iterable[Rhino.Geometry.GeometryBase], startingSurface: Rhino.Geometry.Surface, uSpans: int, vSpans: int, trim: bool, tangency: bool, pointSpacing: float, flexibility: float, surfacePull: float, fixEdges: List[bool], tolerance: float) -> Rhino.Geometry.Brep
Rhino.Geometry.Brep.CreatePatch(geometry: Iterable[Rhino.Geometry.GeometryBase], uSpans: int, vSpans: int, tolerance: float) -> Rhino.Geometry.Brep
Rhino.Geometry.Brep.CreatePipe(rail: Rhino.Geometry.Curve, radius: float, localBlending: bool, cap: Rhino.Geometry.PipeCapMode, fitRail: bool, absoluteTolerance: float, angleToleranceRadians: float) -> List[Rhino.Geometry.Brep]
Rhino.Geometry.Brep.CreatePipe(rail: Rhino.Geometry.Curve, railRadiiParameters: Iterable[float], radii: Iterable[float], localBlending: bool, cap: Rhino.Geometry.PipeCapMode, fitRail: bool, absoluteTolerance: float, angleToleranceRadians: float) -> List[Rhino.Geometry.Brep]
Rhino.Geometry.Brep.CreatePlanarBreps(inputLoop: Rhino.Geometry.Curve, tolerance: float) -> List[Rhino.Geometry.Brep]
Rhino.Geometry.Brep.CreatePlanarBreps(inputLoops: Iterable[Rhino.Geometry.Curve], tolerance: float) -> List[Rhino.Geometry.Brep]
Rhino.Geometry.Brep.CreatePlanarBreps(inputLoops: Rhino.Collections.CurveList, tolerance: float) -> List[Rhino.Geometry.Brep]
Rhino.Geometry.Brep.CreatePlanarDifference(b0: Rhino.Geometry.Brep, b1: Rhino.Geometry.Brep, plane: Rhino.Geometry.Plane, tolerance: float) -> List[Rhino.Geometry.Brep]
Rhino.Geometry.Brep.CreatePlanarIntersection(b0: Rhino.Geometry.Brep, b1: Rhino.Geometry.Brep, plane: Rhino.Geometry.Plane, tolerance: float) -> List[Rhino.Geometry.Brep]
Rhino.Geometry.Brep.CreatePlanarUnion(b0: Rhino.Geometry.Brep, b1: Rhino.Geometry.Brep, plane: Rhino.Geometry.Plane, tolerance: float) -> List[Rhino.Geometry.Brep]
Rhino.Geometry.Brep.CreatePlanarUnion(breps: Iterable[Rhino.Geometry.Brep], plane: Rhino.Geometry.Plane, tolerance: float) -> List[Rhino.Geometry.Brep]
Rhino.Geometry.Brep.CreateQuadSphere(sphere: Rhino.Geometry.Sphere) -> Rhino.Geometry.Brep
Rhino.Geometry.Brep.CreateShell(brep: Rhino.Geometry.Brep, facesToRemove: Iterable[int], distance: float, tolerance: float) -> List[Rhino.Geometry.Brep]
Rhino.Geometry.Brep.CreateSolid(breps: Iterable[Rhino.Geometry.Brep], tolerance: float) -> List[Rhino.Geometry.Brep]
Rhino.Geometry.Brep.CreateThickPipe(rail: Rhino.Geometry.Curve, radius0: float, radius1: float, localBlending: bool, cap: Rhino.Geometry.PipeCapMode, fitRail: bool, absoluteTolerance: float, angleToleranceRadians: float) -> List[Rhino.Geometry.Brep]
Rhino.Geometry.Brep.CreateThickPipe(rail: Rhino.Geometry.Curve, railRadiiParameters: Iterable[float], radii0: Iterable[float], radii1: Iterable[float], localBlending: bool, cap: Rhino.Geometry.PipeCapMode, fitRail: bool, absoluteTolerance: float, angleToleranceRadians: float) -> List[Rhino.Geometry.Brep]
Rhino.Geometry.Brep.CreateTrimmedPlane(plane: Rhino.Geometry.Plane, curve: Rhino.Geometry.Curve) -> Rhino.Geometry.Brep
Rhino.Geometry.Brep.CreateTrimmedPlane(plane: Rhino.Geometry.Plane, curves: Iterable[Rhino.Geometry.Curve]) -> Rhino.Geometry.Brep
Rhino.Geometry.Brep.CreateTrimmedSurface(trimSource: Rhino.Geometry.BrepFace, surfaceSource: Rhino.Geometry.Surface, tolerance: float) -> Rhino.Geometry.Brep
Rhino.Geometry.Brep.CullUnused2dCurves(self) -> bool
Rhino.Geometry.Brep.CullUnused3dCurves(self) -> bool
Rhino.Geometry.Brep.CullUnusedEdges(self) -> bool
Rhino.Geometry.Brep.CullUnusedFaces(self) -> bool
Rhino.Geometry.Brep.CullUnusedLoops(self) -> bool
Rhino.Geometry.Brep.CullUnusedSurfaces(self) -> bool
Rhino.Geometry.Brep.CullUnusedTrims(self) -> bool
Rhino.Geometry.Brep.CullUnusedVertices(self) -> bool
Rhino.Geometry.Brep.CutUpSurface(surface: Rhino.Geometry.Surface, curves: Iterable[Rhino.Geometry.Curve], flip: bool, fitTolerance: float, keepTolerance: float) -> List[Rhino.Geometry.Brep]
Rhino.Geometry.Brep.CutUpSurface(surface: Rhino.Geometry.Surface, curves: Iterable[Rhino.Geometry.Curve], useEdgeCurves: bool, tolerance: float) -> List[Rhino.Geometry.Brep]
Rhino.Geometry.Brep.DestroyRegionTopology(self) -> None
Rhino.Geometry.Brep.Duplicate(self) -> GeometryBase
Rhino.Geometry.Brep.DuplicateBrep(self) -> Rhino.Geometry.Brep
Rhino.Geometry.Brep.DuplicateEdgeCurves(self) -> List[Curve]
Rhino.Geometry.Brep.DuplicateEdgeCurves(self, nakedOnly: bool) -> List[Curve]
Rhino.Geometry.Brep.DuplicateNakedEdgeCurves(self, nakedOuter: bool, nakedInner: bool) -> List[Curve]
Rhino.Geometry.Brep.DuplicateSubBrep(self, faceIndices: Iterable[int]) -> Rhino.Geometry.Brep
Rhino.Geometry.Brep.DuplicateVertices(self) -> List[Point3d]
Rhino.Geometry.Brep.ExtendBrepFacesToConnect(Face0: Rhino.Geometry.BrepFace, edgeIndex0: int, Face1: Rhino.Geometry.BrepFace, edgeIndex1: int, tol: float, angleTol: float, outBrep0: Rhino.Geometry.Brep@, outBrep1: Rhino.Geometry.Brep@) -> bool
Rhino.Geometry.Brep.ExtendBrepFacesToConnect(Face0: Rhino.Geometry.BrepFace, f0_sel_pt: Rhino.Geometry.Point3d, Face1: Rhino.Geometry.BrepFace, f1_sel_pt: Rhino.Geometry.Point3d, tol: float, angleTol: float, outBrep0: Rhino.Geometry.Brep@, outBrep1: Rhino.Geometry.Brep@) -> bool
Rhino.Geometry.Brep.FindCoincidentBrepComponents(self, point: Rhino.Geometry.Point3d, tolerance: float, faces: System.Int32[]@, edges: System.Int32[]@, vertices: System.Int32[]@) -> None
Rhino.Geometry.Brep.Flip(self) -> None
Rhino.Geometry.Brep.GetArea(self) -> float
Rhino.Geometry.Brep.GetArea(self, relativeTolerance: float, absoluteTolerance: float) -> float
Rhino.Geometry.Brep.GetConnectedComponents(self) -> List[Rhino.Geometry.Brep]
Rhino.Geometry.Brep.GetPointInside(self, tolerance: float, point: Rhino.Geometry.Point3d@) -> bool
Rhino.Geometry.Brep.GetRegions(self) -> List[BrepRegion]
Rhino.Geometry.Brep.GetTangentConnectedComponents(self, angleTolerance: float, includeMeshes: bool) -> List[Rhino.Geometry.Brep]
Rhino.Geometry.Brep.GetVolume(self) -> float
Rhino.Geometry.Brep.GetVolume(self, relativeTolerance: float, absoluteTolerance: float) -> float
Rhino.Geometry.Brep.GetWireframe(self, density: int) -> List[Curve]
Rhino.Geometry.Brep.InsetFaces(self, faceIndices: Iterable[int], distance: float, loose: bool, ignoreSeams: bool, creaseCorners: bool, tolerance: float, angleTolerance: float) -> Rhino.Geometry.Brep
Rhino.Geometry.Brep.IsBox(self) -> bool
Rhino.Geometry.Brep.IsBox(self, tolerance: float) -> bool
Rhino.Geometry.Brep.IsDuplicate(self, other: Rhino.Geometry.Brep, tolerance: float) -> bool
Rhino.Geometry.Brep.IsPointInside(self, point: Rhino.Geometry.Point3d, tolerance: float, strictlyIn: bool) -> bool
Rhino.Geometry.Brep.IsValidGeometry(self, log: System.String@) -> bool
Rhino.Geometry.Brep.IsValidTolerancesAndFlags(self, log: System.String@) -> bool
Rhino.Geometry.Brep.IsValidTopology(self, log: System.String@) -> bool
Rhino.Geometry.Brep.Join(self, otherBrep: Rhino.Geometry.Brep, tolerance: float, compact: bool) -> bool
Rhino.Geometry.Brep.JoinBreps(brepsToJoin: Iterable[Rhino.Geometry.Brep], tolerance: float) -> List[Rhino.Geometry.Brep]
Rhino.Geometry.Brep.JoinBreps(brepsToJoin: Iterable[Rhino.Geometry.Brep], tolerance: float, angleTolerance: float) -> List[Rhino.Geometry.Brep]
Rhino.Geometry.Brep.JoinBreps(brepsToJoin: Iterable[Rhino.Geometry.Brep], tolerance: float, angleTolerance: float, indexMap: System.Collections.Generic.List{System.Int32[]}@) -> List[Rhino.Geometry.Brep]
Rhino.Geometry.Brep.JoinEdges(self, edgeIndex0: int, edgeIndex1: int, joinTolerance: float, compact: bool) -> bool
Rhino.Geometry.Brep.JoinNakedEdges(self, tolerance: float) -> int
Rhino.Geometry.Brep.MakeValidForV2(self) -> bool
Rhino.Geometry.Brep.MergeBreps(brepsToMerge: Iterable[Rhino.Geometry.Brep], tolerance: float) -> Rhino.Geometry.Brep
Rhino.Geometry.Brep.MergeCoplanarFaces(self, faceIndex0: int, faceIndex1: int, tolerance: float, angleTolerance: float) -> bool
Rhino.Geometry.Brep.MergeCoplanarFaces(self, faceIndex: int, tolerance: float, angleTolerance: float) -> bool
Rhino.Geometry.Brep.MergeCoplanarFaces(self, tolerance: float) -> bool
Rhino.Geometry.Brep.MergeCoplanarFaces(self, tolerance: float, angleTolerance: float) -> bool
Rhino.Geometry.Brep.MergeSurfaces(brep0: Rhino.Geometry.Brep, brep1: Rhino.Geometry.Brep, tolerance: float, angleToleranceRadians: float) -> Rhino.Geometry.Brep
Rhino.Geometry.Brep.MergeSurfaces(brep0: Rhino.Geometry.Brep, brep1: Rhino.Geometry.Brep, tolerance: float, angleToleranceRadians: float, point0: Rhino.Geometry.Point2d, point1: Rhino.Geometry.Point2d, roundness: float, smooth: bool) -> Rhino.Geometry.Brep
Rhino.Geometry.Brep.MergeSurfaces(surface0: Rhino.Geometry.Surface, surface1: Rhino.Geometry.Surface, tolerance: float, angleToleranceRadians: float) -> Rhino.Geometry.Brep
Rhino.Geometry.Brep.PushPullExtend(self, faceIndex: int, transform: Rhino.Geometry.Transform, tolerance: float) -> Rhino.Geometry.Brep
Rhino.Geometry.Brep.RebuildTrimsForV2(self, face: Rhino.Geometry.BrepFace, nurbsSurface: Rhino.Geometry.NurbsSurface) -> None
Rhino.Geometry.Brep.RemoveFins(self) -> bool
Rhino.Geometry.Brep.RemoveHoles(self, loops: Iterable[Rhino.Geometry.ComponentIndex], tolerance: float) -> Rhino.Geometry.Brep
Rhino.Geometry.Brep.RemoveHoles(self, tolerance: float) -> Rhino.Geometry.Brep
Rhino.Geometry.Brep.Repair(self, tolerance: float) -> bool
Rhino.Geometry.Brep.SetTolerancesBoxesAndFlags(self) -> None
Rhino.Geometry.Brep.SetTolerancesBoxesAndFlags(self, bLazy: bool, bSetVertexTolerances: bool, bSetEdgeTolerances: bool, bSetTrimTolerances: bool, bSetTrimIsoFlags: bool, bSetTrimTypeFlags: bool, bSetLoopTypeFlags: bool, bSetTrimBoxes: bool) -> None
Rhino.Geometry.Brep.SetTrimIsoFlags(self) -> None
Rhino.Geometry.Brep.SetVertices(self) -> None
Rhino.Geometry.Brep.Split(self, cutter: Rhino.Geometry.Brep, intersectionTolerance: float) -> List[Rhino.Geometry.Brep]
Rhino.Geometry.Brep.Split(self, cutter: Rhino.Geometry.Brep, intersectionTolerance: float, toleranceWasRaised: System.Boolean@) -> List[Rhino.Geometry.Brep]
Rhino.Geometry.Brep.Split(self, cutters: Iterable[Rhino.Geometry.Brep], intersectionTolerance: float) -> List[Rhino.Geometry.Brep]
Rhino.Geometry.Brep.Split(self, cutters: Iterable[Rhino.Geometry.Curve], intersectionTolerance: float) -> List[Rhino.Geometry.Brep]
Rhino.Geometry.Brep.Split(self, cutters: Iterable[Rhino.Geometry.GeometryBase], normal: Rhino.Geometry.Vector3d, planView: bool, intersectionTolerance: float) -> List[Rhino.Geometry.Brep]
Rhino.Geometry.Brep.SplitDisjointPieces(brep: Rhino.Geometry.Brep) -> List[Rhino.Geometry.Brep]
Rhino.Geometry.Brep.SplitDisjointPieces(brep: Rhino.Geometry.Brep, indexMap: System.Collections.Generic.List{System.Int32[]}@) -> List[Rhino.Geometry.Brep]
Rhino.Geometry.Brep.Standardize(self) -> None
Rhino.Geometry.Brep.TransformComponent(self, components: Iterable[Rhino.Geometry.ComponentIndex], xform: Rhino.Geometry.Transform, tolerance: float, timeLimit: float, useMultipleThreads: bool) -> bool
Rhino.Geometry.Brep.Trim(self, cutter: Rhino.Geometry.Brep, intersectionTolerance: float) -> List[Rhino.Geometry.Brep]
Rhino.Geometry.Brep.Trim(self, cutter: Rhino.Geometry.Plane, intersectionTolerance: float) -> List[Rhino.Geometry.Brep]
Rhino.Geometry.Brep.TryConvertBrep(geometry: Rhino.Geometry.GeometryBase) -> Rhino.Geometry.Brep
Rhino.Geometry.Brep.UnjoinEdges(self, edgesToUnjoin: Iterable[int]) -> List[Rhino.Geometry.Brep]
Rhino.Geometry.Brep.[ObsoleteAttribute(self, arg1: Iterable[Rhino.Geometry.Curve]) -> None
Rhino.Geometry.Brep.[ObsoleteAttribute(self, arg1: Rhino.Collections.CurveList) -> None
Rhino.Geometry.Brep.[ObsoleteAttribute(self, arg1: Rhino.Geometry.BrepFace, arg2: Rhino.Geometry.Surface) -> None
Rhino.Geometry.Brep.[ObsoleteAttribute(self, arg1: Rhino.Geometry.Curve) -> None
Rhino.Geometry.Brep.[ObsoleteAttribute(self, arg1: Rhino.Geometry.Curve, arg2: float, arg3: Rhino.Geometry.Vector3d, arg4: Rhino.Geometry.Point3d, arg5: float, arg6: Rhino.Geometry.ExtrudeCornerType) -> None
Rhino.Geometry.Brep.__init__(self) -> None
Rhino.Geometry.Brep.__init__(self, info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext) -> None
Rhino.Geometry.BrepEdge.AdjacentFaces(self) -> List[int]
Rhino.Geometry.BrepEdge.ConcavityAt(self, t: float, tolerance: float) -> Concavity
Rhino.Geometry.BrepEdge.GetEdgeParameter(self, trimIndex: int, trimParameter: float, edgeParameter: System.Double@) -> bool
Rhino.Geometry.BrepEdge.IsSmoothManifoldEdge(self, angleToleranceRadians: float) -> bool
Rhino.Geometry.BrepEdge.SetEdgeCurve(self, curve3dIndex: int) -> bool
Rhino.Geometry.BrepEdge.SetEdgeCurve(self, curve3dIndex: int, subDomain: Rhino.Geometry.Interval) -> bool
Rhino.Geometry.BrepEdge.TrimIndices(self) -> List[int]
Rhino.Geometry.BrepEdgeFilletDistance.__init__(self, edgeParameter: float, filletDistance: float) -> None
Rhino.Geometry.BrepFace.AdjacentEdges(self) -> List[int]
Rhino.Geometry.BrepFace.AdjacentFaces(self) -> List[int]
Rhino.Geometry.BrepFace.ChangeSurface(self, surfaceIndex: int) -> bool
Rhino.Geometry.BrepFace.ClearMaterialChannelIndex(self) -> None
Rhino.Geometry.BrepFace.ClearPackId(self) -> None
Rhino.Geometry.BrepFace.CreateExtrusion(self, pathCurve: Rhino.Geometry.Curve, cap: bool) -> Brep
Rhino.Geometry.BrepFace.DraftAnglePoint(self, testPoint: Rhino.Geometry.Point2d, testAngle: float, pullDirection: Rhino.Geometry.Vector3d, edge: bool, draftPoint: Rhino.Geometry.Point3d@, draftAngle: System.Double@) -> bool
Rhino.Geometry.BrepFace.DuplicateFace(self, duplicateMeshes: bool) -> Brep
Rhino.Geometry.BrepFace.DuplicateSurface(self) -> Surface
Rhino.Geometry.BrepFace.FilletSurfaceToCurve(self, curve: Rhino.Geometry.Curve, t: float, u: float, v: float, radius: float, alignToCurve: int, railDegree: int, arcDegree: int, arcSliders: Iterable[float], numBezierSrfs: int, tolerance: float, out_fillets: List[Rhino.Geometry.Brep], fitResults: System.Double[]@) -> bool
Rhino.Geometry.BrepFace.FilletSurfaceToRail(self, curveOnFace: Rhino.Geometry.Curve, secondFace: Rhino.Geometry.BrepFace, u1: float, v1: float, railDegree: int, arcDegree: int, arcSliders: Iterable[float], numBezierSrfs: int, extend: bool, split_type: Rhino.Geometry.FilletSurfaceSplitType, tolerance: float, out_fillets: List[Rhino.Geometry.Brep], out_breps0: List[Rhino.Geometry.Brep], out_breps1: List[Rhino.Geometry.Brep], fitResults: System.Double[]@) -> bool
Rhino.Geometry.BrepFace.GetMesh(self, meshType: Rhino.Geometry.MeshType) -> Mesh
Rhino.Geometry.BrepFace.IsPointOnFace(self, u: float, v: float) -> PointFaceRelation
Rhino.Geometry.BrepFace.IsPointOnFace(self, u: float, v: float, tolerance: float) -> PointFaceRelation
Rhino.Geometry.BrepFace.PullPointsToFace(self, points: Iterable[Rhino.Geometry.Point3d], tolerance: float) -> List[Point3d]
Rhino.Geometry.BrepFace.RebuildEdges(self, tolerance: float, rebuildSharedEdges: bool, rebuildVertices: bool) -> bool
Rhino.Geometry.BrepFace.RefitTrim(self, edge: Rhino.Geometry.BrepEdge, knots: Iterable[float], tolerance: float, bSections: bool, fitQuality: System.Double@) -> List[Surface]
Rhino.Geometry.BrepFace.RemoveHoles(self, tolerance: float) -> Brep
Rhino.Geometry.BrepFace.SetDomain(self, direction: int, domain: Rhino.Geometry.Interval) -> bool
Rhino.Geometry.BrepFace.SetMesh(self, meshType: Rhino.Geometry.MeshType, mesh: Rhino.Geometry.Mesh) -> bool
Rhino.Geometry.BrepFace.SetPackId(self, packId: System.UInt32) -> None
Rhino.Geometry.BrepFace.ShrinkFace(self, arg1: Rhino.Geometry.BrepFace.ShrinkDisableSide) -> bool
Rhino.Geometry.BrepFace.ShrinkSurfaceToEdge(self) -> bool
Rhino.Geometry.BrepFace.Split(self, curves: Iterable[Rhino.Geometry.Curve], tolerance: float) -> Brep
Rhino.Geometry.BrepFace.TrimAwareIsoCurve(self, direction: int, constantParameter: float) -> List[Curve]
Rhino.Geometry.BrepFace.TrimAwareIsoIntervals(self, direction: int, constantParameter: float) -> List[Interval]
Rhino.Geometry.BrepFace.UnderlyingSurface(self) -> Surface
Rhino.Geometry.BrepLoop.To2dCurve(self) -> Curve
Rhino.Geometry.BrepLoop.To3dCurve(self) -> Curve
Rhino.Geometry.BrepRegion.BoundaryBrep(self) -> Brep
Rhino.Geometry.BrepRegion.GetFaceSides(self) -> List[BrepRegionFaceSide]
Rhino.Geometry.BrepRegion.NonConstOperation(self) -> None
Rhino.Geometry.BrepRegionFaceSide.NonConstOperation(self) -> None
Rhino.Geometry.BrepTrim.GetTolerances(self, toleranceU: System.Double@, toleranceV: System.Double@) -> None
Rhino.Geometry.BrepTrim.GetTrimParameter(self, edgeParameter: float, trimParameter: System.Double@) -> bool
Rhino.Geometry.BrepTrim.IsReversed(self) -> bool
Rhino.Geometry.BrepTrim.SetTolerances(self, toleranceU: float, toleranceV: float) -> None
Rhino.Geometry.BrepTrim.SetTrimCurve(self, curve2dIndex: int) -> bool
Rhino.Geometry.BrepTrim.SetTrimCurve(self, curve2dIndex: int, subDomain: Rhino.Geometry.Interval) -> bool
Rhino.Geometry.BrepVertex.EdgeIndices(self) -> List[int]
Rhino.Geometry.Centermark.AdjustFromPoints(self, plane: Rhino.Geometry.Plane, centerPoint: Rhino.Geometry.Point3d) -> bool
Rhino.Geometry.Centermark.Create(dimStyle: Rhino.DocObjects.DimensionStyle, plane: Rhino.Geometry.Plane, centerPoint: Rhino.Geometry.Point3d, radius: float) -> Rhino.Geometry.Centermark
Rhino.Geometry.Centermark.Create(dimStyle: Rhino.DocObjects.DimensionStyle, plane: Rhino.Geometry.Plane, curve: Rhino.Geometry.Curve, curveParameter: float) -> Rhino.Geometry.Centermark
Rhino.Geometry.Centermark.__init__(self) -> None
Rhino.Geometry.Centermark.__init__(self, info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext) -> None
Rhino.Geometry.Centermark.__init__(self, plane: Rhino.Geometry.Plane, centerPoint: Rhino.Geometry.Point3d, radius: float) -> None
Rhino.Geometry.Centermark.__init__(self, plane: Rhino.Geometry.Plane, curve: Rhino.Geometry.Curve, curveParameter: float) -> None
Rhino.Geometry.Circle.ClosestParameter(self, testPoint: Rhino.Geometry.Point3d, t: System.Double@) -> bool
Rhino.Geometry.Circle.ClosestPoint(self, testPoint: Rhino.Geometry.Point3d) -> Point3d
Rhino.Geometry.Circle.DerivativeAt(self, derivative: int, t: float) -> Vector3d
Rhino.Geometry.Circle.EpsilonEquals(self, other: Rhino.Geometry.Circle, epsilon: float) -> bool
Rhino.Geometry.Circle.IsInPlane(self, plane: Rhino.Geometry.Plane, tolerance: float) -> bool
Rhino.Geometry.Circle.PointAt(self, t: float) -> Point3d
Rhino.Geometry.Circle.Reverse(self) -> None
Rhino.Geometry.Circle.Rotate(self, angle: float, axis: Rhino.Geometry.Vector3d) -> bool
Rhino.Geometry.Circle.Rotate(self, angle: float, axis: Rhino.Geometry.Vector3d, point: Rhino.Geometry.Point3d) -> bool
Rhino.Geometry.Circle.Rotate(self, sinAngle: float, cosAngle: float, axis: Rhino.Geometry.Vector3d) -> bool
Rhino.Geometry.Circle.Rotate(self, sinAngle: float, cosAngle: float, axis: Rhino.Geometry.Vector3d, point: Rhino.Geometry.Point3d) -> bool
Rhino.Geometry.Circle.TangentAt(self, t: float) -> Vector3d
Rhino.Geometry.Circle.ToNurbsCurve(self) -> NurbsCurve
Rhino.Geometry.Circle.ToNurbsCurve(self, degree: int, cvCount: int) -> NurbsCurve
Rhino.Geometry.Circle.Transform(self, xform: Rhino.Geometry.Transform) -> bool
Rhino.Geometry.Circle.Translate(self, delta: Rhino.Geometry.Vector3d) -> bool
Rhino.Geometry.Circle.TryFitCircleTT(c1: Rhino.Geometry.Curve, c2: Rhino.Geometry.Curve, t1: float, t2: float) -> Rhino.Geometry.Circle
Rhino.Geometry.Circle.TryFitCircleTTT(c1: Rhino.Geometry.Curve, c2: Rhino.Geometry.Curve, c3: Rhino.Geometry.Curve, t1: float, t2: float, t3: float) -> Rhino.Geometry.Circle
Rhino.Geometry.Circle.TryFitCircleToPoints(points: Iterable[Rhino.Geometry.Point3d], circle: Rhino.Geometry.Circle@) -> bool
Rhino.Geometry.Circle.TrySmallestEnclosingCircle(points: Iterable[Rhino.Geometry.Point2d], tolerance: float, circle: Rhino.Geometry.Circle@, indicesOnCircle: System.Int32[]@) -> bool
Rhino.Geometry.Circle.__init__(self, arc: Rhino.Geometry.Arc) -> None
Rhino.Geometry.Circle.__init__(self, center: Rhino.Geometry.Point3d, radius: float) -> None
Rhino.Geometry.Circle.__init__(self, plane: Rhino.Geometry.Plane, center: Rhino.Geometry.Point3d, radius: float) -> None
Rhino.Geometry.Circle.__init__(self, plane: Rhino.Geometry.Plane, radius: float) -> None
Rhino.Geometry.Circle.__init__(self, point1: Rhino.Geometry.Point3d, point2: Rhino.Geometry.Point3d, point3: Rhino.Geometry.Point3d) -> None
Rhino.Geometry.Circle.__init__(self, radius: float) -> None
Rhino.Geometry.Circle.__init__(self, startPoint: Rhino.Geometry.Point3d, tangentAtP: Rhino.Geometry.Vector3d, pointOnCircle: Rhino.Geometry.Point3d) -> None
Rhino.Geometry.ClippingPlaneSurface.AddClipViewportId(self, viewportId: System.Guid) -> bool
Rhino.Geometry.ClippingPlaneSurface.ClearClipParticipationLists(self) -> None
Rhino.Geometry.ClippingPlaneSurface.GetClipParticipation(self, objectIds: System.Collections.Generic.IEnumerable{System.Guid}@, layerIndices: System.Collections.Generic.IEnumerable{System.Int32}@, isExclusionList: System.Boolean@) -> None
Rhino.Geometry.ClippingPlaneSurface.RemoveClipViewportId(self, viewportId: System.Guid) -> bool
Rhino.Geometry.ClippingPlaneSurface.SetClipParticipation(self, objectIds: Iterable[System.Guid], layerIndices: Iterable[int], isExclusionList: bool) -> None
Rhino.Geometry.ClippingPlaneSurface.ViewportIds(self) -> List[Guid]
Rhino.Geometry.ClippingPlaneSurface.__init__(self) -> None
Rhino.Geometry.ClippingPlaneSurface.__init__(self, info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext) -> None
Rhino.Geometry.ClippingPlaneSurface.__init__(self, plane: Rhino.Geometry.Plane) -> None
Rhino.Geometry.ClippingPlaneSurface.__init__(self, planeSurface: Rhino.Geometry.PlaneSurface) -> None
Rhino.Geometry.Collections.BrepCurveList.Add(self, curve: Rhino.Geometry.Curve) -> int
Rhino.Geometry.Collections.BrepCurveList.GetEnumerator(self) -> IEnumerator<Curve>
Rhino.Geometry.Collections.BrepEdgeList.Add(self, curve3dIndex: int) -> BrepEdge
Rhino.Geometry.Collections.BrepEdgeList.Add(self, startVertex: Rhino.Geometry.BrepVertex, endVertex: Rhino.Geometry.BrepVertex, curve3dIndex: int, edgeTolerance: float) -> BrepEdge
Rhino.Geometry.Collections.BrepEdgeList.Add(self, startVertex: Rhino.Geometry.BrepVertex, endVertex: Rhino.Geometry.BrepVertex, curve3dIndex: int, subDomain: Rhino.Geometry.Interval, edgeTolerance: float) -> BrepEdge
Rhino.Geometry.Collections.BrepEdgeList.Add(self, startVertexIndex: int, endVertexIndex: int, curve3dIndex: int, edgeTolerance: float) -> BrepEdge
Rhino.Geometry.Collections.BrepEdgeList.Add(self, startVertexIndex: int, endVertexIndex: int, curve3dIndex: int, subDomain: Rhino.Geometry.Interval, edgeTolerance: float) -> BrepEdge
Rhino.Geometry.Collections.BrepEdgeList.GetEnumerator(self) -> IEnumerator<BrepEdge>
Rhino.Geometry.Collections.BrepEdgeList.MergeAllEdges(self, angleTolerance: float) -> int
Rhino.Geometry.Collections.BrepEdgeList.MergeEdge(self, edgeIndex: int, angleTolerance: float) -> int
Rhino.Geometry.Collections.BrepEdgeList.RemoveNakedMicroEdges(self, tolerance: float) -> int
Rhino.Geometry.Collections.BrepEdgeList.RemoveNakedMicroEdges(self, tolerance: float, cleanUp: bool) -> int
Rhino.Geometry.Collections.BrepEdgeList.SplitEdgeAtParameters(self, edgeIndex: int, edgeParameters: Iterable[float]) -> int
Rhino.Geometry.Collections.BrepEdgeList.SplitKinkyEdge(self, edgeIndex: int, kinkToleranceRadians: float) -> bool
Rhino.Geometry.Collections.BrepFaceList.Add(self, surface: Rhino.Geometry.Surface) -> BrepFace
Rhino.Geometry.Collections.BrepFaceList.Add(self, surfaceIndex: int) -> BrepFace
Rhino.Geometry.Collections.BrepFaceList.AddConeFace(self, vertex: Rhino.Geometry.BrepVertex, edge: Rhino.Geometry.BrepEdge, revEdge: bool) -> BrepFace
Rhino.Geometry.Collections.BrepFaceList.AddRuledFace(self, edgeA: Rhino.Geometry.BrepEdge, revEdgeA: bool, edgeB: Rhino.Geometry.BrepEdge, revEdgeB: bool) -> BrepFace
Rhino.Geometry.Collections.BrepFaceList.ClearPerFaceColors(self) -> uint
Rhino.Geometry.Collections.BrepFaceList.ExtractFace(self, faceIndex: int) -> Brep
Rhino.Geometry.Collections.BrepFaceList.Flip(self, onlyReversedFaces: bool) -> None
Rhino.Geometry.Collections.BrepFaceList.GetEnumerator(self) -> IEnumerator<BrepFace>
Rhino.Geometry.Collections.BrepFaceList.RemoveAt(self, faceIndex: int) -> None
Rhino.Geometry.Collections.BrepFaceList.RemoveSlits(self) -> bool
Rhino.Geometry.Collections.BrepFaceList.ShrinkFaces(self) -> bool
Rhino.Geometry.Collections.BrepFaceList.SplitBipolarFaces(self) -> bool
Rhino.Geometry.Collections.BrepFaceList.SplitClosedFaces(self, minimumDegree: int) -> bool
Rhino.Geometry.Collections.BrepFaceList.SplitFaceAtTangents(self, faceIndex: int) -> bool
Rhino.Geometry.Collections.BrepFaceList.SplitFacesAtTangents(self) -> bool
Rhino.Geometry.Collections.BrepFaceList.SplitKinkyFace(self, faceIndex: int, kinkTolerance: float) -> bool
Rhino.Geometry.Collections.BrepFaceList.SplitKinkyFaces(self) -> bool
Rhino.Geometry.Collections.BrepFaceList.SplitKinkyFaces(self, kinkTolerance: float) -> bool
Rhino.Geometry.Collections.BrepFaceList.SplitKinkyFaces(self, kinkTolerance: float, compact: bool) -> bool
Rhino.Geometry.Collections.BrepFaceList.StandardizeFaceSurface(self, faceIndex: int) -> bool
Rhino.Geometry.Collections.BrepFaceList.StandardizeFaceSurfaces(self) -> None
Rhino.Geometry.Collections.BrepLoopList.Add(self, loopType: Rhino.Geometry.BrepLoopType) -> BrepLoop
Rhino.Geometry.Collections.BrepLoopList.Add(self, loopType: Rhino.Geometry.BrepLoopType, face: Rhino.Geometry.BrepFace) -> BrepLoop
Rhino.Geometry.Collections.BrepLoopList.AddOuterLoop(self, faceIndex: int) -> BrepLoop
Rhino.Geometry.Collections.BrepLoopList.AddPlanarFaceLoop(self, faceIndex: int, loopType: Rhino.Geometry.BrepLoopType, boundaryCurves: Iterable[Rhino.Geometry.Curve]) -> BrepLoop
Rhino.Geometry.Collections.BrepLoopList.GetEnumerator(self) -> IEnumerator<BrepLoop>
Rhino.Geometry.Collections.BrepSurfaceList.GetEnumerator(self) -> IEnumerator<Surface>
Rhino.Geometry.Collections.BrepTrimList.Add(self, curve2dIndex: int) -> BrepTrim
Rhino.Geometry.Collections.BrepTrimList.Add(self, edge: Rhino.Geometry.BrepEdge, rev3d: bool, loop: Rhino.Geometry.BrepLoop, curve2dIndex: int) -> BrepTrim
Rhino.Geometry.Collections.BrepTrimList.Add(self, rev3d: bool, edge: Rhino.Geometry.BrepEdge, curve2dIndex: int) -> BrepTrim
Rhino.Geometry.Collections.BrepTrimList.Add(self, rev3d: bool, loop: Rhino.Geometry.BrepLoop, curve2dIndex: int) -> BrepTrim
Rhino.Geometry.Collections.BrepTrimList.AddCurveOnFace(self, face: Rhino.Geometry.BrepFace, edge: Rhino.Geometry.BrepEdge, rev3d: bool, curve2dIndex: int) -> BrepTrim
Rhino.Geometry.Collections.BrepTrimList.AddSingularTrim(self, vertex: Rhino.Geometry.BrepVertex, loop: Rhino.Geometry.BrepLoop, iso: Rhino.Geometry.IsoStatus, curve2dIndex: int) -> BrepTrim
Rhino.Geometry.Collections.BrepTrimList.GetEnumerator(self) -> IEnumerator<BrepTrim>
Rhino.Geometry.Collections.BrepTrimList.MatchEnds(self) -> bool
Rhino.Geometry.Collections.BrepTrimList.MatchEnds(self, loop: Rhino.Geometry.BrepLoop) -> bool
Rhino.Geometry.Collections.BrepTrimList.MatchEnds(self, trim0: Rhino.Geometry.BrepTrim, trim1: Rhino.Geometry.BrepTrim) -> bool
Rhino.Geometry.Collections.BrepTrimList.MatchEnds(self, trimIndex: int) -> bool
Rhino.Geometry.Collections.BrepVertexList.Add(self) -> BrepVertex
Rhino.Geometry.Collections.BrepVertexList.Add(self, point: Rhino.Geometry.Point3d, vertexTolerance: float) -> BrepVertex
Rhino.Geometry.Collections.BrepVertexList.AddPointOnFace(self, face: Rhino.Geometry.BrepFace, s: float, t: float) -> BrepVertex
Rhino.Geometry.Collections.BrepVertexList.GetEnumerator(self) -> IEnumerator<BrepVertex>
Rhino.Geometry.Collections.MeshFaceList.AddFace(self, face: Rhino.Geometry.MeshFace) -> int
Rhino.Geometry.Collections.MeshFaceList.AddFace(self, vertex1: int, vertex2: int, vertex3: int) -> int
Rhino.Geometry.Collections.MeshFaceList.AddFace(self, vertex1: int, vertex2: int, vertex3: int, vertex4: int) -> int
Rhino.Geometry.Collections.MeshFaceList.AddFaces(self, faces: Iterable[Rhino.Geometry.MeshFace]) -> List[int]
Rhino.Geometry.Collections.MeshFaceList.AdjacentFaces(self, faceIndex: int) -> List[int]
Rhino.Geometry.Collections.MeshFaceList.Clear(self) -> None
Rhino.Geometry.Collections.MeshFaceList.ConvertNonPlanarQuadsToTriangles(self, planarTolerance: float, angleToleranceRadians: float, splitMethod: int) -> int
Rhino.Geometry.Collections.MeshFaceList.ConvertQuadsToTriangles(self) -> bool
Rhino.Geometry.Collections.MeshFaceList.ConvertTrianglesToQuads(self, angleToleranceRadians: float, minimumDiagonalLengthRatio: float) -> bool
Rhino.Geometry.Collections.MeshFaceList.CullDegenerateFaces(self) -> int
Rhino.Geometry.Collections.MeshFaceList.DeleteFaces(self, faceIndexes: Iterable[int]) -> int
Rhino.Geometry.Collections.MeshFaceList.DeleteFaces(self, faceIndexes: Iterable[int], compact: bool) -> int
Rhino.Geometry.Collections.MeshFaceList.Destroy(self) -> None
Rhino.Geometry.Collections.MeshFaceList.ExtractDuplicateFaces(self) -> Mesh
Rhino.Geometry.Collections.MeshFaceList.ExtractFaces(self, faceIndices: Iterable[int]) -> Mesh
Rhino.Geometry.Collections.MeshFaceList.GetClashingFacePairs(self, maxPairCount: int) -> List[IndexPair]
Rhino.Geometry.Collections.MeshFaceList.GetConnectedFaces(self, faceIndex: int) -> List[int]
Rhino.Geometry.Collections.MeshFaceList.GetConnectedFaces(self, faceIndex: int, angleRadians: float, greaterThanAngle: bool) -> List[int]
Rhino.Geometry.Collections.MeshFaceList.GetConnectedFacesToEdges(self, startFaceIndex: int, treatNonmanifoldLikeUnwelded: bool) -> List[int]
Rhino.Geometry.Collections.MeshFaceList.GetDuplicateFaces(self) -> List[int]
Rhino.Geometry.Collections.MeshFaceList.GetEnumerator(self) -> IEnumerator<MeshFace>
Rhino.Geometry.Collections.MeshFaceList.GetFace(self, index: int) -> MeshFace
Rhino.Geometry.Collections.MeshFaceList.GetFaceAspectRatio(self, index: int) -> float
Rhino.Geometry.Collections.MeshFaceList.GetFaceBoundingBox(self, faceIndex: int) -> BoundingBox
Rhino.Geometry.Collections.MeshFaceList.GetFaceCenter(self, faceIndex: int) -> Point3d
Rhino.Geometry.Collections.MeshFaceList.GetFaceVertices(self, faceIndex: int, a: Rhino.Geometry.Point3f@, b: Rhino.Geometry.Point3f@, c: Rhino.Geometry.Point3f@, d: Rhino.Geometry.Point3f@) -> bool
Rhino.Geometry.Collections.MeshFaceList.GetTopologicalVertices(self, faceIndex: int) -> List[int]
Rhino.Geometry.Collections.MeshFaceList.GetZeroAreaFaces(self, whollyDegenerateFaces: System.Int32[]@, partiallyDegenerateFaces: System.Int32[]@) -> bool
Rhino.Geometry.Collections.MeshFaceList.HasNakedEdges(self, faceIndex: int) -> bool
Rhino.Geometry.Collections.MeshFaceList.Insert(self, index: int, face: Rhino.Geometry.MeshFace) -> None
Rhino.Geometry.Collections.MeshFaceList.IsHidden(self, faceIndex: int) -> bool
Rhino.Geometry.Collections.MeshFaceList.MergeAdjacentFaces(self, edgeIndex: int) -> bool
Rhino.Geometry.Collections.MeshFaceList.RemoveAt(self, index: int) -> None
Rhino.Geometry.Collections.MeshFaceList.RemoveAt(self, index: int, compact: bool) -> None
Rhino.Geometry.Collections.MeshFaceList.RemoveZeroAreaFaces(self, fixedFaceCount: System.Int32@) -> int
Rhino.Geometry.Collections.MeshFaceList.SetFace(self, index: int, face: Rhino.Geometry.MeshFace) -> bool
Rhino.Geometry.Collections.MeshFaceList.SetFace(self, index: int, vertex1: int, vertex2: int, vertex3: int) -> bool
Rhino.Geometry.Collections.MeshFaceList.SetFace(self, index: int, vertex1: int, vertex2: int, vertex3: int, vertex4: int) -> bool
Rhino.Geometry.Collections.MeshFaceList.ToIntArray(self, asTriangles: bool) -> List[int]
Rhino.Geometry.Collections.MeshFaceList.ToIntArray(self, asTriangles: bool, replacedIndices: System.Collections.Generic.List{System.Int32}@) -> List[int]
Rhino.Geometry.Collections.MeshFaceNormalList.AddFaceNormal(self, normal: Rhino.Geometry.Vector3d) -> int
Rhino.Geometry.Collections.MeshFaceNormalList.AddFaceNormal(self, normal: Rhino.Geometry.Vector3f) -> int
Rhino.Geometry.Collections.MeshFaceNormalList.AddFaceNormal(self, x: float, y: float, z: float) -> int
Rhino.Geometry.Collections.MeshFaceNormalList.AddFaceNormal(self, x: float, y: float, z: float) -> int
Rhino.Geometry.Collections.MeshFaceNormalList.Clear(self) -> None
Rhino.Geometry.Collections.MeshFaceNormalList.ComputeFaceNormals(self) -> bool
Rhino.Geometry.Collections.MeshFaceNormalList.Destroy(self) -> None
Rhino.Geometry.Collections.MeshFaceNormalList.GetEnumerator(self) -> IEnumerator<Vector3f>
Rhino.Geometry.Collections.MeshFaceNormalList.SetFaceNormal(self, index: int, normal: Rhino.Geometry.Vector3d) -> bool
Rhino.Geometry.Collections.MeshFaceNormalList.SetFaceNormal(self, index: int, normal: Rhino.Geometry.Vector3f) -> bool
Rhino.Geometry.Collections.MeshFaceNormalList.SetFaceNormal(self, index: int, x: float, y: float, z: float) -> bool
Rhino.Geometry.Collections.MeshFaceNormalList.SetFaceNormal(self, index: int, x: float, y: float, z: float) -> bool
Rhino.Geometry.Collections.MeshFaceNormalList.UnitizeFaceNormals(self) -> bool
Rhino.Geometry.Collections.MeshNgonList.AddNgon(self, ngon: Rhino.Geometry.MeshNgon) -> int
Rhino.Geometry.Collections.MeshNgonList.AddNgons(self, ngons: Iterable[Rhino.Geometry.MeshNgon]) -> List[int]
Rhino.Geometry.Collections.MeshNgonList.AddPlanarNgons(self, planarTolerance: float) -> int
Rhino.Geometry.Collections.MeshNgonList.AddPlanarNgons(self, planarTolerance: float, minimumNgonVertexCount: int, minimumNgonFaceCount: int, allowHoles: bool) -> int
Rhino.Geometry.Collections.MeshNgonList.Clear(self) -> None
Rhino.Geometry.Collections.MeshNgonList.GetEnumerator(self) -> IEnumerator<MeshNgon>
Rhino.Geometry.Collections.MeshNgonList.GetNgon(self, index: int) -> MeshNgon
Rhino.Geometry.Collections.MeshNgonList.GetNgonBoundary(self, ngonFaceIndexList: Iterable[int]) -> List[int]
Rhino.Geometry.Collections.MeshNgonList.GetNgonBoundingBox(self, index: int) -> BoundingBox
Rhino.Geometry.Collections.MeshNgonList.GetNgonBoundingBox(self, ngon: Rhino.Geometry.MeshNgon) -> BoundingBox
Rhino.Geometry.Collections.MeshNgonList.GetNgonCenter(self, index: int) -> Point3d
Rhino.Geometry.Collections.MeshNgonList.GetNgonCenter(self, ngon: Rhino.Geometry.MeshNgon) -> Point3d
Rhino.Geometry.Collections.MeshNgonList.GetNgonEdgeCount(self, index: int) -> int
Rhino.Geometry.Collections.MeshNgonList.GetNgonOuterEdgeCount(self, index: int) -> int
Rhino.Geometry.Collections.MeshNgonList.Insert(self, index: int, ngon: Rhino.Geometry.MeshNgon) -> None
Rhino.Geometry.Collections.MeshNgonList.IsValid(self, index: int) -> uint
Rhino.Geometry.Collections.MeshNgonList.IsValid(self, index: int, textLog: Rhino.FileIO.TextLog) -> uint
Rhino.Geometry.Collections.MeshNgonList.NgonBoundaryVertexList(self, ngon: Rhino.Geometry.MeshNgon, bAppendStartPoint: bool) -> List[Point3d]
Rhino.Geometry.Collections.MeshNgonList.NgonHasHoles(self, index: int) -> bool
Rhino.Geometry.Collections.MeshNgonList.NgonIndexFromFaceIndex(self, meshFaceIndex: int) -> int
Rhino.Geometry.Collections.MeshNgonList.Orientation(self, index: int, permitHoles: bool) -> int
Rhino.Geometry.Collections.MeshNgonList.RemoveAt(self, index: int) -> None
Rhino.Geometry.Collections.MeshNgonList.RemoveNgons(self, indices: Iterable[int]) -> int
Rhino.Geometry.Collections.MeshNgonList.ReverseOuterBoundary(self, index: int) -> None
Rhino.Geometry.Collections.MeshNgonList.SetNgon(self, index: int, ngon: Rhino.Geometry.MeshNgon) -> None
Rhino.Geometry.Collections.MeshTextureCoordinateList.Add(self, s: float, t: float) -> int
Rhino.Geometry.Collections.MeshTextureCoordinateList.Add(self, s: float, t: float) -> int
Rhino.Geometry.Collections.MeshTextureCoordinateList.Add(self, tc: Rhino.Geometry.Point2f) -> int
Rhino.Geometry.Collections.MeshTextureCoordinateList.Add(self, tc: Rhino.Geometry.Point3d) -> int
Rhino.Geometry.Collections.MeshTextureCoordinateList.AddRange(self, textureCoordinates: List[Rhino.Geometry.Point2f]) -> bool
Rhino.Geometry.Collections.MeshTextureCoordinateList.Clear(self) -> None
Rhino.Geometry.Collections.MeshTextureCoordinateList.Destroy(self) -> None
Rhino.Geometry.Collections.MeshTextureCoordinateList.GetEnumerator(self) -> IEnumerator<Point2f>
Rhino.Geometry.Collections.MeshTextureCoordinateList.NormalizeTextureCoordinates(self) -> bool
Rhino.Geometry.Collections.MeshTextureCoordinateList.ReverseTextureCoordinates(self, direction: int) -> bool
Rhino.Geometry.Collections.MeshTextureCoordinateList.SetTextureCoordinate(self, index: int, s: float, t: float) -> bool
Rhino.Geometry.Collections.MeshTextureCoordinateList.SetTextureCoordinate(self, index: int, s: float, t: float) -> bool
Rhino.Geometry.Collections.MeshTextureCoordinateList.SetTextureCoordinate(self, index: int, tc: Rhino.Geometry.Point2f) -> bool
Rhino.Geometry.Collections.MeshTextureCoordinateList.SetTextureCoordinate(self, index: int, tc: Rhino.Geometry.Point3f) -> bool
Rhino.Geometry.Collections.MeshTextureCoordinateList.SetTextureCoordinates(self, mapping: Rhino.Render.TextureMapping) -> bool
Rhino.Geometry.Collections.MeshTextureCoordinateList.SetTextureCoordinates(self, textureCoordinates: List[Rhino.Geometry.Point2f]) -> bool
Rhino.Geometry.Collections.MeshTextureCoordinateList.ToFloatArray(self) -> List[float]
Rhino.Geometry.Collections.MeshTextureCoordinateList.TransposeTextureCoordinates(self) -> bool
Rhino.Geometry.Collections.MeshTopologyEdgeList.CollapseEdge(self, topologyEdgeIndex: int) -> bool
Rhino.Geometry.Collections.MeshTopologyEdgeList.EdgeLine(self, topologyEdgeIndex: int) -> Line
Rhino.Geometry.Collections.MeshTopologyEdgeList.GetConnectedFaces(self, topologyEdgeIndex: int) -> List[int]
Rhino.Geometry.Collections.MeshTopologyEdgeList.GetConnectedFaces(self, topologyEdgeIndex: int, faceOrientationMatchesEdgeDirection: System.Boolean[]@) -> List[int]
Rhino.Geometry.Collections.MeshTopologyEdgeList.GetEdgeIndex(self, topologyVertex1: int, topologyVertex2: int) -> int
Rhino.Geometry.Collections.MeshTopologyEdgeList.GetEdgesForFace(self, faceIndex: int) -> List[int]
Rhino.Geometry.Collections.MeshTopologyEdgeList.GetEdgesForFace(self, faceIndex: int, sameOrientation: System.Boolean[]@) -> List[int]
Rhino.Geometry.Collections.MeshTopologyEdgeList.GetTopologyVertices(self, topologyEdgeIndex: int) -> IndexPair
Rhino.Geometry.Collections.MeshTopologyEdgeList.IsEdgeUnwelded(self, topologyEdgeIndex: int) -> bool
Rhino.Geometry.Collections.MeshTopologyEdgeList.IsHidden(self, topologyEdgeIndex: int) -> bool
Rhino.Geometry.Collections.MeshTopologyEdgeList.IsNgonInterior(self, topologyEdgeIndex: int) -> bool
Rhino.Geometry.Collections.MeshTopologyEdgeList.IsSwappableEdge(self, topologyEdgeIndex: int) -> bool
Rhino.Geometry.Collections.MeshTopologyEdgeList.SplitEdge(self, topologyEdgeIndex: int, point: Rhino.Geometry.Point3d) -> bool
Rhino.Geometry.Collections.MeshTopologyEdgeList.SplitEdge(self, topologyEdgeIndex: int, t: float) -> bool
Rhino.Geometry.Collections.MeshTopologyEdgeList.SwapEdge(self, topologyEdgeIndex: int) -> bool
Rhino.Geometry.Collections.MeshTopologyVertexList.ConnectedEdge(self, topologyVertexIndex: int, edgeAtVertexIndex: int) -> int
Rhino.Geometry.Collections.MeshTopologyVertexList.ConnectedEdges(self, topologyVertexIndex: int) -> List[int]
Rhino.Geometry.Collections.MeshTopologyVertexList.ConnectedEdgesCount(self, topologyVertexIndex: int) -> int
Rhino.Geometry.Collections.MeshTopologyVertexList.ConnectedFaces(self, topologyVertexIndex: int) -> List[int]
Rhino.Geometry.Collections.MeshTopologyVertexList.ConnectedTopologyVertices(self, topologyVertexIndex: int) -> List[int]
Rhino.Geometry.Collections.MeshTopologyVertexList.ConnectedTopologyVertices(self, topologyVertexIndex: int, sorted: bool) -> List[int]
Rhino.Geometry.Collections.MeshTopologyVertexList.GetEnumerator(self) -> IEnumerator<Point3f>
Rhino.Geometry.Collections.MeshTopologyVertexList.IndicesFromFace(self, faceIndex: int) -> List[int]
Rhino.Geometry.Collections.MeshTopologyVertexList.IsHidden(self, topologyVertexIndex: int) -> bool
Rhino.Geometry.Collections.MeshTopologyVertexList.MeshVertexIndices(self, topologyVertexIndex: int) -> List[int]
Rhino.Geometry.Collections.MeshTopologyVertexList.SortEdges(self) -> bool
Rhino.Geometry.Collections.MeshTopologyVertexList.SortEdges(self, topologyVertexIndex: int) -> bool
Rhino.Geometry.Collections.MeshTopologyVertexList.TopologyVertexIndex(self, vertexIndex: int) -> int
Rhino.Geometry.Collections.MeshVertexColorList.Add(self, color: System.Drawing.Color) -> int
Rhino.Geometry.Collections.MeshVertexColorList.Add(self, red: int, green: int, blue: int) -> int
Rhino.Geometry.Collections.MeshVertexColorList.AddRange(self, colors: Iterable[System.Drawing.Color]) -> bool
Rhino.Geometry.Collections.MeshVertexColorList.AppendColors(self, colors: List[System.Drawing.Color]) -> bool
Rhino.Geometry.Collections.MeshVertexColorList.Clear(self) -> None
Rhino.Geometry.Collections.MeshVertexColorList.CreateMonotoneMesh(self, baseColor: System.Drawing.Color) -> bool
Rhino.Geometry.Collections.MeshVertexColorList.Destroy(self) -> None
Rhino.Geometry.Collections.MeshVertexColorList.GetEnumerator(self) -> IEnumerator<Color>
Rhino.Geometry.Collections.MeshVertexColorList.SetColor(self, face: Rhino.Geometry.MeshFace, color: System.Drawing.Color) -> bool
Rhino.Geometry.Collections.MeshVertexColorList.SetColor(self, index: int, color: System.Drawing.Color) -> bool
Rhino.Geometry.Collections.MeshVertexColorList.SetColor(self, index: int, red: int, green: int, blue: int) -> bool
Rhino.Geometry.Collections.MeshVertexColorList.SetColors(self, colors: List[System.Drawing.Color]) -> bool
Rhino.Geometry.Collections.MeshVertexColorList.ToARGBArray(self) -> List[int]
Rhino.Geometry.Collections.MeshVertexList.Add(self, vertex: Rhino.Geometry.Point3d) -> int
Rhino.Geometry.Collections.MeshVertexList.Add(self, vertex: Rhino.Geometry.Point3f) -> int
Rhino.Geometry.Collections.MeshVertexList.Add(self, x: float, y: float, z: float) -> int
Rhino.Geometry.Collections.MeshVertexList.Add(self, x: float, y: float, z: float) -> int
Rhino.Geometry.Collections.MeshVertexList.AddVertices(self, vertices: Iterable[Rhino.Geometry.Point3d]) -> None
Rhino.Geometry.Collections.MeshVertexList.AddVertices(self, vertices: Iterable[Rhino.Geometry.Point3f]) -> None
Rhino.Geometry.Collections.MeshVertexList.Clear(self) -> None
Rhino.Geometry.Collections.MeshVertexList.CombineIdentical(self, ignoreNormals: bool, ignoreAdditional: bool) -> bool
Rhino.Geometry.Collections.MeshVertexList.CullUnused(self) -> int
Rhino.Geometry.Collections.MeshVertexList.Destroy(self) -> None
Rhino.Geometry.Collections.MeshVertexList.GetConnectedVertices(self, vertexIndex: int) -> List[int]
Rhino.Geometry.Collections.MeshVertexList.GetEnumerator(self) -> IEnumerator<Point3f>
Rhino.Geometry.Collections.MeshVertexList.GetTopologicalIndenticalVertices(self, vertexIndex: int) -> List[int]
Rhino.Geometry.Collections.MeshVertexList.GetVertexFaces(self, vertexIndex: int) -> List[int]
Rhino.Geometry.Collections.MeshVertexList.Hide(self, vertexIndex: int) -> None
Rhino.Geometry.Collections.MeshVertexList.HideAll(self) -> None
Rhino.Geometry.Collections.MeshVertexList.IsHidden(self, vertexIndex: int) -> bool
Rhino.Geometry.Collections.MeshVertexList.Point3dAt(self, index: int) -> Point3d
Rhino.Geometry.Collections.MeshVertexList.Remove(self, index: int, shrinkFaces: bool) -> bool
Rhino.Geometry.Collections.MeshVertexList.Remove(self, indices: Iterable[int], shrinkFaces: bool) -> bool
Rhino.Geometry.Collections.MeshVertexList.SetVertex(self, index: int, vertex: Rhino.Geometry.Point3d) -> bool
Rhino.Geometry.Collections.MeshVertexList.SetVertex(self, index: int, vertex: Rhino.Geometry.Point3f) -> bool
Rhino.Geometry.Collections.MeshVertexList.SetVertex(self, index: int, x: float, y: float, z: float) -> bool
Rhino.Geometry.Collections.MeshVertexList.SetVertex(self, index: int, x: float, y: float, z: float) -> bool
Rhino.Geometry.Collections.MeshVertexList.SetVertex(self, index: int, x: float, y: float, z: float, updateNormals: bool) -> bool
Rhino.Geometry.Collections.MeshVertexList.Show(self, vertexIndex: int) -> None
Rhino.Geometry.Collections.MeshVertexList.ShowAll(self) -> None
Rhino.Geometry.Collections.MeshVertexList.ToFloatArray(self) -> List[float]
Rhino.Geometry.Collections.MeshVertexList.ToPoint3dArray(self) -> List[Point3d]
Rhino.Geometry.Collections.MeshVertexList.ToPoint3fArray(self) -> List[Point3f]
Rhino.Geometry.Collections.MeshVertexList._AlignMeshVertices(self, arg1: Iterable[Rhino.Geometry.Mesh], arg2: float, arg3: Iterable[Iterable[bool]]) -> None
Rhino.Geometry.Collections.MeshVertexList._AlignMeshVertices(self, arg1: float, arg2: Iterable[bool]) -> None
Rhino.Geometry.Collections.MeshVertexNormalList.Add(self, normal: Rhino.Geometry.Vector3d) -> int
Rhino.Geometry.Collections.MeshVertexNormalList.Add(self, normal: Rhino.Geometry.Vector3f) -> int
Rhino.Geometry.Collections.MeshVertexNormalList.Add(self, x: float, y: float, z: float) -> int
Rhino.Geometry.Collections.MeshVertexNormalList.Add(self, x: float, y: float, z: float) -> int
Rhino.Geometry.Collections.MeshVertexNormalList.AddRange(self, normals: List[Rhino.Geometry.Vector3f]) -> bool
Rhino.Geometry.Collections.MeshVertexNormalList.Clear(self) -> None
Rhino.Geometry.Collections.MeshVertexNormalList.ComputeNormals(self) -> bool
Rhino.Geometry.Collections.MeshVertexNormalList.Destroy(self) -> None
Rhino.Geometry.Collections.MeshVertexNormalList.Flip(self) -> None
Rhino.Geometry.Collections.MeshVertexNormalList.GetEnumerator(self) -> IEnumerator<Vector3f>
Rhino.Geometry.Collections.MeshVertexNormalList.SetNormal(self, index: int, normal: Rhino.Geometry.Vector3d) -> bool
Rhino.Geometry.Collections.MeshVertexNormalList.SetNormal(self, index: int, normal: Rhino.Geometry.Vector3f) -> bool
Rhino.Geometry.Collections.MeshVertexNormalList.SetNormal(self, index: int, x: float, y: float, z: float) -> bool
Rhino.Geometry.Collections.MeshVertexNormalList.SetNormal(self, index: int, x: float, y: float, z: float) -> bool
Rhino.Geometry.Collections.MeshVertexNormalList.SetNormals(self, normals: List[Rhino.Geometry.Vector3f]) -> bool
Rhino.Geometry.Collections.MeshVertexNormalList.ToFloatArray(self) -> List[float]
Rhino.Geometry.Collections.MeshVertexNormalList.UnitizeNormals(self) -> bool
Rhino.Geometry.Collections.MeshVertexStatusList.Add(self, hidden: bool) -> None
Rhino.Geometry.Collections.MeshVertexStatusList.AddRange(self, values: Iterable[bool]) -> None
Rhino.Geometry.Collections.MeshVertexStatusList.Clear(self) -> None
Rhino.Geometry.Collections.MeshVertexStatusList.Contains(self, hidden: bool) -> bool
Rhino.Geometry.Collections.MeshVertexStatusList.CopyTo(self, array: List[bool], arrayIndex: int) -> None
Rhino.Geometry.Collections.MeshVertexStatusList.Destroy(self) -> None
Rhino.Geometry.Collections.MeshVertexStatusList.GetEnumerator(self) -> IEnumerator<bool>
Rhino.Geometry.Collections.NurbsCurveKnotList.ClampEnd(self, end: Rhino.Geometry.CurveEnd) -> bool
Rhino.Geometry.Collections.NurbsCurveKnotList.Contains(self, item: float) -> bool
Rhino.Geometry.Collections.NurbsCurveKnotList.CopyTo(self, array: List[float], arrayIndex: int) -> None
Rhino.Geometry.Collections.NurbsCurveKnotList.CreatePeriodicKnots(self, knotSpacing: float) -> bool
Rhino.Geometry.Collections.NurbsCurveKnotList.CreateUniformKnots(self, knotSpacing: float) -> bool
Rhino.Geometry.Collections.NurbsCurveKnotList.EnsurePrivateCopy(self) -> None
Rhino.Geometry.Collections.NurbsCurveKnotList.EpsilonEquals(self, other: Rhino.Geometry.Collections.NurbsCurveKnotList, epsilon: float) -> bool
Rhino.Geometry.Collections.NurbsCurveKnotList.IndexOf(self, item: float) -> int
Rhino.Geometry.Collections.NurbsCurveKnotList.InsertKnot(self, value: float) -> bool
Rhino.Geometry.Collections.NurbsCurveKnotList.InsertKnot(self, value: float, multiplicity: int) -> bool
Rhino.Geometry.Collections.NurbsCurveKnotList.KnotMultiplicity(self, index: int) -> int
Rhino.Geometry.Collections.NurbsCurveKnotList.RemoveKnotAt(self, t: float) -> bool
Rhino.Geometry.Collections.NurbsCurveKnotList.RemoveKnots(self, index0: int, index1: int) -> bool
Rhino.Geometry.Collections.NurbsCurveKnotList.RemoveMultipleKnots(self, minimumMultiplicity: int, maximumMultiplicity: int, tolerance: float) -> int
Rhino.Geometry.Collections.NurbsCurveKnotList.SuperfluousKnot(self, start: bool) -> float
Rhino.Geometry.Collections.NurbsCurvePointList.ChangeEndWeights(self, w0: float, w1: float) -> bool
Rhino.Geometry.Collections.NurbsCurvePointList.Contains(self, item: Rhino.Geometry.ControlPoint) -> bool
Rhino.Geometry.Collections.NurbsCurvePointList.ControlPolygon(self) -> Polyline
Rhino.Geometry.Collections.NurbsCurvePointList.CopyTo(self, array: List[Rhino.Geometry.ControlPoint], arrayIndex: int) -> None
Rhino.Geometry.Collections.NurbsCurvePointList.EnsurePrivateCopy(self) -> None
Rhino.Geometry.Collections.NurbsCurvePointList.EpsilonEquals(self, other: Rhino.Geometry.Collections.NurbsCurvePointList, epsilon: float) -> bool
Rhino.Geometry.Collections.NurbsCurvePointList.GetPoint(self, index: int, point: Rhino.Geometry.Point3d@) -> bool
Rhino.Geometry.Collections.NurbsCurvePointList.GetPoint(self, index: int, point: Rhino.Geometry.Point4d@) -> bool
Rhino.Geometry.Collections.NurbsCurvePointList.GetWeight(self, index: int) -> float
Rhino.Geometry.Collections.NurbsCurvePointList.IndexOf(self, item: Rhino.Geometry.ControlPoint) -> int
Rhino.Geometry.Collections.NurbsCurvePointList.MakeNonRational(self) -> bool
Rhino.Geometry.Collections.NurbsCurvePointList.MakeRational(self) -> bool
Rhino.Geometry.Collections.NurbsCurvePointList.SetPoint(self, index: int, point: Rhino.Geometry.Point3d) -> bool
Rhino.Geometry.Collections.NurbsCurvePointList.SetPoint(self, index: int, point: Rhino.Geometry.Point3d, weight: float) -> bool
Rhino.Geometry.Collections.NurbsCurvePointList.SetPoint(self, index: int, point: Rhino.Geometry.Point4d) -> bool
Rhino.Geometry.Collections.NurbsCurvePointList.SetPoint(self, index: int, x: float, y: float, z: float) -> bool
Rhino.Geometry.Collections.NurbsCurvePointList.SetPoint(self, index: int, x: float, y: float, z: float, weight: float) -> bool
Rhino.Geometry.Collections.NurbsCurvePointList.SetWeight(self, index: int, weight: float) -> bool
Rhino.Geometry.Collections.NurbsCurvePointList.UVNDirectionsAt(self, index: int, uDir: Rhino.Geometry.Vector3d@, vDir: Rhino.Geometry.Vector3d@, nDir: Rhino.Geometry.Vector3d@) -> bool
Rhino.Geometry.Collections.NurbsCurvePointList.ValidateSpacing(self, closeTolerance: float, stackTolerance: float, closeIndices: System.Int32[]@, stackedIndices: System.Int32[]@) -> bool
Rhino.Geometry.Collections.NurbsSurfaceKnotList.CreatePeriodicKnots(self, knotSpacing: float) -> bool
Rhino.Geometry.Collections.NurbsSurfaceKnotList.CreateUniformKnots(self, knotSpacing: float) -> bool
Rhino.Geometry.Collections.NurbsSurfaceKnotList.EnsurePrivateCopy(self) -> None
Rhino.Geometry.Collections.NurbsSurfaceKnotList.EpsilonEquals(self, other: Rhino.Geometry.Collections.NurbsSurfaceKnotList, epsilon: float) -> bool
Rhino.Geometry.Collections.NurbsSurfaceKnotList.InsertKnot(self, value: float) -> bool
Rhino.Geometry.Collections.NurbsSurfaceKnotList.InsertKnot(self, value: float, multiplicity: int) -> bool
Rhino.Geometry.Collections.NurbsSurfaceKnotList.KnotMultiplicity(self, index: int) -> int
Rhino.Geometry.Collections.NurbsSurfaceKnotList.RemoveKnots(self, index0: int, index1: int) -> bool
Rhino.Geometry.Collections.NurbsSurfaceKnotList.RemoveKnotsAt(self, u: float, v: float) -> bool
Rhino.Geometry.Collections.NurbsSurfaceKnotList.RemoveMultipleKnots(self, minimumMultiplicity: int, maximumMultiplicity: int, tolerance: float) -> int
Rhino.Geometry.Collections.NurbsSurfaceKnotList.SuperfluousKnot(self, start: bool) -> float
Rhino.Geometry.Collections.NurbsSurfacePointList.EnsurePrivateCopy(self) -> None
Rhino.Geometry.Collections.NurbsSurfacePointList.EpsilonEquals(self, other: Rhino.Geometry.Collections.NurbsSurfacePointList, epsilon: float) -> bool
Rhino.Geometry.Collections.NurbsSurfacePointList.GetControlPoint(self, u: int, v: int) -> ControlPoint
Rhino.Geometry.Collections.NurbsSurfacePointList.GetGrevillePoint(self, u: int, v: int) -> Point2d
Rhino.Geometry.Collections.NurbsSurfacePointList.GetPoint(self, u: int, v: int, point: Rhino.Geometry.Point3d@) -> bool
Rhino.Geometry.Collections.NurbsSurfacePointList.GetPoint(self, u: int, v: int, point: Rhino.Geometry.Point4d@) -> bool
Rhino.Geometry.Collections.NurbsSurfacePointList.GetWeight(self, u: int, v: int) -> float
Rhino.Geometry.Collections.NurbsSurfacePointList.SetControlPoint(self, u: int, v: int, cp: Rhino.Geometry.ControlPoint) -> bool
Rhino.Geometry.Collections.NurbsSurfacePointList.SetPoint(self, u: int, v: int, point: Rhino.Geometry.Point3d) -> bool
Rhino.Geometry.Collections.NurbsSurfacePointList.SetPoint(self, u: int, v: int, point: Rhino.Geometry.Point3d, weight: float) -> bool
Rhino.Geometry.Collections.NurbsSurfacePointList.SetPoint(self, u: int, v: int, point: Rhino.Geometry.Point4d) -> bool
Rhino.Geometry.Collections.NurbsSurfacePointList.SetPoint(self, u: int, v: int, x: float, y: float, z: float) -> bool
Rhino.Geometry.Collections.NurbsSurfacePointList.SetPoint(self, u: int, v: int, x: float, y: float, z: float, weight: float) -> bool
Rhino.Geometry.Collections.NurbsSurfacePointList.SetWeight(self, u: int, v: int, weight: float) -> bool
Rhino.Geometry.Collections.NurbsSurfacePointList.UVNDirectionsAt(self, u: int, v: int, uDir: Rhino.Geometry.Vector3d@, vDir: Rhino.Geometry.Vector3d@, nDir: Rhino.Geometry.Vector3d@) -> bool
Rhino.Geometry.Collections.NurbsSurfacePointList.ValidateSpacing(self, closeTolerance: float, stackTolerance: float, closeIndices: Rhino.IndexPair[]@, stackedIndices: Rhino.IndexPair[]@) -> bool
Rhino.Geometry.Collections.NurbsSurfacePointList.[ObsoleteAttribute(self, arg1: int, arg2: int, arg3: Rhino.Geometry.Point3d) -> None
Rhino.Geometry.Collections.SubDEdgeList.Add(self, tag: Rhino.Geometry.SubDEdgeTag, v0: Rhino.Geometry.SubDVertex, v1: Rhino.Geometry.SubDVertex) -> SubDEdge
Rhino.Geometry.Collections.SubDEdgeList.Find(self, id: System.UInt32) -> SubDEdge
Rhino.Geometry.Collections.SubDEdgeList.Find(self, id: int) -> SubDEdge
Rhino.Geometry.Collections.SubDEdgeList.GetEnumerator(self) -> IEnumerator<SubDEdge>
Rhino.Geometry.Collections.SubDEdgeList.SetEdgeTags(self, edgeIndices: Iterable[int], tag: Rhino.Geometry.SubDEdgeTag) -> None
Rhino.Geometry.Collections.SubDEdgeList.SetEdgeTags(self, edges: Iterable[Rhino.Geometry.SubDEdge], tag: Rhino.Geometry.SubDEdgeTag) -> None
Rhino.Geometry.Collections.SubDFaceList.ClearPerFaceColors(self) -> uint
Rhino.Geometry.Collections.SubDFaceList.Find(self, id: System.UInt32) -> SubDFace
Rhino.Geometry.Collections.SubDFaceList.Find(self, id: int) -> SubDFace
Rhino.Geometry.Collections.SubDFaceList.GetEnumerator(self) -> IEnumerator<SubDFace>
Rhino.Geometry.Collections.SubDVertexList.Add(self, tag: Rhino.Geometry.SubDVertexTag, vertex: Rhino.Geometry.Point3d) -> SubDVertex
Rhino.Geometry.Collections.SubDVertexList.Find(self, id: System.UInt32) -> SubDVertex
Rhino.Geometry.Collections.SubDVertexList.Find(self, id: int) -> SubDVertex
Rhino.Geometry.ComponentIndex.!=(a: Rhino.Geometry.ComponentIndex, b: Rhino.Geometry.ComponentIndex) -> operator
Rhino.Geometry.ComponentIndex.<(a: Rhino.Geometry.ComponentIndex, b: Rhino.Geometry.ComponentIndex) -> operator
Rhino.Geometry.ComponentIndex.<=(a: Rhino.Geometry.ComponentIndex, b: Rhino.Geometry.ComponentIndex) -> operator
Rhino.Geometry.ComponentIndex.==(a: Rhino.Geometry.ComponentIndex, b: Rhino.Geometry.ComponentIndex) -> operator
Rhino.Geometry.ComponentIndex.>(a: Rhino.Geometry.ComponentIndex, b: Rhino.Geometry.ComponentIndex) -> operator
Rhino.Geometry.ComponentIndex.>=(a: Rhino.Geometry.ComponentIndex, b: Rhino.Geometry.ComponentIndex) -> operator
Rhino.Geometry.ComponentIndex.CompareTo(self, other: Rhino.Geometry.ComponentIndex) -> int
Rhino.Geometry.ComponentIndex.Equals(self, obj: Any) -> bool
Rhino.Geometry.ComponentIndex.Equals(self, other: Rhino.Geometry.ComponentIndex) -> bool
Rhino.Geometry.ComponentIndex.GetHashCode(self) -> int
Rhino.Geometry.ComponentIndex.IsUnset(self) -> bool
Rhino.Geometry.ComponentIndex.__init__(self, type: Rhino.Geometry.ComponentIndexType, index: int) -> None
Rhino.Geometry.ComponentStatus.!=(a: Rhino.Geometry.ComponentStatus, b: Rhino.Geometry.ComponentStatus) -> operator
Rhino.Geometry.ComponentStatus.+(a: Rhino.Geometry.ComponentStatus, b: Rhino.Geometry.ComponentStatus) -> operator
Rhino.Geometry.ComponentStatus.==(a: Rhino.Geometry.ComponentStatus, b: Rhino.Geometry.ComponentStatus) -> operator
Rhino.Geometry.ComponentStatus.Equals(self, obj: Any) -> bool
Rhino.Geometry.ComponentStatus.Equals(self, other: Rhino.Geometry.ComponentStatus) -> bool
Rhino.Geometry.ComponentStatus.GetHashCode(self) -> int
Rhino.Geometry.ComponentStatus.HasAllEqualStates(self, statesFilter: Rhino.Geometry.ComponentStatus, comparand: Rhino.Geometry.ComponentStatus) -> bool
Rhino.Geometry.ComponentStatus.HasNoEqualStates(self, statesFilter: Rhino.Geometry.ComponentStatus, comparand: Rhino.Geometry.ComponentStatus) -> bool
Rhino.Geometry.ComponentStatus.HasSomeEqualStates(self, statesFilter: Rhino.Geometry.ComponentStatus, comparand: Rhino.Geometry.ComponentStatus) -> bool
Rhino.Geometry.ComponentStatus.ToString(self) -> str
Rhino.Geometry.ComponentStatus.WithStates(self, additionalStatus: Rhino.Geometry.ComponentStatus) -> Rhino.Geometry.ComponentStatus
Rhino.Geometry.Cone.AngleInDegrees(self) -> float
Rhino.Geometry.Cone.AngleInRadians(self) -> float
Rhino.Geometry.Cone.EpsilonEquals(self, other: Rhino.Geometry.Cone, epsilon: float) -> bool
Rhino.Geometry.Cone.ToBrep(self, capBottom: bool) -> Brep
Rhino.Geometry.Cone.ToNurbsSurface(self) -> NurbsSurface
Rhino.Geometry.Cone.ToRevSurface(self) -> RevSurface
Rhino.Geometry.Cone.__init__(self, plane: Rhino.Geometry.Plane, height: float, radius: float) -> None
Rhino.Geometry.ControlPoint.EpsilonEquals(self, other: Rhino.Geometry.ControlPoint, epsilon: float) -> bool
Rhino.Geometry.ControlPoint.Equals(self, other: Rhino.Geometry.ControlPoint) -> bool
Rhino.Geometry.ControlPoint.__init__(self, euclideanPt: Rhino.Geometry.Point3d, weight: float) -> None
Rhino.Geometry.ControlPoint.__init__(self, pt: Rhino.Geometry.Point3d) -> None
Rhino.Geometry.ControlPoint.__init__(self, pt: Rhino.Geometry.Point4d) -> None
Rhino.Geometry.ControlPoint.__init__(self, x: float, y: float, z: float) -> None
Rhino.Geometry.ControlPoint.__init__(self, x: float, y: float, z: float, weight: float) -> None
Rhino.Geometry.Curve.ChangeClosedCurveSeam(self, t: float) -> bool
Rhino.Geometry.Curve.ChangeDimension(self, desiredDimension: int) -> bool
Rhino.Geometry.Curve.ClosedCurveOrientation(self) -> CurveOrientation
Rhino.Geometry.Curve.ClosedCurveOrientation(self, plane: Rhino.Geometry.Plane) -> CurveOrientation
Rhino.Geometry.Curve.ClosedCurveOrientation(self, upDirection: Rhino.Geometry.Vector3d) -> CurveOrientation
Rhino.Geometry.Curve.ClosedCurveOrientation(self, xform: Rhino.Geometry.Transform) -> CurveOrientation
Rhino.Geometry.Curve.ClosestPoint(self, testPoint: Rhino.Geometry.Point3d, t: System.Double@) -> bool
Rhino.Geometry.Curve.ClosestPoint(self, testPoint: Rhino.Geometry.Point3d, t: System.Double@, maximumDistance: float) -> bool
Rhino.Geometry.Curve.ClosestPoints(self, geometry: Iterable[Rhino.Geometry.GeometryBase], pointOnCurve: Rhino.Geometry.Point3d@, pointOnObject: Rhino.Geometry.Point3d@, whichGeometry: System.Int32@) -> bool
Rhino.Geometry.Curve.ClosestPoints(self, geometry: Iterable[Rhino.Geometry.GeometryBase], pointOnCurve: Rhino.Geometry.Point3d@, pointOnObject: Rhino.Geometry.Point3d@, whichGeometry: System.Int32@, maximumDistance: float) -> bool
Rhino.Geometry.Curve.ClosestPoints(self, otherCurve: Rhino.Geometry.Curve, pointOnThisCurve: Rhino.Geometry.Point3d@, pointOnOtherCurve: Rhino.Geometry.Point3d@) -> bool
Rhino.Geometry.Curve.CombineShortSegments(self, tolerance: float) -> bool
Rhino.Geometry.Curve.Contains(self, testPoint: Rhino.Geometry.Point3d, plane: Rhino.Geometry.Plane, tolerance: float) -> PointContainment
Rhino.Geometry.Curve.ControlPolygon(self) -> Polyline
Rhino.Geometry.Curve.CreateArcBlend(startPt: Rhino.Geometry.Point3d, startDir: Rhino.Geometry.Vector3d, endPt: Rhino.Geometry.Point3d, endDir: Rhino.Geometry.Vector3d, controlPointLengthRatio: float) -> Rhino.Geometry.Curve
Rhino.Geometry.Curve.CreateArcCornerRectangle(rectangle: Rhino.Geometry.Rectangle3d, radius: float) -> Rhino.Geometry.Curve
Rhino.Geometry.Curve.CreateArcLineArcBlend(startPt: Rhino.Geometry.Point3d, startDir: Rhino.Geometry.Vector3d, endPt: Rhino.Geometry.Point3d, endDir: Rhino.Geometry.Vector3d, radius: float) -> Rhino.Geometry.Curve
Rhino.Geometry.Curve.CreateBlendCurve(curve0: Rhino.Geometry.Curve, t0: float, reverse0: bool, continuity0: Rhino.Geometry.BlendContinuity, curve1: Rhino.Geometry.Curve, t1: float, reverse1: bool, continuity1: Rhino.Geometry.BlendContinuity) -> Rhino.Geometry.Curve
Rhino.Geometry.Curve.CreateBlendCurve(curveA: Rhino.Geometry.Curve, curveB: Rhino.Geometry.Curve, continuity: Rhino.Geometry.BlendContinuity) -> Rhino.Geometry.Curve
Rhino.Geometry.Curve.CreateBlendCurve(curveA: Rhino.Geometry.Curve, curveB: Rhino.Geometry.Curve, continuity: Rhino.Geometry.BlendContinuity, bulgeA: float, bulgeB: float) -> Rhino.Geometry.Curve
Rhino.Geometry.Curve.CreateBooleanDifference(curveA: Rhino.Geometry.Curve, curveB: Rhino.Geometry.Curve, tolerance: float) -> List[Rhino.Geometry.Curve]
Rhino.Geometry.Curve.CreateBooleanDifference(curveA: Rhino.Geometry.Curve, subtractors: Iterable[Rhino.Geometry.Curve], tolerance: float) -> List[Rhino.Geometry.Curve]
Rhino.Geometry.Curve.CreateBooleanIntersection(curveA: Rhino.Geometry.Curve, curveB: Rhino.Geometry.Curve, tolerance: float) -> List[Rhino.Geometry.Curve]
Rhino.Geometry.Curve.CreateBooleanRegions(curves: Iterable[Rhino.Geometry.Curve], plane: Rhino.Geometry.Plane, combineRegions: bool, tolerance: float) -> CurveBooleanRegions
Rhino.Geometry.Curve.CreateBooleanRegions(curves: Iterable[Rhino.Geometry.Curve], plane: Rhino.Geometry.Plane, points: Iterable[Rhino.Geometry.Point3d], combineRegions: bool, tolerance: float) -> CurveBooleanRegions
Rhino.Geometry.Curve.CreateBooleanUnion(curves: Iterable[Rhino.Geometry.Curve], tolerance: float) -> List[Rhino.Geometry.Curve]
Rhino.Geometry.Curve.CreateConicCornerRectangle(rectangle: Rhino.Geometry.Rectangle3d, rho: float) -> Rhino.Geometry.Curve
Rhino.Geometry.Curve.CreateControlPointCurve(points: Iterable[Rhino.Geometry.Point3d]) -> Rhino.Geometry.Curve
Rhino.Geometry.Curve.CreateControlPointCurve(points: Iterable[Rhino.Geometry.Point3d], degree: int) -> Rhino.Geometry.Curve
Rhino.Geometry.Curve.CreateCurve2View(curveA: Rhino.Geometry.Curve, curveB: Rhino.Geometry.Curve, vectorA: Rhino.Geometry.Vector3d, vectorB: Rhino.Geometry.Vector3d, tolerance: float, angleTolerance: float) -> List[Rhino.Geometry.Curve]
Rhino.Geometry.Curve.CreateFillet(curve0: Rhino.Geometry.Curve, curve1: Rhino.Geometry.Curve, radius: float, t0Base: float, t1Base: float) -> Arc
Rhino.Geometry.Curve.CreateFilletCornersCurve(curve: Rhino.Geometry.Curve, radius: float, tolerance: float, angleTolerance: float) -> Rhino.Geometry.Curve
Rhino.Geometry.Curve.CreateFilletCurves(curve0: Rhino.Geometry.Curve, point0: Rhino.Geometry.Point3d, curve1: Rhino.Geometry.Curve, point1: Rhino.Geometry.Point3d, radius: float, join: bool, trim: bool, arcExtension: bool, tolerance: float, angleTolerance: float) -> List[Rhino.Geometry.Curve]
Rhino.Geometry.Curve.CreateInterpolatedCurve(points: Iterable[Rhino.Geometry.Point3d], degree: int) -> Rhino.Geometry.Curve
Rhino.Geometry.Curve.CreateInterpolatedCurve(points: Iterable[Rhino.Geometry.Point3d], degree: int, knots: Rhino.Geometry.CurveKnotStyle) -> Rhino.Geometry.Curve
Rhino.Geometry.Curve.CreateInterpolatedCurve(points: Iterable[Rhino.Geometry.Point3d], degree: int, knots: Rhino.Geometry.CurveKnotStyle, startTangent: Rhino.Geometry.Vector3d, endTangent: Rhino.Geometry.Vector3d) -> Rhino.Geometry.Curve
Rhino.Geometry.Curve.CreateMatchCurve(curve0: Rhino.Geometry.Curve, reverse0: bool, continuity: Rhino.Geometry.BlendContinuity, curve1: Rhino.Geometry.Curve, reverse1: bool, preserve: Rhino.Geometry.PreserveEnd, average: bool) -> List[Rhino.Geometry.Curve]
Rhino.Geometry.Curve.CreateMeanCurve(curveA: Rhino.Geometry.Curve, curveB: Rhino.Geometry.Curve) -> Rhino.Geometry.Curve
Rhino.Geometry.Curve.CreateMeanCurve(curveA: Rhino.Geometry.Curve, curveB: Rhino.Geometry.Curve, angleToleranceRadians: float) -> Rhino.Geometry.Curve
Rhino.Geometry.Curve.CreatePeriodicCurve(curve: Rhino.Geometry.Curve) -> Rhino.Geometry.Curve
Rhino.Geometry.Curve.CreatePeriodicCurve(curve: Rhino.Geometry.Curve, smooth: bool) -> Rhino.Geometry.Curve
Rhino.Geometry.Curve.CreateRevisionCloud(curve: Rhino.Geometry.Curve, segmentCount: int, angle: float, flip: bool) -> Rhino.Geometry.Curve
Rhino.Geometry.Curve.CreateRevisionCloud(points: Iterable[Rhino.Geometry.Point3d], angle: float, flip: bool) -> Rhino.Geometry.Curve
Rhino.Geometry.Curve.CreateSoftEditCurve(curve: Rhino.Geometry.Curve, t: float, delta: Rhino.Geometry.Vector3d, length: float, fixEnds: bool) -> Rhino.Geometry.Curve
Rhino.Geometry.Curve.CreateTextOutlines(text: str, font: str, textHeight: float, textStyle: int, closeLoops: bool, plane: Rhino.Geometry.Plane, smallCapsScale: float, tolerance: float) -> List[Rhino.Geometry.Curve]
Rhino.Geometry.Curve.CreateTweenCurves(curve0: Rhino.Geometry.Curve, curve1: Rhino.Geometry.Curve, numCurves: int, tolerance: float) -> List[Rhino.Geometry.Curve]
Rhino.Geometry.Curve.CreateTweenCurvesWithMatching(curve0: Rhino.Geometry.Curve, curve1: Rhino.Geometry.Curve, numCurves: int, tolerance: float) -> List[Rhino.Geometry.Curve]
Rhino.Geometry.Curve.CreateTweenCurvesWithSampling(curve0: Rhino.Geometry.Curve, curve1: Rhino.Geometry.Curve, numCurves: int, numSamples: int, tolerance: float) -> List[Rhino.Geometry.Curve]
Rhino.Geometry.Curve.CurvatureAt(self, t: float) -> Vector3d
Rhino.Geometry.Curve.DerivativeAt(self, t: float, derivativeCount: int) -> List[Vector3d]
Rhino.Geometry.Curve.DerivativeAt(self, t: float, derivativeCount: int, side: Rhino.Geometry.CurveEvaluationSide) -> List[Vector3d]
Rhino.Geometry.Curve.Dispose(self, disposing: bool) -> None
Rhino.Geometry.Curve.DivideAsContour(self, contourStart: Rhino.Geometry.Point3d, contourEnd: Rhino.Geometry.Point3d, interval: float) -> List[Point3d]
Rhino.Geometry.Curve.DivideByCount(self, segmentCount: int, includeEnds: bool) -> List[float]
Rhino.Geometry.Curve.DivideByCount(self, segmentCount: int, includeEnds: bool, points: Rhino.Geometry.Point3d[]@) -> List[float]
Rhino.Geometry.Curve.DivideByLength(self, segmentLength: float, includeEnds: bool) -> List[float]
Rhino.Geometry.Curve.DivideByLength(self, segmentLength: float, includeEnds: bool, points: Rhino.Geometry.Point3d[]@) -> List[float]
Rhino.Geometry.Curve.DivideByLength(self, segmentLength: float, includeEnds: bool, reverse: bool) -> List[float]
Rhino.Geometry.Curve.DivideByLength(self, segmentLength: float, includeEnds: bool, reverse: bool, points: Rhino.Geometry.Point3d[]@) -> List[float]
Rhino.Geometry.Curve.DivideEquidistant(self, distance: float) -> List[Point3d]
Rhino.Geometry.Curve.DivideEquidistant(self, distance: float, curveParameters: System.Double[]@) -> List[Point3d]
Rhino.Geometry.Curve.DoDirectionsMatch(curveA: Rhino.Geometry.Curve, curveB: Rhino.Geometry.Curve) -> bool
Rhino.Geometry.Curve.Duplicate(self) -> GeometryBase
Rhino.Geometry.Curve.DuplicateCurve(self) -> Rhino.Geometry.Curve
Rhino.Geometry.Curve.DuplicateSegments(self) -> List[Rhino.Geometry.Curve]
Rhino.Geometry.Curve.Extend(self, domain: Rhino.Geometry.Interval) -> Rhino.Geometry.Curve
Rhino.Geometry.Curve.Extend(self, side: Rhino.Geometry.CurveEnd, length: float, style: Rhino.Geometry.CurveExtensionStyle) -> Rhino.Geometry.Curve
Rhino.Geometry.Curve.Extend(self, side: Rhino.Geometry.CurveEnd, style: Rhino.Geometry.CurveExtensionStyle, endPoint: Rhino.Geometry.Point3d) -> Rhino.Geometry.Curve
Rhino.Geometry.Curve.Extend(self, side: Rhino.Geometry.CurveEnd, style: Rhino.Geometry.CurveExtensionStyle, geometry: Iterable[Rhino.Geometry.GeometryBase]) -> Rhino.Geometry.Curve
Rhino.Geometry.Curve.Extend(self, t0: float, t1: float) -> Rhino.Geometry.Curve
Rhino.Geometry.Curve.ExtendByArc(self, side: Rhino.Geometry.CurveEnd, geometry: Iterable[Rhino.Geometry.GeometryBase]) -> Rhino.Geometry.Curve
Rhino.Geometry.Curve.ExtendByLine(self, side: Rhino.Geometry.CurveEnd, geometry: Iterable[Rhino.Geometry.GeometryBase]) -> Rhino.Geometry.Curve
Rhino.Geometry.Curve.ExtendOnSurface(self, side: Rhino.Geometry.CurveEnd, face: Rhino.Geometry.BrepFace) -> Rhino.Geometry.Curve
Rhino.Geometry.Curve.ExtendOnSurface(self, side: Rhino.Geometry.CurveEnd, surface: Rhino.Geometry.Surface) -> Rhino.Geometry.Curve
Rhino.Geometry.Curve.ExtremeParameters(self, direction: Rhino.Geometry.Vector3d) -> List[float]
Rhino.Geometry.Curve.Fair(self, distanceTolerance: float, angleTolerance: float, clampStart: int, clampEnd: int, iterations: int) -> Rhino.Geometry.Curve
Rhino.Geometry.Curve.FilletSurfaceToCurve(self, face: Rhino.Geometry.BrepFace, t: float, u: float, v: float, radius: float, alignToCurve: int, railDegree: int, arcDegree: int, arcSliders: Iterable[float], numBezierSrfs: int, tolerance: float, out_fillets: List[Rhino.Geometry.Brep], fitResults: System.Double[]@) -> bool
Rhino.Geometry.Curve.FilletSurfaceToRail(self, faceWithCurve: Rhino.Geometry.BrepFace, secondFace: Rhino.Geometry.BrepFace, u1: float, v1: float, railDegree: int, arcDegree: int, arcSliders: Iterable[float], numBezierSrfs: int, extend: bool, split_type: Rhino.Geometry.FilletSurfaceSplitType, tolerance: float, out_fillets: List[Rhino.Geometry.Brep], out_breps0: List[Rhino.Geometry.Brep], out_breps1: List[Rhino.Geometry.Brep], fitResults: System.Double[]@) -> bool
Rhino.Geometry.Curve.FindLocalInflection(self, N: Rhino.Geometry.Vector3d, subDomain: Rhino.Geometry.Interval, seed: float, curveParameter: System.Double@, angleError: System.Double@) -> bool
Rhino.Geometry.Curve.Fit(self, degree: int, fitTolerance: float, angleTolerance: float) -> Rhino.Geometry.Curve
Rhino.Geometry.Curve.FrameAt(self, t: float, plane: Rhino.Geometry.Plane@) -> bool
Rhino.Geometry.Curve.GetConicSectionType(self) -> ConicSectionType
Rhino.Geometry.Curve.GetConicSectionType(self, focus1: Rhino.Geometry.Point3d@, focus2: Rhino.Geometry.Point3d@, center: Rhino.Geometry.Point3d@) -> ConicSectionType
Rhino.Geometry.Curve.GetCurveParameterFromNurbsFormParameter(self, nurbsParameter: float, curveParameter: System.Double@) -> bool
Rhino.Geometry.Curve.GetDistancesBetweenCurves(curveA: Rhino.Geometry.Curve, curveB: Rhino.Geometry.Curve, tolerance: float, maxDistance: System.Double@, maxDistanceParameterA: System.Double@, maxDistanceParameterB: System.Double@, minDistance: System.Double@, minDistanceParameterA: System.Double@, minDistanceParameterB: System.Double@) -> bool
Rhino.Geometry.Curve.GetFilletPoints(curve0: Rhino.Geometry.Curve, curve1: Rhino.Geometry.Curve, radius: float, t0Base: float, t1Base: float, t0: System.Double@, t1: System.Double@, filletPlane: Rhino.Geometry.Plane@) -> bool
Rhino.Geometry.Curve.GetLength(self) -> float
Rhino.Geometry.Curve.GetLength(self, fractionalTolerance: float) -> float
Rhino.Geometry.Curve.GetLength(self, fractionalTolerance: float, subdomain: Rhino.Geometry.Interval) -> float
Rhino.Geometry.Curve.GetLength(self, subdomain: Rhino.Geometry.Interval) -> float
Rhino.Geometry.Curve.GetLocalPerpPoint(self, testPoint: Rhino.Geometry.Point3d, seedParmameter: float, curveParameter: System.Double@) -> bool
Rhino.Geometry.Curve.GetLocalPerpPoint(self, testPoint: Rhino.Geometry.Point3d, seedParmameter: float, subDomain: Rhino.Geometry.Interval, curveParameter: System.Double@) -> bool
Rhino.Geometry.Curve.GetLocalTangentPoint(self, testPoint: Rhino.Geometry.Point3d, seedParmameter: float, curveParameter: System.Double@) -> bool
Rhino.Geometry.Curve.GetLocalTangentPoint(self, testPoint: Rhino.Geometry.Point3d, seedParmameter: float, subDomain: Rhino.Geometry.Interval, curveParameter: System.Double@) -> bool
Rhino.Geometry.Curve.GetNextDiscontinuity(self, continuityType: Rhino.Geometry.Continuity, t0: float, t1: float, cosAngleTolerance: float, curvatureTolerance: float, t: System.Double@) -> bool
Rhino.Geometry.Curve.GetNextDiscontinuity(self, continuityType: Rhino.Geometry.Continuity, t0: float, t1: float, t: System.Double@) -> bool
Rhino.Geometry.Curve.GetNurbsFormParameterFromCurveParameter(self, curveParameter: float, nurbsParameter: System.Double@) -> bool
Rhino.Geometry.Curve.GetPerpendicularFrames(self, parameters: Iterable[float]) -> List[Plane]
Rhino.Geometry.Curve.GetSubCurves(self) -> List[Rhino.Geometry.Curve]
Rhino.Geometry.Curve.HasNurbsForm(self) -> int
Rhino.Geometry.Curve.InflectionPoints(self) -> List[Point3d]
Rhino.Geometry.Curve.InflectionPoints(self, curveParameters: System.Double[]@) -> List[Point3d]
Rhino.Geometry.Curve.IsArc(self) -> bool
Rhino.Geometry.Curve.IsArc(self, tolerance: float) -> bool
Rhino.Geometry.Curve.IsCircle(self) -> bool
Rhino.Geometry.Curve.IsCircle(self, tolerance: float) -> bool
Rhino.Geometry.Curve.IsClosable(self, tolerance: float) -> bool
Rhino.Geometry.Curve.IsClosable(self, tolerance: float, minimumAbsoluteSize: float, minimumRelativeSize: float) -> bool
Rhino.Geometry.Curve.IsContinuous(self, continuityType: Rhino.Geometry.Continuity, t: float) -> bool
Rhino.Geometry.Curve.IsEllipse(self) -> bool
Rhino.Geometry.Curve.IsEllipse(self, tolerance: float) -> bool
Rhino.Geometry.Curve.IsInPlane(self, testPlane: Rhino.Geometry.Plane) -> bool
Rhino.Geometry.Curve.IsInPlane(self, testPlane: Rhino.Geometry.Plane, tolerance: float) -> bool
Rhino.Geometry.Curve.IsLinear(self) -> bool
Rhino.Geometry.Curve.IsLinear(self, tolerance: float) -> bool
Rhino.Geometry.Curve.IsPlanar(self) -> bool
Rhino.Geometry.Curve.IsPlanar(self, tolerance: float) -> bool
Rhino.Geometry.Curve.IsPolyline(self) -> bool
Rhino.Geometry.Curve.IsShort(self, tolerance: float) -> bool
Rhino.Geometry.Curve.IsShort(self, tolerance: float, subdomain: Rhino.Geometry.Interval) -> bool
Rhino.Geometry.Curve.JoinCurves(inputCurves: Iterable[Rhino.Geometry.Curve]) -> List[Rhino.Geometry.Curve]
Rhino.Geometry.Curve.JoinCurves(inputCurves: Iterable[Rhino.Geometry.Curve], joinTolerance: float) -> List[Rhino.Geometry.Curve]
Rhino.Geometry.Curve.JoinCurves(inputCurves: Iterable[Rhino.Geometry.Curve], joinTolerance: float, preserveDirection: bool) -> List[Rhino.Geometry.Curve]
Rhino.Geometry.Curve.JoinCurves(inputCurves: Iterable[Rhino.Geometry.Curve], joinTolerance: float, preserveDirection: bool, key: System.Int32[]@) -> List[Rhino.Geometry.Curve]
Rhino.Geometry.Curve.JoinCurves(inputCurves: Iterable[Rhino.Geometry.Curve], joinTolerance: float, preserveDirection: bool, simpleJoin: bool, key: System.Int32[]@) -> List[Rhino.Geometry.Curve]
Rhino.Geometry.Curve.LengthParameter(self, segmentLength: float, t: System.Double@) -> bool
Rhino.Geometry.Curve.LengthParameter(self, segmentLength: float, t: System.Double@, fractionalTolerance: float) -> bool
Rhino.Geometry.Curve.LengthParameter(self, segmentLength: float, t: System.Double@, fractionalTolerance: float, subdomain: Rhino.Geometry.Interval) -> bool
Rhino.Geometry.Curve.LengthParameter(self, segmentLength: float, t: System.Double@, subdomain: Rhino.Geometry.Interval) -> bool
Rhino.Geometry.Curve.LocalClosestPoint(self, testPoint: Rhino.Geometry.Point3d, seed: float, t: System.Double@) -> bool
Rhino.Geometry.Curve.MakeClosed(self, tolerance: float) -> bool
Rhino.Geometry.Curve.MakeEndsMeet(curveA: Rhino.Geometry.Curve, adjustStartCurveA: bool, curveB: Rhino.Geometry.Curve, adjustStartCurveB: bool) -> bool
Rhino.Geometry.Curve.MaxCurvaturePoints(self) -> List[Point3d]
Rhino.Geometry.Curve.MaxCurvaturePoints(self, curveParameters: System.Double[]@) -> List[Point3d]
Rhino.Geometry.Curve.NonConstOperation(self) -> None
Rhino.Geometry.Curve.NormalizedLengthParameter(self, s: float, t: System.Double@) -> bool
Rhino.Geometry.Curve.NormalizedLengthParameter(self, s: float, t: System.Double@, fractionalTolerance: float) -> bool
Rhino.Geometry.Curve.NormalizedLengthParameter(self, s: float, t: System.Double@, fractionalTolerance: float, subdomain: Rhino.Geometry.Interval) -> bool
Rhino.Geometry.Curve.NormalizedLengthParameter(self, s: float, t: System.Double@, subdomain: Rhino.Geometry.Interval) -> bool
Rhino.Geometry.Curve.NormalizedLengthParameters(self, s: List[float], absoluteTolerance: float) -> List[float]
Rhino.Geometry.Curve.NormalizedLengthParameters(self, s: List[float], absoluteTolerance: float, fractionalTolerance: float) -> List[float]
Rhino.Geometry.Curve.NormalizedLengthParameters(self, s: List[float], absoluteTolerance: float, fractionalTolerance: float, subdomain: Rhino.Geometry.Interval) -> List[float]
Rhino.Geometry.Curve.NormalizedLengthParameters(self, s: List[float], absoluteTolerance: float, subdomain: Rhino.Geometry.Interval) -> List[float]
Rhino.Geometry.Curve.Offset(self, directionPoint: Rhino.Geometry.Point3d, normal: Rhino.Geometry.Vector3d, distance: float, tolerance: float, angleTolerance: float, loose: bool, cornerStyle: Rhino.Geometry.CurveOffsetCornerStyle, endStyle: Rhino.Geometry.CurveOffsetEndStyle) -> List[Rhino.Geometry.Curve]
Rhino.Geometry.Curve.Offset(self, directionPoint: Rhino.Geometry.Point3d, normal: Rhino.Geometry.Vector3d, distance: float, tolerance: float, cornerStyle: Rhino.Geometry.CurveOffsetCornerStyle) -> List[Rhino.Geometry.Curve]
Rhino.Geometry.Curve.Offset(self, plane: Rhino.Geometry.Plane, distance: float, tolerance: float, cornerStyle: Rhino.Geometry.CurveOffsetCornerStyle) -> List[Rhino.Geometry.Curve]
Rhino.Geometry.Curve.OffsetNormalToSurface(self, surface: Rhino.Geometry.Surface, height: float) -> Rhino.Geometry.Curve
Rhino.Geometry.Curve.OffsetOnSurface(self, face: Rhino.Geometry.BrepFace, curveParameters: List[float], offsetDistances: List[float], fittingTolerance: float) -> List[Rhino.Geometry.Curve]
Rhino.Geometry.Curve.OffsetOnSurface(self, face: Rhino.Geometry.BrepFace, distance: float, fittingTolerance: float) -> List[Rhino.Geometry.Curve]
Rhino.Geometry.Curve.OffsetOnSurface(self, face: Rhino.Geometry.BrepFace, throughPoint: Rhino.Geometry.Point2d, fittingTolerance: float) -> List[Rhino.Geometry.Curve]
Rhino.Geometry.Curve.OffsetOnSurface(self, surface: Rhino.Geometry.Surface, curveParameters: List[float], offsetDistances: List[float], fittingTolerance: float) -> List[Rhino.Geometry.Curve]
Rhino.Geometry.Curve.OffsetOnSurface(self, surface: Rhino.Geometry.Surface, distance: float, fittingTolerance: float) -> List[Rhino.Geometry.Curve]
Rhino.Geometry.Curve.OffsetOnSurface(self, surface: Rhino.Geometry.Surface, throughPoint: Rhino.Geometry.Point2d, fittingTolerance: float) -> List[Rhino.Geometry.Curve]
Rhino.Geometry.Curve.OffsetTangentToSurface(self, surface: Rhino.Geometry.Surface, height: float) -> Rhino.Geometry.Curve
Rhino.Geometry.Curve.PerpendicularFrameAt(self, t: float, plane: Rhino.Geometry.Plane@) -> bool
Rhino.Geometry.Curve.PlanarClosedCurveRelationship(curveA: Rhino.Geometry.Curve, curveB: Rhino.Geometry.Curve, testPlane: Rhino.Geometry.Plane, tolerance: float) -> RegionContainment
Rhino.Geometry.Curve.PlanarCurveCollision(curveA: Rhino.Geometry.Curve, curveB: Rhino.Geometry.Curve, testPlane: Rhino.Geometry.Plane, tolerance: float) -> bool
Rhino.Geometry.Curve.PointAt(self, t: float) -> Point3d
Rhino.Geometry.Curve.PointAtLength(self, length: float) -> Point3d
Rhino.Geometry.Curve.PointAtNormalizedLength(self, length: float) -> Point3d
Rhino.Geometry.Curve.ProjectToBrep(curve: Rhino.Geometry.Curve, brep: Rhino.Geometry.Brep, direction: Rhino.Geometry.Vector3d, tolerance: float) -> List[Rhino.Geometry.Curve]
Rhino.Geometry.Curve.ProjectToBrep(curve: Rhino.Geometry.Curve, breps: Iterable[Rhino.Geometry.Brep], direction: Rhino.Geometry.Vector3d, tolerance: float) -> List[Rhino.Geometry.Curve]
Rhino.Geometry.Curve.ProjectToBrep(curve: Rhino.Geometry.Curve, breps: Iterable[Rhino.Geometry.Brep], direction: Rhino.Geometry.Vector3d, tolerance: float, brepIndices: System.Int32[]@) -> List[Rhino.Geometry.Curve]
Rhino.Geometry.Curve.ProjectToBrep(curves: Iterable[Rhino.Geometry.Curve], breps: Iterable[Rhino.Geometry.Brep], direction: Rhino.Geometry.Vector3d, tolerance: float) -> List[Rhino.Geometry.Curve]
Rhino.Geometry.Curve.ProjectToBrep(curves: Iterable[Rhino.Geometry.Curve], breps: Iterable[Rhino.Geometry.Brep], direction: Rhino.Geometry.Vector3d, tolerance: float, curveIndices: System.Int32[]@, brepIndices: System.Int32[]@) -> List[Rhino.Geometry.Curve]
Rhino.Geometry.Curve.ProjectToBrep(curves: Iterable[Rhino.Geometry.Curve], breps: Iterable[Rhino.Geometry.Brep], direction: Rhino.Geometry.Vector3d, tolerance: float, loose: bool, curveIndices: System.Int32[]@, brepIndices: System.Int32[]@) -> List[Rhino.Geometry.Curve]
Rhino.Geometry.Curve.ProjectToMesh(curve: Rhino.Geometry.Curve, mesh: Rhino.Geometry.Mesh, direction: Rhino.Geometry.Vector3d, tolerance: float) -> List[Rhino.Geometry.Curve]
Rhino.Geometry.Curve.ProjectToMesh(curve: Rhino.Geometry.Curve, meshes: Iterable[Rhino.Geometry.Mesh], direction: Rhino.Geometry.Vector3d, tolerance: float) -> List[Rhino.Geometry.Curve]
Rhino.Geometry.Curve.ProjectToMesh(curves: Iterable[Rhino.Geometry.Curve], meshes: Iterable[Rhino.Geometry.Mesh], direction: Rhino.Geometry.Vector3d, tolerance: float) -> List[Rhino.Geometry.Curve]
Rhino.Geometry.Curve.ProjectToMesh(curves: Iterable[Rhino.Geometry.Curve], meshes: Iterable[Rhino.Geometry.Mesh], direction: Rhino.Geometry.Vector3d, tolerance: float, loose: bool) -> List[Rhino.Geometry.Curve]
Rhino.Geometry.Curve.ProjectToPlane(curve: Rhino.Geometry.Curve, plane: Rhino.Geometry.Plane) -> Rhino.Geometry.Curve
Rhino.Geometry.Curve.PullToBrepFace(curve: Rhino.Geometry.Curve, face: Rhino.Geometry.BrepFace, tolerance: float) -> List[Rhino.Geometry.Curve]
Rhino.Geometry.Curve.PullToBrepFace(curve: Rhino.Geometry.Curve, face: Rhino.Geometry.BrepFace, tolerance: float, loose: bool) -> List[Rhino.Geometry.Curve]
Rhino.Geometry.Curve.PullToBrepFace(self, face: Rhino.Geometry.BrepFace, tolerance: float) -> List[Rhino.Geometry.Curve]
Rhino.Geometry.Curve.PullToMesh(self, mesh: Rhino.Geometry.Mesh, tolerance: float) -> PolylineCurve
Rhino.Geometry.Curve.PullToMesh(self, mesh: Rhino.Geometry.Mesh, tolerance: float, loose: bool) -> Rhino.Geometry.Curve
Rhino.Geometry.Curve.Rebuild(self, pointCount: int, degree: int, preserveTangents: bool) -> NurbsCurve
Rhino.Geometry.Curve.RemoveShortSegments(self, tolerance: float) -> bool
Rhino.Geometry.Curve.Repair(self, tolerance: float) -> bool
Rhino.Geometry.Curve.Reparameterize(self) -> Rhino.Geometry.Curve
Rhino.Geometry.Curve.Reverse(self) -> bool
Rhino.Geometry.Curve.RibbonOffset(self, distance: float, blendRadius: float, directionPoint: Rhino.Geometry.Point3d, normal: Rhino.Geometry.Vector3d, tolerance: float) -> Rhino.Geometry.Curve
Rhino.Geometry.Curve.RibbonOffset(self, distance: float, blendRadius: float, directionPoint: Rhino.Geometry.Point3d, normal: Rhino.Geometry.Vector3d, tolerance: float, crossSections: Rhino.Geometry.Curve[]@, ruledSurfaces: Rhino.Geometry.Surface[]@) -> Rhino.Geometry.Curve
Rhino.Geometry.Curve.RibbonOffset(self, distance: float, blendRadius: float, directionPoint: Rhino.Geometry.Point3d, normal: Rhino.Geometry.Vector3d, tolerance: float, outputParameters: System.Double[]@, curveParameters: System.Double[]@) -> Rhino.Geometry.Curve
Rhino.Geometry.Curve.RibbonOffset(self, ribbonParameters: Rhino.Geometry.RibbonOffsetParameters, railCurves: Rhino.Geometry.Curve[]@, crossSectionCurves: Rhino.Geometry.Curve[]@, brepSurfaces: Rhino.Geometry.Brep[]@) -> Rhino.Geometry.Curve
Rhino.Geometry.Curve.SetEndPoint(self, point: Rhino.Geometry.Point3d) -> bool
Rhino.Geometry.Curve.SetStartPoint(self, point: Rhino.Geometry.Point3d) -> bool
Rhino.Geometry.Curve.Simplify(self, options: Rhino.Geometry.CurveSimplifyOptions, distanceTolerance: float, angleToleranceRadians: float) -> Rhino.Geometry.Curve
Rhino.Geometry.Curve.SimplifyEnd(self, end: Rhino.Geometry.CurveEnd, options: Rhino.Geometry.CurveSimplifyOptions, distanceTolerance: float, angleToleranceRadians: float) -> Rhino.Geometry.Curve
Rhino.Geometry.Curve.Smooth(self, smoothFactor: float, bXSmooth: bool, bYSmooth: bool, bZSmooth: bool, bFixBoundaries: bool, coordinateSystem: Rhino.Geometry.SmoothingCoordinateSystem) -> Rhino.Geometry.Curve
Rhino.Geometry.Curve.Smooth(self, smoothFactor: float, bXSmooth: bool, bYSmooth: bool, bZSmooth: bool, bFixBoundaries: bool, coordinateSystem: Rhino.Geometry.SmoothingCoordinateSystem, plane: Rhino.Geometry.Plane) -> Rhino.Geometry.Curve
Rhino.Geometry.Curve.SpanDomain(self, spanIndex: int) -> Interval
Rhino.Geometry.Curve.SpanVector(self) -> List[float]
Rhino.Geometry.Curve.Split(self, cutter: Rhino.Geometry.Brep, tolerance: float, angleToleranceRadians: float) -> List[Rhino.Geometry.Curve]
Rhino.Geometry.Curve.Split(self, cutter: Rhino.Geometry.Surface, tolerance: float, angleToleranceRadians: float) -> List[Rhino.Geometry.Curve]
Rhino.Geometry.Curve.Split(self, t: Iterable[float]) -> List[Rhino.Geometry.Curve]
Rhino.Geometry.Curve.Split(self, t: float) -> List[Rhino.Geometry.Curve]
Rhino.Geometry.Curve.TangentAt(self, t: float) -> Vector3d
Rhino.Geometry.Curve.ToArcsAndLines(self, tolerance: float, angleTolerance: float, minimumLength: float, maximumLength: float) -> PolyCurve
Rhino.Geometry.Curve.ToNurbsCurve(self) -> NurbsCurve
Rhino.Geometry.Curve.ToNurbsCurve(self, subdomain: Rhino.Geometry.Interval) -> NurbsCurve
Rhino.Geometry.Curve.ToPolyline(self, mainSegmentCount: int, subSegmentCount: int, maxAngleRadians: float, maxChordLengthRatio: float, maxAspectRatio: float, tolerance: float, minEdgeLength: float, maxEdgeLength: float, keepStartPoint: bool) -> PolylineCurve
Rhino.Geometry.Curve.ToPolyline(self, mainSegmentCount: int, subSegmentCount: int, maxAngleRadians: float, maxChordLengthRatio: float, maxAspectRatio: float, tolerance: float, minEdgeLength: float, maxEdgeLength: float, keepStartPoint: bool, curveDomain: Rhino.Geometry.Interval) -> PolylineCurve
Rhino.Geometry.Curve.ToPolyline(self, tolerance: float, angleTolerance: float, minimumLength: float, maximumLength: float) -> PolylineCurve
Rhino.Geometry.Curve.TorsionAt(self, t: float) -> float
Rhino.Geometry.Curve.Trim(self, domain: Rhino.Geometry.Interval) -> Rhino.Geometry.Curve
Rhino.Geometry.Curve.Trim(self, side: Rhino.Geometry.CurveEnd, length: float) -> Rhino.Geometry.Curve
Rhino.Geometry.Curve.Trim(self, t0: float, t1: float) -> Rhino.Geometry.Curve
Rhino.Geometry.Curve.TryGetArc(self, arc: Rhino.Geometry.Arc@) -> bool
Rhino.Geometry.Curve.TryGetArc(self, arc: Rhino.Geometry.Arc@, tolerance: float) -> bool
Rhino.Geometry.Curve.TryGetArc(self, plane: Rhino.Geometry.Plane, arc: Rhino.Geometry.Arc@) -> bool
Rhino.Geometry.Curve.TryGetArc(self, plane: Rhino.Geometry.Plane, arc: Rhino.Geometry.Arc@, tolerance: float) -> bool
Rhino.Geometry.Curve.TryGetCircle(self, circle: Rhino.Geometry.Circle@) -> bool
Rhino.Geometry.Curve.TryGetCircle(self, circle: Rhino.Geometry.Circle@, tolerance: float) -> bool
Rhino.Geometry.Curve.TryGetEllipse(self, ellipse: Rhino.Geometry.Ellipse@) -> bool
Rhino.Geometry.Curve.TryGetEllipse(self, ellipse: Rhino.Geometry.Ellipse@, tolerance: float) -> bool
Rhino.Geometry.Curve.TryGetEllipse(self, plane: Rhino.Geometry.Plane, ellipse: Rhino.Geometry.Ellipse@) -> bool
Rhino.Geometry.Curve.TryGetEllipse(self, plane: Rhino.Geometry.Plane, ellipse: Rhino.Geometry.Ellipse@, tolerance: float) -> bool
Rhino.Geometry.Curve.TryGetPlane(self, plane: Rhino.Geometry.Plane@) -> bool
Rhino.Geometry.Curve.TryGetPlane(self, plane: Rhino.Geometry.Plane@, tolerance: float) -> bool
Rhino.Geometry.Curve.TryGetPolyline(self, polyline: Rhino.Geometry.Polyline@) -> bool
Rhino.Geometry.Curve.TryGetPolyline(self, polyline: Rhino.Geometry.Polyline@, parameters: System.Double[]@) -> bool
Rhino.Geometry.Curve.[ObsoleteAttribute(self, arg1: Iterable[Rhino.Geometry.Curve]) -> None
Rhino.Geometry.Curve.[ObsoleteAttribute(self, arg1: Rhino.Geometry.Brep, arg2: float) -> None
Rhino.Geometry.Curve.[ObsoleteAttribute(self, arg1: Rhino.Geometry.Curve, arg2: Iterable[Rhino.Geometry.Curve]) -> None
Rhino.Geometry.Curve.[ObsoleteAttribute(self, arg1: Rhino.Geometry.Curve, arg2: Rhino.Geometry.Curve) -> None
Rhino.Geometry.Curve.[ObsoleteAttribute(self, arg1: Rhino.Geometry.Curve, arg2: Rhino.Geometry.Curve) -> None
Rhino.Geometry.Curve.[ObsoleteAttribute(self, arg1: Rhino.Geometry.Curve, arg2: Rhino.Geometry.Curve, arg3: int) -> None
Rhino.Geometry.Curve.[ObsoleteAttribute(self, arg1: Rhino.Geometry.Curve, arg2: Rhino.Geometry.Curve, arg3: int) -> None
Rhino.Geometry.Curve.[ObsoleteAttribute(self, arg1: Rhino.Geometry.Curve, arg2: Rhino.Geometry.Curve, arg3: int, arg4: int) -> None
Rhino.Geometry.Curve.[ObsoleteAttribute(self, arg1: Rhino.Geometry.Point3d) -> None
Rhino.Geometry.Curve.[ObsoleteAttribute(self, arg1: Rhino.Geometry.Point3d, arg2: Rhino.Geometry.Plane) -> None
Rhino.Geometry.Curve.[ObsoleteAttribute(self, arg1: Rhino.Geometry.Surface, arg2: float) -> None
Rhino.Geometry.Curve.__init__(self, info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext) -> None
Rhino.Geometry.CurveBooleanRegions.BoundaryCount(self, regionIndex: int) -> int
Rhino.Geometry.CurveBooleanRegions.Dispose(self) -> None
Rhino.Geometry.CurveBooleanRegions.Dispose(self, disposing: bool) -> None
Rhino.Geometry.CurveBooleanRegions.PlanarCurve(self, planarCurveIndex: int) -> Curve
Rhino.Geometry.CurveBooleanRegions.RegionCurves(self, regionIndex: int) -> List[Curve]
Rhino.Geometry.CurveBooleanRegions.RegionPointIndex(self, pointIndex: int) -> int
Rhino.Geometry.CurveBooleanRegions.SegmentCount(self, regionIndex: int, boundaryIndex: int) -> int
Rhino.Geometry.CurveBooleanRegions.SegmentDetails(self, regionIndex: int, boundaryIndex: int, segmmentIndex: int, subDomain: Rhino.Geometry.Interval@, reversed: System.Boolean@) -> int
Rhino.Geometry.CurveBooleanRegions.__init__(self, info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext) -> None
Rhino.Geometry.CurveProxy.__init__(self) -> None
Rhino.Geometry.Cylinder.CircleAt(self, linearParameter: float) -> Circle
Rhino.Geometry.Cylinder.EpsilonEquals(self, other: Rhino.Geometry.Cylinder, epsilon: float) -> bool
Rhino.Geometry.Cylinder.LineAt(self, angularParameter: float) -> Line
Rhino.Geometry.Cylinder.ToBrep(self, capBottom: bool, capTop: bool) -> Brep
Rhino.Geometry.Cylinder.ToNurbsSurface(self) -> NurbsSurface
Rhino.Geometry.Cylinder.ToRevSurface(self) -> RevSurface
Rhino.Geometry.Cylinder.Transform(self, xform: Rhino.Geometry.Transform) -> bool
Rhino.Geometry.Cylinder.__init__(self, baseCircle: Rhino.Geometry.Circle) -> None
Rhino.Geometry.Cylinder.__init__(self, baseCircle: Rhino.Geometry.Circle, height: float) -> None
Rhino.Geometry.DetailView.SetScale(self, modelLength: float, modelUnits: Rhino.UnitSystem, pageLength: float, pageUnits: Rhino.UnitSystem) -> bool
Rhino.Geometry.DetailView.__init__(self, info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext) -> None
Rhino.Geometry.DevelopableSrf.GetLocalDevopableRuling(rail0: Rhino.Geometry.NurbsCurve, t0: float, dom0: Rhino.Geometry.Interval, rail1: Rhino.Geometry.NurbsCurve, t1: float, dom1: Rhino.Geometry.Interval, t0_out: System.Double@, t1_out: System.Double@) -> int
Rhino.Geometry.DevelopableSrf.RulingMinTwist(rail0: Rhino.Geometry.NurbsCurve, t0: float, dom0: Rhino.Geometry.Interval, rail1: Rhino.Geometry.NurbsCurve, t1: float, dom1: Rhino.Geometry.Interval, t0_out: System.Double@, t1_out: System.Double@, cos_twist_out: System.Double@) -> bool
Rhino.Geometry.DevelopableSrf.RulingMinTwist(rail0: Rhino.Geometry.NurbsCurve, t0: float, rail1: Rhino.Geometry.NurbsCurve, t1: float, dom1: Rhino.Geometry.Interval, t1_out: System.Double@, cos_twist_out: System.Double@) -> bool
Rhino.Geometry.DevelopableSrf.UntwistRulings(rail0: Rhino.Geometry.NurbsCurve, rail1: Rhino.Geometry.NurbsCurve, rulings: System.Collections.Generic.IEnumerable{Rhino.Geometry.Point2d}@) -> bool
Rhino.Geometry.DevelopableSrf.__init__(self) -> None
Rhino.Geometry.Dimension.Explode(self) -> List[GeometryBase]
Rhino.Geometry.Dimension.GetTextTransform(self, viewport: Rhino.DocObjects.ViewportInfo, style: Rhino.DocObjects.DimensionStyle, textScale: float, drawForward: bool) -> Transform
Rhino.Geometry.Dimension.SetAltDimensionLengthDisplayWithZeroSuppressionReset(self, arg1: Rhino.DocObjects.DimensionStyle.LengthDisplay) -> None
Rhino.Geometry.Dimension.SetDimensionLengthDisplayWithZeroSuppressionReset(self, arg1: Rhino.DocObjects.DimensionStyle.LengthDisplay) -> None
Rhino.Geometry.Dimension.UpdateDimensionText(self, style: Rhino.DocObjects.DimensionStyle, units: Rhino.UnitSystem) -> None
Rhino.Geometry.Dimension.__init__(self) -> None
Rhino.Geometry.Dimension.__init__(self, info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext) -> None
Rhino.Geometry.Ellipse.EpsilonEquals(self, other: Rhino.Geometry.Ellipse, epsilon: float) -> bool
Rhino.Geometry.Ellipse.GetFoci(self, F1: Rhino.Geometry.Point3d@, F2: Rhino.Geometry.Point3d@) -> None
Rhino.Geometry.Ellipse.ToNurbsCurve(self) -> NurbsCurve
Rhino.Geometry.Ellipse.__init__(self, center: Rhino.Geometry.Point3d, second: Rhino.Geometry.Point3d, third: Rhino.Geometry.Point3d) -> None
Rhino.Geometry.Ellipse.__init__(self, plane: Rhino.Geometry.Plane, radius1: float, radius2: float) -> None
Rhino.Geometry.Extrusion.AddInnerProfile(self, innerProfile: Rhino.Geometry.Curve) -> bool
Rhino.Geometry.Extrusion.Create(curve: Rhino.Geometry.Curve, plane: Rhino.Geometry.Plane, height: float, cap: bool) -> Rhino.Geometry.Extrusion
Rhino.Geometry.Extrusion.Create(planarCurve: Rhino.Geometry.Curve, height: float, cap: bool) -> Rhino.Geometry.Extrusion
Rhino.Geometry.Extrusion.CreateBoxExtrusion(box: Rhino.Geometry.Box, cap: bool) -> Rhino.Geometry.Extrusion
Rhino.Geometry.Extrusion.CreateCylinderExtrusion(cylinder: Rhino.Geometry.Cylinder, capBottom: bool, capTop: bool) -> Rhino.Geometry.Extrusion
Rhino.Geometry.Extrusion.CreatePipeExtrusion(cylinder: Rhino.Geometry.Cylinder, otherRadius: float, capTop: bool, capBottom: bool) -> Rhino.Geometry.Extrusion
Rhino.Geometry.Extrusion.GetBrepFormComponentIndex(self, extrusionComponentIndex: Rhino.Geometry.ComponentIndex) -> ComponentIndex
Rhino.Geometry.Extrusion.GetMesh(self, meshType: Rhino.Geometry.MeshType) -> Mesh
Rhino.Geometry.Extrusion.GetPathPlane(self, s: float) -> Plane
Rhino.Geometry.Extrusion.GetProfilePlane(self, s: float) -> Plane
Rhino.Geometry.Extrusion.GetProfileTransformation(self, s: float) -> Transform
Rhino.Geometry.Extrusion.GetWireframe(self) -> List[Curve]
Rhino.Geometry.Extrusion.PathLineCurve(self) -> LineCurve
Rhino.Geometry.Extrusion.Profile3d(self, ci: Rhino.Geometry.ComponentIndex) -> Curve
Rhino.Geometry.Extrusion.Profile3d(self, profileIndex: int, s: float) -> Curve
Rhino.Geometry.Extrusion.ProfileIndex(self, profileParameter: float) -> int
Rhino.Geometry.Extrusion.SetMesh(self, mesh: Rhino.Geometry.Mesh, meshType: Rhino.Geometry.MeshType) -> bool
Rhino.Geometry.Extrusion.SetOuterProfile(self, outerProfile: Rhino.Geometry.Curve, cap: bool) -> bool
Rhino.Geometry.Extrusion.SetPathAndUp(self, a: Rhino.Geometry.Point3d, b: Rhino.Geometry.Point3d, up: Rhino.Geometry.Vector3d) -> bool
Rhino.Geometry.Extrusion.ToBrep(self, splitKinkyFaces: bool) -> Brep
Rhino.Geometry.Extrusion.WallEdge(self, ci: Rhino.Geometry.ComponentIndex) -> Curve
Rhino.Geometry.Extrusion.WallSurface(self, ci: Rhino.Geometry.ComponentIndex) -> Surface
Rhino.Geometry.Extrusion.__init__(self) -> None
Rhino.Geometry.Extrusion.__init__(self, info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext) -> None
Rhino.Geometry.GeometryBase.ComponentIndex(self) -> ComponentIndex
Rhino.Geometry.GeometryBase.DataCRC(self, currentRemainder: System.UInt32) -> uint
Rhino.Geometry.GeometryBase.DeleteAllUserStrings(self) -> None
Rhino.Geometry.GeometryBase.DeleteUserString(self, key: str) -> bool
Rhino.Geometry.GeometryBase.Dispose(self, disposing: bool) -> None
Rhino.Geometry.GeometryBase.Duplicate(self) -> Rhino.Geometry.GeometryBase
Rhino.Geometry.GeometryBase.DuplicateShallow(self) -> Rhino.Geometry.GeometryBase
Rhino.Geometry.GeometryBase.GeometryEquals(first: Rhino.Geometry.GeometryBase, second: Rhino.Geometry.GeometryBase) -> bool
Rhino.Geometry.GeometryBase.GeometryReferenceEquals(one: Rhino.Geometry.GeometryBase, other: Rhino.Geometry.GeometryBase) -> bool
Rhino.Geometry.GeometryBase.GetBoundingBox(self, accurate: bool) -> BoundingBox
Rhino.Geometry.GeometryBase.GetBoundingBox(self, plane: Rhino.Geometry.Plane) -> BoundingBox
Rhino.Geometry.GeometryBase.GetBoundingBox(self, plane: Rhino.Geometry.Plane, worldBox: Rhino.Geometry.Box@) -> BoundingBox
Rhino.Geometry.GeometryBase.GetBoundingBox(self, xform: Rhino.Geometry.Transform) -> BoundingBox
Rhino.Geometry.GeometryBase.GetUserString(self, key: str) -> str
Rhino.Geometry.GeometryBase.GetUserStrings(self) -> NameValueCollection
Rhino.Geometry.GeometryBase.MakeDeformable(self) -> bool
Rhino.Geometry.GeometryBase.MemoryEstimate(self) -> uint
Rhino.Geometry.GeometryBase.NonConstOperation(self) -> None
Rhino.Geometry.GeometryBase.OnSwitchToNonConst(self) -> None
Rhino.Geometry.GeometryBase.Rotate(self, angleRadians: float, rotationAxis: Rhino.Geometry.Vector3d, rotationCenter: Rhino.Geometry.Point3d) -> bool
Rhino.Geometry.GeometryBase.Scale(self, scaleFactor: float) -> bool
Rhino.Geometry.GeometryBase.SetUserString(self, key: str, value: str) -> bool
Rhino.Geometry.GeometryBase.Transform(self, xform: Rhino.Geometry.Transform) -> bool
Rhino.Geometry.GeometryBase.Translate(self, translationVector: Rhino.Geometry.Vector3d) -> bool
Rhino.Geometry.GeometryBase.Translate(self, x: float, y: float, z: float) -> bool
Rhino.Geometry.GeometryBase.__init__(self, info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext) -> None
Rhino.Geometry.Hatch.Create(curve: Rhino.Geometry.Curve, hatchPatternIndex: int, rotationRadians: float, scale: float, tolerance: float) -> List[Rhino.Geometry.Hatch]
Rhino.Geometry.Hatch.Create(curves: Iterable[Rhino.Geometry.Curve], hatchPatternIndex: int, rotationRadians: float, scale: float, tolerance: float) -> List[Rhino.Geometry.Hatch]
Rhino.Geometry.Hatch.Create(hatchPlane: Rhino.Geometry.Plane, outerLoop: Rhino.Geometry.Curve, innerLoops: Iterable[Rhino.Geometry.Curve], hatchPatternIndex: int, rotationRadians: float, scale: float) -> Rhino.Geometry.Hatch
Rhino.Geometry.Hatch.CreateDisplayGeometry(self, pattern: Rhino.DocObjects.HatchPattern, patternScale: float, bounds: Rhino.Geometry.Curve[]@, lines: Rhino.Geometry.Line[]@, solidBrep: Rhino.Geometry.Brep@) -> None
Rhino.Geometry.Hatch.CreateFromBrep(brep: Rhino.Geometry.Brep, brepFaceIndex: int, hatchPatternIndex: int, rotationRadians: float, scale: float, basePoint: Rhino.Geometry.Point3d) -> Rhino.Geometry.Hatch
Rhino.Geometry.Hatch.Explode(self) -> List[GeometryBase]
Rhino.Geometry.Hatch.Get2dCurves(self, outer: bool) -> List[Curve]
Rhino.Geometry.Hatch.Get3dCurves(self, outer: bool) -> List[Curve]
Rhino.Geometry.Hatch.GetGradientFill(self) -> ColorGradient
Rhino.Geometry.Hatch.ScalePattern(self, xform: Rhino.Geometry.Transform) -> None
Rhino.Geometry.Hatch.SetGradientFill(self, fill: Rhino.Display.ColorGradient) -> None
Rhino.Geometry.Hatch.ToBrep(self) -> Brep
Rhino.Geometry.Hatch.[ObsoleteAttribute(self, arg1: Iterable[Rhino.Geometry.Curve], arg2: int, arg3: float, arg4: float) -> None
Rhino.Geometry.Hatch.[ObsoleteAttribute(self, arg1: Rhino.Geometry.Curve, arg2: int, arg3: float, arg4: float) -> None
Rhino.Geometry.Hatch.__init__(self, info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext) -> None
Rhino.Geometry.HermiteSurface.Dispose(self) -> None
Rhino.Geometry.HermiteSurface.Finalize(self) -> None
Rhino.Geometry.HermiteSurface.PointAt(self, uIndex: int, vIndex: int) -> Point3d
Rhino.Geometry.HermiteSurface.SetPointAt(self, uIndex: int, vIndex: int, point: Rhino.Geometry.Point3d) -> None
Rhino.Geometry.HermiteSurface.SetTwistAt(self, uIndex: int, vIndex: int, twist: Rhino.Geometry.Vector3d) -> None
Rhino.Geometry.HermiteSurface.SetUParameterAt(self, index: int, parameter: float) -> None
Rhino.Geometry.HermiteSurface.SetUTangentAt(self, uIndex: int, vIndex: int, tangent: Rhino.Geometry.Vector3d) -> None
Rhino.Geometry.HermiteSurface.SetVParameterAt(self, index: int, parameter: float) -> None
Rhino.Geometry.HermiteSurface.SetVTangentAt(self, uIndex: int, vIndex: int, tangent: Rhino.Geometry.Vector3d) -> None
Rhino.Geometry.HermiteSurface.ToNurbsSurface(self) -> NurbsSurface
Rhino.Geometry.HermiteSurface.TwistAt(self, uIndex: int, vIndex: int) -> Vector3d
Rhino.Geometry.HermiteSurface.UParameterAt(self, index: int) -> float
Rhino.Geometry.HermiteSurface.UTangentAt(self, uIndex: int, vIndex: int) -> Vector3d
Rhino.Geometry.HermiteSurface.VParameterAt(self, index: int) -> float
Rhino.Geometry.HermiteSurface.VTangentAt(self, uIndex: int, vIndex: int) -> Vector3d
Rhino.Geometry.HermiteSurface.__init__(self) -> None
Rhino.Geometry.HermiteSurface.__init__(self, uCount: int, vCount: int) -> None
Rhino.Geometry.HiddenLineDrawing.BoundingBox(self, includeHidden: bool) -> BoundingBox
Rhino.Geometry.HiddenLineDrawing.Compute(parameters: Rhino.Geometry.HiddenLineDrawingParameters, multipleThreads: bool) -> Rhino.Geometry.HiddenLineDrawing
Rhino.Geometry.HiddenLineDrawing.Compute(parameters: Rhino.Geometry.HiddenLineDrawingParameters, multipleThreads: bool, progress: IProgress[float], cancelToken: System.Threading.CancellationToken) -> Rhino.Geometry.HiddenLineDrawing
Rhino.Geometry.HiddenLineDrawing.Dispose(self) -> None
Rhino.Geometry.HiddenLineDrawing.Finalize(self) -> None
Rhino.Geometry.HiddenLineDrawing.RejoinCompatibleVisible(self) -> None
Rhino.Geometry.HiddenLineDrawingObjectCurve.Curve(self, t: float) -> HiddenLineDrawingSegment
Rhino.Geometry.HiddenLineDrawingObjectCurve.Curve(self, t: float, side: int) -> HiddenLineDrawingSegment
Rhino.Geometry.HiddenLineDrawingParameters.AddClippingPlane(self, plane: Rhino.Geometry.Plane) -> None
Rhino.Geometry.HiddenLineDrawingParameters.AddGeometry(self, geometry: Rhino.Geometry.GeometryBase, tag: Any) -> bool
Rhino.Geometry.HiddenLineDrawingParameters.AddGeometry(self, geometry: Rhino.Geometry.GeometryBase, tag: Any, occluding_sections: bool) -> bool
Rhino.Geometry.HiddenLineDrawingParameters.AddGeometry(self, geometry: Rhino.Geometry.GeometryBase, xform: Rhino.Geometry.Transform, tag: Any) -> bool
Rhino.Geometry.HiddenLineDrawingParameters.AddGeometry(self, geometry: Rhino.Geometry.GeometryBase, xform: Rhino.Geometry.Transform, tag: Any, occluding_sections: bool) -> bool
Rhino.Geometry.HiddenLineDrawingParameters.AddGeometryAndPlanes(self, geometry: Rhino.Geometry.GeometryBase, tag: Any, clips: List[Rhino.Geometry.Plane]) -> bool
Rhino.Geometry.HiddenLineDrawingParameters.AddGeometryAndPlanes(self, geometry: Rhino.Geometry.GeometryBase, tag: Any, occluding_sections: bool, clips: List[Rhino.Geometry.Plane]) -> bool
Rhino.Geometry.HiddenLineDrawingParameters.AddGeometryAndPlanes(self, geometry: Rhino.Geometry.GeometryBase, xform: Rhino.Geometry.Transform, tag: Any, clips: List[Rhino.Geometry.Plane]) -> bool
Rhino.Geometry.HiddenLineDrawingParameters.AddGeometryAndPlanes(self, geometry: Rhino.Geometry.GeometryBase, xform: Rhino.Geometry.Transform, tag: Any, occluding_sections: bool, clips: List[Rhino.Geometry.Plane]) -> bool
Rhino.Geometry.HiddenLineDrawingParameters.SetViewport(self, viewport: Rhino.Display.RhinoViewport) -> None
Rhino.Geometry.HiddenLineDrawingParameters.SetViewport(self, viewport: Rhino.DocObjects.ViewportInfo) -> None
Rhino.Geometry.HiddenLineDrawingParameters.__init__(self) -> None
Rhino.Geometry.InstanceDefinitionGeometry.DeleteAllUserStrings(self) -> None
Rhino.Geometry.InstanceDefinitionGeometry.DeleteUserString(self, key: str) -> bool
Rhino.Geometry.InstanceDefinitionGeometry.GetObjectIds(self) -> List[Guid]
Rhino.Geometry.InstanceDefinitionGeometry.GetUserString(self, key: str) -> str
Rhino.Geometry.InstanceDefinitionGeometry.GetUserStrings(self) -> NameValueCollection
Rhino.Geometry.InstanceDefinitionGeometry.SetUserString(self, key: str, value: str) -> bool
Rhino.Geometry.InstanceDefinitionGeometry.__init__(self) -> None
Rhino.Geometry.InstanceReferenceGeometry.__init__(self, info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext) -> None
Rhino.Geometry.InstanceReferenceGeometry.__init__(self, instanceDefinitionId: System.Guid, transform: Rhino.Geometry.Transform) -> None
Rhino.Geometry.Interpolator.InterpolateCatmullRom(self, t: float) -> float
Rhino.Geometry.Interpolator.InterpolateCosine(self, t: float) -> float
Rhino.Geometry.Interpolator.InterpolateCubic(self, t: float) -> float
Rhino.Geometry.Interpolator.InterpolateLinear(self, t: float) -> float
Rhino.Geometry.Interpolator.InterpolateNearestNeighbour(self, t: float) -> float
Rhino.Geometry.Interpolator.__init__(self) -> None
Rhino.Geometry.Interpolator.__init__(self, amount: int, defaultValue: float) -> None
Rhino.Geometry.Interpolator.__init__(self, collection: Iterable[float]) -> None
Rhino.Geometry.Interpolator.__init__(self, initialCapacity: int) -> None
Rhino.Geometry.Interpolator.__init__(self, list: RhinoList[float]) -> None
Rhino.Geometry.Intersect.CurveIntersections.CopyTo(self, array: List[Rhino.Geometry.Intersect.IntersectionEvent], arrayIndex: int) -> None
Rhino.Geometry.Intersect.CurveIntersections.Dispose(self) -> None
Rhino.Geometry.Intersect.CurveIntersections.Dispose(self, disposing: bool) -> None
Rhino.Geometry.Intersect.CurveIntersections.Finalize(self) -> None
Rhino.Geometry.Intersect.CurveIntersections.GetEnumerator(self) -> IEnumerator<IntersectionEvent>
Rhino.Geometry.Intersect.Intersection.ArcArc(arcA: Rhino.Geometry.Arc, arcB: Rhino.Geometry.Arc, intersectionPoint1: Rhino.Geometry.Point3d@, intersectionPoint2: Rhino.Geometry.Point3d@) -> ArcArcIntersection
Rhino.Geometry.Intersect.Intersection.BrepBrep(brepA: Rhino.Geometry.Brep, brepB: Rhino.Geometry.Brep, tolerance: float, intersectionCurves: Rhino.Geometry.Curve[]@, intersectionPoints: Rhino.Geometry.Point3d[]@) -> bool
Rhino.Geometry.Intersect.Intersection.BrepBrep(brepA: Rhino.Geometry.Brep, brepB: Rhino.Geometry.Brep, tolerance: float, joinCurves: bool, intersectionCurves: Rhino.Geometry.Curve[]@, intersectionPoints: Rhino.Geometry.Point3d[]@) -> bool
Rhino.Geometry.Intersect.Intersection.BrepPlane(brep: Rhino.Geometry.Brep, plane: Rhino.Geometry.Plane, tolerance: float, intersectionCurves: Rhino.Geometry.Curve[]@, intersectionPoints: Rhino.Geometry.Point3d[]@) -> bool
Rhino.Geometry.Intersect.Intersection.BrepSurface(brep: Rhino.Geometry.Brep, surface: Rhino.Geometry.Surface, tolerance: float, intersectionCurves: Rhino.Geometry.Curve[]@, intersectionPoints: Rhino.Geometry.Point3d[]@) -> bool
Rhino.Geometry.Intersect.Intersection.BrepSurface(brep: Rhino.Geometry.Brep, surface: Rhino.Geometry.Surface, tolerance: float, joinCurves: bool, intersectionCurves: Rhino.Geometry.Curve[]@, intersectionPoints: Rhino.Geometry.Point3d[]@) -> bool
Rhino.Geometry.Intersect.Intersection.CircleCircle(circleA: Rhino.Geometry.Circle, circleB: Rhino.Geometry.Circle, intersectionPoint1: Rhino.Geometry.Point3d@, intersectionPoint2: Rhino.Geometry.Point3d@) -> CircleCircleIntersection
Rhino.Geometry.Intersect.Intersection.CurveBrep(curve: Rhino.Geometry.Curve, brep: Rhino.Geometry.Brep, tolerance: float, angleTolerance: float, t: System.Double[]@) -> bool
Rhino.Geometry.Intersect.Intersection.CurveBrep(curve: Rhino.Geometry.Curve, brep: Rhino.Geometry.Brep, tolerance: float, overlapCurves: Rhino.Geometry.Curve[]@, intersectionPoints: Rhino.Geometry.Point3d[]@) -> bool
Rhino.Geometry.Intersect.Intersection.CurveBrep(curve: Rhino.Geometry.Curve, brep: Rhino.Geometry.Brep, tolerance: float, overlapCurves: Rhino.Geometry.Curve[]@, intersectionPoints: Rhino.Geometry.Point3d[]@, curveParameters: System.Double[]@) -> bool
Rhino.Geometry.Intersect.Intersection.CurveBrepFace(curve: Rhino.Geometry.Curve, face: Rhino.Geometry.BrepFace, tolerance: float, overlapCurves: Rhino.Geometry.Curve[]@, intersectionPoints: Rhino.Geometry.Point3d[]@) -> bool
Rhino.Geometry.Intersect.Intersection.CurveCurve(curveA: Rhino.Geometry.Curve, curveB: Rhino.Geometry.Curve, tolerance: float, overlapTolerance: float) -> CurveIntersections
Rhino.Geometry.Intersect.Intersection.CurveCurveValidate(curveA: Rhino.Geometry.Curve, curveB: Rhino.Geometry.Curve, tolerance: float, overlapTolerance: float, invalidIndices: System.Int32[]@, textLog: Rhino.FileIO.TextLog@) -> CurveIntersections
Rhino.Geometry.Intersect.Intersection.CurveLine(curve: Rhino.Geometry.Curve, line: Rhino.Geometry.Line, tolerance: float, overlapTolerance: float) -> CurveIntersections
Rhino.Geometry.Intersect.Intersection.CurvePlane(curve: Rhino.Geometry.Curve, plane: Rhino.Geometry.Plane, tolerance: float) -> CurveIntersections
Rhino.Geometry.Intersect.Intersection.CurveSelf(curve: Rhino.Geometry.Curve, tolerance: float) -> CurveIntersections
Rhino.Geometry.Intersect.Intersection.CurveSurface(curve: Rhino.Geometry.Curve, curveDomain: Rhino.Geometry.Interval, surface: Rhino.Geometry.Surface, tolerance: float, overlapTolerance: float) -> CurveIntersections
Rhino.Geometry.Intersect.Intersection.CurveSurface(curve: Rhino.Geometry.Curve, surface: Rhino.Geometry.Surface, tolerance: float, overlapTolerance: float) -> CurveIntersections
Rhino.Geometry.Intersect.Intersection.CurveSurfaceValidate(curve: Rhino.Geometry.Curve, curveDomain: Rhino.Geometry.Interval, surface: Rhino.Geometry.Surface, tolerance: float, overlapTolerance: float, invalidIndices: System.Int32[]@, textLog: Rhino.FileIO.TextLog@) -> CurveIntersections
Rhino.Geometry.Intersect.Intersection.CurveSurfaceValidate(curve: Rhino.Geometry.Curve, surface: Rhino.Geometry.Surface, tolerance: float, overlapTolerance: float, invalidIndices: System.Int32[]@, textLog: Rhino.FileIO.TextLog@) -> CurveIntersections
Rhino.Geometry.Intersect.Intersection.LineBox(line: Rhino.Geometry.Line, box: Rhino.Geometry.BoundingBox, tolerance: float, lineParameters: Rhino.Geometry.Interval@) -> bool
Rhino.Geometry.Intersect.Intersection.LineBox(line: Rhino.Geometry.Line, box: Rhino.Geometry.Box, tolerance: float, lineParameters: Rhino.Geometry.Interval@) -> bool
Rhino.Geometry.Intersect.Intersection.LineCircle(line: Rhino.Geometry.Line, circle: Rhino.Geometry.Circle, t1: System.Double@, point1: Rhino.Geometry.Point3d@, t2: System.Double@, point2: Rhino.Geometry.Point3d@) -> LineCircleIntersection
Rhino.Geometry.Intersect.Intersection.LineCylinder(line: Rhino.Geometry.Line, cylinder: Rhino.Geometry.Cylinder, intersectionPoint1: Rhino.Geometry.Point3d@, intersectionPoint2: Rhino.Geometry.Point3d@) -> LineCylinderIntersection
Rhino.Geometry.Intersect.Intersection.LineLine(lineA: Rhino.Geometry.Line, lineB: Rhino.Geometry.Line, a: System.Double@, b: System.Double@) -> bool
Rhino.Geometry.Intersect.Intersection.LineLine(lineA: Rhino.Geometry.Line, lineB: Rhino.Geometry.Line, a: System.Double@, b: System.Double@, tolerance: float, finiteSegments: bool) -> bool
Rhino.Geometry.Intersect.Intersection.LinePlane(line: Rhino.Geometry.Line, plane: Rhino.Geometry.Plane, lineParameter: System.Double@) -> bool
Rhino.Geometry.Intersect.Intersection.LineSphere(line: Rhino.Geometry.Line, sphere: Rhino.Geometry.Sphere, intersectionPoint1: Rhino.Geometry.Point3d@, intersectionPoint2: Rhino.Geometry.Point3d@) -> LineSphereIntersection
Rhino.Geometry.Intersect.Intersection.MeshLine(mesh: Rhino.Geometry.Mesh, line: Rhino.Geometry.Line) -> List[Point3d]
Rhino.Geometry.Intersect.Intersection.MeshLine(mesh: Rhino.Geometry.Mesh, line: Rhino.Geometry.Line, faceIds: System.Int32[]@) -> List[Point3d]
Rhino.Geometry.Intersect.Intersection.MeshLineSorted(mesh: Rhino.Geometry.Mesh, line: Rhino.Geometry.Line, faceIds: System.Int32[]@) -> List[Point3d]
Rhino.Geometry.Intersect.Intersection.MeshMesh(meshes: Iterable[Rhino.Geometry.Mesh], tolerance: float, intersections: Rhino.Geometry.Polyline[]@, overlapsPolylines: bool, overlapsPolylinesResult: Rhino.Geometry.Polyline[]@, overlapsMesh: bool, overlapsMeshResult: Rhino.Geometry.Mesh@, textLog: Rhino.FileIO.TextLog, cancel: System.Threading.CancellationToken, progress: IProgress[float]) -> bool
Rhino.Geometry.Intersect.Intersection.MeshMeshAccurate(meshA: Rhino.Geometry.Mesh, meshB: Rhino.Geometry.Mesh, tolerance: float) -> List[Polyline]
Rhino.Geometry.Intersect.Intersection.MeshMeshFast(meshA: Rhino.Geometry.Mesh, meshB: Rhino.Geometry.Mesh) -> List[Line]
Rhino.Geometry.Intersect.Intersection.MeshMeshPredicate(meshes: Iterable[Rhino.Geometry.Mesh], tolerance: float, pairs: System.Int32[]@, textLog: Rhino.FileIO.TextLog) -> bool
Rhino.Geometry.Intersect.Intersection.MeshPlane(mesh: Rhino.Geometry.Mesh, cache: Rhino.Geometry.Intersect.MeshIntersectionCache, plane: Rhino.Geometry.Plane, tolerance: float) -> List[Polyline]
Rhino.Geometry.Intersect.Intersection.MeshPlane(mesh: Rhino.Geometry.Mesh, cache: Rhino.Geometry.Intersect.MeshIntersectionCache, planes: Iterable[Rhino.Geometry.Plane], tolerance: float) -> List[Polyline]
Rhino.Geometry.Intersect.Intersection.MeshPlane(mesh: Rhino.Geometry.Mesh, plane: Rhino.Geometry.Plane) -> List[Polyline]
Rhino.Geometry.Intersect.Intersection.MeshPlane(mesh: Rhino.Geometry.Mesh, planes: Iterable[Rhino.Geometry.Plane]) -> List[Polyline]
Rhino.Geometry.Intersect.Intersection.MeshPolyline(mesh: Rhino.Geometry.Mesh, curve: Rhino.Geometry.PolylineCurve, faceIds: System.Int32[]@) -> List[Point3d]
Rhino.Geometry.Intersect.Intersection.MeshPolylineSorted(mesh: Rhino.Geometry.Mesh, curve: Rhino.Geometry.PolylineCurve, faceIds: System.Int32[]@) -> List[Point3d]
Rhino.Geometry.Intersect.Intersection.MeshRay(mesh: Rhino.Geometry.Mesh, ray: Rhino.Geometry.Ray3d) -> float
Rhino.Geometry.Intersect.Intersection.MeshRay(mesh: Rhino.Geometry.Mesh, ray: Rhino.Geometry.Ray3d, meshFaceIndices: System.Int32[]@) -> float
Rhino.Geometry.Intersect.Intersection.PlaneBoundingBox(plane: Rhino.Geometry.Plane, boundingBox: Rhino.Geometry.BoundingBox, polyline: Rhino.Geometry.Polyline@) -> bool
Rhino.Geometry.Intersect.Intersection.PlaneCircle(plane: Rhino.Geometry.Plane, circle: Rhino.Geometry.Circle, firstCircleParameter: System.Double@, secondCircleParameter: System.Double@) -> PlaneCircleIntersection
Rhino.Geometry.Intersect.Intersection.PlanePlane(planeA: Rhino.Geometry.Plane, planeB: Rhino.Geometry.Plane, intersectionLine: Rhino.Geometry.Line@) -> bool
Rhino.Geometry.Intersect.Intersection.PlanePlanePlane(planeA: Rhino.Geometry.Plane, planeB: Rhino.Geometry.Plane, planeC: Rhino.Geometry.Plane, intersectionPoint: Rhino.Geometry.Point3d@) -> bool
Rhino.Geometry.Intersect.Intersection.PlaneSphere(plane: Rhino.Geometry.Plane, sphere: Rhino.Geometry.Sphere, intersectionCircle: Rhino.Geometry.Circle@) -> PlaneSphereIntersection
Rhino.Geometry.Intersect.Intersection.ProjectPointsToBreps(breps: Iterable[Rhino.Geometry.Brep], points: Iterable[Rhino.Geometry.Point3d], direction: Rhino.Geometry.Vector3d, tolerance: float) -> List[Point3d]
Rhino.Geometry.Intersect.Intersection.ProjectPointsToBrepsEx(breps: Iterable[Rhino.Geometry.Brep], points: Iterable[Rhino.Geometry.Point3d], direction: Rhino.Geometry.Vector3d, tolerance: float, indices: System.Int32[]@) -> List[Point3d]
Rhino.Geometry.Intersect.Intersection.ProjectPointsToMeshes(meshes: Iterable[Rhino.Geometry.Mesh], points: Iterable[Rhino.Geometry.Point3d], direction: Rhino.Geometry.Vector3d, tolerance: float) -> List[Point3d]
Rhino.Geometry.Intersect.Intersection.ProjectPointsToMeshesEx(meshes: Iterable[Rhino.Geometry.Mesh], points: Iterable[Rhino.Geometry.Point3d], direction: Rhino.Geometry.Vector3d, tolerance: float, indices: System.Int32[]@) -> List[Point3d]
Rhino.Geometry.Intersect.Intersection.RayShoot(geometry: Iterable[Rhino.Geometry.GeometryBase], ray: Rhino.Geometry.Ray3d, maxReflections: int) -> List[RayShootEvent]
Rhino.Geometry.Intersect.Intersection.RayShoot(ray: Rhino.Geometry.Ray3d, geometry: Iterable[Rhino.Geometry.GeometryBase], maxReflections: int) -> List[Point3d]
Rhino.Geometry.Intersect.Intersection.SphereSphere(sphereA: Rhino.Geometry.Sphere, sphereB: Rhino.Geometry.Sphere, intersectionCircle: Rhino.Geometry.Circle@) -> SphereSphereIntersection
Rhino.Geometry.Intersect.Intersection.SurfaceSurface(surfaceA: Rhino.Geometry.Surface, surfaceB: Rhino.Geometry.Surface, tolerance: float, intersectionCurves: Rhino.Geometry.Curve[]@, intersectionPoints: Rhino.Geometry.Point3d[]@) -> bool
Rhino.Geometry.Intersect.IntersectionEvent.CompareEquivalent(eventA: Rhino.Geometry.Intersect.IntersectionEvent, eventB: Rhino.Geometry.Intersect.IntersectionEvent, relativePointTolerance: float) -> bool
Rhino.Geometry.Intersect.IntersectionEvent.CompareEquivalent(eventA: Rhino.Geometry.Intersect.IntersectionEvent, eventB: Rhino.Geometry.Intersect.IntersectionEvent, relativePointTolerance: float, log: Rhino.FileIO.TextLog) -> bool
Rhino.Geometry.Intersect.IntersectionEvent.SurfaceOverlapParameter(self, uDomain: Rhino.Geometry.Interval@, vDomain: Rhino.Geometry.Interval@) -> None
Rhino.Geometry.Intersect.IntersectionEvent.SurfacePointParameter(self, u: System.Double@, v: System.Double@) -> None
Rhino.Geometry.Intersect.IntersectionEvent.__init__(self) -> None
Rhino.Geometry.Intersect.MeshClash.FindDetail(objA: Rhino.DocObjects.RhinoObject, objB: Rhino.DocObjects.RhinoObject, distance: float) -> List[Mesh]
Rhino.Geometry.Intersect.MeshClash.FindDetail(objA: Rhino.DocObjects.RhinoObject, objB: Rhino.DocObjects.RhinoObject, distance: float, meshType: Rhino.Geometry.MeshType, meshingParameters: Rhino.Geometry.MeshingParameters) -> List[Mesh]
Rhino.Geometry.Intersect.MeshClash.Search(meshA: Rhino.Geometry.Mesh, meshB: Rhino.Geometry.Mesh, distance: float, maxEventCount: int) -> List[Rhino.Geometry.Intersect.MeshClash]
Rhino.Geometry.Intersect.MeshClash.Search(meshA: Rhino.Geometry.Mesh, setB: Iterable[Rhino.Geometry.Mesh], distance: float, maxEventCount: int) -> List[Rhino.Geometry.Intersect.MeshClash]
Rhino.Geometry.Intersect.MeshClash.Search(setA: Iterable[Rhino.DocObjects.RhinoObject], setB: Iterable[Rhino.DocObjects.RhinoObject], distance: float) -> List[MeshInterference]
Rhino.Geometry.Intersect.MeshClash.Search(setA: Iterable[Rhino.DocObjects.RhinoObject], setB: Iterable[Rhino.DocObjects.RhinoObject], distance: float, meshType: Rhino.Geometry.MeshType, meshingParameters: Rhino.Geometry.MeshingParameters) -> List[MeshInterference]
Rhino.Geometry.Intersect.MeshClash.Search(setA: Iterable[Rhino.Geometry.Mesh], setB: Iterable[Rhino.Geometry.Mesh], distance: float, maxEventCount: int) -> List[Rhino.Geometry.Intersect.MeshClash]
Rhino.Geometry.Intersect.MeshIntersectionCache.Dispose(self) -> None
Rhino.Geometry.Intersect.MeshIntersectionCache.Dispose(self, disposing: bool) -> None
Rhino.Geometry.Intersect.MeshIntersectionCache.Finalize(self) -> None
Rhino.Geometry.Intersect.MeshIntersectionCache.__init__(self) -> None
Rhino.Geometry.Interval.!=(a: Rhino.Geometry.Interval, b: Rhino.Geometry.Interval) -> operator
Rhino.Geometry.Interval.+(interval: Rhino.Geometry.Interval, number: float) -> operator
Rhino.Geometry.Interval.+(number: float, interval: Rhino.Geometry.Interval) -> operator
Rhino.Geometry.Interval.-(interval: Rhino.Geometry.Interval, number: float) -> operator
Rhino.Geometry.Interval.-(number: float, interval: Rhino.Geometry.Interval) -> operator
Rhino.Geometry.Interval.<(a: Rhino.Geometry.Interval, b: Rhino.Geometry.Interval) -> operator
Rhino.Geometry.Interval.<=(a: Rhino.Geometry.Interval, b: Rhino.Geometry.Interval) -> operator
Rhino.Geometry.Interval.==(a: Rhino.Geometry.Interval, b: Rhino.Geometry.Interval) -> operator
Rhino.Geometry.Interval.>(a: Rhino.Geometry.Interval, b: Rhino.Geometry.Interval) -> operator
Rhino.Geometry.Interval.>=(a: Rhino.Geometry.Interval, b: Rhino.Geometry.Interval) -> operator
Rhino.Geometry.Interval.CompareTo(self, other: Rhino.Geometry.Interval) -> int
Rhino.Geometry.Interval.EpsilonEquals(self, other: Rhino.Geometry.Interval, epsilon: float) -> bool
Rhino.Geometry.Interval.Equals(self, obj: Any) -> bool
Rhino.Geometry.Interval.Equals(self, other: Rhino.Geometry.Interval) -> bool
Rhino.Geometry.Interval.FromIntersection(a: Rhino.Geometry.Interval, b: Rhino.Geometry.Interval) -> Rhino.Geometry.Interval
Rhino.Geometry.Interval.FromUnion(a: Rhino.Geometry.Interval, b: Rhino.Geometry.Interval) -> Rhino.Geometry.Interval
Rhino.Geometry.Interval.GetHashCode(self) -> int
Rhino.Geometry.Interval.Grow(self, value: float) -> None
Rhino.Geometry.Interval.IncludesInterval(self, interval: Rhino.Geometry.Interval) -> bool
Rhino.Geometry.Interval.IncludesInterval(self, interval: Rhino.Geometry.Interval, strict: bool) -> bool
Rhino.Geometry.Interval.IncludesParameter(self, t: float) -> bool
Rhino.Geometry.Interval.IncludesParameter(self, t: float, strict: bool) -> bool
Rhino.Geometry.Interval.MakeIncreasing(self) -> None
Rhino.Geometry.Interval.NormalizedIntervalAt(self, intervalParameter: Rhino.Geometry.Interval) -> Rhino.Geometry.Interval
Rhino.Geometry.Interval.NormalizedParameterAt(self, intervalParameter: float) -> float
Rhino.Geometry.Interval.ParameterAt(self, normalizedParameter: float) -> float
Rhino.Geometry.Interval.ParameterIntervalAt(self, normalizedInterval: Rhino.Geometry.Interval) -> Rhino.Geometry.Interval
Rhino.Geometry.Interval.Reverse(self) -> None
Rhino.Geometry.Interval.Swap(self) -> None
Rhino.Geometry.Interval.ToString(self) -> str
Rhino.Geometry.Interval.__init__(self, other: Rhino.Geometry.Interval) -> None
Rhino.Geometry.Interval.__init__(self, t0: float, t1: float) -> None
Rhino.Geometry.InvalidDimensionStyleIdException.__init__(self, msg: str) -> None
Rhino.Geometry.Leader.Create(text: str, plane: Rhino.Geometry.Plane, dimstyle: Rhino.DocObjects.DimensionStyle, points: List[Rhino.Geometry.Point3d]) -> Rhino.Geometry.Leader
Rhino.Geometry.Leader.CreateWithRichText(richText: str, plane: Rhino.Geometry.Plane, dimstyle: Rhino.DocObjects.DimensionStyle, points: List[Rhino.Geometry.Point3d]) -> Rhino.Geometry.Leader
Rhino.Geometry.Leader.Explode(self) -> List[GeometryBase]
Rhino.Geometry.Leader.__init__(self) -> None
Rhino.Geometry.Leader.__init__(self, info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext) -> None
Rhino.Geometry.LengthMassProperties.CentroidCoordinatesPrincipalMoments(self, x: System.Double@, xaxis: Rhino.Geometry.Vector3d@, y: System.Double@, yaxis: Rhino.Geometry.Vector3d@, z: System.Double@, zaxis: Rhino.Geometry.Vector3d@) -> bool
Rhino.Geometry.LengthMassProperties.CentroidCoordinatesPrincipalMomentsOfInertia(self, x: System.Double@, xaxis: Rhino.Geometry.Vector3d@, y: System.Double@, yaxis: Rhino.Geometry.Vector3d@, z: System.Double@, zaxis: Rhino.Geometry.Vector3d@) -> bool
Rhino.Geometry.LengthMassProperties.Compute(curve: Rhino.Geometry.Curve) -> Rhino.Geometry.LengthMassProperties
Rhino.Geometry.LengthMassProperties.Compute(curve: Rhino.Geometry.Curve, length: bool, firstMoments: bool, secondMoments: bool, productMoments: bool) -> Rhino.Geometry.LengthMassProperties
Rhino.Geometry.LengthMassProperties.Compute(curves: Iterable[Rhino.Geometry.Curve]) -> Rhino.Geometry.LengthMassProperties
Rhino.Geometry.LengthMassProperties.Compute(curves: Iterable[Rhino.Geometry.Curve], length: bool, firstMoments: bool, secondMoments: bool, productMoments: bool) -> Rhino.Geometry.LengthMassProperties
Rhino.Geometry.LengthMassProperties.Dispose(self) -> None
Rhino.Geometry.LengthMassProperties.Dispose(self, disposing: bool) -> None
Rhino.Geometry.LengthMassProperties.Finalize(self) -> None
Rhino.Geometry.LengthMassProperties.WorldCoordinatesPrincipalMoments(self, x: System.Double@, xaxis: Rhino.Geometry.Vector3d@, y: System.Double@, yaxis: Rhino.Geometry.Vector3d@, z: System.Double@, zaxis: Rhino.Geometry.Vector3d@) -> bool
Rhino.Geometry.LengthMassProperties.WorldCoordinatesPrincipalMomentsOfInertia(self, x: System.Double@, xaxis: Rhino.Geometry.Vector3d@, y: System.Double@, yaxis: Rhino.Geometry.Vector3d@, z: System.Double@, zaxis: Rhino.Geometry.Vector3d@) -> bool
Rhino.Geometry.Light.CreateSunLight(northAngleDegrees: float, azimuthDegrees: float, altitudeDegrees: float) -> Rhino.Geometry.Light
Rhino.Geometry.Light.CreateSunLight(northAngleDegrees: float, when: System.DateTime, latitudeDegrees: float, longitudeDegrees: float) -> Rhino.Geometry.Light
Rhino.Geometry.Light.CreateSunLight(sun: Rhino.Render.Sun) -> Rhino.Geometry.Light
Rhino.Geometry.Light.GetAttenuation(self, d: float) -> float
Rhino.Geometry.Light.GetSpotLightRadii(self, innerRadius: System.Double@, outerRadius: System.Double@) -> bool
Rhino.Geometry.Light.SetAttenuation(self, a0: float, a1: float, a2: float) -> None
Rhino.Geometry.Light.__init__(self) -> None
Rhino.Geometry.Light.__init__(self, info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext) -> None
Rhino.Geometry.Line.!=(a: Rhino.Geometry.Line, b: Rhino.Geometry.Line) -> operator
Rhino.Geometry.Line.==(a: Rhino.Geometry.Line, b: Rhino.Geometry.Line) -> operator
Rhino.Geometry.Line.ClosestParameter(self, testPoint: Rhino.Geometry.Point3d) -> float
Rhino.Geometry.Line.ClosestPoint(self, testPoint: Rhino.Geometry.Point3d, limitToFiniteSegment: bool) -> Point3d
Rhino.Geometry.Line.DistanceTo(self, testPoint: Rhino.Geometry.Point3d, limitToFiniteSegment: bool) -> float
Rhino.Geometry.Line.EpsilonEquals(self, other: Rhino.Geometry.Line, epsilon: float) -> bool
Rhino.Geometry.Line.Equals(self, obj: Any) -> bool
Rhino.Geometry.Line.Equals(self, other: Rhino.Geometry.Line) -> bool
Rhino.Geometry.Line.Extend(self, startLength: float, endLength: float) -> bool
Rhino.Geometry.Line.ExtendThroughBox(self, box: Rhino.Geometry.BoundingBox) -> bool
Rhino.Geometry.Line.ExtendThroughBox(self, box: Rhino.Geometry.BoundingBox, additionalLength: float) -> bool
Rhino.Geometry.Line.ExtendThroughBox(self, box: Rhino.Geometry.Box) -> bool
Rhino.Geometry.Line.ExtendThroughBox(self, box: Rhino.Geometry.Box, additionalLength: float) -> bool
Rhino.Geometry.Line.Flip(self) -> None
Rhino.Geometry.Line.GetHashCode(self) -> int
Rhino.Geometry.Line.MaximumDistanceTo(self, testLine: Rhino.Geometry.Line) -> float
Rhino.Geometry.Line.MaximumDistanceTo(self, testPoint: Rhino.Geometry.Point3d) -> float
Rhino.Geometry.Line.MinimumDistanceTo(self, testLine: Rhino.Geometry.Line) -> float
Rhino.Geometry.Line.MinimumDistanceTo(self, testPoint: Rhino.Geometry.Point3d) -> float
Rhino.Geometry.Line.PointAt(self, t: float) -> Point3d
Rhino.Geometry.Line.PointAtLength(self, distance: float) -> Point3d
Rhino.Geometry.Line.ToNurbsCurve(self) -> NurbsCurve
Rhino.Geometry.Line.ToString(self) -> str
Rhino.Geometry.Line.ToString(self, format: str, formatProvider: System.IFormatProvider) -> str
Rhino.Geometry.Line.Transform(self, xform: Rhino.Geometry.Transform) -> bool
Rhino.Geometry.Line.TryCreateBetweenCurves(curve0: Rhino.Geometry.Curve, curve1: Rhino.Geometry.Curve, t0: System.Double@, t1: System.Double@, perpendicular0: bool, perpendicular1: bool, line: Rhino.Geometry.Line@) -> bool
Rhino.Geometry.Line.TryFitLineToPoints(points: Iterable[Rhino.Geometry.Point3d], fitLine: Rhino.Geometry.Line@) -> bool
Rhino.Geometry.Line.TryGetPlane(self, plane: Rhino.Geometry.Plane@) -> bool
Rhino.Geometry.Line.__init__(self, from: Rhino.Geometry.Point3d, to: Rhino.Geometry.Point3d) -> None
Rhino.Geometry.Line.__init__(self, start: Rhino.Geometry.Point3d, direction: Rhino.Geometry.Vector3d, length: float) -> None
Rhino.Geometry.Line.__init__(self, start: Rhino.Geometry.Point3d, span: Rhino.Geometry.Vector3d) -> None
Rhino.Geometry.Line.__init__(self, x0: float, y0: float, z0: float, x1: float, y1: float, z1: float) -> None
Rhino.Geometry.LineCurve.__init__(self) -> None
Rhino.Geometry.LineCurve.__init__(self, from: Rhino.Geometry.Point2d, to: Rhino.Geometry.Point2d) -> None
Rhino.Geometry.LineCurve.__init__(self, from: Rhino.Geometry.Point3d, to: Rhino.Geometry.Point3d) -> None
Rhino.Geometry.LineCurve.__init__(self, info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext) -> None
Rhino.Geometry.LineCurve.__init__(self, line: Rhino.Geometry.Line) -> None
Rhino.Geometry.LineCurve.__init__(self, line: Rhino.Geometry.Line, t0: float, t1: float) -> None
Rhino.Geometry.LineCurve.__init__(self, other: Rhino.Geometry.LineCurve) -> None
Rhino.Geometry.LinearDimension.Create(dimtype: Rhino.Geometry.AnnotationType, dimStyle: Rhino.DocObjects.DimensionStyle, plane: Rhino.Geometry.Plane, horizontal: Rhino.Geometry.Vector3d, defpoint1: Rhino.Geometry.Point3d, defpoint2: Rhino.Geometry.Point3d, dimlinepoint: Rhino.Geometry.Point3d, rotationInPlane: float) -> Rhino.Geometry.LinearDimension
Rhino.Geometry.LinearDimension.FromPoints(extensionLine1End: Rhino.Geometry.Point3d, extensionLine2End: Rhino.Geometry.Point3d, pointOnDimensionLine: Rhino.Geometry.Point3d) -> Rhino.Geometry.LinearDimension
Rhino.Geometry.LinearDimension.Get3dPoints(self, extensionLine1End: Rhino.Geometry.Point3d@, extensionLine2End: Rhino.Geometry.Point3d@, arrowhead1End: Rhino.Geometry.Point3d@, arrowhead2End: Rhino.Geometry.Point3d@, dimlinepoint: Rhino.Geometry.Point3d@, textpoint: Rhino.Geometry.Point3d@) -> bool
Rhino.Geometry.LinearDimension.GetDisplayLines(self, style: Rhino.DocObjects.DimensionStyle, scale: float, lines: System.Collections.Generic.IEnumerable{Rhino.Geometry.Line}@) -> bool
Rhino.Geometry.LinearDimension.GetDistanceDisplayText(self, unitsystem: Rhino.UnitSystem, style: Rhino.DocObjects.DimensionStyle) -> str
Rhino.Geometry.LinearDimension.GetTextRectangle(self, corners: Rhino.Geometry.Point3d[]@) -> bool
Rhino.Geometry.LinearDimension.SetLocations(self, extensionLine1End: Rhino.Geometry.Point2d, extensionLine2End: Rhino.Geometry.Point2d, pointOnDimensionLine: Rhino.Geometry.Point2d) -> None
Rhino.Geometry.LinearDimension.__init__(self) -> None
Rhino.Geometry.LinearDimension.__init__(self, dimensionPlane: Rhino.Geometry.Plane, extensionLine1End: Rhino.Geometry.Point2d, extensionLine2End: Rhino.Geometry.Point2d, pointOnDimensionLine: Rhino.Geometry.Point2d) -> None
Rhino.Geometry.LinearDimension.__init__(self, info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext) -> None
Rhino.Geometry.MatchSrfSettings.EnableRefinement(self, enabled: bool, positionalTolerance: float, angleToleranceRadians: float, curvatureTolerance: float) -> None
Rhino.Geometry.MatchSrfSettings.__init__(self, match: Rhino.Geometry.Continuity, otherEnd: Rhino.Geometry.Continuity) -> None
Rhino.Geometry.Matrix.*(a: Rhino.Geometry.Matrix, b: Rhino.Geometry.Matrix) -> operator
Rhino.Geometry.Matrix.+(a: Rhino.Geometry.Matrix, b: Rhino.Geometry.Matrix) -> operator
Rhino.Geometry.Matrix.BackSolve(self, zeroTolerance: float, b: List[float]) -> List[float]
Rhino.Geometry.Matrix.BackSolvePoints(self, zeroTolerance: float, b: List[Rhino.Geometry.Point3d]) -> List[Point3d]
Rhino.Geometry.Matrix.Dispose(self) -> None
Rhino.Geometry.Matrix.Dispose(self, disposing: bool) -> None
Rhino.Geometry.Matrix.Duplicate(self) -> Rhino.Geometry.Matrix
Rhino.Geometry.Matrix.Finalize(self) -> None
Rhino.Geometry.Matrix.GetHashCode(self) -> int
Rhino.Geometry.Matrix.Invert(self, zeroTolerance: float) -> bool
Rhino.Geometry.Matrix.RowReduce(self, zeroTolerance: float, b: List[Rhino.Geometry.Point3d], pivot: System.Double@) -> int
Rhino.Geometry.Matrix.RowReduce(self, zeroTolerance: float, b: List[float], pivot: System.Double@) -> int
Rhino.Geometry.Matrix.RowReduce(self, zeroTolerance: float, determinant: System.Double@, pivot: System.Double@) -> int
Rhino.Geometry.Matrix.Scale(self, s: float) -> None
Rhino.Geometry.Matrix.SetDiagonal(self, d: float) -> None
Rhino.Geometry.Matrix.SwapColumns(self, columnA: int, columnB: int) -> bool
Rhino.Geometry.Matrix.SwapRows(self, rowA: int, rowB: int) -> bool
Rhino.Geometry.Matrix.Transpose(self) -> bool
Rhino.Geometry.Matrix.Zero(self) -> None
Rhino.Geometry.Matrix.__init__(self, rowCount: int, columnCount: int) -> None
Rhino.Geometry.Matrix.__init__(self, xform: Rhino.Geometry.Transform) -> None
Rhino.Geometry.Mesh.Append(self, meshes: Iterable[Rhino.Geometry.Mesh]) -> None
Rhino.Geometry.Mesh.Append(self, other: Rhino.Geometry.Mesh) -> None
Rhino.Geometry.Mesh.Check(self, textLog: Rhino.FileIO.TextLog, parameters: Rhino.Geometry.MeshCheckParameters@) -> bool
Rhino.Geometry.Mesh.ClearSurfaceData(self) -> None
Rhino.Geometry.Mesh.ClearTextureData(self) -> None
Rhino.Geometry.Mesh.ClosestMeshPoint(self, testPoint: Rhino.Geometry.Point3d, maximumDistance: float) -> MeshPoint
Rhino.Geometry.Mesh.ClosestPoint(self, testPoint: Rhino.Geometry.Point3d) -> Point3d
Rhino.Geometry.Mesh.ClosestPoint(self, testPoint: Rhino.Geometry.Point3d, pointOnMesh: Rhino.Geometry.Point3d@, maximumDistance: float) -> int
Rhino.Geometry.Mesh.ClosestPoint(self, testPoint: Rhino.Geometry.Point3d, pointOnMesh: Rhino.Geometry.Point3d@, normalAtPoint: Rhino.Geometry.Vector3d@, maximumDistance: float) -> int
Rhino.Geometry.Mesh.CollapseFacesByArea(self, lessThanArea: float, greaterThanArea: float) -> int
Rhino.Geometry.Mesh.CollapseFacesByByAspectRatio(self, aspectRatio: float) -> int
Rhino.Geometry.Mesh.CollapseFacesByEdgeLength(self, bGreaterThan: bool, edgeLength: float) -> int
Rhino.Geometry.Mesh.ColorAt(self, faceIndex: int, t0: float, t1: float, t2: float, t3: float) -> Color
Rhino.Geometry.Mesh.ColorAt(self, meshPoint: Rhino.Geometry.MeshPoint) -> Color
Rhino.Geometry.Mesh.Compact(self) -> bool
Rhino.Geometry.Mesh.ComputeCurvatureApproximation(self, type: int, perVertexCurvatures: System.Double[]@) -> bool
Rhino.Geometry.Mesh.ComputeThickness(meshes: Iterable[Rhino.Geometry.Mesh], maximumThickness: float) -> List[MeshThicknessMeasurement]
Rhino.Geometry.Mesh.ComputeThickness(meshes: Iterable[Rhino.Geometry.Mesh], maximumThickness: float, cancelToken: System.Threading.CancellationToken) -> List[MeshThicknessMeasurement]
Rhino.Geometry.Mesh.ComputeThickness(meshes: Iterable[Rhino.Geometry.Mesh], maximumThickness: float, sharpAngle: float, cancelToken: System.Threading.CancellationToken) -> List[MeshThicknessMeasurement]
Rhino.Geometry.Mesh.CopyFrom(self, other: Rhino.Geometry.Mesh) -> None
Rhino.Geometry.Mesh.CreateBooleanDifference(firstSet: Iterable[Rhino.Geometry.Mesh], secondSet: Iterable[Rhino.Geometry.Mesh]) -> List[Rhino.Geometry.Mesh]
Rhino.Geometry.Mesh.CreateBooleanDifference(firstSet: Iterable[Rhino.Geometry.Mesh], secondSet: Iterable[Rhino.Geometry.Mesh], options: Rhino.Geometry.MeshBooleanOptions, result: Rhino.Commands.Result@) -> List[Rhino.Geometry.Mesh]
Rhino.Geometry.Mesh.CreateBooleanIntersection(firstSet: Iterable[Rhino.Geometry.Mesh], secondSet: Iterable[Rhino.Geometry.Mesh]) -> List[Rhino.Geometry.Mesh]
Rhino.Geometry.Mesh.CreateBooleanIntersection(firstSet: Iterable[Rhino.Geometry.Mesh], secondSet: Iterable[Rhino.Geometry.Mesh], options: Rhino.Geometry.MeshBooleanOptions, result: Rhino.Commands.Result@) -> List[Rhino.Geometry.Mesh]
Rhino.Geometry.Mesh.CreateBooleanSplit(meshesToSplit: Iterable[Rhino.Geometry.Mesh], meshSplitters: Iterable[Rhino.Geometry.Mesh]) -> List[Rhino.Geometry.Mesh]
Rhino.Geometry.Mesh.CreateBooleanSplit(meshesToSplit: Iterable[Rhino.Geometry.Mesh], meshSplitters: Iterable[Rhino.Geometry.Mesh], options: Rhino.Geometry.MeshBooleanOptions, result: Rhino.Commands.Result@) -> List[Rhino.Geometry.Mesh]
Rhino.Geometry.Mesh.CreateBooleanUnion(meshes: Iterable[Rhino.Geometry.Mesh]) -> List[Rhino.Geometry.Mesh]
Rhino.Geometry.Mesh.CreateBooleanUnion(meshes: Iterable[Rhino.Geometry.Mesh], options: Rhino.Geometry.MeshBooleanOptions, commandResult: Rhino.Commands.Result@) -> List[Rhino.Geometry.Mesh]
Rhino.Geometry.Mesh.CreateBooleanUnion(meshes: Iterable[Rhino.Geometry.Mesh], tolerance: float) -> List[Rhino.Geometry.Mesh]
Rhino.Geometry.Mesh.CreateContourCurves(meshToContour: Rhino.Geometry.Mesh, contourStart: Rhino.Geometry.Point3d, contourEnd: Rhino.Geometry.Point3d, interval: float, tolerance: float) -> List[Curve]
Rhino.Geometry.Mesh.CreateContourCurves(meshToContour: Rhino.Geometry.Mesh, sectionPlane: Rhino.Geometry.Plane, tolerance: float) -> List[Curve]
Rhino.Geometry.Mesh.CreateConvexHull3D(points: Iterable[Rhino.Geometry.Point3d], hullFacets: System.Int32[][]@, tolerance: float, angleTolerance: float) -> Rhino.Geometry.Mesh
Rhino.Geometry.Mesh.CreateExtrusion(profile: Rhino.Geometry.Curve, direction: Rhino.Geometry.Vector3d) -> Rhino.Geometry.Mesh
Rhino.Geometry.Mesh.CreateExtrusion(profile: Rhino.Geometry.Curve, direction: Rhino.Geometry.Vector3d, parameters: Rhino.Geometry.MeshingParameters) -> Rhino.Geometry.Mesh
Rhino.Geometry.Mesh.CreateFromBox(box: Rhino.Geometry.BoundingBox, xCount: int, yCount: int, zCount: int) -> Rhino.Geometry.Mesh
Rhino.Geometry.Mesh.CreateFromBox(box: Rhino.Geometry.Box, xCount: int, yCount: int, zCount: int) -> Rhino.Geometry.Mesh
Rhino.Geometry.Mesh.CreateFromBox(corners: Iterable[Rhino.Geometry.Point3d], xCount: int, yCount: int, zCount: int) -> Rhino.Geometry.Mesh
Rhino.Geometry.Mesh.CreateFromBrep(brep: Rhino.Geometry.Brep, meshingParameters: Rhino.Geometry.MeshingParameters) -> List[Rhino.Geometry.Mesh]
Rhino.Geometry.Mesh.CreateFromClosedPolyline(polyline: Rhino.Geometry.Polyline) -> Rhino.Geometry.Mesh
Rhino.Geometry.Mesh.CreateFromCone(cone: Rhino.Geometry.Cone, vertical: int, around: int) -> Rhino.Geometry.Mesh
Rhino.Geometry.Mesh.CreateFromCone(cone: Rhino.Geometry.Cone, vertical: int, around: int, solid: bool) -> Rhino.Geometry.Mesh
Rhino.Geometry.Mesh.CreateFromCone(cone: Rhino.Geometry.Cone, vertical: int, around: int, solid: bool, quadCaps: bool) -> Rhino.Geometry.Mesh
Rhino.Geometry.Mesh.CreateFromCurveExtrusion(curve: Rhino.Geometry.Curve, direction: Rhino.Geometry.Vector3d, parameters: Rhino.Geometry.MeshingParameters, boundingBox: Rhino.Geometry.BoundingBox) -> Rhino.Geometry.Mesh
Rhino.Geometry.Mesh.CreateFromCurvePipe(curve: Rhino.Geometry.Curve, radius: float, segments: int, accuracy: int, capType: Rhino.Geometry.MeshPipeCapStyle, faceted: bool, intervals: Iterable[Rhino.Geometry.Interval]) -> Rhino.Geometry.Mesh
Rhino.Geometry.Mesh.CreateFromCylinder(cylinder: Rhino.Geometry.Cylinder, vertical: int, around: int) -> Rhino.Geometry.Mesh
Rhino.Geometry.Mesh.CreateFromCylinder(cylinder: Rhino.Geometry.Cylinder, vertical: int, around: int, capBottom: bool, capTop: bool) -> Rhino.Geometry.Mesh
Rhino.Geometry.Mesh.CreateFromCylinder(cylinder: Rhino.Geometry.Cylinder, vertical: int, around: int, capBottom: bool, capTop: bool, circumscribe: bool, quadCaps: bool) -> Rhino.Geometry.Mesh
Rhino.Geometry.Mesh.CreateFromCylinder(cylinder: Rhino.Geometry.Cylinder, vertical: int, around: int, capBottom: bool, capTop: bool, quadCaps: bool) -> Rhino.Geometry.Mesh
Rhino.Geometry.Mesh.CreateFromExtrusion(extrusion: Rhino.Geometry.Extrusion, meshingParameters: Rhino.Geometry.MeshingParameters) -> Rhino.Geometry.Mesh
Rhino.Geometry.Mesh.CreateFromFilteredFaceList(original: Rhino.Geometry.Mesh, inclusion: Iterable[bool]) -> Rhino.Geometry.Mesh
Rhino.Geometry.Mesh.CreateFromIterativeCleanup(meshes: Iterable[Rhino.Geometry.Mesh], tolerance: float) -> List[Rhino.Geometry.Mesh]
Rhino.Geometry.Mesh.CreateFromLines(lines: List[Rhino.Geometry.Curve], maxFaceValence: int, tolerance: float) -> Rhino.Geometry.Mesh
Rhino.Geometry.Mesh.CreateFromPatchSingleFace(mesh: Rhino.Geometry.Mesh, components: Iterable[Rhino.Geometry.ComponentIndex]) -> Rhino.Geometry.Mesh
Rhino.Geometry.Mesh.CreateFromPlanarBoundary(boundary: Rhino.Geometry.Curve, parameters: Rhino.Geometry.MeshingParameters, tolerance: float) -> Rhino.Geometry.Mesh
Rhino.Geometry.Mesh.CreateFromPlane(plane: Rhino.Geometry.Plane, xInterval: Rhino.Geometry.Interval, yInterval: Rhino.Geometry.Interval, xCount: int, yCount: int) -> Rhino.Geometry.Mesh
Rhino.Geometry.Mesh.CreateFromSphere(sphere: Rhino.Geometry.Sphere, xCount: int, yCount: int) -> Rhino.Geometry.Mesh
Rhino.Geometry.Mesh.CreateFromSubD(subd: Rhino.Geometry.SubD, displayDensity: int) -> Rhino.Geometry.Mesh
Rhino.Geometry.Mesh.CreateFromSubDControlNet(subd: Rhino.Geometry.SubD) -> Rhino.Geometry.Mesh
Rhino.Geometry.Mesh.CreateFromSubDControlNetWithTextureCoordinates(subd: Rhino.Geometry.SubD) -> Rhino.Geometry.Mesh
Rhino.Geometry.Mesh.CreateFromSurface(surface: Rhino.Geometry.Surface) -> Rhino.Geometry.Mesh
Rhino.Geometry.Mesh.CreateFromSurface(surface: Rhino.Geometry.Surface, meshingParameters: Rhino.Geometry.MeshingParameters) -> Rhino.Geometry.Mesh
Rhino.Geometry.Mesh.CreateFromSurfaceControlNet(surface: Rhino.Geometry.Surface) -> Rhino.Geometry.Mesh
Rhino.Geometry.Mesh.CreateFromTessellation(points: Iterable[Rhino.Geometry.Point3d], edges: Iterable[Iterable[Rhino.Geometry.Point3d]], plane: Rhino.Geometry.Plane, allowNewVertices: bool) -> Rhino.Geometry.Mesh
Rhino.Geometry.Mesh.CreateFromTorus(torus: Rhino.Geometry.Torus, vertical: int, around: int) -> Rhino.Geometry.Mesh
Rhino.Geometry.Mesh.CreateIcoSphere(sphere: Rhino.Geometry.Sphere, subdivisions: int) -> Rhino.Geometry.Mesh
Rhino.Geometry.Mesh.CreatePartitions(self, maximumVertexCount: int, maximumTriangleCount: int) -> bool
Rhino.Geometry.Mesh.CreatePatch(outerBoundary: Rhino.Geometry.Polyline, angleToleranceRadians: float, pullbackSurface: Rhino.Geometry.Surface, innerBoundaryCurves: Iterable[Rhino.Geometry.Curve], innerBothSideCurves: Iterable[Rhino.Geometry.Curve], innerPoints: Iterable[Rhino.Geometry.Point3d], trimback: bool, divisions: int) -> Rhino.Geometry.Mesh
Rhino.Geometry.Mesh.CreateQuadSphere(sphere: Rhino.Geometry.Sphere, subdivisions: int) -> Rhino.Geometry.Mesh
Rhino.Geometry.Mesh.CreateUnweldedMesh(mesh: Rhino.Geometry.Mesh) -> Rhino.Geometry.Mesh
Rhino.Geometry.Mesh.CreateVertexColorsFromBitmap(self, doc: Rhino.RhinoDoc, mapping: Rhino.Render.TextureMapping, xform: Rhino.Geometry.Transform, bitmap: System.Drawing.Bitmap) -> bool
Rhino.Geometry.Mesh.DestroyPartition(self) -> None
Rhino.Geometry.Mesh.DestroyTopology(self) -> None
Rhino.Geometry.Mesh.DestroyTree(self) -> None
Rhino.Geometry.Mesh.Duplicate(self) -> GeometryBase
Rhino.Geometry.Mesh.DuplicateMesh(self) -> Rhino.Geometry.Mesh
Rhino.Geometry.Mesh.EvaluateMeshGeometry(self, surface: Rhino.Geometry.Surface) -> bool
Rhino.Geometry.Mesh.ExplodeAtUnweldedEdges(self) -> List[Rhino.Geometry.Mesh]
Rhino.Geometry.Mesh.ExtendSelectionByEdgeRidge(self, preselectedEdges: List[int], newEdge: int, iterative: bool) -> List[int]
Rhino.Geometry.Mesh.ExtendSelectionByFaceLoop(self, preselectedFaces: List[int], newFace: int, iterative: bool) -> List[int]
Rhino.Geometry.Mesh.ExtractNonManifoldEdges(self, selective: bool) -> Rhino.Geometry.Mesh
Rhino.Geometry.Mesh.FileHole(self, topologyEdgeIndex: int) -> bool
Rhino.Geometry.Mesh.FillHoles(self) -> bool
Rhino.Geometry.Mesh.Flip(self, vertexNormals: bool, faceNormals: bool, faceOrientation: bool) -> None
Rhino.Geometry.Mesh.Flip(self, vertexNormals: bool, faceNormals: bool, faceOrientation: bool, ngonsBoundaryDirection: bool) -> None
Rhino.Geometry.Mesh.GetCachedTextureCoordinates(self, rhinoObject: Rhino.DocObjects.RhinoObject, texture: Rhino.DocObjects.Texture) -> CachedTextureCoordinates
Rhino.Geometry.Mesh.GetCachedTextureCoordinates(self, textureMappingId: System.Guid) -> CachedTextureCoordinates
Rhino.Geometry.Mesh.GetNakedEdgePointStatus(self) -> List[bool]
Rhino.Geometry.Mesh.GetNakedEdges(self) -> List[Polyline]
Rhino.Geometry.Mesh.GetNgonAndFacesCount(self) -> int
Rhino.Geometry.Mesh.GetNgonAndFacesEnumerable(self) -> IEnumerable<MeshNgon>
Rhino.Geometry.Mesh.GetOutlines(self, plane: Rhino.Geometry.Plane) -> List[Polyline]
Rhino.Geometry.Mesh.GetOutlines(self, viewport: Rhino.Display.RhinoViewport) -> List[Polyline]
Rhino.Geometry.Mesh.GetOutlines(self, viewportInfo: Rhino.DocObjects.ViewportInfo, plane: Rhino.Geometry.Plane) -> List[Polyline]
Rhino.Geometry.Mesh.GetPartition(self, which: int) -> MeshPart
Rhino.Geometry.Mesh.GetSelfIntersections(self, tolerance: float, perforations: Rhino.Geometry.Polyline[]@, overlapsPolylines: bool, overlapsPolylinesResult: Rhino.Geometry.Polyline[]@, overlapsMesh: bool, overlapsMeshResult: Rhino.Geometry.Mesh@, textLog: Rhino.FileIO.TextLog, cancel: System.Threading.CancellationToken, progress: IProgress[float]) -> bool
Rhino.Geometry.Mesh.GetUnsafeLock(self, writable: bool) -> MeshUnsafeLock
Rhino.Geometry.Mesh.HealNakedEdges(self, distance: float) -> bool
Rhino.Geometry.Mesh.InvalidateCachedTextureCoordinates(self, bOnlyInvalidateCachedSurfaceParameterMapping: bool) -> None
Rhino.Geometry.Mesh.IsManifold(self) -> bool
Rhino.Geometry.Mesh.IsManifold(self, topologicalTest: bool, isOriented: System.Boolean@, hasBoundary: System.Boolean@) -> bool
Rhino.Geometry.Mesh.IsPointInside(self, point: Rhino.Geometry.Point3d, tolerance: float, strictlyIn: bool) -> bool
Rhino.Geometry.Mesh.MatchEdges(self, distance: float, rachet: bool) -> bool
Rhino.Geometry.Mesh.MergeAllCoplanarFaces(self, tolerance: float) -> bool
Rhino.Geometry.Mesh.MergeAllCoplanarFaces(self, tolerance: float, angleTolerance: float) -> bool
Rhino.Geometry.Mesh.NonConstOperation(self) -> None
Rhino.Geometry.Mesh.NormalAt(self, faceIndex: int, t0: float, t1: float, t2: float, t3: float) -> Vector3d
Rhino.Geometry.Mesh.NormalAt(self, meshPoint: Rhino.Geometry.MeshPoint) -> Vector3d
Rhino.Geometry.Mesh.Offset(self, distance: float) -> Rhino.Geometry.Mesh
Rhino.Geometry.Mesh.Offset(self, distance: float, solidify: bool) -> Rhino.Geometry.Mesh
Rhino.Geometry.Mesh.Offset(self, distance: float, solidify: bool, direction: Rhino.Geometry.Vector3d) -> Rhino.Geometry.Mesh
Rhino.Geometry.Mesh.Offset(self, distance: float, solidify: bool, direction: Rhino.Geometry.Vector3d, wallFacesOut: System.Collections.Generic.List{System.Int32}@) -> Rhino.Geometry.Mesh
Rhino.Geometry.Mesh.OnSwitchToNonConst(self) -> None
Rhino.Geometry.Mesh.PatchSingleFace(self, components: Iterable[Rhino.Geometry.ComponentIndex]) -> bool
Rhino.Geometry.Mesh.PointAt(self, faceIndex: int, t0: float, t1: float, t2: float, t3: float) -> Point3d
Rhino.Geometry.Mesh.PointAt(self, meshPoint: Rhino.Geometry.MeshPoint) -> Point3d
Rhino.Geometry.Mesh.PullCurve(self, curve: Rhino.Geometry.Curve, tolerance: float) -> PolylineCurve
Rhino.Geometry.Mesh.PullPointsToMesh(self, points: Iterable[Rhino.Geometry.Point3d]) -> List[Point3d]
Rhino.Geometry.Mesh.QuadRemesh(self, parameters: Rhino.Geometry.QuadRemeshParameters) -> Rhino.Geometry.Mesh
Rhino.Geometry.Mesh.QuadRemesh(self, parameters: Rhino.Geometry.QuadRemeshParameters, guideCurves: Iterable[Rhino.Geometry.Curve]) -> Rhino.Geometry.Mesh
Rhino.Geometry.Mesh.QuadRemeshAsync(self, faceBlocks: Iterable[int], parameters: Rhino.Geometry.QuadRemeshParameters, guideCurves: Iterable[Rhino.Geometry.Curve], progress: IProgress[int], cancelToken: System.Threading.CancellationToken) -> Task<Mesh>
Rhino.Geometry.Mesh.QuadRemeshAsync(self, parameters: Rhino.Geometry.QuadRemeshParameters, guideCurves: Iterable[Rhino.Geometry.Curve], progress: IProgress[int], cancelToken: System.Threading.CancellationToken) -> Task<Mesh>
Rhino.Geometry.Mesh.QuadRemeshAsync(self, parameters: Rhino.Geometry.QuadRemeshParameters, progress: IProgress[int], cancelToken: System.Threading.CancellationToken) -> Task<Mesh>
Rhino.Geometry.Mesh.QuadRemeshBrep(brep: Rhino.Geometry.Brep, parameters: Rhino.Geometry.QuadRemeshParameters) -> Rhino.Geometry.Mesh
Rhino.Geometry.Mesh.QuadRemeshBrep(brep: Rhino.Geometry.Brep, parameters: Rhino.Geometry.QuadRemeshParameters, guideCurves: Iterable[Rhino.Geometry.Curve]) -> Rhino.Geometry.Mesh
Rhino.Geometry.Mesh.QuadRemeshBrepAsync(brep: Rhino.Geometry.Brep, parameters: Rhino.Geometry.QuadRemeshParameters, guideCurves: Iterable[Rhino.Geometry.Curve], progress: IProgress[int], cancelToken: System.Threading.CancellationToken) -> Task<Mesh>
Rhino.Geometry.Mesh.QuadRemeshBrepAsync(brep: Rhino.Geometry.Brep, parameters: Rhino.Geometry.QuadRemeshParameters, progress: IProgress[int], cancelToken: System.Threading.CancellationToken) -> Task<Mesh>
Rhino.Geometry.Mesh.RebuildNormals(self) -> None
Rhino.Geometry.Mesh.Reduce(self, desiredPolygonCount: int, allowDistortion: bool, accuracy: int, normalizeSize: bool) -> bool
Rhino.Geometry.Mesh.Reduce(self, desiredPolygonCount: int, allowDistortion: bool, accuracy: int, normalizeSize: bool, cancelToken: System.Threading.CancellationToken, progress: IProgress[float], problemDescription: System.String@) -> bool
Rhino.Geometry.Mesh.Reduce(self, desiredPolygonCount: int, allowDistortion: bool, accuracy: int, normalizeSize: bool, cancelToken: System.Threading.CancellationToken, progress: IProgress[float], problemDescription: System.String@, threaded: bool) -> bool
Rhino.Geometry.Mesh.Reduce(self, desiredPolygonCount: int, allowDistortion: bool, accuracy: int, normalizeSize: bool, threaded: bool) -> bool
Rhino.Geometry.Mesh.Reduce(self, parameters: Rhino.Geometry.ReduceMeshParameters) -> bool
Rhino.Geometry.Mesh.Reduce(self, parameters: Rhino.Geometry.ReduceMeshParameters, threaded: bool) -> bool
Rhino.Geometry.Mesh.ReleaseUnsafeLock(self, meshData: Rhino.Geometry.MeshUnsafeLock) -> None
Rhino.Geometry.Mesh.RequireIterativeCleanup(meshes: Iterable[Rhino.Geometry.Mesh], tolerance: float) -> bool
Rhino.Geometry.Mesh.SetCachedTextureCoordinates(self, tm: Rhino.Render.TextureMapping, xf: Rhino.Geometry.Transform@) -> None
Rhino.Geometry.Mesh.SetCachedTextureCoordinatesFromMaterial(self, rhinoObject: Rhino.DocObjects.RhinoObject, material: Rhino.DocObjects.Material) -> None
Rhino.Geometry.Mesh.SetSurfaceParametersFromTextureCoordinates(self) -> bool
Rhino.Geometry.Mesh.SetTextureCoordinates(self, tm: Rhino.Render.TextureMapping, xf: Rhino.Geometry.Transform, lazy: bool) -> None
Rhino.Geometry.Mesh.SetTextureCoordinates(self, tm: Rhino.Render.TextureMapping, xf: Rhino.Geometry.Transform, lazy: bool, seamCheck: bool) -> None
Rhino.Geometry.Mesh.ShrinkWrap(geometryBases: Iterable[Rhino.Geometry.GeometryBase], parameters: Rhino.Geometry.ShrinkWrapParameters, meshingParameters: Rhino.Geometry.MeshingParameters) -> Rhino.Geometry.Mesh
Rhino.Geometry.Mesh.ShrinkWrap(geometryBases: Iterable[Rhino.Geometry.GeometryBase], parameters: Rhino.Geometry.ShrinkWrapParameters, meshingParameters: Rhino.Geometry.MeshingParameters, token: System.Threading.CancellationToken) -> Rhino.Geometry.Mesh
Rhino.Geometry.Mesh.ShrinkWrap(meshes: Iterable[Rhino.Geometry.Mesh], parameters: Rhino.Geometry.ShrinkWrapParameters) -> Rhino.Geometry.Mesh
Rhino.Geometry.Mesh.ShrinkWrap(meshes: Iterable[Rhino.Geometry.Mesh], parameters: Rhino.Geometry.ShrinkWrapParameters, token: System.Threading.CancellationToken) -> Rhino.Geometry.Mesh
Rhino.Geometry.Mesh.ShrinkWrap(pointCloud: Rhino.Geometry.PointCloud, parameters: Rhino.Geometry.ShrinkWrapParameters) -> Rhino.Geometry.Mesh
Rhino.Geometry.Mesh.ShrinkWrap(pointCloud: Rhino.Geometry.PointCloud, parameters: Rhino.Geometry.ShrinkWrapParameters, token: System.Threading.CancellationToken) -> Rhino.Geometry.Mesh
Rhino.Geometry.Mesh.ShrinkWrap(self, parameters: Rhino.Geometry.ShrinkWrapParameters) -> Rhino.Geometry.Mesh
Rhino.Geometry.Mesh.ShrinkWrap(self, parameters: Rhino.Geometry.ShrinkWrapParameters, token: System.Threading.CancellationToken) -> Rhino.Geometry.Mesh
Rhino.Geometry.Mesh.Smooth(self, smoothFactor: float, bXSmooth: bool, bYSmooth: bool, bZSmooth: bool, bFixBoundaries: bool, coordinateSystem: Rhino.Geometry.SmoothingCoordinateSystem) -> bool
Rhino.Geometry.Mesh.Smooth(self, smoothFactor: float, bXSmooth: bool, bYSmooth: bool, bZSmooth: bool, bFixBoundaries: bool, coordinateSystem: Rhino.Geometry.SmoothingCoordinateSystem, plane: Rhino.Geometry.Plane) -> bool
Rhino.Geometry.Mesh.Smooth(self, smoothFactor: float, numSteps: int, bXSmooth: bool, bYSmooth: bool, bZSmooth: bool, bFixBoundaries: bool, coordinateSystem: Rhino.Geometry.SmoothingCoordinateSystem, plane: Rhino.Geometry.Plane) -> bool
Rhino.Geometry.Mesh.Smooth(self, vertexIndices: Iterable[int], smoothFactor: float, bXSmooth: bool, bYSmooth: bool, bZSmooth: bool, bFixBoundaries: bool, coordinateSystem: Rhino.Geometry.SmoothingCoordinateSystem, plane: Rhino.Geometry.Plane) -> bool
Rhino.Geometry.Mesh.Smooth(self, vertexIndices: Iterable[int], smoothFactor: float, numSteps: int, bXSmooth: bool, bYSmooth: bool, bZSmooth: bool, bFixBoundaries: bool, coordinateSystem: Rhino.Geometry.SmoothingCoordinateSystem, plane: Rhino.Geometry.Plane) -> bool
Rhino.Geometry.Mesh.SolidOrientation(self) -> int
Rhino.Geometry.Mesh.Split(self, mesh: Rhino.Geometry.Mesh) -> List[Rhino.Geometry.Mesh]
Rhino.Geometry.Mesh.Split(self, meshes: Iterable[Rhino.Geometry.Mesh]) -> List[Rhino.Geometry.Mesh]
Rhino.Geometry.Mesh.Split(self, meshes: Iterable[Rhino.Geometry.Mesh], tolerance: float, splitAtCoplanar: bool, createNgons: bool, textLog: Rhino.FileIO.TextLog, cancel: System.Threading.CancellationToken, progress: IProgress[float]) -> List[Rhino.Geometry.Mesh]
Rhino.Geometry.Mesh.Split(self, meshes: Iterable[Rhino.Geometry.Mesh], tolerance: float, splitAtCoplanar: bool, textLog: Rhino.FileIO.TextLog, cancel: System.Threading.CancellationToken, progress: IProgress[float]) -> List[Rhino.Geometry.Mesh]
Rhino.Geometry.Mesh.Split(self, plane: Rhino.Geometry.Plane) -> List[Rhino.Geometry.Mesh]
Rhino.Geometry.Mesh.SplitDisjointPieces(self) -> List[Rhino.Geometry.Mesh]
Rhino.Geometry.Mesh.SplitWithProjectedPolylines(self, curves: Iterable[Rhino.Geometry.PolylineCurve], tolerance: float) -> List[Rhino.Geometry.Mesh]
Rhino.Geometry.Mesh.SplitWithProjectedPolylines(self, curves: Iterable[Rhino.Geometry.PolylineCurve], tolerance: float, textLog: Rhino.FileIO.TextLog, cancel: System.Threading.CancellationToken, progress: IProgress[float]) -> List[Rhino.Geometry.Mesh]
Rhino.Geometry.Mesh.Subdivide(self) -> bool
Rhino.Geometry.Mesh.Subdivide(self, faceIndices: Iterable[int]) -> bool
Rhino.Geometry.Mesh.UnifyNormals(self) -> int
Rhino.Geometry.Mesh.UnifyNormals(self, countOnly: bool) -> int
Rhino.Geometry.Mesh.Unweld(self, angleToleranceRadians: float, modifyNormals: bool) -> None
Rhino.Geometry.Mesh.UnweldEdge(self, edgeIndices: Iterable[int], modifyNormals: bool) -> bool
Rhino.Geometry.Mesh.UnweldVertices(self, topologyVertexIndices: Iterable[int], modifyNormals: bool) -> bool
Rhino.Geometry.Mesh.Volume(self) -> float
Rhino.Geometry.Mesh.Weld(self, angleToleranceRadians: float) -> None
Rhino.Geometry.Mesh.WithDisplacement(self, displacement: Rhino.Geometry.MeshDisplacementInfo) -> Rhino.Geometry.Mesh
Rhino.Geometry.Mesh.WithEdgeSoftening(self, softeningRadius: float, chamfer: bool, faceted: bool, force: bool, angleThreshold: float) -> Rhino.Geometry.Mesh
Rhino.Geometry.Mesh.WithShutLining(self, faceted: bool, tolerance: float, curves: Iterable[Rhino.Geometry.ShutLiningCurveInfo]) -> Rhino.Geometry.Mesh
Rhino.Geometry.Mesh.[ObsoleteAttribute(self, arg1: Rhino.Geometry.Brep) -> None
Rhino.Geometry.Mesh.[ObsoleteAttribute(self, arg1: Rhino.Geometry.Curve, arg2: Rhino.Geometry.MeshingParameters) -> None
Rhino.Geometry.Mesh.[ObsoleteAttribute(self, arg1: Rhino.Geometry.Mesh, arg2: Rhino.Geometry.Plane) -> None
Rhino.Geometry.Mesh.[ObsoleteAttribute(self, arg1: Rhino.Geometry.Mesh, arg2: Rhino.Geometry.Point3d, arg3: Rhino.Geometry.Point3d, arg4: float) -> None
Rhino.Geometry.Mesh.__init__(self) -> None
Rhino.Geometry.Mesh.__init__(self, info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext) -> None
Rhino.Geometry.MeshBooleanOptions.__init__(self) -> None
Rhino.Geometry.MeshCheckParameters.Defaults() -> Rhino.Geometry.MeshCheckParameters
Rhino.Geometry.MeshDisplacementInfo.__init__(self, texture: Rhino.Render.RenderTexture, mapping: Rhino.Render.TextureMapping) -> None
Rhino.Geometry.MeshExtruder.Dispose(self) -> None
Rhino.Geometry.MeshExtruder.ExtrudedMesh(self, extrudedMeshOut: Rhino.Geometry.Mesh@) -> bool
Rhino.Geometry.MeshExtruder.ExtrudedMesh(self, extrudedMeshOut: Rhino.Geometry.Mesh@, componentIndicesOut: System.Collections.Generic.List{Rhino.Geometry.ComponentIndex}@) -> bool
Rhino.Geometry.MeshExtruder.Finalize(self) -> None
Rhino.Geometry.MeshExtruder.GetWallFaces(self) -> List<int>
Rhino.Geometry.MeshExtruder.__init__(self, inputMesh: Rhino.Geometry.Mesh, componentIndices: Iterable[Rhino.Geometry.ComponentIndex]) -> None
Rhino.Geometry.MeshFace.!=(a: Rhino.Geometry.MeshFace, b: Rhino.Geometry.MeshFace) -> operator
Rhino.Geometry.MeshFace.==(a: Rhino.Geometry.MeshFace, b: Rhino.Geometry.MeshFace) -> operator
Rhino.Geometry.MeshFace.CompareTo(self, other: Rhino.Geometry.MeshFace) -> int
Rhino.Geometry.MeshFace.Equals(self, obj: Any) -> bool
Rhino.Geometry.MeshFace.Equals(self, other: Rhino.Geometry.MeshFace) -> bool
Rhino.Geometry.MeshFace.Flip(self) -> Rhino.Geometry.MeshFace
Rhino.Geometry.MeshFace.GetHashCode(self) -> int
Rhino.Geometry.MeshFace.IsValid(self) -> bool
Rhino.Geometry.MeshFace.IsValid(self, points: List[Rhino.Geometry.Point3d]) -> bool
Rhino.Geometry.MeshFace.IsValid(self, vertexCount: int) -> bool
Rhino.Geometry.MeshFace.IsValidEx(self, points: Rhino.Geometry.Point3d[]@) -> bool
Rhino.Geometry.MeshFace.Repair(self, points: List[Rhino.Geometry.Point3d]) -> bool
Rhino.Geometry.MeshFace.RepairEx(self, points: Rhino.Geometry.Point3d[]@) -> bool
Rhino.Geometry.MeshFace.Set(self, a: int, b: int, c: int) -> None
Rhino.Geometry.MeshFace.Set(self, a: int, b: int, c: int, d: int) -> None
Rhino.Geometry.MeshFace.ToString(self) -> str
Rhino.Geometry.MeshFace.__init__(self, a: int, b: int, c: int) -> None
Rhino.Geometry.MeshFace.__init__(self, a: int, b: int, c: int, d: int) -> None
Rhino.Geometry.MeshNgon.!=(a: Rhino.Geometry.MeshNgon, b: Rhino.Geometry.MeshNgon) -> operator
Rhino.Geometry.MeshNgon.==(a: Rhino.Geometry.MeshNgon, b: Rhino.Geometry.MeshNgon) -> operator
Rhino.Geometry.MeshNgon.BoundaryVertexIndexList(self) -> List[uint]
Rhino.Geometry.MeshNgon.CompareTo(self, otherNgon: Rhino.Geometry.MeshNgon) -> int
Rhino.Geometry.MeshNgon.Create(meshVertexIndexList: List[int], meshFaceIndexList: List[int]) -> Rhino.Geometry.MeshNgon
Rhino.Geometry.MeshNgon.Equals(self, otherNgon: Rhino.Geometry.MeshNgon) -> bool
Rhino.Geometry.MeshNgon.Equals(self, otherObj: Any) -> bool
Rhino.Geometry.MeshNgon.FaceIndexList(self) -> List[uint]
Rhino.Geometry.MeshNgon.GetHashCode(self) -> int
Rhino.Geometry.MeshNgon.Set(self, meshVertexIndexList: List[int], meshFaceIndexList: List[int]) -> None
Rhino.Geometry.MeshNgon.ToString(self) -> str
Rhino.Geometry.MeshPoint.GetTriangle(self, a: System.Int32@, b: System.Int32@, c: System.Int32@) -> bool
Rhino.Geometry.MeshRefinements.RefinementSettings.__init__(self) -> None
Rhino.Geometry.MeshThicknessMeasurement.__init__(self, meshIndex: int, vertexIndex: int, thickness: float, point: Rhino.Geometry.Point3d, oppositePoint: Rhino.Geometry.Point3d) -> None
Rhino.Geometry.MeshUnsafeLock.FaceNormalsArray(self, length: System.Int32@) -> Vector3f*
Rhino.Geometry.MeshUnsafeLock.FacesArray(self, length: System.Int32@) -> MeshFace*
Rhino.Geometry.MeshUnsafeLock.NormalVector3fArray(self, length: System.Int32@) -> Vector3f*
Rhino.Geometry.MeshUnsafeLock.Release(self) -> None
Rhino.Geometry.MeshUnsafeLock.VertexColorsArray(self, length: System.Int32@) -> int*
Rhino.Geometry.MeshUnsafeLock.VertexPoint3dArray(self, length: System.Int32@) -> Point3d*
Rhino.Geometry.MeshUnsafeLock.VertexPoint3fArray(self, length: System.Int32@) -> Point3f*
Rhino.Geometry.MeshUnwrapper.Dispose(self) -> None
Rhino.Geometry.MeshUnwrapper.Finalize(self) -> None
Rhino.Geometry.MeshUnwrapper.Unwrap(self, method: Rhino.Geometry.MeshUnwrapMethod) -> bool
Rhino.Geometry.MeshUnwrapper.__init__(self, mesh: Rhino.Geometry.Mesh) -> None
Rhino.Geometry.MeshUnwrapper.__init__(self, meshes: Iterable[Rhino.Geometry.Mesh]) -> None
Rhino.Geometry.MeshingParameters.!=(mp1: Rhino.Geometry.MeshingParameters, mp2: Rhino.Geometry.MeshingParameters) -> operator
Rhino.Geometry.MeshingParameters.==(mp1: Rhino.Geometry.MeshingParameters, mp2: Rhino.Geometry.MeshingParameters) -> operator
Rhino.Geometry.MeshingParameters.CopyFrom(self, source: Rhino.Geometry.MeshingParameters) -> None
Rhino.Geometry.MeshingParameters.Dispose(self) -> None
Rhino.Geometry.MeshingParameters.Dispose(self, disposing: bool) -> None
Rhino.Geometry.MeshingParameters.DocumentCurrentSetting(doc: Rhino.RhinoDoc) -> Rhino.Geometry.MeshingParameters
Rhino.Geometry.MeshingParameters.Equals(self, obj: Any) -> bool
Rhino.Geometry.MeshingParameters.Equals(self, other: Rhino.Geometry.MeshingParameters) -> bool
Rhino.Geometry.MeshingParameters.Finalize(self) -> None
Rhino.Geometry.MeshingParameters.FromEncodedString(value: str) -> Rhino.Geometry.MeshingParameters
Rhino.Geometry.MeshingParameters.GetHashCode(self) -> int
Rhino.Geometry.MeshingParameters.GetObjectData(self, info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext) -> None
Rhino.Geometry.MeshingParameters.SetSubDDisplayParameters(self, subDDisplayParameters: Rhino.Geometry.SubDDisplayParameters) -> None
Rhino.Geometry.MeshingParameters.SubDDisplayParameters(self) -> SubDDisplayParameters
Rhino.Geometry.MeshingParameters.ToEncodedString(self) -> str
Rhino.Geometry.MeshingParameters.__init__(self) -> None
Rhino.Geometry.MeshingParameters.__init__(self, density: float) -> None
Rhino.Geometry.MeshingParameters.__init__(self, density: float, minimumEdgeLength: float) -> None
Rhino.Geometry.MeshingParameters.__init__(self, info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext) -> None
Rhino.Geometry.MeshingParameters.__init__(self, source: Rhino.Geometry.MeshingParameters) -> None
Rhino.Geometry.MorphControl.Morph(self, geometry: Rhino.Geometry.GeometryBase) -> bool
Rhino.Geometry.MorphControl.__init__(self, info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext) -> None
Rhino.Geometry.MorphControl.__init__(self, originCurve: Rhino.Geometry.NurbsCurve, targetCurve: Rhino.Geometry.NurbsCurve) -> None
Rhino.Geometry.Morphs.BendSpaceMorph.Dispose(self) -> None
Rhino.Geometry.Morphs.BendSpaceMorph.Dispose(self, disposing: bool) -> None
Rhino.Geometry.Morphs.BendSpaceMorph.Finalize(self) -> None
Rhino.Geometry.Morphs.BendSpaceMorph.MorphPoint(self, point: Rhino.Geometry.Point3d) -> Point3d
Rhino.Geometry.Morphs.BendSpaceMorph.__init__(self, start: Rhino.Geometry.Point3d, end: Rhino.Geometry.Point3d, point: Rhino.Geometry.Point3d, angle: float, straight: bool, symmetric: bool) -> None
Rhino.Geometry.Morphs.BendSpaceMorph.__init__(self, start: Rhino.Geometry.Point3d, end: Rhino.Geometry.Point3d, point: Rhino.Geometry.Point3d, straight: bool, symmetric: bool) -> None
Rhino.Geometry.Morphs.FlowSpaceMorph.Dispose(self) -> None
Rhino.Geometry.Morphs.FlowSpaceMorph.Dispose(self, disposing: bool) -> None
Rhino.Geometry.Morphs.FlowSpaceMorph.Finalize(self) -> None
Rhino.Geometry.Morphs.FlowSpaceMorph.MorphPoint(self, point: Rhino.Geometry.Point3d) -> Point3d
Rhino.Geometry.Morphs.FlowSpaceMorph.__init__(self, curve0: Rhino.Geometry.Curve, curve1: Rhino.Geometry.Curve, preventStretching: bool) -> None
Rhino.Geometry.Morphs.FlowSpaceMorph.__init__(self, curve0: Rhino.Geometry.Curve, curve1: Rhino.Geometry.Curve, reverseCurve0: bool, reverseCurve1: bool, preventStretching: bool) -> None
Rhino.Geometry.Morphs.MaelstromSpaceMorph.Dispose(self) -> None
Rhino.Geometry.Morphs.MaelstromSpaceMorph.Dispose(self, disposing: bool) -> None
Rhino.Geometry.Morphs.MaelstromSpaceMorph.Finalize(self) -> None
Rhino.Geometry.Morphs.MaelstromSpaceMorph.MorphPoint(self, point: Rhino.Geometry.Point3d) -> Point3d
Rhino.Geometry.Morphs.MaelstromSpaceMorph.__init__(self, plane: Rhino.Geometry.Plane, radius0: float, radius1: float, angle: float) -> None
Rhino.Geometry.Morphs.SplopSpaceMorph.Dispose(self) -> None
Rhino.Geometry.Morphs.SplopSpaceMorph.Dispose(self, disposing: bool) -> None
Rhino.Geometry.Morphs.SplopSpaceMorph.Finalize(self) -> None
Rhino.Geometry.Morphs.SplopSpaceMorph.MorphPoint(self, point: Rhino.Geometry.Point3d) -> Point3d
Rhino.Geometry.Morphs.SplopSpaceMorph.__init__(self, plane: Rhino.Geometry.Plane, surface: Rhino.Geometry.Surface, surfaceParam: Rhino.Geometry.Point2d) -> None
Rhino.Geometry.Morphs.SplopSpaceMorph.__init__(self, plane: Rhino.Geometry.Plane, surface: Rhino.Geometry.Surface, surfaceParam: Rhino.Geometry.Point2d, scale: float) -> None
Rhino.Geometry.Morphs.SplopSpaceMorph.__init__(self, plane: Rhino.Geometry.Plane, surface: Rhino.Geometry.Surface, surfaceParam: Rhino.Geometry.Point2d, scale: float, angle: float) -> None
Rhino.Geometry.Morphs.SporphSpaceMorph.Dispose(self) -> None
Rhino.Geometry.Morphs.SporphSpaceMorph.Dispose(self, disposing: bool) -> None
Rhino.Geometry.Morphs.SporphSpaceMorph.Finalize(self) -> None
Rhino.Geometry.Morphs.SporphSpaceMorph.MorphPoint(self, point: Rhino.Geometry.Point3d) -> Point3d
Rhino.Geometry.Morphs.SporphSpaceMorph.__init__(self, surface0: Rhino.Geometry.Surface, surface1: Rhino.Geometry.Surface) -> None
Rhino.Geometry.Morphs.SporphSpaceMorph.__init__(self, surface0: Rhino.Geometry.Surface, surface1: Rhino.Geometry.Surface, surface0Param: Rhino.Geometry.Point2d, surface1Param: Rhino.Geometry.Point2d) -> None
Rhino.Geometry.Morphs.StretchSpaceMorph.Dispose(self) -> None
Rhino.Geometry.Morphs.StretchSpaceMorph.Dispose(self, disposing: bool) -> None
Rhino.Geometry.Morphs.StretchSpaceMorph.Finalize(self) -> None
Rhino.Geometry.Morphs.StretchSpaceMorph.MorphPoint(self, point: Rhino.Geometry.Point3d) -> Point3d
Rhino.Geometry.Morphs.StretchSpaceMorph.__init__(self, start: Rhino.Geometry.Point3d, end: Rhino.Geometry.Point3d, length: float) -> None
Rhino.Geometry.Morphs.StretchSpaceMorph.__init__(self, start: Rhino.Geometry.Point3d, end: Rhino.Geometry.Point3d, point: Rhino.Geometry.Point3d) -> None
Rhino.Geometry.Morphs.TaperSpaceMorph.Dispose(self) -> None
Rhino.Geometry.Morphs.TaperSpaceMorph.Dispose(self, disposing: bool) -> None
Rhino.Geometry.Morphs.TaperSpaceMorph.Finalize(self) -> None
Rhino.Geometry.Morphs.TaperSpaceMorph.MorphPoint(self, point: Rhino.Geometry.Point3d) -> Point3d
Rhino.Geometry.Morphs.TaperSpaceMorph.__init__(self, start: Rhino.Geometry.Point3d, end: Rhino.Geometry.Point3d, startRadius: float, endRadius: float, bFlat: bool, infiniteTaper: bool) -> None
Rhino.Geometry.Morphs.TwistSpaceMorph.Dispose(self) -> None
Rhino.Geometry.Morphs.TwistSpaceMorph.Dispose(self, disposing: bool) -> None
Rhino.Geometry.Morphs.TwistSpaceMorph.Finalize(self) -> None
Rhino.Geometry.Morphs.TwistSpaceMorph.MorphPoint(self, point: Rhino.Geometry.Point3d) -> Point3d
Rhino.Geometry.Morphs.TwistSpaceMorph.__init__(self) -> None
Rhino.Geometry.NurbsCurve.Append(self, nurbsCurve: Rhino.Geometry.NurbsCurve) -> bool
Rhino.Geometry.NurbsCurve.ConvertSpanToBezier(self, spanIndex: int) -> BezierCurve
Rhino.Geometry.NurbsCurve.Create(periodic: bool, degree: int, points: Iterable[Rhino.Geometry.Point3d]) -> Rhino.Geometry.NurbsCurve
Rhino.Geometry.NurbsCurve.CreateFromArc(arc: Rhino.Geometry.Arc) -> Rhino.Geometry.NurbsCurve
Rhino.Geometry.NurbsCurve.CreateFromArc(arc: Rhino.Geometry.Arc, degree: int, cvCount: int) -> Rhino.Geometry.NurbsCurve
Rhino.Geometry.NurbsCurve.CreateFromCircle(circle: Rhino.Geometry.Circle) -> Rhino.Geometry.NurbsCurve
Rhino.Geometry.NurbsCurve.CreateFromCircle(circle: Rhino.Geometry.Circle, degree: int, cvCount: int) -> Rhino.Geometry.NurbsCurve
Rhino.Geometry.NurbsCurve.CreateFromEllipse(ellipse: Rhino.Geometry.Ellipse) -> Rhino.Geometry.NurbsCurve
Rhino.Geometry.NurbsCurve.CreateFromFitPoints(points: Iterable[Rhino.Geometry.Point3d], tolerance: float, degree: int, periodic: bool, startTangent: Rhino.Geometry.Vector3d, endTangent: Rhino.Geometry.Vector3d) -> Rhino.Geometry.NurbsCurve
Rhino.Geometry.NurbsCurve.CreateFromFitPoints(points: Iterable[Rhino.Geometry.Point3d], tolerance: float, periodic: bool) -> Rhino.Geometry.NurbsCurve
Rhino.Geometry.NurbsCurve.CreateFromLine(line: Rhino.Geometry.Line) -> Rhino.Geometry.NurbsCurve
Rhino.Geometry.NurbsCurve.CreateHSpline(points: Iterable[Rhino.Geometry.Point3d]) -> Rhino.Geometry.NurbsCurve
Rhino.Geometry.NurbsCurve.CreateHSpline(points: Iterable[Rhino.Geometry.Point3d], startTangent: Rhino.Geometry.Vector3d, endTangent: Rhino.Geometry.Vector3d) -> Rhino.Geometry.NurbsCurve
Rhino.Geometry.NurbsCurve.CreateNonRationalArcBezier(degree: int, center: Rhino.Geometry.Point3d, start: Rhino.Geometry.Point3d, end: Rhino.Geometry.Point3d, radius: float, tanSlider: float, midSlider: float) -> Rhino.Geometry.NurbsCurve
Rhino.Geometry.NurbsCurve.CreateParabolaFromFocus(focus: Rhino.Geometry.Point3d, startPoint: Rhino.Geometry.Point3d, endPoint: Rhino.Geometry.Point3d) -> Rhino.Geometry.NurbsCurve
Rhino.Geometry.NurbsCurve.CreateParabolaFromPoints(startPoint: Rhino.Geometry.Point3d, innerPoint: Rhino.Geometry.Point3d, endPoint: Rhino.Geometry.Point3d) -> Rhino.Geometry.NurbsCurve
Rhino.Geometry.NurbsCurve.CreateParabolaFromVertex(vertex: Rhino.Geometry.Point3d, startPoint: Rhino.Geometry.Point3d, endPoint: Rhino.Geometry.Point3d) -> Rhino.Geometry.NurbsCurve
Rhino.Geometry.NurbsCurve.CreatePlanarRailFrames(self, parameters: Iterable[float], normal: Rhino.Geometry.Vector3d) -> List[Plane]
Rhino.Geometry.NurbsCurve.CreateRailFrames(self, parameters: Iterable[float]) -> List[Plane]
Rhino.Geometry.NurbsCurve.CreateSpiral(axisStart: Rhino.Geometry.Point3d, axisDir: Rhino.Geometry.Vector3d, radiusPoint: Rhino.Geometry.Point3d, pitch: float, turnCount: float, radius0: float, radius1: float) -> Rhino.Geometry.NurbsCurve
Rhino.Geometry.NurbsCurve.CreateSpiral(railCurve: Rhino.Geometry.Curve, t0: float, t1: float, radiusPoint: Rhino.Geometry.Point3d, pitch: float, turnCount: float, radius0: float, radius1: float, pointsPerTurn: int) -> Rhino.Geometry.NurbsCurve
Rhino.Geometry.NurbsCurve.CreateSubDFriendly(curve: Rhino.Geometry.Curve) -> Rhino.Geometry.NurbsCurve
Rhino.Geometry.NurbsCurve.CreateSubDFriendly(curve: Rhino.Geometry.Curve, pointCount: int, periodicClosedCurve: bool) -> Rhino.Geometry.NurbsCurve
Rhino.Geometry.NurbsCurve.CreateSubDFriendly(points: Iterable[Rhino.Geometry.Point3d], interpolatePoints: bool, periodicClosedCurve: bool) -> Rhino.Geometry.NurbsCurve
Rhino.Geometry.NurbsCurve.EpsilonEquals(self, other: Rhino.Geometry.NurbsCurve, epsilon: float) -> bool
Rhino.Geometry.NurbsCurve.GrevilleParameter(self, index: int) -> float
Rhino.Geometry.NurbsCurve.GrevilleParameters(self) -> List[float]
Rhino.Geometry.NurbsCurve.GrevillePoint(self, index: int) -> Point3d
Rhino.Geometry.NurbsCurve.GrevillePoints(self) -> Point3dList
Rhino.Geometry.NurbsCurve.GrevillePoints(self, all: bool) -> Point3dList
Rhino.Geometry.NurbsCurve.IncreaseDegree(self, desiredDegree: int) -> bool
Rhino.Geometry.NurbsCurve.IsDuplicate(curveA: Rhino.Geometry.NurbsCurve, curveB: Rhino.Geometry.NurbsCurve, ignoreParameterization: bool, tolerance: float) -> bool
Rhino.Geometry.NurbsCurve.MakeCompatible(curves: Iterable[Rhino.Geometry.Curve], startPt: Rhino.Geometry.Point3d, endPt: Rhino.Geometry.Point3d, simplifyMethod: int, numPoints: int, refitTolerance: float, angleTolerance: float) -> List[Rhino.Geometry.NurbsCurve]
Rhino.Geometry.NurbsCurve.MakePiecewiseBezier(self, setEndWeightsToOne: bool) -> bool
Rhino.Geometry.NurbsCurve.MatchToCurve(self, targetCurve: Rhino.Geometry.Curve, maxEndDistance: float, maxInteriorDistance: float, matchTolerance: float, maxLevel: int) -> Rhino.Geometry.NurbsCurve
Rhino.Geometry.NurbsCurve.Reparameterize(self, c: float) -> bool
Rhino.Geometry.NurbsCurve.SetEndCondition(self, arg1: bool, arg2: Rhino.Geometry.NurbsCurve.NurbsCurveEndConditionType, arg3: Rhino.Geometry.Point3d, arg4: Rhino.Geometry.Vector3d) -> bool
Rhino.Geometry.NurbsCurve.SetEndCondition(self, arg1: bool, arg2: Rhino.Geometry.NurbsCurve.NurbsCurveEndConditionType, arg3: Rhino.Geometry.Point3d, arg4: Rhino.Geometry.Vector3d, arg5: Rhino.Geometry.Vector3d) -> bool
Rhino.Geometry.NurbsCurve.SetGrevillePoints(self, points: Iterable[Rhino.Geometry.Point3d]) -> bool
Rhino.Geometry.NurbsCurve.UVNDirectionsAt(self, t: float, uDir: Rhino.Geometry.Vector3d@, vDir: Rhino.Geometry.Vector3d@, nDir: Rhino.Geometry.Vector3d@) -> bool
Rhino.Geometry.NurbsCurve.__init__(self, degree: int, pointCount: int) -> None
Rhino.Geometry.NurbsCurve.__init__(self, dimension: int, rational: bool, order: int, pointCount: int) -> None
Rhino.Geometry.NurbsCurve.__init__(self, info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext) -> None
Rhino.Geometry.NurbsCurve.__init__(self, other: Rhino.Geometry.NurbsCurve) -> None
Rhino.Geometry.NurbsSurface.ConvertSpanToBezier(self, spanIndex0: int, spanIndex1: int) -> BezierSurface
Rhino.Geometry.NurbsSurface.CopyFrom(self, other: Rhino.Geometry.NurbsSurface) -> None
Rhino.Geometry.NurbsSurface.Create(dimension: int, isRational: bool, order0: int, order1: int, controlPointCount0: int, controlPointCount1: int) -> Rhino.Geometry.NurbsSurface
Rhino.Geometry.NurbsSurface.CreateCurveOnSurface(surface: Rhino.Geometry.Surface, points: Iterable[Rhino.Geometry.Point2d], tolerance: float, periodic: bool) -> NurbsCurve
Rhino.Geometry.NurbsSurface.CreateCurveOnSurfacePoints(surface: Rhino.Geometry.Surface, fixedPoints: Iterable[Rhino.Geometry.Point2d], tolerance: float, periodic: bool, initCount: int, levels: int) -> List[Point2d]
Rhino.Geometry.NurbsSurface.CreateFromCone(cone: Rhino.Geometry.Cone) -> Rhino.Geometry.NurbsSurface
Rhino.Geometry.NurbsSurface.CreateFromCorners(corner1: Rhino.Geometry.Point3d, corner2: Rhino.Geometry.Point3d, corner3: Rhino.Geometry.Point3d) -> Rhino.Geometry.NurbsSurface
Rhino.Geometry.NurbsSurface.CreateFromCorners(corner1: Rhino.Geometry.Point3d, corner2: Rhino.Geometry.Point3d, corner3: Rhino.Geometry.Point3d, corner4: Rhino.Geometry.Point3d) -> Rhino.Geometry.NurbsSurface
Rhino.Geometry.NurbsSurface.CreateFromCorners(corner1: Rhino.Geometry.Point3d, corner2: Rhino.Geometry.Point3d, corner3: Rhino.Geometry.Point3d, corner4: Rhino.Geometry.Point3d, tolerance: float) -> Rhino.Geometry.NurbsSurface
Rhino.Geometry.NurbsSurface.CreateFromCylinder(cylinder: Rhino.Geometry.Cylinder) -> Rhino.Geometry.NurbsSurface
Rhino.Geometry.NurbsSurface.CreateFromPlane(plane: Rhino.Geometry.Plane, uInterval: Rhino.Geometry.Interval, vInterval: Rhino.Geometry.Interval, uDegree: int, vDegree: int, uPointCount: int, vPointCount: int) -> Rhino.Geometry.NurbsSurface
Rhino.Geometry.NurbsSurface.CreateFromPoints(points: Iterable[Rhino.Geometry.Point3d], uCount: int, vCount: int, uDegree: int, vDegree: int) -> Rhino.Geometry.NurbsSurface
Rhino.Geometry.NurbsSurface.CreateFromSphere(sphere: Rhino.Geometry.Sphere) -> Rhino.Geometry.NurbsSurface
Rhino.Geometry.NurbsSurface.CreateFromTorus(torus: Rhino.Geometry.Torus) -> Rhino.Geometry.NurbsSurface
Rhino.Geometry.NurbsSurface.CreateNetworkSurface(curves: Iterable[Rhino.Geometry.Curve], continuity: int, edgeTolerance: float, interiorTolerance: float, angleTolerance: float, error: System.Int32@) -> Rhino.Geometry.NurbsSurface
Rhino.Geometry.NurbsSurface.CreateNetworkSurface(uCurves: Iterable[Rhino.Geometry.Curve], uContinuityStart: int, uContinuityEnd: int, vCurves: Iterable[Rhino.Geometry.Curve], vContinuityStart: int, vContinuityEnd: int, edgeTolerance: float, interiorTolerance: float, angleTolerance: float, error: System.Int32@) -> Rhino.Geometry.NurbsSurface
Rhino.Geometry.NurbsSurface.CreateRailRevolvedSurface(profile: Rhino.Geometry.Curve, rail: Rhino.Geometry.Curve, axis: Rhino.Geometry.Line, scaleHeight: bool) -> Rhino.Geometry.NurbsSurface
Rhino.Geometry.NurbsSurface.CreateRuledSurface(curveA: Rhino.Geometry.Curve, curveB: Rhino.Geometry.Curve) -> Rhino.Geometry.NurbsSurface
Rhino.Geometry.NurbsSurface.CreateSubDFriendly(surface: Rhino.Geometry.Surface) -> Rhino.Geometry.NurbsSurface
Rhino.Geometry.NurbsSurface.CreateThroughPoints(points: Iterable[Rhino.Geometry.Point3d], uCount: int, vCount: int, uDegree: int, vDegree: int, uClosed: bool, vClosed: bool) -> Rhino.Geometry.NurbsSurface
Rhino.Geometry.NurbsSurface.EpsilonEquals(self, other: Rhino.Geometry.NurbsSurface, epsilon: float) -> bool
Rhino.Geometry.NurbsSurface.FindClosestIsoCurve(self, testPoint: Rhino.Geometry.Point3d) -> IsoStatus
Rhino.Geometry.NurbsSurface.IncreaseDegreeU(self, desiredDegree: int) -> bool
Rhino.Geometry.NurbsSurface.IncreaseDegreeV(self, desiredDegree: int) -> bool
Rhino.Geometry.NurbsSurface.MakeCompatible(surface0: Rhino.Geometry.Surface, surface1: Rhino.Geometry.Surface, nurb0: Rhino.Geometry.NurbsSurface@, nurb1: Rhino.Geometry.NurbsSurface@) -> bool
Rhino.Geometry.NurbsSurface.MakeNonRational(self) -> bool
Rhino.Geometry.NurbsSurface.MakeRational(self) -> bool
Rhino.Geometry.NurbsSurface.MatchToCurve(self, side: Rhino.Geometry.IsoStatus, targetCurve: Rhino.Geometry.Curve, maxEndDistance: float, maxInteriorDistance: float, matchTolerance: float, maxLevel: int) -> Rhino.Geometry.NurbsSurface
Rhino.Geometry.NurbsSurface.UVNDirectionsAt(self, u: float, v: float, uDir: Rhino.Geometry.Vector3d@, vDir: Rhino.Geometry.Vector3d@, nDir: Rhino.Geometry.Vector3d@) -> bool
Rhino.Geometry.NurbsSurface.__init__(self, info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext) -> None
Rhino.Geometry.NurbsSurface.__init__(self, other: Rhino.Geometry.NurbsSurface) -> None
Rhino.Geometry.OrdinateDimension.AdjustFromPoints(self, arg1: Rhino.Geometry.Plane, arg2: Rhino.Geometry.OrdinateDimension.MeasuredDirection, arg3: Rhino.Geometry.Point3d, arg4: Rhino.Geometry.Point3d, arg5: Rhino.Geometry.Point3d, arg6: float, arg7: float) -> bool
Rhino.Geometry.OrdinateDimension.Create(arg1: Rhino.DocObjects.DimensionStyle, arg2: Rhino.Geometry.Plane, arg3: Rhino.Geometry.OrdinateDimension.MeasuredDirection, arg4: Rhino.Geometry.Point3d, arg5: Rhino.Geometry.Point3d, arg6: Rhino.Geometry.Point3d, arg7: float, arg8: float) -> Rhino.Geometry.OrdinateDimension
Rhino.Geometry.OrdinateDimension.Get3dPoints(self, basepoint: Rhino.Geometry.Point3d@, defpoint: Rhino.Geometry.Point3d@, leaderpoint: Rhino.Geometry.Point3d@, kinkpoint1: Rhino.Geometry.Point3d@, kinkpoint2: Rhino.Geometry.Point3d@) -> bool
Rhino.Geometry.OrdinateDimension.GetDisplayLines(self, style: Rhino.DocObjects.DimensionStyle, scale: float, lines: System.Collections.Generic.IEnumerable{Rhino.Geometry.Line}@) -> bool
Rhino.Geometry.OrdinateDimension.GetDistanceDisplayText(self, unitsystem: Rhino.UnitSystem, style: Rhino.DocObjects.DimensionStyle) -> str
Rhino.Geometry.OrdinateDimension.GetTextRectangle(self, corners: Rhino.Geometry.Point3d[]@) -> bool
Rhino.Geometry.OrdinateDimension.__init__(self) -> None
Rhino.Geometry.OrdinateDimension.__init__(self, arg1: Rhino.Geometry.Plane, arg2: Rhino.Geometry.OrdinateDimension.MeasuredDirection, arg3: Rhino.Geometry.Point3d, arg4: Rhino.Geometry.Point3d, arg5: Rhino.Geometry.Point3d, arg6: float, arg7: float) -> None
Rhino.Geometry.OrdinateDimension.__init__(self, info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext) -> None
Rhino.Geometry.Particle.Update(self) -> None
Rhino.Geometry.Particle.__init__(self) -> None
Rhino.Geometry.ParticleSystem.Add(self, particle: Rhino.Geometry.Particle) -> bool
Rhino.Geometry.ParticleSystem.Clear(self) -> None
Rhino.Geometry.ParticleSystem.GetEnumerator(self) -> IEnumerator<Particle>
Rhino.Geometry.ParticleSystem.Remove(self, particle: Rhino.Geometry.Particle) -> None
Rhino.Geometry.ParticleSystem.Update(self) -> None
Rhino.Geometry.ParticleSystem.__init__(self) -> None
Rhino.Geometry.Plane.!=(a: Rhino.Geometry.Plane, b: Rhino.Geometry.Plane) -> operator
Rhino.Geometry.Plane.==(a: Rhino.Geometry.Plane, b: Rhino.Geometry.Plane) -> operator
Rhino.Geometry.Plane.Clone(self) -> Rhino.Geometry.Plane
Rhino.Geometry.Plane.ClosestParameter(self, testPoint: Rhino.Geometry.Point3d, s: System.Double@, t: System.Double@) -> bool
Rhino.Geometry.Plane.ClosestPoint(self, testPoint: Rhino.Geometry.Point3d) -> Point3d
Rhino.Geometry.Plane.CreateFromFrame(origin: Rhino.Geometry.Point3d, xDirection: Rhino.Geometry.Vector3d, yDirection: Rhino.Geometry.Vector3d) -> Rhino.Geometry.Plane
Rhino.Geometry.Plane.CreateFromNormal(origin: Rhino.Geometry.Point3d, normal: Rhino.Geometry.Vector3d) -> Rhino.Geometry.Plane
Rhino.Geometry.Plane.CreateFromNormalYup(origin: Rhino.Geometry.Point3d, normal: Rhino.Geometry.Vector3d, yDirection: Rhino.Geometry.Vector3d) -> Rhino.Geometry.Plane
Rhino.Geometry.Plane.CreateFromPoints(origin: Rhino.Geometry.Point3d, xPoint: Rhino.Geometry.Point3d, yPoint: Rhino.Geometry.Point3d) -> Rhino.Geometry.Plane
Rhino.Geometry.Plane.DistanceTo(self, bbox: Rhino.Geometry.BoundingBox, min: System.Double@, max: System.Double@) -> bool
Rhino.Geometry.Plane.DistanceTo(self, testPoint: Rhino.Geometry.Point3d) -> float
Rhino.Geometry.Plane.EpsilonEquals(self, other: Rhino.Geometry.Plane, epsilon: float) -> bool
Rhino.Geometry.Plane.Equals(self, obj: Any) -> bool
Rhino.Geometry.Plane.Equals(self, plane: Rhino.Geometry.Plane) -> bool
Rhino.Geometry.Plane.ExtendThroughBox(self, box: Rhino.Geometry.BoundingBox, s: Rhino.Geometry.Interval@, t: Rhino.Geometry.Interval@) -> bool
Rhino.Geometry.Plane.ExtendThroughBox(self, box: Rhino.Geometry.Box, s: Rhino.Geometry.Interval@, t: Rhino.Geometry.Interval@) -> bool
Rhino.Geometry.Plane.FitPlaneToPoints(points: Iterable[Rhino.Geometry.Point3d], plane: Rhino.Geometry.Plane@) -> PlaneFitResult
Rhino.Geometry.Plane.FitPlaneToPoints(points: Iterable[Rhino.Geometry.Point3d], plane: Rhino.Geometry.Plane@, maximumDeviation: System.Double@) -> PlaneFitResult
Rhino.Geometry.Plane.Flip(self) -> None
Rhino.Geometry.Plane.GetHashCode(self) -> int
Rhino.Geometry.Plane.GetPlaneEquation(self) -> List[float]
Rhino.Geometry.Plane.IsCoplanar(self, plane: Rhino.Geometry.Plane) -> bool
Rhino.Geometry.Plane.IsCoplanar(self, plane: Rhino.Geometry.Plane, tolerance: float) -> bool
Rhino.Geometry.Plane.PointAt(self, u: float, v: float) -> Point3d
Rhino.Geometry.Plane.PointAt(self, u: float, v: float, w: float) -> Point3d
Rhino.Geometry.Plane.RemapToPlaneSpace(self, ptSample: Rhino.Geometry.Point3d, ptPlane: Rhino.Geometry.Point3d@) -> bool
Rhino.Geometry.Plane.Rotate(self, angle: float, axis: Rhino.Geometry.Vector3d) -> bool
Rhino.Geometry.Plane.Rotate(self, angle: float, axis: Rhino.Geometry.Vector3d, centerOfRotation: Rhino.Geometry.Point3d) -> bool
Rhino.Geometry.Plane.Rotate(self, sinAngle: float, cosAngle: float, axis: Rhino.Geometry.Vector3d) -> bool
Rhino.Geometry.Plane.Rotate(self, sinAngle: float, cosAngle: float, axis: Rhino.Geometry.Vector3d, centerOfRotation: Rhino.Geometry.Point3d) -> bool
Rhino.Geometry.Plane.ToString(self) -> str
Rhino.Geometry.Plane.ToString(self, format: str, formatProvider: System.IFormatProvider) -> str
Rhino.Geometry.Plane.Transform(self, xform: Rhino.Geometry.Transform) -> bool
Rhino.Geometry.Plane.Translate(self, delta: Rhino.Geometry.Vector3d) -> bool
Rhino.Geometry.Plane.UpdateEquation(self) -> bool
Rhino.Geometry.Plane.ValueAt(self, p: Rhino.Geometry.Point3d) -> float
Rhino.Geometry.Plane.__init__(self, a: float, b: float, c: float, d: float) -> None
Rhino.Geometry.Plane.__init__(self, origin: Rhino.Geometry.Point3d, normal: Rhino.Geometry.Vector3d) -> None
Rhino.Geometry.Plane.__init__(self, origin: Rhino.Geometry.Point3d, xDirection: Rhino.Geometry.Vector3d, yDirection: Rhino.Geometry.Vector3d) -> None
Rhino.Geometry.Plane.__init__(self, origin: Rhino.Geometry.Point3d, xPoint: Rhino.Geometry.Point3d, yPoint: Rhino.Geometry.Point3d) -> None
Rhino.Geometry.Plane.__init__(self, other: Rhino.Geometry.Plane) -> None
Rhino.Geometry.PlaneSurface.CreateThroughBox(lineInPlane: Rhino.Geometry.Line, vectorInPlane: Rhino.Geometry.Vector3d, box: Rhino.Geometry.BoundingBox) -> Rhino.Geometry.PlaneSurface
Rhino.Geometry.PlaneSurface.CreateThroughBox(plane: Rhino.Geometry.Plane, box: Rhino.Geometry.BoundingBox) -> Rhino.Geometry.PlaneSurface
Rhino.Geometry.PlaneSurface.GetExtents(self, direction: int) -> Interval
Rhino.Geometry.PlaneSurface.SetExtents(self, direction: int, extents: Rhino.Geometry.Interval, syncDomain: bool) -> None
Rhino.Geometry.PlaneSurface.ToMesh(self) -> Mesh
Rhino.Geometry.PlaneSurface.__init__(self) -> None
Rhino.Geometry.PlaneSurface.__init__(self, info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext) -> None
Rhino.Geometry.PlaneSurface.__init__(self, plane: Rhino.Geometry.Plane) -> None
Rhino.Geometry.PlaneSurface.__init__(self, plane: Rhino.Geometry.Plane, xExtents: Rhino.Geometry.Interval, yExtents: Rhino.Geometry.Interval) -> None
Rhino.Geometry.Point.__init__(self, info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext) -> None
Rhino.Geometry.Point.__init__(self, location: Rhino.Geometry.Point3d) -> None
Rhino.Geometry.Point2d.!=(a: Rhino.Geometry.Point2d, b: Rhino.Geometry.Point2d) -> operator
Rhino.Geometry.Point2d.*(point: Rhino.Geometry.Point2d, t: float) -> operator
Rhino.Geometry.Point2d.*(t: float, point: Rhino.Geometry.Point2d) -> operator
Rhino.Geometry.Point2d.+(point1: Rhino.Geometry.Point2d, point2: Rhino.Geometry.Point2d) -> operator
Rhino.Geometry.Point2d.+(point: Rhino.Geometry.Point2d, vector: Rhino.Geometry.Vector2d) -> operator
Rhino.Geometry.Point2d.+(vector: Rhino.Geometry.Vector2d, point: Rhino.Geometry.Point2d) -> operator
Rhino.Geometry.Point2d.-(point1: Rhino.Geometry.Point2d, point2: Rhino.Geometry.Point2d) -> operator
Rhino.Geometry.Point2d.-(point: Rhino.Geometry.Point2d, vector: Rhino.Geometry.Vector2d) -> operator
Rhino.Geometry.Point2d./(point: Rhino.Geometry.Point2d, t: float) -> operator
Rhino.Geometry.Point2d.<(a: Rhino.Geometry.Point2d, b: Rhino.Geometry.Point2d) -> operator
Rhino.Geometry.Point2d.<=(a: Rhino.Geometry.Point2d, b: Rhino.Geometry.Point2d) -> operator
Rhino.Geometry.Point2d.==(a: Rhino.Geometry.Point2d, b: Rhino.Geometry.Point2d) -> operator
Rhino.Geometry.Point2d.>(a: Rhino.Geometry.Point2d, b: Rhino.Geometry.Point2d) -> operator
Rhino.Geometry.Point2d.>=(a: Rhino.Geometry.Point2d, b: Rhino.Geometry.Point2d) -> operator
Rhino.Geometry.Point2d.Add(point1: Rhino.Geometry.Point2d, point2: Rhino.Geometry.Point2d) -> Rhino.Geometry.Point2d
Rhino.Geometry.Point2d.Add(point: Rhino.Geometry.Point2d, vector: Rhino.Geometry.Vector2d) -> Rhino.Geometry.Point2d
Rhino.Geometry.Point2d.Add(vector: Rhino.Geometry.Vector2d, point: Rhino.Geometry.Point2d) -> Rhino.Geometry.Point2d
Rhino.Geometry.Point2d.CompareTo(self, other: Rhino.Geometry.Point2d) -> int
Rhino.Geometry.Point2d.DistanceTo(self, other: Rhino.Geometry.Point2d) -> float
Rhino.Geometry.Point2d.DistanceToSquared(self, other: Rhino.Geometry.Point2d) -> float
Rhino.Geometry.Point2d.Divide(point: Rhino.Geometry.Point2d, t: float) -> Rhino.Geometry.Point2d
Rhino.Geometry.Point2d.EpsilonEquals(self, other: Rhino.Geometry.Point2d, epsilon: float) -> bool
Rhino.Geometry.Point2d.Equals(self, obj: Any) -> bool
Rhino.Geometry.Point2d.Equals(self, point: Rhino.Geometry.Point2d) -> bool
Rhino.Geometry.Point2d.GetHashCode(self) -> int
Rhino.Geometry.Point2d.Multiply(point: Rhino.Geometry.Point2d, t: float) -> Rhino.Geometry.Point2d
Rhino.Geometry.Point2d.Multiply(t: float, point: Rhino.Geometry.Point2d) -> Rhino.Geometry.Point2d
Rhino.Geometry.Point2d.Subtract(point1: Rhino.Geometry.Point2d, point2: Rhino.Geometry.Point2d) -> Vector2d
Rhino.Geometry.Point2d.Subtract(point: Rhino.Geometry.Point2d, vector: Rhino.Geometry.Vector2d) -> Rhino.Geometry.Point2d
Rhino.Geometry.Point2d.ToString(self) -> str
Rhino.Geometry.Point2d.ToString(self, format: str, formatProvider: System.IFormatProvider) -> str
Rhino.Geometry.Point2d.Transform(self, xform: Rhino.Geometry.Transform) -> None
Rhino.Geometry.Point2d.__init__(self, point: Rhino.Geometry.Point2d) -> None
Rhino.Geometry.Point2d.__init__(self, point: Rhino.Geometry.Point3d) -> None
Rhino.Geometry.Point2d.__init__(self, vector: Rhino.Geometry.Vector2d) -> None
Rhino.Geometry.Point2d.__init__(self, x: float, y: float) -> None
Rhino.Geometry.Point2f.!=(a: Rhino.Geometry.Point2f, b: Rhino.Geometry.Point2f) -> operator
Rhino.Geometry.Point2f.*(a: Rhino.Geometry.Point2f, b: float) -> operator
Rhino.Geometry.Point2f.+(a: Rhino.Geometry.Point2f, b: Rhino.Geometry.Point2f) -> operator
Rhino.Geometry.Point2f.-(a: Rhino.Geometry.Point2f, b: Rhino.Geometry.Point2f) -> operator
Rhino.Geometry.Point2f./(a: Rhino.Geometry.Point2f, b: float) -> operator
Rhino.Geometry.Point2f.<(a: Rhino.Geometry.Point2f, b: Rhino.Geometry.Point2f) -> operator
Rhino.Geometry.Point2f.<=(a: Rhino.Geometry.Point2f, b: Rhino.Geometry.Point2f) -> operator
Rhino.Geometry.Point2f.==(a: Rhino.Geometry.Point2f, b: Rhino.Geometry.Point2f) -> operator
Rhino.Geometry.Point2f.>(a: Rhino.Geometry.Point2f, b: Rhino.Geometry.Point2f) -> operator
Rhino.Geometry.Point2f.>=(a: Rhino.Geometry.Point2f, b: Rhino.Geometry.Point2f) -> operator
Rhino.Geometry.Point2f.CompareTo(self, other: Rhino.Geometry.Point2f) -> int
Rhino.Geometry.Point2f.DistanceTo(self, other: Rhino.Geometry.Point2f) -> float
Rhino.Geometry.Point2f.DistanceToSquared(self, other: Rhino.Geometry.Point2f) -> float
Rhino.Geometry.Point2f.EpsilonEquals(self, other: Rhino.Geometry.Point2f, epsilon: float) -> bool
Rhino.Geometry.Point2f.Equals(self, obj: Any) -> bool
Rhino.Geometry.Point2f.Equals(self, point: Rhino.Geometry.Point2f) -> bool
Rhino.Geometry.Point2f.GetHashCode(self) -> int
Rhino.Geometry.Point2f.ToString(self) -> str
Rhino.Geometry.Point2f.ToString(self, format: str, formatProvider: System.IFormatProvider) -> str
Rhino.Geometry.Point2f.__init__(self, point: Rhino.Geometry.Point2d) -> None
Rhino.Geometry.Point2f.__init__(self, x: float, y: float) -> None
Rhino.Geometry.Point2f.__init__(self, x: float, y: float) -> None
Rhino.Geometry.Point3d.!=(a: Rhino.Geometry.Point3d, b: Rhino.Geometry.Point3d) -> operator
Rhino.Geometry.Point3d.*(point: Rhino.Geometry.Point3d, t: float) -> operator
Rhino.Geometry.Point3d.*(t: float, point: Rhino.Geometry.Point3d) -> operator
Rhino.Geometry.Point3d.+(point1: Rhino.Geometry.Point3d, point2: Rhino.Geometry.Point3d) -> operator
Rhino.Geometry.Point3d.+(point: Rhino.Geometry.Point3d, vector: Rhino.Geometry.Vector3d) -> operator
Rhino.Geometry.Point3d.+(point: Rhino.Geometry.Point3d, vector: Rhino.Geometry.Vector3f) -> operator
Rhino.Geometry.Point3d.+(vector: Rhino.Geometry.Vector3d, point: Rhino.Geometry.Point3d) -> operator
Rhino.Geometry.Point3d.-(point1: Rhino.Geometry.Point3d, point2: Rhino.Geometry.Point3d) -> operator
Rhino.Geometry.Point3d.-(point: Rhino.Geometry.Point3d) -> operator
Rhino.Geometry.Point3d.-(point: Rhino.Geometry.Point3d, vector: Rhino.Geometry.Vector3d) -> operator
Rhino.Geometry.Point3d./(point: Rhino.Geometry.Point3d, t: float) -> operator
Rhino.Geometry.Point3d.<(a: Rhino.Geometry.Point3d, b: Rhino.Geometry.Point3d) -> operator
Rhino.Geometry.Point3d.<=(a: Rhino.Geometry.Point3d, b: Rhino.Geometry.Point3d) -> operator
Rhino.Geometry.Point3d.==(a: Rhino.Geometry.Point3d, b: Rhino.Geometry.Point3d) -> operator
Rhino.Geometry.Point3d.>(a: Rhino.Geometry.Point3d, b: Rhino.Geometry.Point3d) -> operator
Rhino.Geometry.Point3d.>=(a: Rhino.Geometry.Point3d, b: Rhino.Geometry.Point3d) -> operator
Rhino.Geometry.Point3d.Add(point1: Rhino.Geometry.Point3d, point2: Rhino.Geometry.Point3d) -> Rhino.Geometry.Point3d
Rhino.Geometry.Point3d.Add(point: Rhino.Geometry.Point3d, vector: Rhino.Geometry.Vector3d) -> Rhino.Geometry.Point3d
Rhino.Geometry.Point3d.Add(point: Rhino.Geometry.Point3d, vector: Rhino.Geometry.Vector3f) -> Rhino.Geometry.Point3d
Rhino.Geometry.Point3d.Add(vector: Rhino.Geometry.Vector3d, point: Rhino.Geometry.Point3d) -> Rhino.Geometry.Point3d
Rhino.Geometry.Point3d.ArePointsCoplanar(points: Iterable[Rhino.Geometry.Point3d], tolerance: float) -> bool
Rhino.Geometry.Point3d.CompareTo(self, other: Rhino.Geometry.Point3d) -> int
Rhino.Geometry.Point3d.ControlPoint(pt: Rhino.Geometry.Point3d) -> operator
Rhino.Geometry.Point3d.CullDuplicates(points: Iterable[Rhino.Geometry.Point3d], tolerance: float) -> List[Rhino.Geometry.Point3d]
Rhino.Geometry.Point3d.DistanceTo(self, other: Rhino.Geometry.Point3d) -> float
Rhino.Geometry.Point3d.DistanceToSquared(self, other: Rhino.Geometry.Point3d) -> float
Rhino.Geometry.Point3d.Divide(point: Rhino.Geometry.Point3d, t: float) -> Rhino.Geometry.Point3d
Rhino.Geometry.Point3d.EpsilonEquals(self, other: Rhino.Geometry.Point3d, epsilon: float) -> bool
Rhino.Geometry.Point3d.Equals(self, obj: Any) -> bool
Rhino.Geometry.Point3d.Equals(self, point: Rhino.Geometry.Point3d) -> bool
Rhino.Geometry.Point3d.FromPoint3f(point: Rhino.Geometry.Point3f) -> Rhino.Geometry.Point3d
Rhino.Geometry.Point3d.GetHashCode(self) -> int
Rhino.Geometry.Point3d.Interpolate(self, pA: Rhino.Geometry.Point3d, pB: Rhino.Geometry.Point3d, t: float) -> None
Rhino.Geometry.Point3d.Multiply(point: Rhino.Geometry.Point3d, t: float) -> Rhino.Geometry.Point3d
Rhino.Geometry.Point3d.Multiply(t: float, point: Rhino.Geometry.Point3d) -> Rhino.Geometry.Point3d
Rhino.Geometry.Point3d.SortAndCullPointList(points: Iterable[Rhino.Geometry.Point3d], minimumDistance: float) -> List[Rhino.Geometry.Point3d]
Rhino.Geometry.Point3d.Subtract(point1: Rhino.Geometry.Point3d, point2: Rhino.Geometry.Point3d) -> Vector3d
Rhino.Geometry.Point3d.Subtract(point: Rhino.Geometry.Point3d, vector: Rhino.Geometry.Vector3d) -> Rhino.Geometry.Point3d
Rhino.Geometry.Point3d.ToString(self) -> str
Rhino.Geometry.Point3d.ToString(self, format: str, formatProvider: System.IFormatProvider) -> str
Rhino.Geometry.Point3d.Transform(self, xform: Rhino.Geometry.Transform) -> None
Rhino.Geometry.Point3d.TryParse(input: str, result: Rhino.Geometry.Point3d@) -> bool
Rhino.Geometry.Point3d.Vector3d(point: Rhino.Geometry.Point3d) -> operator
Rhino.Geometry.Point3d.__init__(self, point: Rhino.Geometry.Point3d) -> None
Rhino.Geometry.Point3d.__init__(self, point: Rhino.Geometry.Point3f) -> None
Rhino.Geometry.Point3d.__init__(self, point: Rhino.Geometry.Point3f) -> None
Rhino.Geometry.Point3d.__init__(self, point: Rhino.Geometry.Point4d) -> None
Rhino.Geometry.Point3d.__init__(self, vector: Rhino.Geometry.Vector3d) -> None
Rhino.Geometry.Point3d.__init__(self, vector: Rhino.Geometry.Vector3d) -> None
Rhino.Geometry.Point3d.__init__(self, x: float, y: float, z: float) -> None
Rhino.Geometry.Point3dGrid.__init__(self) -> None
Rhino.Geometry.Point3dGrid.__init__(self, info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext) -> None
Rhino.Geometry.Point3dGrid.__init__(self, rows: int, columns: int) -> None
Rhino.Geometry.Point3f.!=(a: Rhino.Geometry.Point3f, b: Rhino.Geometry.Point3f) -> operator
Rhino.Geometry.Point3f.*(point: Rhino.Geometry.Point3f, value: float) -> operator
Rhino.Geometry.Point3f.*(value: float, point: Rhino.Geometry.Point3f) -> operator
Rhino.Geometry.Point3f.+(point1: Rhino.Geometry.Point3f, point2: Rhino.Geometry.Point3f) -> operator
Rhino.Geometry.Point3f.-(point1: Rhino.Geometry.Point3f, point2: Rhino.Geometry.Point3f) -> operator
Rhino.Geometry.Point3f.<(a: Rhino.Geometry.Point3f, b: Rhino.Geometry.Point3f) -> operator
Rhino.Geometry.Point3f.<=(a: Rhino.Geometry.Point3f, b: Rhino.Geometry.Point3f) -> operator
Rhino.Geometry.Point3f.==(a: Rhino.Geometry.Point3f, b: Rhino.Geometry.Point3f) -> operator
Rhino.Geometry.Point3f.>(a: Rhino.Geometry.Point3f, b: Rhino.Geometry.Point3f) -> operator
Rhino.Geometry.Point3f.>=(a: Rhino.Geometry.Point3f, b: Rhino.Geometry.Point3f) -> operator
Rhino.Geometry.Point3f.CompareTo(self, other: Rhino.Geometry.Point3f) -> int
Rhino.Geometry.Point3f.DistanceTo(self, other: Rhino.Geometry.Point3f) -> float
Rhino.Geometry.Point3f.DistanceToSquared(self, other: Rhino.Geometry.Point3f) -> float
Rhino.Geometry.Point3f.EpsilonEquals(self, other: Rhino.Geometry.Point3f, epsilon: float) -> bool
Rhino.Geometry.Point3f.Equals(self, obj: Any) -> bool
Rhino.Geometry.Point3f.Equals(self, point: Rhino.Geometry.Point3f) -> bool
Rhino.Geometry.Point3f.GetHashCode(self) -> int
Rhino.Geometry.Point3f.Subtract(point1: Rhino.Geometry.Point3f, point2: Rhino.Geometry.Point3f) -> Vector3f
Rhino.Geometry.Point3f.ToString(self) -> str
Rhino.Geometry.Point3f.ToString(self, format: str, formatProvider: System.IFormatProvider) -> str
Rhino.Geometry.Point3f.Transform(self, xform: Rhino.Geometry.Transform) -> None
Rhino.Geometry.Point3f.Vector3f(point: Rhino.Geometry.Point3f) -> operator
Rhino.Geometry.Point3f.__init__(self, point: Rhino.Geometry.Point3d) -> None
Rhino.Geometry.Point3f.__init__(self, x: float, y: float, z: float) -> None
Rhino.Geometry.Point4d.!=(a: Rhino.Geometry.Point4d, b: Rhino.Geometry.Point4d) -> operator
Rhino.Geometry.Point4d.*(point1: Rhino.Geometry.Point4d, point2: Rhino.Geometry.Point4d) -> operator
Rhino.Geometry.Point4d.*(point: Rhino.Geometry.Point4d, d: float) -> operator
Rhino.Geometry.Point4d.+(point1: Rhino.Geometry.Point4d, point2: Rhino.Geometry.Point4d) -> operator
Rhino.Geometry.Point4d.-(point1: Rhino.Geometry.Point4d, point2: Rhino.Geometry.Point4d) -> operator
Rhino.Geometry.Point4d.==(a: Rhino.Geometry.Point4d, b: Rhino.Geometry.Point4d) -> operator
Rhino.Geometry.Point4d.Add(point1: Rhino.Geometry.Point4d, point2: Rhino.Geometry.Point4d) -> Rhino.Geometry.Point4d
Rhino.Geometry.Point4d.EpsilonEquals(self, other: Rhino.Geometry.Point4d, epsilon: float) -> bool
Rhino.Geometry.Point4d.Equals(self, obj: Any) -> bool
Rhino.Geometry.Point4d.Equals(self, point: Rhino.Geometry.Point4d) -> bool
Rhino.Geometry.Point4d.GetHashCode(self) -> int
Rhino.Geometry.Point4d.Multiply(point: Rhino.Geometry.Point4d, d: float) -> Rhino.Geometry.Point4d
Rhino.Geometry.Point4d.Subtract(point1: Rhino.Geometry.Point4d, point2: Rhino.Geometry.Point4d) -> Rhino.Geometry.Point4d
Rhino.Geometry.Point4d.ToString(self) -> str
Rhino.Geometry.Point4d.ToString(self, format: str, formatProvider: System.IFormatProvider) -> str
Rhino.Geometry.Point4d.Transform(self, xform: Rhino.Geometry.Transform) -> None
Rhino.Geometry.Point4d.__init__(self, point: Rhino.Geometry.Point3d) -> None
Rhino.Geometry.Point4d.__init__(self, point: Rhino.Geometry.Point4d) -> None
Rhino.Geometry.Point4d.__init__(self, x: float, y: float, z: float, w: float) -> None
Rhino.Geometry.PointCloud.Add(self, point: Rhino.Geometry.Point3d) -> None
Rhino.Geometry.PointCloud.Add(self, point: Rhino.Geometry.Point3d, color: System.Drawing.Color) -> None
Rhino.Geometry.PointCloud.Add(self, point: Rhino.Geometry.Point3d, normal: Rhino.Geometry.Vector3d) -> None
Rhino.Geometry.PointCloud.Add(self, point: Rhino.Geometry.Point3d, normal: Rhino.Geometry.Vector3d, color: System.Drawing.Color) -> None
Rhino.Geometry.PointCloud.Add(self, point: Rhino.Geometry.Point3d, normal: Rhino.Geometry.Vector3d, color: System.Drawing.Color, value: float) -> None
Rhino.Geometry.PointCloud.AddRange(self, points: Iterable[Rhino.Geometry.Point3d]) -> None
Rhino.Geometry.PointCloud.AddRange(self, points: Iterable[Rhino.Geometry.Point3d], colors: Iterable[System.Drawing.Color]) -> None
Rhino.Geometry.PointCloud.AddRange(self, points: Iterable[Rhino.Geometry.Point3d], normals: Iterable[Rhino.Geometry.Vector3d]) -> None
Rhino.Geometry.PointCloud.AddRange(self, points: Iterable[Rhino.Geometry.Point3d], normals: Iterable[Rhino.Geometry.Vector3d], colors: Iterable[System.Drawing.Color]) -> None
Rhino.Geometry.PointCloud.AddRange(self, points: Iterable[Rhino.Geometry.Point3d], normals: Iterable[Rhino.Geometry.Vector3d], colors: Iterable[System.Drawing.Color], values: Iterable[float]) -> None
Rhino.Geometry.PointCloud.AppendNew(self) -> PointCloudItem
Rhino.Geometry.PointCloud.AsReadOnlyListOfPoints(self) -> IReadOnlyList<Point3d>
Rhino.Geometry.PointCloud.ClearColors(self) -> None
Rhino.Geometry.PointCloud.ClearHiddenFlags(self) -> None
Rhino.Geometry.PointCloud.ClearNormals(self) -> None
Rhino.Geometry.PointCloud.ClearPointValues(self) -> None
Rhino.Geometry.PointCloud.ClosestPoint(self, testPoint: Rhino.Geometry.Point3d) -> int
Rhino.Geometry.PointCloud.CreateContourCurves(self, contourStart: Rhino.Geometry.Point3d, contourEnd: Rhino.Geometry.Point3d, interval: float, absoluteTolerance: float) -> List[Curve]
Rhino.Geometry.PointCloud.CreateContourCurves(self, startPoint: Rhino.Geometry.Point3d, endPoint: Rhino.Geometry.Point3d, interval: float, absoluteTolerance: float, maxDistance: float, minDistance: float, openCurves: bool, createSpline: bool, createPolyline: bool, fitTolerance: float) -> List[Curve]
Rhino.Geometry.PointCloud.CreateSectionCurve(self, plane: Rhino.Geometry.Plane, absoluteTolerance: float) -> List[Curve]
Rhino.Geometry.PointCloud.CreateSectionCurve(self, plane: Rhino.Geometry.Plane, absoluteTolerance: float, maxDistance: float, minDistance: float, openCurves: bool, createSpline: bool, createPolyline: bool, fitTolerance: float) -> List[Curve]
Rhino.Geometry.PointCloud.GetColors(self) -> List[Color]
Rhino.Geometry.PointCloud.GetEnumerator(self) -> IEnumerator<PointCloudItem>
Rhino.Geometry.PointCloud.GetNormals(self) -> List[Vector3d]
Rhino.Geometry.PointCloud.GetPointValues(self) -> List[float]
Rhino.Geometry.PointCloud.GetPoints(self) -> List[Point3d]
Rhino.Geometry.PointCloud.GetRandomSubsample(self, numberOfPoints: System.UInt32) -> Rhino.Geometry.PointCloud
Rhino.Geometry.PointCloud.GetRandomSubsample(self, numberOfPoints: System.UInt32, cancelToken: System.Threading.CancellationToken, progress: IProgress[float]) -> Rhino.Geometry.PointCloud
Rhino.Geometry.PointCloud.GetUnsafeLock(self, writable: bool) -> PointCloudUnsafeLock
Rhino.Geometry.PointCloud.Insert(self, index: int, point: Rhino.Geometry.Point3d) -> None
Rhino.Geometry.PointCloud.Insert(self, index: int, point: Rhino.Geometry.Point3d, color: System.Drawing.Color) -> None
Rhino.Geometry.PointCloud.Insert(self, index: int, point: Rhino.Geometry.Point3d, normal: Rhino.Geometry.Vector3d) -> None
Rhino.Geometry.PointCloud.Insert(self, index: int, point: Rhino.Geometry.Point3d, normal: Rhino.Geometry.Vector3d, color: System.Drawing.Color) -> None
Rhino.Geometry.PointCloud.Insert(self, index: int, point: Rhino.Geometry.Point3d, normal: Rhino.Geometry.Vector3d, color: System.Drawing.Color, value: float) -> None
Rhino.Geometry.PointCloud.InsertNew(self, index: int) -> PointCloudItem
Rhino.Geometry.PointCloud.InsertRange(self, index: int, points: Iterable[Rhino.Geometry.Point3d]) -> None
Rhino.Geometry.PointCloud.Merge(self, other: Rhino.Geometry.PointCloud) -> None
Rhino.Geometry.PointCloud.PointAt(self, index: int) -> Point3d
Rhino.Geometry.PointCloud.ReleaseUnsafeLock(self, pointCloudData: Rhino.Geometry.PointCloudUnsafeLock) -> None
Rhino.Geometry.PointCloud.RemoveAt(self, index: int) -> None
Rhino.Geometry.PointCloud.RemoveRange(self, indices: Iterable[int]) -> int
Rhino.Geometry.PointCloud.ShrinkWrap(self, parameters: Rhino.Geometry.ShrinkWrapParameters) -> Mesh
Rhino.Geometry.PointCloud.__init__(self) -> None
Rhino.Geometry.PointCloud.__init__(self, info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext) -> None
Rhino.Geometry.PointCloud.__init__(self, other: Rhino.Geometry.PointCloud) -> None
Rhino.Geometry.PointCloud.__init__(self, points: Iterable[Rhino.Geometry.Point3d]) -> None
Rhino.Geometry.PointCloudUnsafeLock.ColorArray(self, length: System.Int32@) -> int*
Rhino.Geometry.PointCloudUnsafeLock.NormalArray(self, length: System.Int32@) -> Vector3d*
Rhino.Geometry.PointCloudUnsafeLock.PointArray(self, length: System.Int32@) -> Point3d*
Rhino.Geometry.PointCloudUnsafeLock.Release(self) -> None
Rhino.Geometry.PointCloudUnsafeLock.ValueArray(self, length: System.Int32@) -> double*
Rhino.Geometry.PolyCurve.Append(self, arc: Rhino.Geometry.Arc) -> bool
Rhino.Geometry.PolyCurve.Append(self, curve: Rhino.Geometry.Curve) -> bool
Rhino.Geometry.PolyCurve.Append(self, line: Rhino.Geometry.Line) -> bool
Rhino.Geometry.PolyCurve.AppendSegment(self, curve: Rhino.Geometry.Curve) -> bool
Rhino.Geometry.PolyCurve.CleanUp(self) -> Curve
Rhino.Geometry.PolyCurve.Duplicate(self) -> GeometryBase
Rhino.Geometry.PolyCurve.DuplicatePolyCurve(self) -> Rhino.Geometry.PolyCurve
Rhino.Geometry.PolyCurve.Explode(self) -> List[Curve]
Rhino.Geometry.PolyCurve.PolyCurveParameter(self, segmentIndex: int, segmentCurveParameter: float) -> float
Rhino.Geometry.PolyCurve.RemoveNesting(self) -> bool
Rhino.Geometry.PolyCurve.SegmentCurve(self, index: int) -> Curve
Rhino.Geometry.PolyCurve.SegmentCurveParameter(self, polycurveParameter: float) -> float
Rhino.Geometry.PolyCurve.SegmentDomain(self, segmentIndex: int) -> Interval
Rhino.Geometry.PolyCurve.SegmentIndex(self, polycurveParameter: float) -> int
Rhino.Geometry.PolyCurve.SegmentIndexes(self, subdomain: Rhino.Geometry.Interval, segmentIndex0: System.Int32@, segmentIndex1: System.Int32@) -> int
Rhino.Geometry.PolyCurve.__init__(self) -> None
Rhino.Geometry.PolyCurve.__init__(self, info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext) -> None
Rhino.Geometry.Polyline.BreakAtAngles(self, angle: float) -> List[Rhino.Geometry.Polyline]
Rhino.Geometry.Polyline.CenterPoint(self) -> Point3d
Rhino.Geometry.Polyline.ClosestParameter(self, testPoint: Rhino.Geometry.Point3d) -> float
Rhino.Geometry.Polyline.ClosestPoint(self, testPoint: Rhino.Geometry.Point3d) -> Point3d
Rhino.Geometry.Polyline.CollapseShortSegments(self, tolerance: float) -> int
Rhino.Geometry.Polyline.CreateByJoiningLines(lines: Iterable[Rhino.Geometry.Line], tolerance: float, splitAtIntersections: bool) -> List[Rhino.Geometry.Polyline]
Rhino.Geometry.Polyline.CreateCircumscribedPolygon(circle: Rhino.Geometry.Circle, sideCount: int) -> Rhino.Geometry.Polyline
Rhino.Geometry.Polyline.CreateInscribedPolygon(circle: Rhino.Geometry.Circle, sideCount: int) -> Rhino.Geometry.Polyline
Rhino.Geometry.Polyline.CreateStarPolygon(circle: Rhino.Geometry.Circle, radius: float, cornerCount: int) -> Rhino.Geometry.Polyline
Rhino.Geometry.Polyline.DeleteShortSegments(self, tolerance: float) -> int
Rhino.Geometry.Polyline.Duplicate(self) -> Rhino.Geometry.Polyline
Rhino.Geometry.Polyline.GetSegments(self) -> List[Line]
Rhino.Geometry.Polyline.IsClosedWithinTolerance(self, tolerance: float) -> bool
Rhino.Geometry.Polyline.MergeColinearSegments(self, angleTolerance: float, includeSeam: bool) -> int
Rhino.Geometry.Polyline.PointAt(self, t: float) -> Point3d
Rhino.Geometry.Polyline.ReduceSegments(self, tolerance: float) -> int
Rhino.Geometry.Polyline.RemoveNearlyEqualSubsequentPoints(self, tolerance: float) -> None
Rhino.Geometry.Polyline.SegmentAt(self, index: int) -> Line
Rhino.Geometry.Polyline.Smooth(self, amount: float) -> bool
Rhino.Geometry.Polyline.TangentAt(self, t: float) -> Vector3d
Rhino.Geometry.Polyline.ToNurbsCurve(self) -> NurbsCurve
Rhino.Geometry.Polyline.ToPolylineCurve(self) -> PolylineCurve
Rhino.Geometry.Polyline.TriangulateClosedPolyline(self) -> List[MeshFace]
Rhino.Geometry.Polyline.Trim(self, domain: Rhino.Geometry.Interval) -> Rhino.Geometry.Polyline
Rhino.Geometry.Polyline.__init__(self) -> None
Rhino.Geometry.Polyline.__init__(self, collection: Iterable[Rhino.Geometry.Point3d]) -> None
Rhino.Geometry.Polyline.__init__(self, initialCapacity: int) -> None
Rhino.Geometry.PolylineCurve.CreateConvexHull2d(points: List[Rhino.Geometry.Point2d], hullIndices: System.Int32[]@) -> Rhino.Geometry.PolylineCurve
Rhino.Geometry.PolylineCurve.Parameter(self, index: int) -> float
Rhino.Geometry.PolylineCurve.Point(self, index: int) -> Point3d
Rhino.Geometry.PolylineCurve.SetArcLengthParameterization(self, tolerance: float) -> None
Rhino.Geometry.PolylineCurve.SetParameter(self, index: int, parameter: float) -> None
Rhino.Geometry.PolylineCurve.SetPoint(self, index: int, point: Rhino.Geometry.Point3d) -> None
Rhino.Geometry.PolylineCurve.ToArray(self) -> List[Point3d]
Rhino.Geometry.PolylineCurve.ToPolyline(self) -> Polyline
Rhino.Geometry.PolylineCurve.__init__(self) -> None
Rhino.Geometry.PolylineCurve.__init__(self, info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext) -> None
Rhino.Geometry.PolylineCurve.__init__(self, other: Rhino.Geometry.PolylineCurve) -> None
Rhino.Geometry.PolylineCurve.__init__(self, points: Iterable[Rhino.Geometry.Point3d]) -> None
Rhino.Geometry.QuadRemeshParameters.__init__(self) -> None
Rhino.Geometry.Quaternion.!=(a: Rhino.Geometry.Quaternion, b: Rhino.Geometry.Quaternion) -> operator
Rhino.Geometry.Quaternion.*(a: Rhino.Geometry.Quaternion, b: Rhino.Geometry.Quaternion) -> operator
Rhino.Geometry.Quaternion.*(q: Rhino.Geometry.Quaternion, x: float) -> operator
Rhino.Geometry.Quaternion.*(q: Rhino.Geometry.Quaternion, x: float) -> operator
Rhino.Geometry.Quaternion.*(q: Rhino.Geometry.Quaternion, x: int) -> operator
Rhino.Geometry.Quaternion.+(a: Rhino.Geometry.Quaternion, b: Rhino.Geometry.Quaternion) -> operator
Rhino.Geometry.Quaternion.-(a: Rhino.Geometry.Quaternion, b: Rhino.Geometry.Quaternion) -> operator
Rhino.Geometry.Quaternion./(q: Rhino.Geometry.Quaternion, y: float) -> operator
Rhino.Geometry.Quaternion.==(a: Rhino.Geometry.Quaternion, b: Rhino.Geometry.Quaternion) -> operator
Rhino.Geometry.Quaternion.CreateFromRotationZYX(yaw: float, pitch: float, roll: float) -> Rhino.Geometry.Quaternion
Rhino.Geometry.Quaternion.CreateFromRotationZYZ(alpha: float, beta: float, gamma: float) -> Rhino.Geometry.Quaternion
Rhino.Geometry.Quaternion.CrossProduct(p: Rhino.Geometry.Quaternion, q: Rhino.Geometry.Quaternion) -> Rhino.Geometry.Quaternion
Rhino.Geometry.Quaternion.Distance(p: Rhino.Geometry.Quaternion, q: Rhino.Geometry.Quaternion) -> float
Rhino.Geometry.Quaternion.DistanceTo(self, q: Rhino.Geometry.Quaternion) -> float
Rhino.Geometry.Quaternion.EpsilonEquals(self, other: Rhino.Geometry.Quaternion, epsilon: float) -> bool
Rhino.Geometry.Quaternion.Equals(self, obj: Any) -> bool
Rhino.Geometry.Quaternion.Equals(self, other: Rhino.Geometry.Quaternion) -> bool
Rhino.Geometry.Quaternion.GetEulerZYZ(self, alpha: System.Double@, beta: System.Double@, gamma: System.Double@) -> bool
Rhino.Geometry.Quaternion.GetHashCode(self) -> int
Rhino.Geometry.Quaternion.GetRotation(self, angle: System.Double@, axis: Rhino.Geometry.Vector3d@) -> bool
Rhino.Geometry.Quaternion.GetRotation(self, plane: Rhino.Geometry.Plane@) -> bool
Rhino.Geometry.Quaternion.GetRotation(self, xform: Rhino.Geometry.Transform@) -> bool
Rhino.Geometry.Quaternion.GetYawPitchRoll(self, yaw: System.Double@, pitch: System.Double@, roll: System.Double@) -> bool
Rhino.Geometry.Quaternion.Invert(self) -> bool
Rhino.Geometry.Quaternion.Lerp(a: Rhino.Geometry.Quaternion, b: Rhino.Geometry.Quaternion, t: float) -> Rhino.Geometry.Quaternion
Rhino.Geometry.Quaternion.MatrixForm(self) -> Transform
Rhino.Geometry.Quaternion.Product(p: Rhino.Geometry.Quaternion, q: Rhino.Geometry.Quaternion) -> Rhino.Geometry.Quaternion
Rhino.Geometry.Quaternion.Rotate(self, v: Rhino.Geometry.Vector3d) -> Vector3d
Rhino.Geometry.Quaternion.RotateTowards(a: Rhino.Geometry.Quaternion, b: Rhino.Geometry.Quaternion, maxRadians: float) -> Rhino.Geometry.Quaternion
Rhino.Geometry.Quaternion.Rotation(angle: float, axisOfRotation: Rhino.Geometry.Vector3d) -> Rhino.Geometry.Quaternion
Rhino.Geometry.Quaternion.Rotation(plane0: Rhino.Geometry.Plane, plane1: Rhino.Geometry.Plane) -> Rhino.Geometry.Quaternion
Rhino.Geometry.Quaternion.Set(self, a: float, b: float, c: float, d: float) -> None
Rhino.Geometry.Quaternion.SetRotation(self, angle: float, axisOfRotation: Rhino.Geometry.Vector3d) -> None
Rhino.Geometry.Quaternion.SetRotation(self, plane0: Rhino.Geometry.Plane, plane1: Rhino.Geometry.Plane) -> None
Rhino.Geometry.Quaternion.Slerp(a: Rhino.Geometry.Quaternion, b: Rhino.Geometry.Quaternion, t: float) -> Rhino.Geometry.Quaternion
Rhino.Geometry.Quaternion.ToString(self) -> str
Rhino.Geometry.Quaternion.Unitize(self) -> bool
Rhino.Geometry.Quaternion.__init__(self, a: float, b: float, c: float, d: float) -> None
Rhino.Geometry.RTree.Clear(self) -> None
Rhino.Geometry.RTree.CreateFromPointArray(points: Iterable[Rhino.Geometry.Point3d]) -> Rhino.Geometry.RTree
Rhino.Geometry.RTree.CreateMeshFaceTree(mesh: Rhino.Geometry.Mesh) -> Rhino.Geometry.RTree
Rhino.Geometry.RTree.CreatePointCloudTree(cloud: Rhino.Geometry.PointCloud) -> Rhino.Geometry.RTree
Rhino.Geometry.RTree.Dispose(self) -> None
Rhino.Geometry.RTree.Dispose(self, disposing: bool) -> None
Rhino.Geometry.RTree.Finalize(self) -> None
Rhino.Geometry.RTree.Insert(self, box: Rhino.Geometry.BoundingBox, elementId: System.IntPtr) -> bool
Rhino.Geometry.RTree.Insert(self, box: Rhino.Geometry.BoundingBox, elementId: int) -> bool
Rhino.Geometry.RTree.Insert(self, point: Rhino.Geometry.Point2d, elementId: System.IntPtr) -> bool
Rhino.Geometry.RTree.Insert(self, point: Rhino.Geometry.Point2d, elementId: int) -> bool
Rhino.Geometry.RTree.Insert(self, point: Rhino.Geometry.Point3d, elementId: System.IntPtr) -> bool
Rhino.Geometry.RTree.Insert(self, point: Rhino.Geometry.Point3d, elementId: int) -> bool
Rhino.Geometry.RTree.Point3dClosestPoints(hayPoints: Iterable[Rhino.Geometry.Point3d], needlePts: Iterable[Rhino.Geometry.Point3d], limitDistance: float) -> IEnumerable<int[]>
Rhino.Geometry.RTree.Point3dKNeighbors(hayPoints: Iterable[Rhino.Geometry.Point3d], needlePts: Iterable[Rhino.Geometry.Point3d], amount: int) -> IEnumerable<int[]>
Rhino.Geometry.RTree.PointCloudClosestPoints(pointcloud: Rhino.Geometry.PointCloud, needlePts: Iterable[Rhino.Geometry.Point3d], limitDistance: float) -> IEnumerable<int[]>
Rhino.Geometry.RTree.PointCloudKNeighbors(pointcloud: Rhino.Geometry.PointCloud, needlePts: Iterable[Rhino.Geometry.Point3d], amount: int) -> IEnumerable<int[]>
Rhino.Geometry.RTree.Remove(self, box: Rhino.Geometry.BoundingBox, elementId: System.IntPtr) -> bool
Rhino.Geometry.RTree.Remove(self, box: Rhino.Geometry.BoundingBox, elementId: int) -> bool
Rhino.Geometry.RTree.Remove(self, point: Rhino.Geometry.Point2d, elementId: int) -> bool
Rhino.Geometry.RTree.Remove(self, point: Rhino.Geometry.Point3d, elementId: System.IntPtr) -> bool
Rhino.Geometry.RTree.Remove(self, point: Rhino.Geometry.Point3d, elementId: int) -> bool
Rhino.Geometry.RTree.Search(self, box: Rhino.Geometry.BoundingBox, callback: EventHandler[Rhino.Geometry.RTreeEventArgs]) -> bool
Rhino.Geometry.RTree.Search(self, box: Rhino.Geometry.BoundingBox, callback: EventHandler[Rhino.Geometry.RTreeEventArgs], tag: Any) -> bool
Rhino.Geometry.RTree.Search(self, sphere: Rhino.Geometry.Sphere, callback: EventHandler[Rhino.Geometry.RTreeEventArgs]) -> bool
Rhino.Geometry.RTree.Search(self, sphere: Rhino.Geometry.Sphere, callback: EventHandler[Rhino.Geometry.RTreeEventArgs], tag: Any) -> bool
Rhino.Geometry.RTree.SearchOverlaps(treeA: Rhino.Geometry.RTree, treeB: Rhino.Geometry.RTree, tolerance: float, callback: EventHandler[Rhino.Geometry.RTreeEventArgs]) -> bool
Rhino.Geometry.RTree.__init__(self) -> None
Rhino.Geometry.RadialDimension.AdjustFromPoints(self, plane: Rhino.Geometry.Plane, centerpoint: Rhino.Geometry.Point3d, radiuspoint: Rhino.Geometry.Point3d, dimlinepoint: Rhino.Geometry.Point3d, rotationInPlane: float) -> bool
Rhino.Geometry.RadialDimension.Create(dimStyle: Rhino.DocObjects.DimensionStyle, dimtype: Rhino.Geometry.AnnotationType, plane: Rhino.Geometry.Plane, centerpoint: Rhino.Geometry.Point3d, radiuspoint: Rhino.Geometry.Point3d, dimlinepoint: Rhino.Geometry.Point3d) -> Rhino.Geometry.RadialDimension
Rhino.Geometry.RadialDimension.Get3dPoints(self, centerpoint: Rhino.Geometry.Point3d@, radiuspoint: Rhino.Geometry.Point3d@, dimlinepoint: Rhino.Geometry.Point3d@, kneepoint: Rhino.Geometry.Point3d@) -> bool
Rhino.Geometry.RadialDimension.GetDisplayLines(self, style: Rhino.DocObjects.DimensionStyle, scale: float, lines: System.Collections.Generic.IEnumerable{Rhino.Geometry.Line}@) -> bool
Rhino.Geometry.RadialDimension.GetDistanceDisplayText(self, unitsystem: Rhino.UnitSystem, style: Rhino.DocObjects.DimensionStyle) -> str
Rhino.Geometry.RadialDimension.GetTextRectangle(self, corners: Rhino.Geometry.Point3d[]@) -> bool
Rhino.Geometry.RadialDimension.__init__(self) -> None
Rhino.Geometry.RadialDimension.__init__(self, dimtype: Rhino.Geometry.AnnotationType, plane: Rhino.Geometry.Plane, centerpoint: Rhino.Geometry.Point3d, radiuspoint: Rhino.Geometry.Point3d, dimlinepoint: Rhino.Geometry.Point3d) -> None
Rhino.Geometry.RadialDimension.__init__(self, info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext) -> None
Rhino.Geometry.Ray3d.!=(a: Rhino.Geometry.Ray3d, b: Rhino.Geometry.Ray3d) -> operator
Rhino.Geometry.Ray3d.==(a: Rhino.Geometry.Ray3d, b: Rhino.Geometry.Ray3d) -> operator
Rhino.Geometry.Ray3d.EpsilonEquals(self, other: Rhino.Geometry.Ray3d, epsilon: float) -> bool
Rhino.Geometry.Ray3d.Equals(self, obj: Any) -> bool
Rhino.Geometry.Ray3d.Equals(self, ray: Rhino.Geometry.Ray3d) -> bool
Rhino.Geometry.Ray3d.GetHashCode(self) -> int
Rhino.Geometry.Ray3d.PointAt(self, t: float) -> Point3d
Rhino.Geometry.Ray3d.__init__(self, position: Rhino.Geometry.Point3d, direction: Rhino.Geometry.Vector3d) -> None
Rhino.Geometry.Rectangle3d.ClosestPoint(self, point: Rhino.Geometry.Point3d) -> Point3d
Rhino.Geometry.Rectangle3d.ClosestPoint(self, point: Rhino.Geometry.Point3d, includeInterior: bool) -> Point3d
Rhino.Geometry.Rectangle3d.Contains(self, pt: Rhino.Geometry.Point3d) -> PointContainment
Rhino.Geometry.Rectangle3d.Contains(self, x: float, y: float) -> PointContainment
Rhino.Geometry.Rectangle3d.Corner(self, index: int) -> Point3d
Rhino.Geometry.Rectangle3d.CreateFromPolyline(polyline: Iterable[Rhino.Geometry.Point3d]) -> Rhino.Geometry.Rectangle3d
Rhino.Geometry.Rectangle3d.CreateFromPolyline(polyline: Iterable[Rhino.Geometry.Point3d], deviation: System.Double@, angleDeviation: System.Double@) -> Rhino.Geometry.Rectangle3d
Rhino.Geometry.Rectangle3d.EpsilonEquals(self, other: Rhino.Geometry.Rectangle3d, epsilon: float) -> bool
Rhino.Geometry.Rectangle3d.MakeIncreasing(self) -> None
Rhino.Geometry.Rectangle3d.PointAt(self, t: float) -> Point3d
Rhino.Geometry.Rectangle3d.PointAt(self, x: float, y: float) -> Point3d
Rhino.Geometry.Rectangle3d.RecenterPlane(self, index: int) -> None
Rhino.Geometry.Rectangle3d.RecenterPlane(self, origin: Rhino.Geometry.Point3d) -> None
Rhino.Geometry.Rectangle3d.ToNurbsCurve(self) -> NurbsCurve
Rhino.Geometry.Rectangle3d.ToPolyline(self) -> Polyline
Rhino.Geometry.Rectangle3d.Transform(self, xform: Rhino.Geometry.Transform) -> bool
Rhino.Geometry.Rectangle3d.__init__(self, plane: Rhino.Geometry.Plane, cornerA: Rhino.Geometry.Point3d, cornerB: Rhino.Geometry.Point3d) -> None
Rhino.Geometry.Rectangle3d.__init__(self, plane: Rhino.Geometry.Plane, width: Rhino.Geometry.Interval, height: Rhino.Geometry.Interval) -> None
Rhino.Geometry.Rectangle3d.__init__(self, plane: Rhino.Geometry.Plane, width: float, height: float) -> None
Rhino.Geometry.ReduceMeshParameters.__init__(self) -> None
Rhino.Geometry.RevSurface.Create(revoluteCurve: Rhino.Geometry.Curve, axisOfRevolution: Rhino.Geometry.Line) -> Rhino.Geometry.RevSurface
Rhino.Geometry.RevSurface.Create(revoluteCurve: Rhino.Geometry.Curve, axisOfRevolution: Rhino.Geometry.Line, startAngleRadians: float, endAngleRadians: float) -> Rhino.Geometry.RevSurface
Rhino.Geometry.RevSurface.Create(revoluteLine: Rhino.Geometry.Line, axisOfRevolution: Rhino.Geometry.Line) -> Rhino.Geometry.RevSurface
Rhino.Geometry.RevSurface.Create(revoluteLine: Rhino.Geometry.Line, axisOfRevolution: Rhino.Geometry.Line, startAngleRadians: float, endAngleRadians: float) -> Rhino.Geometry.RevSurface
Rhino.Geometry.RevSurface.Create(revolutePolyline: Rhino.Geometry.Polyline, axisOfRevolution: Rhino.Geometry.Line) -> Rhino.Geometry.RevSurface
Rhino.Geometry.RevSurface.Create(revolutePolyline: Rhino.Geometry.Polyline, axisOfRevolution: Rhino.Geometry.Line, startAngleRadians: float, endAngleRadians: float) -> Rhino.Geometry.RevSurface
Rhino.Geometry.RevSurface.CreateFromCone(cone: Rhino.Geometry.Cone) -> Rhino.Geometry.RevSurface
Rhino.Geometry.RevSurface.CreateFromCylinder(cylinder: Rhino.Geometry.Cylinder) -> Rhino.Geometry.RevSurface
Rhino.Geometry.RevSurface.CreateFromSphere(sphere: Rhino.Geometry.Sphere) -> Rhino.Geometry.RevSurface
Rhino.Geometry.RevSurface.CreateFromTorus(torus: Rhino.Geometry.Torus) -> Rhino.Geometry.RevSurface
Rhino.Geometry.RevSurface.__init__(self, info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext) -> None
Rhino.Geometry.RibbonOffsetParameters.__init__(self) -> None
Rhino.Geometry.ShrinkWrapParameters.__init__(self) -> None
Rhino.Geometry.ShutLiningCurveInfo.__init__(self, curve: Rhino.Geometry.Curve, radius: float, profile: int, pull: bool, isBump: bool, curveIntervals: Iterable[Rhino.Geometry.Interval], enabled: bool) -> None
Rhino.Geometry.Silhouette.Compute(geometry: Rhino.Geometry.GeometryBase, silhouetteType: Rhino.Geometry.SilhouetteType, parallelCameraDirection: Rhino.Geometry.Vector3d, tolerance: float, angleToleranceRadians: float) -> List[Rhino.Geometry.Silhouette]
Rhino.Geometry.Silhouette.Compute(geometry: Rhino.Geometry.GeometryBase, silhouetteType: Rhino.Geometry.SilhouetteType, parallelCameraDirection: Rhino.Geometry.Vector3d, tolerance: float, angleToleranceRadians: float, clippingPlanes: Iterable[Rhino.Geometry.Plane], cancelToken: System.Threading.CancellationToken) -> List[Rhino.Geometry.Silhouette]
Rhino.Geometry.Silhouette.Compute(geometry: Rhino.Geometry.GeometryBase, silhouetteType: Rhino.Geometry.SilhouetteType, perspectiveCameraLocation: Rhino.Geometry.Point3d, tolerance: float, angleToleranceRadians: float) -> List[Rhino.Geometry.Silhouette]
Rhino.Geometry.Silhouette.Compute(geometry: Rhino.Geometry.GeometryBase, silhouetteType: Rhino.Geometry.SilhouetteType, perspectiveCameraLocation: Rhino.Geometry.Point3d, tolerance: float, angleToleranceRadians: float, clippingPlanes: Iterable[Rhino.Geometry.Plane], cancelToken: System.Threading.CancellationToken) -> List[Rhino.Geometry.Silhouette]
Rhino.Geometry.Silhouette.Compute(geometry: Rhino.Geometry.GeometryBase, silhouetteType: Rhino.Geometry.SilhouetteType, viewport: Rhino.DocObjects.ViewportInfo, tolerance: float, angleToleranceRadians: float) -> List[Rhino.Geometry.Silhouette]
Rhino.Geometry.Silhouette.Compute(geometry: Rhino.Geometry.GeometryBase, silhouetteType: Rhino.Geometry.SilhouetteType, viewport: Rhino.DocObjects.ViewportInfo, tolerance: float, angleToleranceRadians: float, clippingPlanes: Iterable[Rhino.Geometry.Plane], cancelToken: System.Threading.CancellationToken) -> List[Rhino.Geometry.Silhouette]
Rhino.Geometry.Silhouette.ComputeDraftCurve(geometry: Rhino.Geometry.GeometryBase, draftAngle: float, pullDirection: Rhino.Geometry.Vector3d, tolerance: float, angleToleranceRadians: float) -> List[Rhino.Geometry.Silhouette]
Rhino.Geometry.Silhouette.ComputeDraftCurve(geometry: Rhino.Geometry.GeometryBase, draftAngle: float, pullDirection: Rhino.Geometry.Vector3d, tolerance: float, angleToleranceRadians: float, cancelToken: System.Threading.CancellationToken) -> List[Rhino.Geometry.Silhouette]
Rhino.Geometry.SpaceMorph.IsMorphable(geometry: Rhino.Geometry.GeometryBase) -> bool
Rhino.Geometry.SpaceMorph.Morph(self, geometry: Rhino.Geometry.GeometryBase) -> bool
Rhino.Geometry.SpaceMorph.Morph(self, plane: Rhino.Geometry.Plane@) -> bool
Rhino.Geometry.SpaceMorph.MorphPoint(self, point: Rhino.Geometry.Point3d) -> Point3d
Rhino.Geometry.SpaceMorph.__init__(self) -> None
Rhino.Geometry.Sphere.ClosestParameter(self, testPoint: Rhino.Geometry.Point3d, longitudeRadians: System.Double@, latitudeRadians: System.Double@) -> bool
Rhino.Geometry.Sphere.ClosestPoint(self, testPoint: Rhino.Geometry.Point3d) -> Point3d
Rhino.Geometry.Sphere.EpsilonEquals(self, other: Rhino.Geometry.Sphere, epsilon: float) -> bool
Rhino.Geometry.Sphere.FitSphereToPoints(points: Iterable[Rhino.Geometry.Point3d]) -> Rhino.Geometry.Sphere
Rhino.Geometry.Sphere.LatitudeDegrees(self, degrees: float) -> Circle
Rhino.Geometry.Sphere.LatitudeRadians(self, radians: float) -> Circle
Rhino.Geometry.Sphere.LongitudeDegrees(self, degrees: float) -> Circle
Rhino.Geometry.Sphere.LongitudeRadians(self, radians: float) -> Circle
Rhino.Geometry.Sphere.NormalAt(self, longitudeRadians: float, latitudeRadians: float) -> Vector3d
Rhino.Geometry.Sphere.PointAt(self, longitudeRadians: float, latitudeRadians: float) -> Point3d
Rhino.Geometry.Sphere.Rotate(self, angleRadians: float, axisOfRotation: Rhino.Geometry.Vector3d) -> bool
Rhino.Geometry.Sphere.Rotate(self, angleRadians: float, axisOfRotation: Rhino.Geometry.Vector3d, centerOfRotation: Rhino.Geometry.Point3d) -> bool
Rhino.Geometry.Sphere.Rotate(self, sinAngle: float, cosAngle: float, axisOfRotation: Rhino.Geometry.Vector3d) -> bool
Rhino.Geometry.Sphere.Rotate(self, sinAngle: float, cosAngle: float, axisOfRotation: Rhino.Geometry.Vector3d, centerOfRotation: Rhino.Geometry.Point3d) -> bool
Rhino.Geometry.Sphere.ToBrep(self) -> Brep
Rhino.Geometry.Sphere.ToNurbsSurface(self) -> NurbsSurface
Rhino.Geometry.Sphere.ToRevSurface(self) -> RevSurface
Rhino.Geometry.Sphere.Transform(self, xform: Rhino.Geometry.Transform) -> bool
Rhino.Geometry.Sphere.Translate(self, delta: Rhino.Geometry.Vector3d) -> bool
Rhino.Geometry.Sphere.__init__(self, center: Rhino.Geometry.Point3d, radius: float) -> None
Rhino.Geometry.Sphere.__init__(self, equatorialPlane: Rhino.Geometry.Plane, radius: float) -> None
Rhino.Geometry.SquishParameters.Dispose(self) -> None
Rhino.Geometry.SquishParameters.Dispose(self, disposing: bool) -> None
Rhino.Geometry.SquishParameters.Finalize(self) -> None
Rhino.Geometry.SquishParameters.GetSpringConstants(self, boundaryBias: System.Double@, deformationBias: System.Double@) -> bool
Rhino.Geometry.SquishParameters.SetDeformation(self, deformation: Rhino.Geometry.SquishDeformation, bPreserveBoundary: bool, boundaryStretchConstant: float, boundaryCompressConstant: float, interiorStretchConstant: float, interiorCompressConstant: float) -> None
Rhino.Geometry.SquishParameters.SetSpringConstants(self, boundaryBias: float, deformationBias: float) -> None
Rhino.Geometry.SquishParameters.__init__(self) -> None
Rhino.Geometry.Squisher.Dispose(self) -> None
Rhino.Geometry.Squisher.Dispose(self, disposing: bool) -> None
Rhino.Geometry.Squisher.Finalize(self) -> None
Rhino.Geometry.Squisher.Get2dMesh(self) -> Mesh
Rhino.Geometry.Squisher.Get3dMesh(self) -> Mesh
Rhino.Geometry.Squisher.GetAreaConstrainedTrianglesIndices(self) -> List[MeshFace]
Rhino.Geometry.Squisher.GetLengthConstrained2dLines(self) -> List[Line]
Rhino.Geometry.Squisher.GetLengthConstrained3dLines(self) -> List[Line]
Rhino.Geometry.Squisher.GetMesh2dEdges(self) -> List[Line]
Rhino.Geometry.Squisher.GetMesh3dEdges(self) -> List[Line]
Rhino.Geometry.Squisher.Is2dPatternSquished(geometry: Rhino.Geometry.GeometryBase) -> bool
Rhino.Geometry.Squisher.SquishBack2dMarks(squishedGeometry: Rhino.Geometry.GeometryBase, marks: Iterable[Rhino.Geometry.GeometryBase]) -> IEnumerable<GeometryBase>
Rhino.Geometry.Squisher.SquishCurve(self, curve: Rhino.Geometry.Curve) -> PolylineCurve
Rhino.Geometry.Squisher.SquishMesh(self, sp: Rhino.Geometry.SquishParameters, mesh3d: Rhino.Geometry.Mesh) -> Mesh
Rhino.Geometry.Squisher.SquishMesh(self, sp: Rhino.Geometry.SquishParameters, mesh3d: Rhino.Geometry.Mesh, marks: Iterable[Rhino.Geometry.GeometryBase], squished_marks_out: List[Rhino.Geometry.GeometryBase]) -> Mesh
Rhino.Geometry.Squisher.SquishPoint(self, point: Rhino.Geometry.Point3d, squishedPoint: Rhino.Geometry.Point3d@) -> bool
Rhino.Geometry.Squisher.SquishSurface(self, sp: Rhino.Geometry.SquishParameters, surface: Rhino.Geometry.Surface) -> Brep
Rhino.Geometry.Squisher.SquishSurface(self, sp: Rhino.Geometry.SquishParameters, surface: Rhino.Geometry.Surface, marks: Iterable[Rhino.Geometry.GeometryBase], squished_marks_out: List[Rhino.Geometry.GeometryBase]) -> Brep
Rhino.Geometry.Squisher.SquishTextDot(self, textDot: Rhino.Geometry.TextDot) -> TextDot
Rhino.Geometry.Squisher.__init__(self) -> None
Rhino.Geometry.SubD.ClearEvaluationCache(self) -> None
Rhino.Geometry.SubD.ComponentFromComponentIndex(self, componentIndex: Rhino.Geometry.ComponentIndex) -> SubDComponent
Rhino.Geometry.SubD.CopyEvaluationCache(self, src: Rhino.Geometry.SubD@) -> bool
Rhino.Geometry.SubD.CreateFromCylinder(cylinder: Rhino.Geometry.Cylinder, circumferenceFaceCount: System.UInt32, heightFaceCount: System.UInt32, endCapStyle: Rhino.Geometry.SubDEndCapStyle, endCapEdgeTag: Rhino.Geometry.SubDEdgeTag, radiusLocation: Rhino.Geometry.SubDComponentLocation) -> Rhino.Geometry.SubD
Rhino.Geometry.SubD.CreateFromLoft(curves: Iterable[Rhino.Geometry.NurbsCurve], closed: bool, addCorners: bool, addCreases: bool, divisions: int) -> Rhino.Geometry.SubD
Rhino.Geometry.SubD.CreateFromMesh(mesh: Rhino.Geometry.Mesh) -> Rhino.Geometry.SubD
Rhino.Geometry.SubD.CreateFromMesh(mesh: Rhino.Geometry.Mesh, options: Rhino.Geometry.SubDCreationOptions) -> Rhino.Geometry.SubD
Rhino.Geometry.SubD.CreateFromSurface(surface: Rhino.Geometry.Surface, method: Rhino.Geometry.SubDFromSurfaceMethods, corners: bool) -> Rhino.Geometry.SubD
Rhino.Geometry.SubD.CreateFromSweep(rail1: Rhino.Geometry.NurbsCurve, rail2: Rhino.Geometry.NurbsCurve, shapes: Iterable[Rhino.Geometry.NurbsCurve], closed: bool, addCorners: bool) -> Rhino.Geometry.SubD
Rhino.Geometry.SubD.CreateFromSweep(rail1: Rhino.Geometry.NurbsCurve, shapes: Iterable[Rhino.Geometry.NurbsCurve], closed: bool, addCorners: bool, roadlikeFrame: bool, roadlikeNormal: Rhino.Geometry.Vector3d) -> Rhino.Geometry.SubD
Rhino.Geometry.SubD.CreateGlobeSphere(sphere: Rhino.Geometry.Sphere, vertexLocation: Rhino.Geometry.SubDComponentLocation, axialFaceCount: System.UInt32, equatorialFaceCount: System.UInt32) -> Rhino.Geometry.SubD
Rhino.Geometry.SubD.CreateIcosahedron(sphere: Rhino.Geometry.Sphere, vertexLocation: Rhino.Geometry.SubDComponentLocation) -> Rhino.Geometry.SubD
Rhino.Geometry.SubD.CreateQuadSphere(sphere: Rhino.Geometry.Sphere, vertexLocation: Rhino.Geometry.SubDComponentLocation, quadSubdivisionLevel: System.UInt32) -> Rhino.Geometry.SubD
Rhino.Geometry.SubD.CreateTriSphere(sphere: Rhino.Geometry.Sphere, vertexLocation: Rhino.Geometry.SubDComponentLocation, triSubdivisionLevel: System.UInt32) -> Rhino.Geometry.SubD
Rhino.Geometry.SubD.Dispose(self, disposing: bool) -> None
Rhino.Geometry.SubD.DuplicateEdgeCurves(self) -> List[Curve]
Rhino.Geometry.SubD.DuplicateEdgeCurves(self, boundaryOnly: bool, interiorOnly: bool, smoothOnly: bool, sharpOnly: bool, creaseOnly: bool, clampEnds: bool) -> List[Curve]
Rhino.Geometry.SubD.Flip(self) -> bool
Rhino.Geometry.SubD.InterpolateSurfacePoints(self, surfacePoints: List[Rhino.Geometry.Point3d]) -> bool
Rhino.Geometry.SubD.InterpolateSurfacePoints(self, vertexIndices: List[System.UInt32], surfacePoints: List[Rhino.Geometry.Point3d]) -> bool
Rhino.Geometry.SubD.JoinSubDs(subdsToJoin: Iterable[Rhino.Geometry.SubD], tolerance: float, joinedEdgesAreCreases: bool) -> List[Rhino.Geometry.SubD]
Rhino.Geometry.SubD.JoinSubDs(subdsToJoin: Iterable[Rhino.Geometry.SubD], tolerance: float, joinedEdgesAreCreases: bool, preserveSymmetry: bool) -> List[Rhino.Geometry.SubD]
Rhino.Geometry.SubD.MergeAllCoplanarFaces(self, tolerance: float) -> bool
Rhino.Geometry.SubD.MergeAllCoplanarFaces(self, tolerance: float, angleTolerance: float) -> bool
Rhino.Geometry.SubD.NonConstOperation(self) -> None
Rhino.Geometry.SubD.Offset(self, distance: float, solidify: bool) -> Rhino.Geometry.SubD
Rhino.Geometry.SubD.OnSwitchToNonConst(self) -> None
Rhino.Geometry.SubD.PackFaces(self) -> uint
Rhino.Geometry.SubD.SetVertexSurfacePoint(self, vertexIndex: System.UInt32, surfacePoint: Rhino.Geometry.Point3d) -> bool
Rhino.Geometry.SubD.Subdivide(self) -> bool
Rhino.Geometry.SubD.Subdivide(self, count: int) -> bool
Rhino.Geometry.SubD.Subdivide(self, faceIndices: Iterable[int]) -> bool
Rhino.Geometry.SubD.SurfaceMeshCacheExists(self, bTextureCoordinatesExist: bool, bCurvaturesExist: bool, bColorsExist: bool) -> bool
Rhino.Geometry.SubD.ToBrep(self) -> Brep
Rhino.Geometry.SubD.ToBrep(self, options: Rhino.Geometry.SubDToBrepOptions) -> Brep
Rhino.Geometry.SubD.TransformComponents(self, components: Iterable[Rhino.Geometry.ComponentIndex], xform: Rhino.Geometry.Transform, componentLocation: Rhino.Geometry.SubDComponentLocation) -> uint
Rhino.Geometry.SubD.UpdateAllTagsAndSectorCoefficients(self) -> uint
Rhino.Geometry.SubD.UpdateSurfaceMeshCache(self, lazyUpdate: bool) -> uint
Rhino.Geometry.SubD.__init__(self) -> None
Rhino.Geometry.SubD.__init__(self, info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext) -> None
Rhino.Geometry.SubDCreationOptions.Dispose(self) -> None
Rhino.Geometry.SubDCreationOptions.Finalize(self) -> None
Rhino.Geometry.SubDCreationOptions.__init__(self) -> None
Rhino.Geometry.SubDDisplayParameters.AbsoluteDisplayDensityFromSubD(adaptiveSubDDisplayDensity: System.UInt32, subd: Rhino.Geometry.SubD) -> uint
Rhino.Geometry.SubDDisplayParameters.AbsoluteDisplayDensityFromSubDFaceCount(adaptiveSubDDisplayDensity: System.UInt32, subDFaceCount: System.UInt32) -> uint
Rhino.Geometry.SubDDisplayParameters.ClampDisplayDensity(displayDensity: System.UInt32) -> uint
Rhino.Geometry.SubDDisplayParameters.Coarse() -> Rhino.Geometry.SubDDisplayParameters
Rhino.Geometry.SubDDisplayParameters.CreateFromAbsoluteDisplayDensity(absoluteSubDDisplayDensity: System.UInt32) -> Rhino.Geometry.SubDDisplayParameters
Rhino.Geometry.SubDDisplayParameters.CreateFromDisplayDensity(adaptiveSubDDisplayDensity: System.UInt32) -> Rhino.Geometry.SubDDisplayParameters
Rhino.Geometry.SubDDisplayParameters.CreateFromMeshDensity(normalizedMeshDensity: float) -> Rhino.Geometry.SubDDisplayParameters
Rhino.Geometry.SubDDisplayParameters.Default() -> Rhino.Geometry.SubDDisplayParameters
Rhino.Geometry.SubDDisplayParameters.DisplayDensity(self, subd: Rhino.Geometry.SubD) -> uint
Rhino.Geometry.SubDDisplayParameters.Dispose(self) -> None
Rhino.Geometry.SubDDisplayParameters.Dispose(self, disposing: bool) -> None
Rhino.Geometry.SubDDisplayParameters.Empty() -> Rhino.Geometry.SubDDisplayParameters
Rhino.Geometry.SubDDisplayParameters.ExtraCoarse() -> Rhino.Geometry.SubDDisplayParameters
Rhino.Geometry.SubDDisplayParameters.ExtraFine() -> Rhino.Geometry.SubDDisplayParameters
Rhino.Geometry.SubDDisplayParameters.Finalize(self) -> None
Rhino.Geometry.SubDDisplayParameters.Fine() -> Rhino.Geometry.SubDDisplayParameters
Rhino.Geometry.SubDDisplayParameters.FromEncodedString(value: str) -> Rhino.Geometry.SubDDisplayParameters
Rhino.Geometry.SubDDisplayParameters.GetObjectData(self, info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext) -> None
Rhino.Geometry.SubDDisplayParameters.Medium() -> Rhino.Geometry.SubDDisplayParameters
Rhino.Geometry.SubDDisplayParameters.SetAbsoluteDisplayDensity(self, absoluteDisplayDensity: System.UInt32) -> None
Rhino.Geometry.SubDDisplayParameters.SetAdaptiveDisplayDensity(self, adaptiveDisplayDensity: System.UInt32) -> None
Rhino.Geometry.SubDDisplayParameters.ToEncodedString(self) -> str
Rhino.Geometry.SubDDisplayParameters.__init__(self) -> None
Rhino.Geometry.SubDDisplayParameters.__init__(self, info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext) -> None
Rhino.Geometry.SubDEdge.ComponentIndex(self) -> ComponentIndex
Rhino.Geometry.SubDEdge.FaceAt(self, index: int) -> SubDFace
Rhino.Geometry.SubDEdge.ToNurbsCurve(self, clampEnds: bool) -> NurbsCurve
Rhino.Geometry.SubDFace.ComponentIndex(self) -> ComponentIndex
Rhino.Geometry.SubDFace.EdgeAt(self, index: int) -> SubDEdge
Rhino.Geometry.SubDFace.EdgeDirectionMatchesFaceOrientation(self, index: int) -> bool
Rhino.Geometry.SubDFace.VertexAt(self, index: int) -> SubDVertex
Rhino.Geometry.SubDSurfaceInterpolator.Clear(self) -> None
Rhino.Geometry.SubDSurfaceInterpolator.CreateFromMarkedVertices(subd: Rhino.Geometry.SubD, interpolatedVerticesMark: bool, freeVertexCount: System.UInt32@) -> Rhino.Geometry.SubDSurfaceInterpolator
Rhino.Geometry.SubDSurfaceInterpolator.CreateFromSelectedVertices(subd: Rhino.Geometry.SubD, freeVertexCount: System.UInt32@) -> Rhino.Geometry.SubDSurfaceInterpolator
Rhino.Geometry.SubDSurfaceInterpolator.CreateFromSubD(subd: Rhino.Geometry.SubD, freeVertexCount: System.UInt32@) -> Rhino.Geometry.SubDSurfaceInterpolator
Rhino.Geometry.SubDSurfaceInterpolator.CreateFromVertexIdList(subd: Rhino.Geometry.SubD, vertexIndices: Iterable[System.UInt32], freeVertexCount: System.UInt32@) -> Rhino.Geometry.SubDSurfaceInterpolator
Rhino.Geometry.SubDSurfaceInterpolator.Dispose(self) -> None
Rhino.Geometry.SubDSurfaceInterpolator.Dispose(self, disposing: bool) -> None
Rhino.Geometry.SubDSurfaceInterpolator.Finalize(self) -> None
Rhino.Geometry.SubDSurfaceInterpolator.FixedVertexCount(self) -> uint
Rhino.Geometry.SubDSurfaceInterpolator.InterpolatedVertexCount(self) -> uint
Rhino.Geometry.SubDSurfaceInterpolator.InterpolatedVertexIndex(self, vertexId: System.UInt32) -> uint
Rhino.Geometry.SubDSurfaceInterpolator.IsInterpolatedVertex(self, vertex: Rhino.Geometry.SubDVertex) -> bool
Rhino.Geometry.SubDSurfaceInterpolator.IsInterpolatedVertex(self, vertexId: System.UInt32) -> bool
Rhino.Geometry.SubDSurfaceInterpolator.Solve(self, surfacePoints: List[Rhino.Geometry.Point3d]) -> bool
Rhino.Geometry.SubDSurfaceInterpolator.Transform(self, transform: Rhino.Geometry.Transform) -> None
Rhino.Geometry.SubDSurfaceInterpolator.VertexIdList(self) -> List[uint]
Rhino.Geometry.SubDSurfaceInterpolator.__init__(self) -> None
Rhino.Geometry.SubDToBrepOptions.Dispose(self) -> None
Rhino.Geometry.SubDToBrepOptions.Dispose(self, disposing: bool) -> None
Rhino.Geometry.SubDToBrepOptions.Finalize(self) -> None
Rhino.Geometry.SubDToBrepOptions.__init__(self) -> None
Rhino.Geometry.SubDToBrepOptions.__init__(self, packFaces: bool, arg2: Rhino.Geometry.SubDToBrepOptions.ExtraordinaryVertexProcessOption) -> None
Rhino.Geometry.SubDVertex.EdgeAt(self, index: int) -> SubDEdge
Rhino.Geometry.SubDVertex.FaceAt(self, index: int) -> SubDFace
Rhino.Geometry.SubDVertex.SetControlNetPoint(self, position: Rhino.Geometry.Point3d, bClearNeighborhoodCache: bool) -> bool
Rhino.Geometry.SubDVertex.SurfacePoint(self) -> Point3d
Rhino.Geometry.SumSurface.Create(curve: Rhino.Geometry.Curve, extrusionDirection: Rhino.Geometry.Vector3d) -> Rhino.Geometry.SumSurface
Rhino.Geometry.SumSurface.Create(curveA: Rhino.Geometry.Curve, curveB: Rhino.Geometry.Curve) -> Rhino.Geometry.SumSurface
Rhino.Geometry.SumSurface.__init__(self, info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext) -> None
Rhino.Geometry.Surface.ClosestPoint(self, testPoint: Rhino.Geometry.Point3d, u: System.Double@, v: System.Double@) -> bool
Rhino.Geometry.Surface.ClosestSide(self, u: float, v: float) -> IsoStatus
Rhino.Geometry.Surface.CreateExtrusion(profile: Rhino.Geometry.Curve, direction: Rhino.Geometry.Vector3d) -> Rhino.Geometry.Surface
Rhino.Geometry.Surface.CreateExtrusionToPoint(profile: Rhino.Geometry.Curve, apexPoint: Rhino.Geometry.Point3d) -> Rhino.Geometry.Surface
Rhino.Geometry.Surface.CreatePeriodicSurface(surface: Rhino.Geometry.Surface, direction: int) -> Rhino.Geometry.Surface
Rhino.Geometry.Surface.CreatePeriodicSurface(surface: Rhino.Geometry.Surface, direction: int, bSmooth: bool) -> Rhino.Geometry.Surface
Rhino.Geometry.Surface.CreateRollingBallFillet(surfaceA: Rhino.Geometry.Surface, flipA: bool, surfaceB: Rhino.Geometry.Surface, flipB: bool, radius: float, tolerance: float) -> List[Rhino.Geometry.Surface]
Rhino.Geometry.Surface.CreateRollingBallFillet(surfaceA: Rhino.Geometry.Surface, surfaceB: Rhino.Geometry.Surface, radius: float, tolerance: float) -> List[Rhino.Geometry.Surface]
Rhino.Geometry.Surface.CreateRollingBallFillet(surfaceA: Rhino.Geometry.Surface, uvA: Rhino.Geometry.Point2d, surfaceB: Rhino.Geometry.Surface, uvB: Rhino.Geometry.Point2d, radius: float, tolerance: float) -> List[Rhino.Geometry.Surface]
Rhino.Geometry.Surface.CreateSoftEditSurface(surface: Rhino.Geometry.Surface, uv: Rhino.Geometry.Point2d, delta: Rhino.Geometry.Vector3d, uLength: float, vLength: float, tolerance: float, fixEnds: bool) -> Rhino.Geometry.Surface
Rhino.Geometry.Surface.CreateTweenSurfacesWithSampling(surface0: Rhino.Geometry.Surface, surface1: Rhino.Geometry.Surface, numSurfaces: int, numSamples: int, tolerance: float) -> List[Rhino.Geometry.Surface]
Rhino.Geometry.Surface.CurvatureAt(self, u: float, v: float) -> SurfaceCurvature
Rhino.Geometry.Surface.Degree(self, direction: int) -> int
Rhino.Geometry.Surface.Domain(self, direction: int) -> Interval
Rhino.Geometry.Surface.Evaluate(self, u: float, v: float, numberDerivatives: int, point: Rhino.Geometry.Point3d@, derivatives: Rhino.Geometry.Vector3d[]@) -> bool
Rhino.Geometry.Surface.Extend(self, direction: int, interval: Rhino.Geometry.Interval) -> bool
Rhino.Geometry.Surface.Extend(self, edge: Rhino.Geometry.IsoStatus, extensionLength: float, smooth: bool) -> Rhino.Geometry.Surface
Rhino.Geometry.Surface.Fit(self, uDegree: int, vDegree: int, fitTolerance: float) -> Rhino.Geometry.Surface
Rhino.Geometry.Surface.FitCurveToSurface(self, trimCurve3d: Rhino.Geometry.Curve, trimProjectionDir: Rhino.Geometry.Vector3d, tolerance: float, Knots: Iterable[float], divideIntoSections: bool, trimCurveOnSurface: Rhino.Geometry.Curve@, splitCurve: Rhino.Geometry.Curve@) -> List[Curve]
Rhino.Geometry.Surface.FrameAt(self, u: float, v: float, frame: Rhino.Geometry.Plane@) -> bool
Rhino.Geometry.Surface.GetNextDiscontinuity(self, direction: int, continuityType: Rhino.Geometry.Continuity, t0: float, t1: float, cosAngleTolerance: float, curvatureTolerance: float, t: System.Double@) -> bool
Rhino.Geometry.Surface.GetNextDiscontinuity(self, direction: int, continuityType: Rhino.Geometry.Continuity, t0: float, t1: float, t: System.Double@) -> bool
Rhino.Geometry.Surface.GetNurbsFormParameterFromSurfaceParameter(self, surfaceS: float, surfaceT: float, nurbsS: System.Double@, nurbsT: System.Double@) -> bool
Rhino.Geometry.Surface.GetSpanVector(self, direction: int) -> List[float]
Rhino.Geometry.Surface.GetSurfaceParameterFromNurbsFormParameter(self, nurbsS: float, nurbsT: float, surfaceS: System.Double@, surfaceT: System.Double@) -> bool
Rhino.Geometry.Surface.GetSurfaceSize(self, width: System.Double@, height: System.Double@) -> bool
Rhino.Geometry.Surface.HasNurbsForm(self) -> int
Rhino.Geometry.Surface.InterpolatedCurveOnSurface(self, points: Iterable[Rhino.Geometry.Point3d], tolerance: float) -> NurbsCurve
Rhino.Geometry.Surface.InterpolatedCurveOnSurfaceUV(self, points: Iterable[Rhino.Geometry.Point2d], tolerance: float) -> NurbsCurve
Rhino.Geometry.Surface.InterpolatedCurveOnSurfaceUV(self, points: Iterable[Rhino.Geometry.Point2d], tolerance: float, closed: bool, closedSurfaceHandling: int) -> NurbsCurve
Rhino.Geometry.Surface.IsAtSeam(self, u: float, v: float) -> int
Rhino.Geometry.Surface.IsAtSingularity(self, u: float, v: float, exact: bool) -> bool
Rhino.Geometry.Surface.IsClosed(self, direction: int) -> bool
Rhino.Geometry.Surface.IsCone(self) -> bool
Rhino.Geometry.Surface.IsCone(self, tolerance: float) -> bool
Rhino.Geometry.Surface.IsContinuous(self, continuityType: Rhino.Geometry.Continuity, u: float, v: float) -> bool
Rhino.Geometry.Surface.IsCylinder(self) -> bool
Rhino.Geometry.Surface.IsCylinder(self, tolerance: float) -> bool
Rhino.Geometry.Surface.IsIsoparametric(self, bbox: Rhino.Geometry.BoundingBox) -> IsoStatus
Rhino.Geometry.Surface.IsIsoparametric(self, curve: Rhino.Geometry.Curve) -> IsoStatus
Rhino.Geometry.Surface.IsIsoparametric(self, curve: Rhino.Geometry.Curve, curveDomain: Rhino.Geometry.Interval) -> IsoStatus
Rhino.Geometry.Surface.IsPeriodic(self, direction: int) -> bool
Rhino.Geometry.Surface.IsPlanar(self) -> bool
Rhino.Geometry.Surface.IsPlanar(self, tolerance: float) -> bool
Rhino.Geometry.Surface.IsSingular(self, side: int) -> bool
Rhino.Geometry.Surface.IsSphere(self) -> bool
Rhino.Geometry.Surface.IsSphere(self, tolerance: float) -> bool
Rhino.Geometry.Surface.IsTorus(self) -> bool
Rhino.Geometry.Surface.IsTorus(self, tolerance: float) -> bool
Rhino.Geometry.Surface.IsoCurve(self, direction: int, constantParameter: float) -> Curve
Rhino.Geometry.Surface.LocalClosestPoint(self, testPoint: Rhino.Geometry.Point3d, seedU: float, seedV: float, u: System.Double@, v: System.Double@) -> bool
Rhino.Geometry.Surface.NormalAt(self, u: float, v: float) -> Vector3d
Rhino.Geometry.Surface.Offset(self, distance: float, tolerance: float) -> Rhino.Geometry.Surface
Rhino.Geometry.Surface.PointAt(self, u: float, v: float) -> Point3d
Rhino.Geometry.Surface.Pullback(self, curve3d: Rhino.Geometry.Curve, tolerance: float) -> Curve
Rhino.Geometry.Surface.Pullback(self, curve3d: Rhino.Geometry.Curve, tolerance: float, curve3dSubdomain: Rhino.Geometry.Interval) -> Curve
Rhino.Geometry.Surface.Pushup(self, curve2d: Rhino.Geometry.Curve, tolerance: float) -> Curve
Rhino.Geometry.Surface.Pushup(self, curve2d: Rhino.Geometry.Curve, tolerance: float, curve2dSubdomain: Rhino.Geometry.Interval) -> Curve
Rhino.Geometry.Surface.Rebuild(self, uDegree: int, vDegree: int, uPointCount: int, vPointCount: int) -> NurbsSurface
Rhino.Geometry.Surface.RebuildOneDirection(self, direction: int, pointCount: int, loftType: Rhino.Geometry.LoftType, refitTolerance: float) -> NurbsSurface
Rhino.Geometry.Surface.RefitSimplySplitSurface(self, trimCurve3d: Rhino.Geometry.Curve, trimProjectionDir: Rhino.Geometry.Vector3d, tolerance: float, knotAdditionMode: Rhino.Geometry.RefitTrimKnotMode, numInsertKnots: int, Knots: Iterable[float], sectionMode: Rhino.Geometry.RefitTrimSectionMode, numNonTrimSpans: int, meetCurve: bool, oneSided: bool, PtActive: Rhino.Geometry.Point3d, outputSurface: bool, outputCurve: bool, numSections: System.Int32@, lowerSurface: List[Rhino.Geometry.Surface], upperSurface: List[Rhino.Geometry.Surface], edgeCurve: List[Rhino.Geometry.Curve], FitMeasurement: System.Double@, trimCurveOnSurface: Rhino.Geometry.Curve@, splitCurve: Rhino.Geometry.Curve@) -> bool
Rhino.Geometry.Surface.RefitSplit(self, curve: Rhino.Geometry.Curve, trimProjectionDir: Rhino.Geometry.Vector3d, tolerance: float, Knots: Iterable[float], bMeetCurve: bool, divideIntoSections: bool, srfLower: List[Rhino.Geometry.Surface], srfUpper: List[Rhino.Geometry.Surface], edgeCurve: List[Rhino.Geometry.Curve], trimCurveOnSurface: Rhino.Geometry.Curve@, splitCurve: Rhino.Geometry.Curve@) -> int
Rhino.Geometry.Surface.Reverse(self, direction: int) -> Rhino.Geometry.Surface
Rhino.Geometry.Surface.Reverse(self, direction: int, inPlace: bool) -> Rhino.Geometry.Surface
Rhino.Geometry.Surface.SetDomain(self, direction: int, domain: Rhino.Geometry.Interval) -> bool
Rhino.Geometry.Surface.ShortPath(self, start: Rhino.Geometry.Point2d, end: Rhino.Geometry.Point2d, tolerance: float) -> Curve
Rhino.Geometry.Surface.Smooth(self, smoothFactor: float, bXSmooth: bool, bYSmooth: bool, bZSmooth: bool, bFixBoundaries: bool, coordinateSystem: Rhino.Geometry.SmoothingCoordinateSystem) -> Rhino.Geometry.Surface
Rhino.Geometry.Surface.Smooth(self, smoothFactor: float, bXSmooth: bool, bYSmooth: bool, bZSmooth: bool, bFixBoundaries: bool, coordinateSystem: Rhino.Geometry.SmoothingCoordinateSystem, plane: Rhino.Geometry.Plane) -> Rhino.Geometry.Surface
Rhino.Geometry.Surface.SpanCount(self, direction: int) -> int
Rhino.Geometry.Surface.Split(self, direction: int, parameter: float) -> List[Rhino.Geometry.Surface]
Rhino.Geometry.Surface.ToBrep(self) -> Brep
Rhino.Geometry.Surface.ToNurbsSurface(self) -> NurbsSurface
Rhino.Geometry.Surface.ToNurbsSurface(self, tolerance: float, accuracy: System.Int32@) -> NurbsSurface
Rhino.Geometry.Surface.Transpose(self) -> Rhino.Geometry.Surface
Rhino.Geometry.Surface.Transpose(self, inPlace: bool) -> Rhino.Geometry.Surface
Rhino.Geometry.Surface.Trim(self, u: Rhino.Geometry.Interval, v: Rhino.Geometry.Interval) -> Rhino.Geometry.Surface
Rhino.Geometry.Surface.TryGetCone(self, cone: Rhino.Geometry.Cone@) -> bool
Rhino.Geometry.Surface.TryGetCone(self, cone: Rhino.Geometry.Cone@, tolerance: float) -> bool
Rhino.Geometry.Surface.TryGetCylinder(self, cylinder: Rhino.Geometry.Cylinder@) -> bool
Rhino.Geometry.Surface.TryGetCylinder(self, cylinder: Rhino.Geometry.Cylinder@, tolerance: float) -> bool
Rhino.Geometry.Surface.TryGetFiniteCylinder(self, cylinder: Rhino.Geometry.Cylinder@, tolerance: float) -> bool
Rhino.Geometry.Surface.TryGetPlane(self, plane: Rhino.Geometry.Plane@) -> bool
Rhino.Geometry.Surface.TryGetPlane(self, plane: Rhino.Geometry.Plane@, tolerance: float) -> bool
Rhino.Geometry.Surface.TryGetSphere(self, sphere: Rhino.Geometry.Sphere@) -> bool
Rhino.Geometry.Surface.TryGetSphere(self, sphere: Rhino.Geometry.Sphere@, tolerance: float) -> bool
Rhino.Geometry.Surface.TryGetTorus(self, torus: Rhino.Geometry.Torus@) -> bool
Rhino.Geometry.Surface.TryGetTorus(self, torus: Rhino.Geometry.Torus@, tolerance: float) -> bool
Rhino.Geometry.Surface.VariableOffset(self, uMinvMin: float, uMinvMax: float, uMaxvMin: float, uMaxvMax: float, interiorParameters: Iterable[Rhino.Geometry.Point2d], interiorDistances: Iterable[float], tolerance: float) -> Rhino.Geometry.Surface
Rhino.Geometry.Surface.VariableOffset(self, uMinvMin: float, uMinvMax: float, uMaxvMin: float, uMaxvMax: float, tolerance: float) -> Rhino.Geometry.Surface
Rhino.Geometry.Surface.__init__(self) -> None
Rhino.Geometry.Surface.__init__(self, info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext) -> None
Rhino.Geometry.SurfaceCurvature.Direction(self, direction: int) -> Vector3d
Rhino.Geometry.SurfaceCurvature.Kappa(self, direction: int) -> float
Rhino.Geometry.SurfaceCurvature.OsculatingCircle(self, direction: int) -> Circle
Rhino.Geometry.SurfaceFilletBase.ChangeFilletRadius(self, radius: float) -> bool
Rhino.Geometry.SurfaceFilletBase.CreateG2ChordalQuinticFilletSrf(faceA: Rhino.Geometry.BrepFace, uvA: Rhino.Geometry.Point2d, faceB: Rhino.Geometry.BrepFace, uvB: Rhino.Geometry.Point2d, radius: float, tolerance: float, trimmedBrepsA: List[Rhino.Geometry.Brep], trimmedBrepsB: List[Rhino.Geometry.Brep], rail_degree: int, bTrim: bool, bExtend: bool, Fillets: List[Rhino.Geometry.Brep]) -> bool
Rhino.Geometry.SurfaceFilletBase.CreateNonRationalCubicArcsFilletSrf(faceA: Rhino.Geometry.BrepFace, uvA: Rhino.Geometry.Point2d, faceB: Rhino.Geometry.BrepFace, uvB: Rhino.Geometry.Point2d, radius: float, tolerance: float, trimmedBrepsA: List[Rhino.Geometry.Brep], trimmedBrepsB: List[Rhino.Geometry.Brep], rail_degree: int, bTrim: bool, bExtend: bool, Fillets: List[Rhino.Geometry.Brep]) -> bool
Rhino.Geometry.SurfaceFilletBase.CreateNonRationalCubicFilletSrf(faceA: Rhino.Geometry.BrepFace, uvA: Rhino.Geometry.Point2d, faceB: Rhino.Geometry.BrepFace, uvB: Rhino.Geometry.Point2d, radius: float, tolerance: float, trimmedBrepsA: List[Rhino.Geometry.Brep], trimmedBrepsB: List[Rhino.Geometry.Brep], rail_degree: int, TanSlider: float, bTrim: bool, bExtend: bool, Fillets: List[Rhino.Geometry.Brep]) -> bool
Rhino.Geometry.SurfaceFilletBase.CreateNonRationalQuarticArcsFilletSrf(faceA: Rhino.Geometry.BrepFace, uvA: Rhino.Geometry.Point2d, faceB: Rhino.Geometry.BrepFace, uvB: Rhino.Geometry.Point2d, radius: float, tolerance: float, trimmedBrepsA: List[Rhino.Geometry.Brep], trimmedBrepsB: List[Rhino.Geometry.Brep], rail_degree: int, bTrim: bool, bExtend: bool, Fillets: List[Rhino.Geometry.Brep]) -> bool
Rhino.Geometry.SurfaceFilletBase.CreateNonRationalQuarticFilletSrf(faceA: Rhino.Geometry.BrepFace, uvA: Rhino.Geometry.Point2d, faceB: Rhino.Geometry.BrepFace, uvB: Rhino.Geometry.Point2d, radius: float, tolerance: float, trimmedBrepsA: List[Rhino.Geometry.Brep], trimmedBrepsB: List[Rhino.Geometry.Brep], rail_degree: int, TanSlider: float, InnerSlider: float, bTrim: bool, bExtend: bool, Fillets: List[Rhino.Geometry.Brep]) -> bool
Rhino.Geometry.SurfaceFilletBase.CreateNonRationalQuinticArcsFilletSrf(faceA: Rhino.Geometry.BrepFace, uvA: Rhino.Geometry.Point2d, faceB: Rhino.Geometry.BrepFace, uvB: Rhino.Geometry.Point2d, radius: float, tolerance: float, trimmedBrepsA: List[Rhino.Geometry.Brep], trimmedBrepsB: List[Rhino.Geometry.Brep], rail_degree: int, bTrim: bool, bExtend: bool, Fillets: List[Rhino.Geometry.Brep]) -> bool
Rhino.Geometry.SurfaceFilletBase.CreateNonRationalQuinticFilletSrf(faceA: Rhino.Geometry.BrepFace, uvA: Rhino.Geometry.Point2d, faceB: Rhino.Geometry.BrepFace, uvB: Rhino.Geometry.Point2d, radius: float, tolerance: float, trimmedBrepsA: List[Rhino.Geometry.Brep], trimmedBrepsB: List[Rhino.Geometry.Brep], rail_degree: int, TanSlider: float, InnerSlider: float, bTrim: bool, bExtend: bool, Fillets: List[Rhino.Geometry.Brep]) -> bool
Rhino.Geometry.SurfaceFilletBase.CreateRationalArcsFilletSrf(faceA: Rhino.Geometry.BrepFace, uvA: Rhino.Geometry.Point2d, faceB: Rhino.Geometry.BrepFace, uvB: Rhino.Geometry.Point2d, radius: float, tolerance: float, trimmedBrepsA: List[Rhino.Geometry.Brep], trimmedBrepsB: List[Rhino.Geometry.Brep], rail_degree: int, bTrim: bool, bExtend: bool, Fillets: List[Rhino.Geometry.Brep]) -> bool
Rhino.Geometry.SurfaceFilletBase.Dispose(self) -> None
Rhino.Geometry.SurfaceFilletBase.Dispose(self, disposing: bool) -> None
Rhino.Geometry.SurfaceFilletBase.Finalize(self) -> None
Rhino.Geometry.SurfaceFilletBase.G2ChordalQuintic(self, railDegree: int, bExtend: bool, Fillets: List[Rhino.Geometry.Brep]) -> bool
Rhino.Geometry.SurfaceFilletBase.IsInitialized(self) -> bool
Rhino.Geometry.SurfaceFilletBase.NonRationalCubic(self, railDegree: int, TanSlider: float, bExtend: bool, Fillets: List[Rhino.Geometry.Brep]) -> bool
Rhino.Geometry.SurfaceFilletBase.NonRationalCubicArcs(self, railDegree: int, bExtend: bool, Fillets: List[Rhino.Geometry.Brep]) -> bool
Rhino.Geometry.SurfaceFilletBase.NonRationalQuartic(self, railDegree: int, TanSlider: float, InnerSlider: float, bExtend: bool, Fillets: List[Rhino.Geometry.Brep]) -> bool
Rhino.Geometry.SurfaceFilletBase.NonRationalQuarticArcs(self, railDegree: int, bExtend: bool, Fillets: List[Rhino.Geometry.Brep]) -> bool
Rhino.Geometry.SurfaceFilletBase.NonRationalQuintic(self, railDegree: int, TanSlider: float, InnerSlider: float, bExtend: bool, Fillets: List[Rhino.Geometry.Brep]) -> bool
Rhino.Geometry.SurfaceFilletBase.NonRationalQuinticArcs(self, railDegree: int, bExtend: bool, Fillets: List[Rhino.Geometry.Brep]) -> bool
Rhino.Geometry.SurfaceFilletBase.RationalArcs(self, railDegree: int, bExtend: bool, Fillets: List[Rhino.Geometry.Brep]) -> bool
Rhino.Geometry.SurfaceFilletBase.TrimBreps(self, bExtend: bool, TrimmedBreps0: List[Rhino.Geometry.Brep], TrimmedBreps1: List[Rhino.Geometry.Brep]) -> bool
Rhino.Geometry.SurfaceFilletBase.__init__(self, FaceA: Rhino.Geometry.BrepFace, uvA: Rhino.Geometry.Point2d, FaceB: Rhino.Geometry.BrepFace, uvB: Rhino.Geometry.Point2d, radius: float, allowExtend: bool, tolerance: float) -> None
Rhino.Geometry.SurfaceFilletBase.__init__(self, FaceA: Rhino.Geometry.BrepFace, uvA: Rhino.Geometry.Point2d, FaceB: Rhino.Geometry.BrepFace, uvB: Rhino.Geometry.Point2d, radius: float, tolerance: float) -> None
Rhino.Geometry.SurfaceFilletBase.__init__(self, RailFace: Rhino.Geometry.BrepFace, Rail3d: Rhino.Geometry.Curve, Face: Rhino.Geometry.BrepFace, uv: Rhino.Geometry.Point2d, tolerance: float) -> None
Rhino.Geometry.SurfaceFilletBase.__init__(self, face: Rhino.Geometry.BrepFace, uv: Rhino.Geometry.Point2d, rail3d: Rhino.Geometry.Curve, u: float, radius: float, tolerance: float) -> None
Rhino.Geometry.SurfaceProxy.__init__(self) -> None
Rhino.Geometry.SweepOneRail.PerformSweep(self, rail: Rhino.Geometry.Curve, crossSection: Rhino.Geometry.Curve) -> List[Brep]
Rhino.Geometry.SweepOneRail.PerformSweep(self, rail: Rhino.Geometry.Curve, crossSection: Rhino.Geometry.Curve, crossSectionParameter: float) -> List[Brep]
Rhino.Geometry.SweepOneRail.PerformSweep(self, rail: Rhino.Geometry.Curve, crossSections: Iterable[Rhino.Geometry.Curve]) -> List[Brep]
Rhino.Geometry.SweepOneRail.PerformSweep(self, rail: Rhino.Geometry.Curve, crossSections: Iterable[Rhino.Geometry.Curve], crossSectionParameters: Iterable[float]) -> List[Brep]
Rhino.Geometry.SweepOneRail.PerformSweepRebuild(self, rail: Rhino.Geometry.Curve, crossSection: Rhino.Geometry.Curve, crossSectionParameter: float, rebuildCount: int) -> List[Brep]
Rhino.Geometry.SweepOneRail.PerformSweepRebuild(self, rail: Rhino.Geometry.Curve, crossSection: Rhino.Geometry.Curve, rebuildCount: int) -> List[Brep]
Rhino.Geometry.SweepOneRail.PerformSweepRebuild(self, rail: Rhino.Geometry.Curve, crossSections: Iterable[Rhino.Geometry.Curve], crossSectionParameters: Iterable[float], rebuildCount: int) -> List[Brep]
Rhino.Geometry.SweepOneRail.PerformSweepRebuild(self, rail: Rhino.Geometry.Curve, crossSections: Iterable[Rhino.Geometry.Curve], rebuildCount: int) -> List[Brep]
Rhino.Geometry.SweepOneRail.PerformSweepRefit(self, rail: Rhino.Geometry.Curve, crossSection: Rhino.Geometry.Curve, crossSectionParameter: float, refitTolerance: float) -> List[Brep]
Rhino.Geometry.SweepOneRail.PerformSweepRefit(self, rail: Rhino.Geometry.Curve, crossSection: Rhino.Geometry.Curve, refitTolerance: float) -> List[Brep]
Rhino.Geometry.SweepOneRail.PerformSweepRefit(self, rail: Rhino.Geometry.Curve, crossSections: Iterable[Rhino.Geometry.Curve], crossSectionParameters: Iterable[float], refitTolerance: float) -> List[Brep]
Rhino.Geometry.SweepOneRail.PerformSweepRefit(self, rail: Rhino.Geometry.Curve, crossSections: Iterable[Rhino.Geometry.Curve], refitTolerance: float) -> List[Brep]
Rhino.Geometry.SweepOneRail.SetRoadlikeUpDirection(self, up: Rhino.Geometry.Vector3d) -> None
Rhino.Geometry.SweepOneRail.SetToRoadlikeFront(self) -> None
Rhino.Geometry.SweepOneRail.SetToRoadlikeRight(self) -> None
Rhino.Geometry.SweepOneRail.SetToRoadlikeTop(self) -> None
Rhino.Geometry.SweepOneRail.__init__(self) -> None
Rhino.Geometry.SweepTwoRail.PerformSweep(self, rail1: Rhino.Geometry.Curve, rail2: Rhino.Geometry.Curve, crossSection: Rhino.Geometry.Curve) -> List[Brep]
Rhino.Geometry.SweepTwoRail.PerformSweep(self, rail1: Rhino.Geometry.Curve, rail2: Rhino.Geometry.Curve, crossSection: Rhino.Geometry.Curve, crossSectionParameterRail1: float, crossSectionParameterRail2: float) -> List[Brep]
Rhino.Geometry.SweepTwoRail.PerformSweep(self, rail1: Rhino.Geometry.Curve, rail2: Rhino.Geometry.Curve, crossSections: Iterable[Rhino.Geometry.Curve]) -> List[Brep]
Rhino.Geometry.SweepTwoRail.PerformSweep(self, rail1: Rhino.Geometry.Curve, rail2: Rhino.Geometry.Curve, crossSections: Iterable[Rhino.Geometry.Curve], crossSectionParameters1: Iterable[float], crossSectionParameters2: Iterable[float]) -> List[Brep]
Rhino.Geometry.SweepTwoRail.PerformSweepRebuild(self, rail1: Rhino.Geometry.Curve, rail2: Rhino.Geometry.Curve, crossSection: Rhino.Geometry.Curve, crossSectionParameterRail1: float, crossSectionParameterRail2: float, rebuildCount: int) -> List[Brep]
Rhino.Geometry.SweepTwoRail.PerformSweepRebuild(self, rail1: Rhino.Geometry.Curve, rail2: Rhino.Geometry.Curve, crossSection: Rhino.Geometry.Curve, rebuildCount: int) -> List[Brep]
Rhino.Geometry.SweepTwoRail.PerformSweepRebuild(self, rail1: Rhino.Geometry.Curve, rail2: Rhino.Geometry.Curve, crossSections: Iterable[Rhino.Geometry.Curve], crossSectionParametersRail1: Iterable[float], crossSectionParametersRail2: Iterable[float], rebuildCount: int) -> List[Brep]
Rhino.Geometry.SweepTwoRail.PerformSweepRebuild(self, rail1: Rhino.Geometry.Curve, rail2: Rhino.Geometry.Curve, crossSections: Iterable[Rhino.Geometry.Curve], rebuildCount: int) -> List[Brep]
Rhino.Geometry.SweepTwoRail.PerformSweepRefit(self, rail1: Rhino.Geometry.Curve, rail2: Rhino.Geometry.Curve, crossSection: Rhino.Geometry.Curve, crossSectionParameterRail1: float, crossSectionParameterRail2: float, refitTolerance: float) -> List[Brep]
Rhino.Geometry.SweepTwoRail.PerformSweepRefit(self, rail1: Rhino.Geometry.Curve, rail2: Rhino.Geometry.Curve, crossSection: Rhino.Geometry.Curve, refitTolerance: float) -> List[Brep]
Rhino.Geometry.SweepTwoRail.PerformSweepRefit(self, rail1: Rhino.Geometry.Curve, rail2: Rhino.Geometry.Curve, crossSections: Iterable[Rhino.Geometry.Curve], crossSectionParametersRail1: Iterable[float], crossSectionParametersRail2: Iterable[float], refitTolerance: float) -> List[Brep]
Rhino.Geometry.SweepTwoRail.PerformSweepRefit(self, rail1: Rhino.Geometry.Curve, rail2: Rhino.Geometry.Curve, crossSections: Iterable[Rhino.Geometry.Curve], refitTolerance: float) -> List[Brep]
Rhino.Geometry.SweepTwoRail.__init__(self) -> None
Rhino.Geometry.TextDot.__init__(self, info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext) -> None
Rhino.Geometry.TextDot.__init__(self, text: str, location: Rhino.Geometry.Point3d) -> None
Rhino.Geometry.TextEntity.Create(text: str, plane: Rhino.Geometry.Plane, style: Rhino.DocObjects.DimensionStyle, wrapped: bool, rectWidth: float, rotationRadians: float) -> Rhino.Geometry.TextEntity
Rhino.Geometry.TextEntity.CreateCurves(self, dimstyle: Rhino.DocObjects.DimensionStyle, allowOpen: bool, smallCapsScale: float, spacing: float) -> List[Curve]
Rhino.Geometry.TextEntity.CreateCurvesGrouped(self, dimstyle: Rhino.DocObjects.DimensionStyle, allowOpen: bool, smallCapsScale: float, spacing: float) -> List<Curve[]>
Rhino.Geometry.TextEntity.CreateExtrusions(self, dimstyle: Rhino.DocObjects.DimensionStyle, height: float, smallCapsScale: float, spacing: float) -> List[Extrusion]
Rhino.Geometry.TextEntity.CreateExtrusionsGrouped(self, dimstyle: Rhino.DocObjects.DimensionStyle, smallCapsScale: float, height: float, spacing: float) -> List<Extrusion[]>
Rhino.Geometry.TextEntity.CreatePolySurfaces(self, dimstyle: Rhino.DocObjects.DimensionStyle, height: float, smallCapsScale: float, spacing: float) -> List[Brep]
Rhino.Geometry.TextEntity.CreatePolysurfacesGrouped(self, dimstyle: Rhino.DocObjects.DimensionStyle, smallCapsScale: float, height: float, spacing: float) -> List<Brep[]>
Rhino.Geometry.TextEntity.CreateSurfaces(self, dimstyle: Rhino.DocObjects.DimensionStyle, smallCapsScale: float, spacing: float) -> List[Brep]
Rhino.Geometry.TextEntity.CreateSurfacesGrouped(self, dimstyle: Rhino.DocObjects.DimensionStyle, smallCapsScale: float, spacing: float) -> List<Brep[]>
Rhino.Geometry.TextEntity.CreateWithRichText(richTextString: str, plane: Rhino.Geometry.Plane, style: Rhino.DocObjects.DimensionStyle, wrapped: bool, rectWidth: float, rotationRadians: float) -> Rhino.Geometry.TextEntity
Rhino.Geometry.TextEntity.Explode(self) -> List[Curve]
Rhino.Geometry.TextEntity.GetTextTransform(self, textscale: float, dimstyle: Rhino.DocObjects.DimensionStyle) -> Transform
Rhino.Geometry.TextEntity.Transform(self, transform: Rhino.Geometry.Transform, style: Rhino.DocObjects.DimensionStyle) -> bool
Rhino.Geometry.TextEntity.__init__(self) -> None
Rhino.Geometry.TextEntity.__init__(self, info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext) -> None
Rhino.Geometry.Torus.EpsilonEquals(self, other: Rhino.Geometry.Torus, epsilon: float) -> bool
Rhino.Geometry.Torus.ToBrep(self) -> Brep
Rhino.Geometry.Torus.ToNurbsSurface(self) -> NurbsSurface
Rhino.Geometry.Torus.ToRevSurface(self) -> RevSurface
Rhino.Geometry.Torus.__init__(self, basePlane: Rhino.Geometry.Plane, majorRadius: float, minorRadius: float) -> None
Rhino.Geometry.Transform.!=(a: Rhino.Geometry.Transform, b: Rhino.Geometry.Transform) -> operator
Rhino.Geometry.Transform.*(a: Rhino.Geometry.Transform, b: Rhino.Geometry.Transform) -> operator
Rhino.Geometry.Transform.*(m: Rhino.Geometry.Transform, p: Rhino.Geometry.Point3d) -> operator
Rhino.Geometry.Transform.*(m: Rhino.Geometry.Transform, v: Rhino.Geometry.Vector3d) -> operator
Rhino.Geometry.Transform.==(a: Rhino.Geometry.Transform, b: Rhino.Geometry.Transform) -> operator
Rhino.Geometry.Transform.Affineize(self) -> None
Rhino.Geometry.Transform.ChangeBasis(P0: Rhino.Geometry.Point3d, X0: Rhino.Geometry.Vector3d, Y0: Rhino.Geometry.Vector3d, Z0: Rhino.Geometry.Vector3d, P1: Rhino.Geometry.Point3d, X1: Rhino.Geometry.Vector3d, Y1: Rhino.Geometry.Vector3d, Z1: Rhino.Geometry.Vector3d) -> Rhino.Geometry.Transform
Rhino.Geometry.Transform.ChangeBasis(X0: Rhino.Geometry.Vector3d, Y0: Rhino.Geometry.Vector3d, Z0: Rhino.Geometry.Vector3d, X1: Rhino.Geometry.Vector3d, Y1: Rhino.Geometry.Vector3d, Z1: Rhino.Geometry.Vector3d) -> Rhino.Geometry.Transform
Rhino.Geometry.Transform.ChangeBasis(plane0: Rhino.Geometry.Plane, plane1: Rhino.Geometry.Plane) -> Rhino.Geometry.Transform
Rhino.Geometry.Transform.Clone(self) -> Rhino.Geometry.Transform
Rhino.Geometry.Transform.CompareTo(self, other: Rhino.Geometry.Transform) -> int
Rhino.Geometry.Transform.DecomposeAffine(self, linear: Rhino.Geometry.Transform@, translation: Rhino.Geometry.Vector3d@) -> bool
Rhino.Geometry.Transform.DecomposeAffine(self, translation: Rhino.Geometry.Vector3d@, linear: Rhino.Geometry.Transform@) -> bool
Rhino.Geometry.Transform.DecomposeAffine(self, translation: Rhino.Geometry.Vector3d@, rotation: Rhino.Geometry.Transform@, orthogonal: Rhino.Geometry.Transform@, diagonal: Rhino.Geometry.Vector3d@) -> bool
Rhino.Geometry.Transform.DecomposeRigid(self, translation: Rhino.Geometry.Vector3d@, rotation: Rhino.Geometry.Transform@, tolerance: float) -> TransformRigidType
Rhino.Geometry.Transform.DecomposeSimilarity(self, translation: Rhino.Geometry.Vector3d@, dilation: System.Double@, rotation: Rhino.Geometry.Transform@, tolerance: float) -> TransformSimilarityType
Rhino.Geometry.Transform.DecomposeSymmetric(self, matrix: Rhino.Geometry.Transform@, diagonal: Rhino.Geometry.Vector3d@) -> bool
Rhino.Geometry.Transform.DecomposeTextureMapping(self, offset: Rhino.Geometry.Vector3d@, repeat: Rhino.Geometry.Vector3d@, rotation: Rhino.Geometry.Vector3d@) -> None
Rhino.Geometry.Transform.Diagonal(d0: float, d1: float, d2: float) -> Rhino.Geometry.Transform
Rhino.Geometry.Transform.Diagonal(diagonal: Rhino.Geometry.Vector3d) -> Rhino.Geometry.Transform
Rhino.Geometry.Transform.Equals(self, obj: Any) -> bool
Rhino.Geometry.Transform.Equals(self, other: Rhino.Geometry.Transform) -> bool
Rhino.Geometry.Transform.GetEulerZYZ(self, alpha: System.Double@, beta: System.Double@, gamma: System.Double@) -> bool
Rhino.Geometry.Transform.GetHashCode(self) -> int
Rhino.Geometry.Transform.GetQuaternion(self, quaternion: Rhino.Geometry.Quaternion@) -> bool
Rhino.Geometry.Transform.GetYawPitchRoll(self, yaw: System.Double@, pitch: System.Double@, roll: System.Double@) -> bool
Rhino.Geometry.Transform.IsRigid(self, tolerance: float) -> TransformRigidType
Rhino.Geometry.Transform.IsSimilarity(self, tolerance: float) -> TransformSimilarityType
Rhino.Geometry.Transform.IsZeroTransformationWithTolerance(self, zeroTolerance: float) -> bool
Rhino.Geometry.Transform.Linearize(self) -> None
Rhino.Geometry.Transform.Mirror(mirrorPlane: Rhino.Geometry.Plane) -> Rhino.Geometry.Transform
Rhino.Geometry.Transform.Mirror(pointOnMirrorPlane: Rhino.Geometry.Point3d, normalToMirrorPlane: Rhino.Geometry.Vector3d) -> Rhino.Geometry.Transform
Rhino.Geometry.Transform.Multiply(a: Rhino.Geometry.Transform, b: Rhino.Geometry.Transform) -> Rhino.Geometry.Transform
Rhino.Geometry.Transform.Orthogonalize(self, tolerance: float) -> bool
Rhino.Geometry.Transform.PlanarProjection(plane: Rhino.Geometry.Plane) -> Rhino.Geometry.Transform
Rhino.Geometry.Transform.PlaneToPlane(plane0: Rhino.Geometry.Plane, plane1: Rhino.Geometry.Plane) -> Rhino.Geometry.Transform
Rhino.Geometry.Transform.ProjectAlong(plane: Rhino.Geometry.Plane, direction: Rhino.Geometry.Vector3d) -> Rhino.Geometry.Transform
Rhino.Geometry.Transform.Rotation(angleRadians: float, rotationAxis: Rhino.Geometry.Vector3d, rotationCenter: Rhino.Geometry.Point3d) -> Rhino.Geometry.Transform
Rhino.Geometry.Transform.Rotation(angleRadians: float, rotationCenter: Rhino.Geometry.Point3d) -> Rhino.Geometry.Transform
Rhino.Geometry.Transform.Rotation(sinAngle: float, cosAngle: float, rotationAxis: Rhino.Geometry.Vector3d, rotationCenter: Rhino.Geometry.Point3d) -> Rhino.Geometry.Transform
Rhino.Geometry.Transform.Rotation(startDirection: Rhino.Geometry.Vector3d, endDirection: Rhino.Geometry.Vector3d, rotationCenter: Rhino.Geometry.Point3d) -> Rhino.Geometry.Transform
Rhino.Geometry.Transform.Rotation(x0: Rhino.Geometry.Vector3d, y0: Rhino.Geometry.Vector3d, z0: Rhino.Geometry.Vector3d, x1: Rhino.Geometry.Vector3d, y1: Rhino.Geometry.Vector3d, z1: Rhino.Geometry.Vector3d) -> Rhino.Geometry.Transform
Rhino.Geometry.Transform.RotationZYX(yaw: float, pitch: float, roll: float) -> Rhino.Geometry.Transform
Rhino.Geometry.Transform.RotationZYZ(alpha: float, beta: float, gamma: float) -> Rhino.Geometry.Transform
Rhino.Geometry.Transform.Scale(anchor: Rhino.Geometry.Point3d, scaleFactor: float) -> Rhino.Geometry.Transform
Rhino.Geometry.Transform.Scale(plane: Rhino.Geometry.Plane, xScaleFactor: float, yScaleFactor: float, zScaleFactor: float) -> Rhino.Geometry.Transform
Rhino.Geometry.Transform.Shear(plane: Rhino.Geometry.Plane, x: Rhino.Geometry.Vector3d, y: Rhino.Geometry.Vector3d, z: Rhino.Geometry.Vector3d) -> Rhino.Geometry.Transform
Rhino.Geometry.Transform.TextureMapping(offset: Rhino.Geometry.Vector3d, repeat: Rhino.Geometry.Vector3d, rotation: Rhino.Geometry.Vector3d) -> Rhino.Geometry.Transform
Rhino.Geometry.Transform.ToDoubleArray(self, rowDominant: bool) -> List[float]
Rhino.Geometry.Transform.ToFloatArray(self, rowDominant: bool) -> List[float]
Rhino.Geometry.Transform.ToString(self) -> str
Rhino.Geometry.Transform.TransformBoundingBox(self, bbox: Rhino.Geometry.BoundingBox) -> BoundingBox
Rhino.Geometry.Transform.TransformList(self, points: Iterable[Rhino.Geometry.Point3d]) -> List[Point3d]
Rhino.Geometry.Transform.Translation(dx: float, dy: float, dz: float) -> Rhino.Geometry.Transform
Rhino.Geometry.Transform.Translation(motion: Rhino.Geometry.Vector3d) -> Rhino.Geometry.Transform
Rhino.Geometry.Transform.Transpose(self) -> Rhino.Geometry.Transform
Rhino.Geometry.Transform.TryGetInverse(self, inverseTransform: Rhino.Geometry.Transform@) -> bool
Rhino.Geometry.Transform.__init__(self, diagonalValue: float) -> None
Rhino.Geometry.Transform.__init__(self, value: Rhino.Geometry.Transform) -> None
Rhino.Geometry.Triangle3d.BarycentricCoordsAt(self, point: Rhino.Geometry.Point3d, signedHeight: System.Double@) -> Point2d
Rhino.Geometry.Triangle3d.ClosestParameterOnBoundary(self, point: Rhino.Geometry.Point3d) -> float
Rhino.Geometry.Triangle3d.ClosestPointOnBoundary(self, point: Rhino.Geometry.Point3d) -> Point3d
Rhino.Geometry.Triangle3d.PointAlongBoundary(self, t: float) -> Point3d
Rhino.Geometry.Triangle3d.PointAtBarycentricCoords(self, coords: Rhino.Geometry.Point2d) -> Point3d
Rhino.Geometry.Triangle3d.PointOnInterior(self, u: float, v: float) -> Point3d
Rhino.Geometry.Triangle3d.ToMesh(self) -> Mesh
Rhino.Geometry.Triangle3d.ToPolyline(self) -> Polyline
Rhino.Geometry.Triangle3d.Transform(self, transform: Rhino.Geometry.Transform) -> Rhino.Geometry.Triangle3d
Rhino.Geometry.Triangle3d.TrySmallestEnclosingTriangle(points: Iterable[Rhino.Geometry.Point2d], tolerance: float, triangle: Rhino.Geometry.Triangle3d@) -> bool
Rhino.Geometry.Triangle3d.WithA(self, a: Rhino.Geometry.Point3d) -> Rhino.Geometry.Triangle3d
Rhino.Geometry.Triangle3d.WithB(self, b: Rhino.Geometry.Point3d) -> Rhino.Geometry.Triangle3d
Rhino.Geometry.Triangle3d.WithC(self, c: Rhino.Geometry.Point3d) -> Rhino.Geometry.Triangle3d
Rhino.Geometry.Triangle3d.__init__(self, a: Rhino.Geometry.Point3d, b: Rhino.Geometry.Point3d, c: Rhino.Geometry.Point3d) -> None
Rhino.Geometry.Unroller.AddFollowingGeometry(self, curve: Rhino.Geometry.Curve) -> None
Rhino.Geometry.Unroller.AddFollowingGeometry(self, curves: Iterable[Rhino.Geometry.Curve]) -> None
Rhino.Geometry.Unroller.AddFollowingGeometry(self, dot: Rhino.Geometry.TextDot) -> None
Rhino.Geometry.Unroller.AddFollowingGeometry(self, dotLocation: Rhino.Geometry.Point3d, dotText: str) -> None
Rhino.Geometry.Unroller.AddFollowingGeometry(self, dotLocations: Iterable[Rhino.Geometry.Point3d], dotText: Iterable[str]) -> None
Rhino.Geometry.Unroller.AddFollowingGeometry(self, dots: Iterable[Rhino.Geometry.TextDot]) -> None
Rhino.Geometry.Unroller.AddFollowingGeometry(self, point: Rhino.Geometry.Point) -> None
Rhino.Geometry.Unroller.AddFollowingGeometry(self, point: Rhino.Geometry.Point3d) -> None
Rhino.Geometry.Unroller.AddFollowingGeometry(self, points: Iterable[Rhino.Geometry.Point3d]) -> None
Rhino.Geometry.Unroller.FollowingGeometryIndex(self, curve: Rhino.Geometry.Curve) -> int
Rhino.Geometry.Unroller.FollowingGeometryIndex(self, dot: Rhino.Geometry.TextDot) -> int
Rhino.Geometry.Unroller.PerformUnroll(self, flatbreps: List[Rhino.Geometry.Brep]) -> int
Rhino.Geometry.Unroller.PerformUnroll(self, unrolledCurves: Rhino.Geometry.Curve[]@, unrolledPoints: Rhino.Geometry.Point3d[]@, unrolledDots: Rhino.Geometry.TextDot[]@) -> List[Brep]
Rhino.Geometry.Unroller.__init__(self, brep: Rhino.Geometry.Brep) -> None
Rhino.Geometry.Unroller.__init__(self, surface: Rhino.Geometry.Surface) -> None
Rhino.Geometry.Vector2d.!=(a: Rhino.Geometry.Vector2d, b: Rhino.Geometry.Vector2d) -> operator
Rhino.Geometry.Vector2d.*(t: float, vector: Rhino.Geometry.Vector2d) -> operator
Rhino.Geometry.Vector2d.*(vector1: Rhino.Geometry.Vector2d, vector2: Rhino.Geometry.Vector2d) -> operator
Rhino.Geometry.Vector2d.*(vector: Rhino.Geometry.Vector2d, t: float) -> operator
Rhino.Geometry.Vector2d.+(vector1: Rhino.Geometry.Vector2d, vector2: Rhino.Geometry.Vector2d) -> operator
Rhino.Geometry.Vector2d.-(vector1: Rhino.Geometry.Vector2d, vector2: Rhino.Geometry.Vector2d) -> operator
Rhino.Geometry.Vector2d.-(vector: Rhino.Geometry.Vector2d) -> operator
Rhino.Geometry.Vector2d./(vector: Rhino.Geometry.Vector2d, t: float) -> operator
Rhino.Geometry.Vector2d.<(a: Rhino.Geometry.Vector2d, b: Rhino.Geometry.Vector2d) -> operator
Rhino.Geometry.Vector2d.<=(a: Rhino.Geometry.Vector2d, b: Rhino.Geometry.Vector2d) -> operator
Rhino.Geometry.Vector2d.==(a: Rhino.Geometry.Vector2d, b: Rhino.Geometry.Vector2d) -> operator
Rhino.Geometry.Vector2d.>(a: Rhino.Geometry.Vector2d, b: Rhino.Geometry.Vector2d) -> operator
Rhino.Geometry.Vector2d.>=(a: Rhino.Geometry.Vector2d, b: Rhino.Geometry.Vector2d) -> operator
Rhino.Geometry.Vector2d.Add(vector1: Rhino.Geometry.Vector2d, vector2: Rhino.Geometry.Vector2d) -> Rhino.Geometry.Vector2d
Rhino.Geometry.Vector2d.CompareTo(self, other: Rhino.Geometry.Vector2d) -> int
Rhino.Geometry.Vector2d.Divide(vector: Rhino.Geometry.Vector2d, t: float) -> Rhino.Geometry.Vector2d
Rhino.Geometry.Vector2d.EpsilonEquals(self, other: Rhino.Geometry.Vector2d, epsilon: float) -> bool
Rhino.Geometry.Vector2d.Equals(self, obj: Any) -> bool
Rhino.Geometry.Vector2d.Equals(self, vector: Rhino.Geometry.Vector2d) -> bool
Rhino.Geometry.Vector2d.GetHashCode(self) -> int
Rhino.Geometry.Vector2d.IsTiny(self) -> bool
Rhino.Geometry.Vector2d.IsTiny(self, tolerance: float) -> bool
Rhino.Geometry.Vector2d.Multiply(t: float, vector: Rhino.Geometry.Vector2d) -> Rhino.Geometry.Vector2d
Rhino.Geometry.Vector2d.Multiply(vector1: Rhino.Geometry.Vector2d, vector2: Rhino.Geometry.Vector2d) -> float
Rhino.Geometry.Vector2d.Multiply(vector: Rhino.Geometry.Vector2d, t: float) -> Rhino.Geometry.Vector2d
Rhino.Geometry.Vector2d.Negate(vector: Rhino.Geometry.Vector2d) -> Rhino.Geometry.Vector2d
Rhino.Geometry.Vector2d.Rotate(self, angleRadians: float) -> bool
Rhino.Geometry.Vector2d.Subtract(vector1: Rhino.Geometry.Vector2d, vector2: Rhino.Geometry.Vector2d) -> Rhino.Geometry.Vector2d
Rhino.Geometry.Vector2d.ToString(self) -> str
Rhino.Geometry.Vector2d.ToString(self, format: str, formatProvider: System.IFormatProvider) -> str
Rhino.Geometry.Vector2d.Unitize(self) -> bool
Rhino.Geometry.Vector2d.__init__(self, x: float, y: float) -> None
Rhino.Geometry.Vector2f.!=(a: Rhino.Geometry.Vector2f, b: Rhino.Geometry.Vector2f) -> operator
Rhino.Geometry.Vector2f.*(point1: Rhino.Geometry.Vector2f, point2: Rhino.Geometry.Vector2f) -> operator
Rhino.Geometry.Vector2f.+(a: Rhino.Geometry.Vector2f, b: Rhino.Geometry.Vector2f) -> operator
Rhino.Geometry.Vector2f.+(point: Rhino.Geometry.Point2f, vector: Rhino.Geometry.Vector2f) -> operator
Rhino.Geometry.Vector2f.-(a: Rhino.Geometry.Vector2f, b: Rhino.Geometry.Vector2f) -> operator
Rhino.Geometry.Vector2f.-(vector: Rhino.Geometry.Vector2f) -> operator
Rhino.Geometry.Vector2f.<(a: Rhino.Geometry.Vector2f, b: Rhino.Geometry.Vector2f) -> operator
Rhino.Geometry.Vector2f.<=(a: Rhino.Geometry.Vector2f, b: Rhino.Geometry.Vector2f) -> operator
Rhino.Geometry.Vector2f.==(a: Rhino.Geometry.Vector2f, b: Rhino.Geometry.Vector2f) -> operator
Rhino.Geometry.Vector2f.>(a: Rhino.Geometry.Vector2f, b: Rhino.Geometry.Vector2f) -> operator
Rhino.Geometry.Vector2f.>=(a: Rhino.Geometry.Vector2f, b: Rhino.Geometry.Vector2f) -> operator
Rhino.Geometry.Vector2f.Add(point: Rhino.Geometry.Point2f, vector: Rhino.Geometry.Vector2f) -> Point2f
Rhino.Geometry.Vector2f.Add(vector1: Rhino.Geometry.Vector2f, vector2: Rhino.Geometry.Vector2f) -> Rhino.Geometry.Vector2f
Rhino.Geometry.Vector2f.CompareTo(self, other: Rhino.Geometry.Vector2f) -> int
Rhino.Geometry.Vector2f.EpsilonEquals(self, other: Rhino.Geometry.Vector2f, epsilon: float) -> bool
Rhino.Geometry.Vector2f.Equals(self, obj: Any) -> bool
Rhino.Geometry.Vector2f.Equals(self, vector: Rhino.Geometry.Vector2f) -> bool
Rhino.Geometry.Vector2f.GetHashCode(self) -> int
Rhino.Geometry.Vector2f.Multiply(point1: Rhino.Geometry.Vector2f, point2: Rhino.Geometry.Vector2f) -> float
Rhino.Geometry.Vector2f.Negate(vector: Rhino.Geometry.Vector2f) -> Rhino.Geometry.Vector2f
Rhino.Geometry.Vector2f.PerpendicularTo(self, other: Rhino.Geometry.Vector2f) -> bool
Rhino.Geometry.Vector2f.Reverse(self) -> bool
Rhino.Geometry.Vector2f.Subtract(vector1: Rhino.Geometry.Vector2f, vector2: Rhino.Geometry.Vector2f) -> Rhino.Geometry.Vector2f
Rhino.Geometry.Vector2f.ToString(self) -> str
Rhino.Geometry.Vector2f.ToString(self, format: str, formatProvider: System.IFormatProvider) -> str
Rhino.Geometry.Vector2f.Unitize(self) -> bool
Rhino.Geometry.Vector2f.__init__(self, x: float, y: float) -> None
Rhino.Geometry.Vector3d.!=(a: Rhino.Geometry.Vector3d, b: Rhino.Geometry.Vector3d) -> operator
Rhino.Geometry.Vector3d.*(t: float, vector: Rhino.Geometry.Vector3d) -> operator
Rhino.Geometry.Vector3d.*(vector1: Rhino.Geometry.Vector3d, vector2: Rhino.Geometry.Vector3d) -> operator
Rhino.Geometry.Vector3d.*(vector: Rhino.Geometry.Vector3d, t: float) -> operator
Rhino.Geometry.Vector3d.+(vector1: Rhino.Geometry.Vector3d, vector2: Rhino.Geometry.Vector3d) -> operator
Rhino.Geometry.Vector3d.-(vector1: Rhino.Geometry.Vector3d, vector2: Rhino.Geometry.Vector3d) -> operator
Rhino.Geometry.Vector3d.-(vector: Rhino.Geometry.Vector3d) -> operator
Rhino.Geometry.Vector3d./(vector: Rhino.Geometry.Vector3d, t: float) -> operator
Rhino.Geometry.Vector3d.<(a: Rhino.Geometry.Vector3d, b: Rhino.Geometry.Vector3d) -> operator
Rhino.Geometry.Vector3d.<=(a: Rhino.Geometry.Vector3d, b: Rhino.Geometry.Vector3d) -> operator
Rhino.Geometry.Vector3d.==(a: Rhino.Geometry.Vector3d, b: Rhino.Geometry.Vector3d) -> operator
Rhino.Geometry.Vector3d.>(a: Rhino.Geometry.Vector3d, b: Rhino.Geometry.Vector3d) -> operator
Rhino.Geometry.Vector3d.>=(a: Rhino.Geometry.Vector3d, b: Rhino.Geometry.Vector3d) -> operator
Rhino.Geometry.Vector3d.Add(vector1: Rhino.Geometry.Vector3d, vector2: Rhino.Geometry.Vector3d) -> Rhino.Geometry.Vector3d
Rhino.Geometry.Vector3d.AreOrthogonal(x: Rhino.Geometry.Vector3d, y: Rhino.Geometry.Vector3d, z: Rhino.Geometry.Vector3d) -> bool
Rhino.Geometry.Vector3d.AreOrthonormal(x: Rhino.Geometry.Vector3d, y: Rhino.Geometry.Vector3d, z: Rhino.Geometry.Vector3d) -> bool
Rhino.Geometry.Vector3d.AreRighthanded(x: Rhino.Geometry.Vector3d, y: Rhino.Geometry.Vector3d, z: Rhino.Geometry.Vector3d) -> bool
Rhino.Geometry.Vector3d.CompareTo(self, other: Rhino.Geometry.Vector3d) -> int
Rhino.Geometry.Vector3d.CrossProduct(a: Rhino.Geometry.Vector3d, b: Rhino.Geometry.Vector3d) -> Rhino.Geometry.Vector3d
Rhino.Geometry.Vector3d.Divide(vector: Rhino.Geometry.Vector3d, t: float) -> Rhino.Geometry.Vector3d
Rhino.Geometry.Vector3d.EpsilonEquals(self, other: Rhino.Geometry.Vector3d, epsilon: float) -> bool
Rhino.Geometry.Vector3d.Equals(self, obj: Any) -> bool
Rhino.Geometry.Vector3d.Equals(self, vector: Rhino.Geometry.Vector3d) -> bool
Rhino.Geometry.Vector3d.GetHashCode(self) -> int
Rhino.Geometry.Vector3d.IsParallelTo(self, other: Rhino.Geometry.Vector3d) -> int
Rhino.Geometry.Vector3d.IsParallelTo(self, other: Rhino.Geometry.Vector3d, angleTolerance: float) -> int
Rhino.Geometry.Vector3d.IsPerpendicularTo(self, other: Rhino.Geometry.Vector3d) -> bool
Rhino.Geometry.Vector3d.IsPerpendicularTo(self, other: Rhino.Geometry.Vector3d, angleTolerance: float) -> bool
Rhino.Geometry.Vector3d.IsTiny(self) -> bool
Rhino.Geometry.Vector3d.IsTiny(self, tolerance: float) -> bool
Rhino.Geometry.Vector3d.Multiply(t: float, vector: Rhino.Geometry.Vector3d) -> Rhino.Geometry.Vector3d
Rhino.Geometry.Vector3d.Multiply(vector1: Rhino.Geometry.Vector3d, vector2: Rhino.Geometry.Vector3d) -> float
Rhino.Geometry.Vector3d.Multiply(vector: Rhino.Geometry.Vector3d, t: float) -> Rhino.Geometry.Vector3d
Rhino.Geometry.Vector3d.Negate(vector: Rhino.Geometry.Vector3d) -> Rhino.Geometry.Vector3d
Rhino.Geometry.Vector3d.PerpendicularTo(self, other: Rhino.Geometry.Vector3d) -> bool
Rhino.Geometry.Vector3d.PerpendicularTo(self, point0: Rhino.Geometry.Point3d, point1: Rhino.Geometry.Point3d, point2: Rhino.Geometry.Point3d) -> bool
Rhino.Geometry.Vector3d.Reverse(self) -> bool
Rhino.Geometry.Vector3d.Rotate(self, angleRadians: float, rotationAxis: Rhino.Geometry.Vector3d) -> bool
Rhino.Geometry.Vector3d.Subtract(vector1: Rhino.Geometry.Vector3d, vector2: Rhino.Geometry.Vector3d) -> Rhino.Geometry.Vector3d
Rhino.Geometry.Vector3d.ToString(self) -> str
Rhino.Geometry.Vector3d.ToString(self, format: str, formatProvider: System.IFormatProvider) -> str
Rhino.Geometry.Vector3d.Transform(self, transformation: Rhino.Geometry.Transform) -> None
Rhino.Geometry.Vector3d.Unitize(self) -> bool
Rhino.Geometry.Vector3d.VectorAngle(a: Rhino.Geometry.Vector3d, b: Rhino.Geometry.Vector3d) -> float
Rhino.Geometry.Vector3d.VectorAngle(a: Rhino.Geometry.Vector3d, b: Rhino.Geometry.Vector3d, plane: Rhino.Geometry.Plane) -> float
Rhino.Geometry.Vector3d.VectorAngle(v1: Rhino.Geometry.Vector3d, v2: Rhino.Geometry.Vector3d, vNormal: Rhino.Geometry.Vector3d) -> float
Rhino.Geometry.Vector3d.__init__(self, point: Rhino.Geometry.Point3d) -> None
Rhino.Geometry.Vector3d.__init__(self, vector: Rhino.Geometry.Vector3d) -> None
Rhino.Geometry.Vector3d.__init__(self, vector: Rhino.Geometry.Vector3f) -> None
Rhino.Geometry.Vector3d.__init__(self, vector: Rhino.Geometry.Vector3f) -> None
Rhino.Geometry.Vector3d.__init__(self, x: float, y: float, z: float) -> None
Rhino.Geometry.Vector3f.!=(a: Rhino.Geometry.Vector3f, b: Rhino.Geometry.Vector3f) -> operator
Rhino.Geometry.Vector3f.*(point1: Rhino.Geometry.Vector3f, point2: Rhino.Geometry.Vector3f) -> operator
Rhino.Geometry.Vector3f.*(t: float, vector: Rhino.Geometry.Vector3f) -> operator
Rhino.Geometry.Vector3f.*(vector: Rhino.Geometry.Vector3f, t: float) -> operator
Rhino.Geometry.Vector3f.+(point: Rhino.Geometry.Point3f, vector: Rhino.Geometry.Vector3f) -> operator
Rhino.Geometry.Vector3f.+(vector1: Rhino.Geometry.Vector3f, vector2: Rhino.Geometry.Vector3f) -> operator
Rhino.Geometry.Vector3f.-(vector1: Rhino.Geometry.Vector3f, vector2: Rhino.Geometry.Vector3f) -> operator
Rhino.Geometry.Vector3f.-(vector: Rhino.Geometry.Vector3f) -> operator
Rhino.Geometry.Vector3f./(vector: Rhino.Geometry.Vector3f, t: float) -> operator
Rhino.Geometry.Vector3f./(vector: Rhino.Geometry.Vector3f, t: float) -> operator
Rhino.Geometry.Vector3f.<(a: Rhino.Geometry.Vector3f, b: Rhino.Geometry.Vector3f) -> operator
Rhino.Geometry.Vector3f.<=(a: Rhino.Geometry.Vector3f, b: Rhino.Geometry.Vector3f) -> operator
Rhino.Geometry.Vector3f.==(a: Rhino.Geometry.Vector3f, b: Rhino.Geometry.Vector3f) -> operator
Rhino.Geometry.Vector3f.>(a: Rhino.Geometry.Vector3f, b: Rhino.Geometry.Vector3f) -> operator
Rhino.Geometry.Vector3f.>=(a: Rhino.Geometry.Vector3f, b: Rhino.Geometry.Vector3f) -> operator
Rhino.Geometry.Vector3f.Add(point: Rhino.Geometry.Point3f, vector: Rhino.Geometry.Vector3f) -> Point3f
Rhino.Geometry.Vector3f.Add(vector1: Rhino.Geometry.Vector3f, vector2: Rhino.Geometry.Vector3f) -> Rhino.Geometry.Vector3f
Rhino.Geometry.Vector3f.CompareTo(self, other: Rhino.Geometry.Vector3f) -> int
Rhino.Geometry.Vector3f.CrossProduct(a: Rhino.Geometry.Vector3f, b: Rhino.Geometry.Vector3f) -> Rhino.Geometry.Vector3f
Rhino.Geometry.Vector3f.Divide(vector: Rhino.Geometry.Vector3f, t: float) -> Rhino.Geometry.Vector3f
Rhino.Geometry.Vector3f.Divide(vector: Rhino.Geometry.Vector3f, t: float) -> Rhino.Geometry.Vector3f
Rhino.Geometry.Vector3f.EpsilonEquals(self, other: Rhino.Geometry.Vector3f, epsilon: float) -> bool
Rhino.Geometry.Vector3f.Equals(self, obj: Any) -> bool
Rhino.Geometry.Vector3f.Equals(self, vector: Rhino.Geometry.Vector3f) -> bool
Rhino.Geometry.Vector3f.GetHashCode(self) -> int
Rhino.Geometry.Vector3f.Multiply(point1: Rhino.Geometry.Vector3f, point2: Rhino.Geometry.Vector3f) -> float
Rhino.Geometry.Vector3f.Multiply(t: float, vector: Rhino.Geometry.Vector3f) -> Rhino.Geometry.Vector3f
Rhino.Geometry.Vector3f.Multiply(vector: Rhino.Geometry.Vector3f, t: float) -> Rhino.Geometry.Vector3f
Rhino.Geometry.Vector3f.Negate(vector: Rhino.Geometry.Vector3f) -> Rhino.Geometry.Vector3f
Rhino.Geometry.Vector3f.PerpendicularTo(self, other: Rhino.Geometry.Vector3f) -> bool
Rhino.Geometry.Vector3f.Reverse(self) -> bool
Rhino.Geometry.Vector3f.Rotate(self, angleRadians: float, rotationAxis: Rhino.Geometry.Vector3f) -> bool
Rhino.Geometry.Vector3f.Subtract(vector1: Rhino.Geometry.Vector3f, vector2: Rhino.Geometry.Vector3f) -> Rhino.Geometry.Vector3f
Rhino.Geometry.Vector3f.ToString(self) -> str
Rhino.Geometry.Vector3f.ToString(self, format: str, formatProvider: System.IFormatProvider) -> str
Rhino.Geometry.Vector3f.Transform(self, transformation: Rhino.Geometry.Transform) -> None
Rhino.Geometry.Vector3f.Unitize(self) -> bool
Rhino.Geometry.Vector3f.__init__(self, vector: Rhino.Geometry.Vector3d) -> None
Rhino.Geometry.Vector3f.__init__(self, x: float, y: float, z: float) -> None
Rhino.Geometry.VolumeMassProperties.CentroidCoordinatesPrincipalMoments(self, x: System.Double@, xaxis: Rhino.Geometry.Vector3d@, y: System.Double@, yaxis: Rhino.Geometry.Vector3d@, z: System.Double@, zaxis: Rhino.Geometry.Vector3d@) -> bool
Rhino.Geometry.VolumeMassProperties.CentroidCoordinatesPrincipalMomentsOfInertia(self, x: System.Double@, xaxis: Rhino.Geometry.Vector3d@, y: System.Double@, yaxis: Rhino.Geometry.Vector3d@, z: System.Double@, zaxis: Rhino.Geometry.Vector3d@) -> bool
Rhino.Geometry.VolumeMassProperties.Compute(brep: Rhino.Geometry.Brep) -> Rhino.Geometry.VolumeMassProperties
Rhino.Geometry.VolumeMassProperties.Compute(brep: Rhino.Geometry.Brep, volume: bool, firstMoments: bool, secondMoments: bool, productMoments: bool) -> Rhino.Geometry.VolumeMassProperties
Rhino.Geometry.VolumeMassProperties.Compute(brep: Rhino.Geometry.Brep, volume: bool, firstMoments: bool, secondMoments: bool, productMoments: bool, relativeTolerance: float, absoluteTolerance: float) -> Rhino.Geometry.VolumeMassProperties
Rhino.Geometry.VolumeMassProperties.Compute(geometry: Iterable[Rhino.Geometry.GeometryBase]) -> Rhino.Geometry.VolumeMassProperties
Rhino.Geometry.VolumeMassProperties.Compute(geometry: Iterable[Rhino.Geometry.GeometryBase], volume: bool, firstMoments: bool, secondMoments: bool, productMoments: bool) -> Rhino.Geometry.VolumeMassProperties
Rhino.Geometry.VolumeMassProperties.Compute(mesh: Rhino.Geometry.Mesh) -> Rhino.Geometry.VolumeMassProperties
Rhino.Geometry.VolumeMassProperties.Compute(mesh: Rhino.Geometry.Mesh, volume: bool, firstMoments: bool, secondMoments: bool, productMoments: bool) -> Rhino.Geometry.VolumeMassProperties
Rhino.Geometry.VolumeMassProperties.Compute(surface: Rhino.Geometry.Surface) -> Rhino.Geometry.VolumeMassProperties
Rhino.Geometry.VolumeMassProperties.Compute(surface: Rhino.Geometry.Surface, volume: bool, firstMoments: bool, secondMoments: bool, productMoments: bool) -> Rhino.Geometry.VolumeMassProperties
Rhino.Geometry.VolumeMassProperties.Dispose(self) -> None
Rhino.Geometry.VolumeMassProperties.Dispose(self, disposing: bool) -> None
Rhino.Geometry.VolumeMassProperties.Finalize(self) -> None
Rhino.Geometry.VolumeMassProperties.Sum(self, summand: Rhino.Geometry.VolumeMassProperties) -> bool
Rhino.Geometry.VolumeMassProperties.Transform(self, xform: Rhino.Geometry.Transform) -> bool
Rhino.Geometry.VolumeMassProperties.WorldCoordinatesPrincipalMoments(self, x: System.Double@, xaxis: Rhino.Geometry.Vector3d@, y: System.Double@, yaxis: Rhino.Geometry.Vector3d@, z: System.Double@, zaxis: Rhino.Geometry.Vector3d@) -> bool
Rhino.Geometry.VolumeMassProperties.WorldCoordinatesPrincipalMomentsOfInertia(self, x: System.Double@, xaxis: Rhino.Geometry.Vector3d@, y: System.Double@, yaxis: Rhino.Geometry.Vector3d@, z: System.Double@, zaxis: Rhino.Geometry.Vector3d@) -> bool
Rhino.IEpsilonComparable`1.EpsilonEquals(self, other: `0, epsilon: float) -> bool
Rhino.IEpsilonFComparable`1.EpsilonEquals(self, other: `0, epsilon: float) -> bool
Rhino.IRhinoDocObserver.ActiveRhinoDocChanged(self, e: Rhino.RhinoDocObserverArgs) -> None
Rhino.IRhinoDocObserver.RhinoDocClosed(self, e: Rhino.RhinoDocObserverArgs) -> None
Rhino.IndexPair.Contains(self, item: int) -> bool
Rhino.IndexPair.CopyTo(self, array: List[int], arrayIndex: int) -> None
Rhino.IndexPair.GetEnumerator(self) -> IEnumerator<int>
Rhino.IndexPair.IndexOf(self, item: int) -> int
Rhino.IndexPair.__init__(self, i: int, j: int) -> None
Rhino.Input.Custom.CommandLineOption.IsValidOptionName(optionName: str) -> bool
Rhino.Input.Custom.CommandLineOption.IsValidOptionValueName(optionValue: str) -> bool
Rhino.Input.Custom.CommandLineOption.ListOptions(self, english: bool) -> List[str]
Rhino.Input.Custom.CommandLineOption.ToggleValues(self, english: bool, offValue: System.String@, onValue: System.String@) -> None
Rhino.Input.Custom.GetArc.Dispose(self) -> None
Rhino.Input.Custom.GetArc.Dispose(self, disposing: bool) -> None
Rhino.Input.Custom.GetArc.Finalize(self) -> None
Rhino.Input.Custom.GetArc.Get(self, arc: Rhino.Geometry.Arc@) -> Result
Rhino.Input.Custom.GetArc.__init__(self) -> None
Rhino.Input.Custom.GetBaseClass.AcceptColor(self, enable: bool) -> None
Rhino.Input.Custom.GetBaseClass.AcceptCustomMessage(self, enable: bool) -> None
Rhino.Input.Custom.GetBaseClass.AcceptEnterWhenDone(self, enable: bool) -> None
Rhino.Input.Custom.GetBaseClass.AcceptNothing(self, enable: bool) -> None
Rhino.Input.Custom.GetBaseClass.AcceptNumber(self, enable: bool, acceptZero: bool) -> None
Rhino.Input.Custom.GetBaseClass.AcceptPoint(self, enable: bool) -> None
Rhino.Input.Custom.GetBaseClass.AcceptString(self, enable: bool) -> None
Rhino.Input.Custom.GetBaseClass.AcceptUndo(self, enable: bool) -> None
Rhino.Input.Custom.GetBaseClass.AddOption(self, englishOption: str) -> int
Rhino.Input.Custom.GetBaseClass.AddOption(self, englishOption: str, englishOptionValue: str) -> int
Rhino.Input.Custom.GetBaseClass.AddOption(self, englishOption: str, englishOptionValue: str, hiddenOption: bool) -> int
Rhino.Input.Custom.GetBaseClass.AddOption(self, optionName: Rhino.UI.LocalizeStringPair) -> int
Rhino.Input.Custom.GetBaseClass.AddOption(self, optionName: Rhino.UI.LocalizeStringPair, optionValue: Rhino.UI.LocalizeStringPair) -> int
Rhino.Input.Custom.GetBaseClass.AddOption(self, optionName: Rhino.UI.LocalizeStringPair, optionValue: Rhino.UI.LocalizeStringPair, hiddenOption: bool) -> int
Rhino.Input.Custom.GetBaseClass.AddOptionColor(self, englishName: str, colorValue: Rhino.Input.Custom.OptionColor@) -> int
Rhino.Input.Custom.GetBaseClass.AddOptionColor(self, englishName: str, colorValue: Rhino.Input.Custom.OptionColor@, prompt: str) -> int
Rhino.Input.Custom.GetBaseClass.AddOptionColor(self, optionName: Rhino.UI.LocalizeStringPair, colorValue: Rhino.Input.Custom.OptionColor@) -> int
Rhino.Input.Custom.GetBaseClass.AddOptionColor(self, optionName: Rhino.UI.LocalizeStringPair, colorValue: Rhino.Input.Custom.OptionColor@, prompt: str) -> int
Rhino.Input.Custom.GetBaseClass.AddOptionDouble(self, englishName: str, numberValue: Rhino.Input.Custom.OptionDouble@) -> int
Rhino.Input.Custom.GetBaseClass.AddOptionDouble(self, englishName: str, numberValue: Rhino.Input.Custom.OptionDouble@, prompt: str) -> int
Rhino.Input.Custom.GetBaseClass.AddOptionDouble(self, optionName: Rhino.UI.LocalizeStringPair, numberValue: Rhino.Input.Custom.OptionDouble@) -> int
Rhino.Input.Custom.GetBaseClass.AddOptionDouble(self, optionName: Rhino.UI.LocalizeStringPair, numberValue: Rhino.Input.Custom.OptionDouble@, prompt: str) -> int
Rhino.Input.Custom.GetBaseClass.AddOptionEnumList<T>(self, englishOptionName: str, defaultValue: ``0) -> int
Rhino.Input.Custom.GetBaseClass.AddOptionEnumList<T>(self, englishOptionName: str, defaultValue: ``0, include: List[``0]) -> int
Rhino.Input.Custom.GetBaseClass.AddOptionEnumSelectionList<T>(self, englishOptionName: str, enumSelection: Iterable[``0], listCurrentIndex: int) -> int
Rhino.Input.Custom.GetBaseClass.AddOptionInteger(self, englishName: str, intValue: Rhino.Input.Custom.OptionInteger@) -> int
Rhino.Input.Custom.GetBaseClass.AddOptionInteger(self, englishName: str, intValue: Rhino.Input.Custom.OptionInteger@, prompt: str) -> int
Rhino.Input.Custom.GetBaseClass.AddOptionInteger(self, optionName: Rhino.UI.LocalizeStringPair, intValue: Rhino.Input.Custom.OptionInteger@) -> int
Rhino.Input.Custom.GetBaseClass.AddOptionInteger(self, optionName: Rhino.UI.LocalizeStringPair, intValue: Rhino.Input.Custom.OptionInteger@, prompt: str) -> int
Rhino.Input.Custom.GetBaseClass.AddOptionList(self, englishOptionName: str, listValues: Iterable[str], listCurrentIndex: int) -> int
Rhino.Input.Custom.GetBaseClass.AddOptionList(self, optionName: Rhino.UI.LocalizeStringPair, listValues: Iterable[Rhino.UI.LocalizeStringPair], listCurrentIndex: int) -> int
Rhino.Input.Custom.GetBaseClass.AddOptionToggle(self, englishName: str, toggleValue: Rhino.Input.Custom.OptionToggle@) -> int
Rhino.Input.Custom.GetBaseClass.AddOptionToggle(self, optionName: Rhino.UI.LocalizeStringPair, toggleValue: Rhino.Input.Custom.OptionToggle@) -> int
Rhino.Input.Custom.GetBaseClass.ClearCommandOptions(self) -> None
Rhino.Input.Custom.GetBaseClass.ClearDefault(self) -> None
Rhino.Input.Custom.GetBaseClass.Color(self) -> Color
Rhino.Input.Custom.GetBaseClass.CommandResult(self) -> Result
Rhino.Input.Custom.GetBaseClass.CustomMessage(self) -> Object
Rhino.Input.Custom.GetBaseClass.Dispose(self) -> None
Rhino.Input.Custom.GetBaseClass.Dispose(self, disposing: bool) -> None
Rhino.Input.Custom.GetBaseClass.EnableTransparentCommands(self, enable: bool) -> None
Rhino.Input.Custom.GetBaseClass.Finalize(self) -> None
Rhino.Input.Custom.GetBaseClass.GetSelectedEnumValue<T>(self) -> T
Rhino.Input.Custom.GetBaseClass.GetSelectedEnumValueFromSelectionList<T>(self, selectionList: Iterable[``0]) -> T
Rhino.Input.Custom.GetBaseClass.GotDefault(self) -> bool
Rhino.Input.Custom.GetBaseClass.Line2d(self) -> List[Point]
Rhino.Input.Custom.GetBaseClass.Number(self) -> float
Rhino.Input.Custom.GetBaseClass.Option(self) -> CommandLineOption
Rhino.Input.Custom.GetBaseClass.OptionIndex(self) -> int
Rhino.Input.Custom.GetBaseClass.PickRectangle(self) -> Rectangle
Rhino.Input.Custom.GetBaseClass.Point(self) -> Point3d
Rhino.Input.Custom.GetBaseClass.Point2d(self) -> Point
Rhino.Input.Custom.GetBaseClass.PostCustomMessage(messageData: Any) -> None
Rhino.Input.Custom.GetBaseClass.Rectangle2d(self) -> Rectangle
Rhino.Input.Custom.GetBaseClass.Result(self) -> GetResult
Rhino.Input.Custom.GetBaseClass.SetCommandPrompt(self, prompt: str) -> None
Rhino.Input.Custom.GetBaseClass.SetCommandPromptDefault(self, defaultValue: str) -> None
Rhino.Input.Custom.GetBaseClass.SetDefaultColor(self, defaultColor: System.Drawing.Color) -> None
Rhino.Input.Custom.GetBaseClass.SetDefaultInteger(self, defaultValue: int) -> None
Rhino.Input.Custom.GetBaseClass.SetDefaultNumber(self, defaultNumber: float) -> None
Rhino.Input.Custom.GetBaseClass.SetDefaultPoint(self, point: Rhino.Geometry.Point3d) -> None
Rhino.Input.Custom.GetBaseClass.SetDefaultString(self, defaultValue: str) -> None
Rhino.Input.Custom.GetBaseClass.SetOptionVaries(self, optionIndex: int, varies: bool) -> None
Rhino.Input.Custom.GetBaseClass.SetWaitDuration(self, milliseconds: int) -> None
Rhino.Input.Custom.GetBaseClass.StringResult(self) -> str
Rhino.Input.Custom.GetBaseClass.Vector(self) -> Vector3d
Rhino.Input.Custom.GetBaseClass.View(self) -> RhinoView
Rhino.Input.Custom.GetBaseClass.__init__(self) -> None
Rhino.Input.Custom.GetCancel.Wait(self, task: System.Threading.Tasks.Task, doc: Rhino.RhinoDoc) -> Result
Rhino.Input.Custom.GetCancel.Wait<TResult>(self, task: Task[``0], doc: Rhino.RhinoDoc) -> Result
Rhino.Input.Custom.GetCancel.WaitAll(self, tasks: Iterable[System.Threading.Tasks.Task], doc: Rhino.RhinoDoc) -> Result
Rhino.Input.Custom.GetCancel.WaitAll<TResult>(self, tasks: Iterable[Task[``0]], doc: Rhino.RhinoDoc) -> Result
Rhino.Input.Custom.GetCancel.__init__(self) -> None
Rhino.Input.Custom.GetCircle.Dispose(self) -> None
Rhino.Input.Custom.GetCircle.Dispose(self, disposing: bool) -> None
Rhino.Input.Custom.GetCircle.Finalize(self) -> None
Rhino.Input.Custom.GetCircle.Get(self, circle: Rhino.Geometry.Circle@) -> Result
Rhino.Input.Custom.GetCircle.__init__(self) -> None
Rhino.Input.Custom.GetCone.Dispose(self) -> None
Rhino.Input.Custom.GetCone.Dispose(self, disposing: bool) -> None
Rhino.Input.Custom.GetCone.Finalize(self) -> None
Rhino.Input.Custom.GetCone.Get(self, cone: Rhino.Geometry.Cone@) -> Result
Rhino.Input.Custom.GetCone.GetMesh(self, verticalFaces: System.Int32@, aroundFaces: System.Int32@, capStyle: System.Int32@, cone: Rhino.Geometry.Cone@) -> Result
Rhino.Input.Custom.GetCone.GetMesh(self, verticalFaces: System.Int32@, aroundFaces: System.Int32@, cone: Rhino.Geometry.Cone@) -> Result
Rhino.Input.Custom.GetCone.__init__(self) -> None
Rhino.Input.Custom.GetCylinder.Dispose(self) -> None
Rhino.Input.Custom.GetCylinder.Dispose(self, disposing: bool) -> None
Rhino.Input.Custom.GetCylinder.Finalize(self) -> None
Rhino.Input.Custom.GetCylinder.Get(self, cylinder: Rhino.Geometry.Cylinder@) -> Result
Rhino.Input.Custom.GetCylinder.GetMesh(self, verticalFaces: System.Int32@, aroundFaces: System.Int32@, capStyle: System.Int32@, cylinder: Rhino.Geometry.Cylinder@) -> Result
Rhino.Input.Custom.GetCylinder.GetMesh(self, verticalFaces: System.Int32@, aroundFaces: System.Int32@, cylinder: Rhino.Geometry.Cylinder@) -> Result
Rhino.Input.Custom.GetCylinder.__init__(self) -> None
Rhino.Input.Custom.GetEllipse.Dispose(self) -> None
Rhino.Input.Custom.GetEllipse.Dispose(self, disposing: bool) -> None
Rhino.Input.Custom.GetEllipse.Finalize(self) -> None
Rhino.Input.Custom.GetEllipse.Get(self, ellipse: Rhino.Geometry.NurbsCurve@) -> Result
Rhino.Input.Custom.GetEllipse.__init__(self) -> None
Rhino.Input.Custom.GetEllipsoid.Dispose(self) -> None
Rhino.Input.Custom.GetEllipsoid.Dispose(self, disposing: bool) -> None
Rhino.Input.Custom.GetEllipsoid.Finalize(self) -> None
Rhino.Input.Custom.GetEllipsoid.Get(self, ellipsoid: Rhino.Geometry.NurbsSurface@) -> Result
Rhino.Input.Custom.GetEllipsoid.GetMesh(self, verticalFaces: System.Int32@, aroundFaces: System.Int32@, ellipsoid: Rhino.Geometry.Mesh@) -> Result
Rhino.Input.Custom.GetEllipsoid.GetMesh(self, verticalFaces: System.Int32@, aroundFaces: System.Int32@, quadCaps: System.Boolean@, ellipsoid: Rhino.Geometry.Mesh@) -> Result
Rhino.Input.Custom.GetEllipsoid.__init__(self) -> None
Rhino.Input.Custom.GetInteger.Get(self) -> GetResult
Rhino.Input.Custom.GetInteger.Number(self) -> int
Rhino.Input.Custom.GetInteger.SetLowerLimit(self, lowerLimit: int, strictlyGreaterThan: bool) -> None
Rhino.Input.Custom.GetInteger.SetUpperLimit(self, upperLimit: int, strictlyLessThan: bool) -> None
Rhino.Input.Custom.GetInteger.__init__(self) -> None
Rhino.Input.Custom.GetLine.Dispose(self) -> None
Rhino.Input.Custom.GetLine.Dispose(self, disposing: bool) -> None
Rhino.Input.Custom.GetLine.EnableAllVariations(self, on: bool) -> None
Rhino.Input.Custom.GetLine.EnableFromBothSidesOption(self, on: bool) -> None
Rhino.Input.Custom.GetLine.EnableFromMidPointOption(self, on: bool) -> None
Rhino.Input.Custom.GetLine.Finalize(self) -> None
Rhino.Input.Custom.GetLine.Get(self, line: Rhino.Geometry.Line@) -> Result
Rhino.Input.Custom.GetLine.SetFirstPoint(self, point: Rhino.Geometry.Point3d) -> None
Rhino.Input.Custom.GetLine.__init__(self) -> None
Rhino.Input.Custom.GetNumber.Get(self) -> GetResult
Rhino.Input.Custom.GetNumber.SetLowerLimit(self, lowerLimit: float, strictlyGreaterThan: bool) -> None
Rhino.Input.Custom.GetNumber.SetUpperLimit(self, upperLimit: float, strictlyLessThan: bool) -> None
Rhino.Input.Custom.GetNumber.__init__(self) -> None
Rhino.Input.Custom.GetObject.ActiveGetObject(doc: Rhino.RhinoDoc) -> Rhino.Input.Custom.GetObject
Rhino.Input.Custom.GetObject.AppendToPickList(self, objref: Rhino.DocObjects.ObjRef) -> None
Rhino.Input.Custom.GetObject.ClearObjects(self) -> None
Rhino.Input.Custom.GetObject.CustomGeometryFilter(self, rhObject: Rhino.DocObjects.RhinoObject, geometry: Rhino.Geometry.GeometryBase, componentIndex: Rhino.Geometry.ComponentIndex) -> bool
Rhino.Input.Custom.GetObject.DisablePreSelect(self) -> None
Rhino.Input.Custom.GetObject.EnableClearObjectsOnEntry(self, enable: bool) -> None
Rhino.Input.Custom.GetObject.EnableHighlight(self, enable: bool) -> None
Rhino.Input.Custom.GetObject.EnableIgnoreGrips(self, enable: bool) -> None
Rhino.Input.Custom.GetObject.EnablePostSelect(self, enable: bool) -> None
Rhino.Input.Custom.GetObject.EnablePreSelect(self, enable: bool, ignoreUnacceptablePreselectedObjects: bool) -> None
Rhino.Input.Custom.GetObject.EnablePressEnterWhenDonePrompt(self, enable: bool) -> None
Rhino.Input.Custom.GetObject.EnableSelPrevious(self, enable: bool) -> None
Rhino.Input.Custom.GetObject.EnableUnselectObjectsOnExit(self, enable: bool) -> None
Rhino.Input.Custom.GetObject.Get(self) -> GetResult
Rhino.Input.Custom.GetObject.GetMultiple(self, minimumNumber: int, maximumNumber: int) -> GetResult
Rhino.Input.Custom.GetObject.Object(self, index: int) -> ObjRef
Rhino.Input.Custom.GetObject.Objects(self) -> List[ObjRef]
Rhino.Input.Custom.GetObject.PassesGeometryAttributeFilter(self, rhObject: Rhino.DocObjects.RhinoObject, geometry: Rhino.Geometry.GeometryBase, componentIndex: Rhino.Geometry.ComponentIndex) -> bool
Rhino.Input.Custom.GetObject.SetCustomGeometryFilter(self, filter: Rhino.Input.Custom.GetObjectGeometryFilter) -> None
Rhino.Input.Custom.GetObject.SetPressEnterWhenDonePrompt(self, prompt: str) -> None
Rhino.Input.Custom.GetObject.__init__(self) -> None
Rhino.Input.Custom.GetOption.Get(self) -> GetResult
Rhino.Input.Custom.GetOption.__init__(self) -> None
Rhino.Input.Custom.GetPoint.AddConstructionPoint(self, point: Rhino.Geometry.Point3d) -> int
Rhino.Input.Custom.GetPoint.AddConstructionPoints(self, points: List[Rhino.Geometry.Point3d]) -> int
Rhino.Input.Custom.GetPoint.AddSnapPoint(self, point: Rhino.Geometry.Point3d) -> int
Rhino.Input.Custom.GetPoint.AddSnapPoints(self, points: List[Rhino.Geometry.Point3d]) -> int
Rhino.Input.Custom.GetPoint.ClearConstraints(self) -> None
Rhino.Input.Custom.GetPoint.ClearConstructionPoints(self) -> None
Rhino.Input.Custom.GetPoint.ClearSnapPoints(self) -> None
Rhino.Input.Custom.GetPoint.Constrain(self, arc: Rhino.Geometry.Arc) -> bool
Rhino.Input.Custom.GetPoint.Constrain(self, brep: Rhino.Geometry.Brep, wireDensity: int, faceIndex: int, allowPickingPointOffObject: bool) -> bool
Rhino.Input.Custom.GetPoint.Constrain(self, circle: Rhino.Geometry.Circle) -> bool
Rhino.Input.Custom.GetPoint.Constrain(self, curve: Rhino.Geometry.Curve, allowPickingPointOffObject: bool) -> bool
Rhino.Input.Custom.GetPoint.Constrain(self, cylinder: Rhino.Geometry.Cylinder) -> bool
Rhino.Input.Custom.GetPoint.Constrain(self, from: Rhino.Geometry.Point3d, to: Rhino.Geometry.Point3d) -> bool
Rhino.Input.Custom.GetPoint.Constrain(self, line: Rhino.Geometry.Line) -> bool
Rhino.Input.Custom.GetPoint.Constrain(self, mesh: Rhino.Geometry.Mesh, allowPickingPointOffObject: bool) -> bool
Rhino.Input.Custom.GetPoint.Constrain(self, plane: Rhino.Geometry.Plane, allowElevator: bool) -> bool
Rhino.Input.Custom.GetPoint.Constrain(self, sphere: Rhino.Geometry.Sphere) -> bool
Rhino.Input.Custom.GetPoint.Constrain(self, surface: Rhino.Geometry.Surface, allowPickingPointOffObject: bool) -> bool
Rhino.Input.Custom.GetPoint.ConstrainDistanceFromBasePoint(self, distance: float) -> None
Rhino.Input.Custom.GetPoint.ConstrainToConstructionPlane(self, throughBasePoint: bool) -> bool
Rhino.Input.Custom.GetPoint.ConstrainToTargetPlane(self) -> None
Rhino.Input.Custom.GetPoint.ConstrainToVirtualCPlaneIntersection(self, plane: Rhino.Geometry.Plane) -> bool
Rhino.Input.Custom.GetPoint.DrawLineFromPoint(self, startPoint: Rhino.Geometry.Point3d, showDistanceInStatusBar: bool) -> None
Rhino.Input.Custom.GetPoint.EnableCurveSnapArrow(self, drawDirectionArrowAtSnapPoint: bool, reverseArrow: bool) -> None
Rhino.Input.Custom.GetPoint.EnableCurveSnapPerpBar(self, drawPerpBarAtSnapPoint: bool, drawEndPoints: bool) -> None
Rhino.Input.Custom.GetPoint.EnableCurveSnapTangentBar(self, drawTangentBarAtSnapPoint: bool, drawEndPoints: bool) -> None
Rhino.Input.Custom.GetPoint.EnableDrawLineFromPoint(self, enable: bool) -> None
Rhino.Input.Custom.GetPoint.EnableNoRedrawOnExit(self, noRedraw: bool) -> None
Rhino.Input.Custom.GetPoint.EnableObjectSnapCursors(self, enable: bool) -> None
Rhino.Input.Custom.GetPoint.EnableSnapToCurves(self, enable: bool) -> None
Rhino.Input.Custom.GetPoint.Get(self) -> GetResult
Rhino.Input.Custom.GetPoint.Get(self, onMouseUp: bool) -> GetResult
Rhino.Input.Custom.GetPoint.Get(self, onMouseUp: bool, get2DPoint: bool) -> GetResult
Rhino.Input.Custom.GetPoint.GetConstructionPoints(self) -> List[Point3d]
Rhino.Input.Custom.GetPoint.GetPlanarConstraint(self, vp: Rhino.Display.RhinoViewport@, plane: Rhino.Geometry.Plane@) -> bool
Rhino.Input.Custom.GetPoint.GetSnapPoints(self) -> List[Point3d]
Rhino.Input.Custom.GetPoint.InterruptMouseMove(self) -> bool
Rhino.Input.Custom.GetPoint.NumberPreview(self, number: System.Double@) -> bool
Rhino.Input.Custom.GetPoint.OnDynamicDraw(self, e: Rhino.Input.Custom.GetPointDrawEventArgs) -> None
Rhino.Input.Custom.GetPoint.OnMouseDown(self, e: Rhino.Input.Custom.GetPointMouseEventArgs) -> None
Rhino.Input.Custom.GetPoint.OnMouseMove(self, e: Rhino.Input.Custom.GetPointMouseEventArgs) -> None
Rhino.Input.Custom.GetPoint.OnPostDrawObjects(self, e: Rhino.Display.DrawEventArgs) -> None
Rhino.Input.Custom.GetPoint.PermitConstraintOptions(self, permit: bool) -> None
Rhino.Input.Custom.GetPoint.PermitElevatorMode(self, permitMode: int) -> None
Rhino.Input.Custom.GetPoint.PermitFromOption(self, permit: bool) -> None
Rhino.Input.Custom.GetPoint.PermitObjectSnap(self, permit: bool) -> None
Rhino.Input.Custom.GetPoint.PermitOrthoSnap(self, permit: bool) -> None
Rhino.Input.Custom.GetPoint.PermitTabMode(self, permit: bool) -> None
Rhino.Input.Custom.GetPoint.PointOnBrep(self, u: System.Double@, v: System.Double@) -> BrepFace
Rhino.Input.Custom.GetPoint.PointOnCurve(self, t: System.Double@) -> Curve
Rhino.Input.Custom.GetPoint.PointOnObject(self) -> ObjRef
Rhino.Input.Custom.GetPoint.PointOnSurface(self, u: System.Double@, v: System.Double@) -> Surface
Rhino.Input.Custom.GetPoint.SetBasePoint(self, basePoint: Rhino.Geometry.Point3d, showDistanceInStatusBar: bool) -> None
Rhino.Input.Custom.GetPoint.SetCursor(self, cursor: Rhino.UI.CursorStyle) -> None
Rhino.Input.Custom.GetPoint.TryGetBasePoint(self, basePoint: Rhino.Geometry.Point3d@) -> bool
Rhino.Input.Custom.GetPoint.__init__(self) -> None
Rhino.Input.Custom.GetPolyline.Dispose(self) -> None
Rhino.Input.Custom.GetPolyline.Dispose(self, disposing: bool) -> None
Rhino.Input.Custom.GetPolyline.Finalize(self) -> None
Rhino.Input.Custom.GetPolyline.Get(self, polyline: Rhino.Geometry.Polyline@) -> Result
Rhino.Input.Custom.GetPolyline.SetFirstPoint(self, point: Rhino.Geometry.Point3d) -> None
Rhino.Input.Custom.GetPolyline.__init__(self) -> None
Rhino.Input.Custom.GetSphere.Dispose(self) -> None
Rhino.Input.Custom.GetSphere.Dispose(self, disposing: bool) -> None
Rhino.Input.Custom.GetSphere.Finalize(self) -> None
Rhino.Input.Custom.GetSphere.Get(self, sphere: Rhino.Geometry.Sphere@) -> Result
Rhino.Input.Custom.GetSphere.GetMesh(self, arg1: Rhino.Input.Custom.GetSphere.MeshSphereStyle@, arg2: System.Int32@, arg3: System.Int32@, arg4: System.Int32@, arg5: System.Int32@, arg6: Rhino.Geometry.Sphere@) -> Result
Rhino.Input.Custom.GetSphere.__init__(self) -> None
Rhino.Input.Custom.GetString.Get(self) -> GetResult
Rhino.Input.Custom.GetString.GetLiteralString(self) -> GetResult
Rhino.Input.Custom.GetString.__init__(self) -> None
Rhino.Input.Custom.GetTorus.Dispose(self) -> None
Rhino.Input.Custom.GetTorus.Dispose(self, disposing: bool) -> None
Rhino.Input.Custom.GetTorus.Finalize(self) -> None
Rhino.Input.Custom.GetTorus.Get(self, torus: Rhino.Geometry.Torus@) -> Result
Rhino.Input.Custom.GetTorus.GetMesh(self, verticalFaces: System.Int32@, aroundFaces: System.Int32@, torus: Rhino.Geometry.Torus@) -> Result
Rhino.Input.Custom.GetTorus.__init__(self) -> None
Rhino.Input.Custom.GetTransform.AddTransformObjects(self, list: Rhino.Collections.TransformObjectList) -> None
Rhino.Input.Custom.GetTransform.CalculateTransform(self, viewport: Rhino.Display.RhinoViewport, point: Rhino.Geometry.Point3d) -> Transform
Rhino.Input.Custom.GetTransform.GetXform(self) -> GetResult
Rhino.Input.Custom.GetTransform.__init__(self) -> None
Rhino.Input.Custom.GetTruncatedCone.Dispose(self) -> None
Rhino.Input.Custom.GetTruncatedCone.Dispose(self, disposing: bool) -> None
Rhino.Input.Custom.GetTruncatedCone.Finalize(self) -> None
Rhino.Input.Custom.GetTruncatedCone.Get(self, truncatedCone: Rhino.Geometry.Brep@) -> Result
Rhino.Input.Custom.GetTruncatedCone.GetMesh(self, verticalFaces: System.Int32@, aroundFaces: System.Int32@, capStyle: System.Int32@, truncatedCone: Rhino.Geometry.Mesh@) -> Result
Rhino.Input.Custom.GetTruncatedCone.GetMesh(self, verticalFaces: System.Int32@, aroundFaces: System.Int32@, truncatedCone: Rhino.Geometry.Mesh@) -> Result
Rhino.Input.Custom.GetTruncatedCone.__init__(self) -> None
Rhino.Input.Custom.OptionColor.Dispose(self) -> None
Rhino.Input.Custom.OptionColor.Dispose(self, disposing: bool) -> None
Rhino.Input.Custom.OptionColor.Finalize(self) -> None
Rhino.Input.Custom.OptionColor.__init__(self, initialValue: System.Drawing.Color) -> None
Rhino.Input.Custom.OptionDouble.Dispose(self) -> None
Rhino.Input.Custom.OptionDouble.Dispose(self, disposing: bool) -> None
Rhino.Input.Custom.OptionDouble.Finalize(self) -> None
Rhino.Input.Custom.OptionDouble.__init__(self, initialValue: float) -> None
Rhino.Input.Custom.OptionDouble.__init__(self, initialValue: float, lowerLimit: float, upperLimit: float) -> None
Rhino.Input.Custom.OptionDouble.__init__(self, initialValue: float, setLowerLimit: bool, limit: float) -> None
Rhino.Input.Custom.OptionInteger.Dispose(self) -> None
Rhino.Input.Custom.OptionInteger.Dispose(self, disposing: bool) -> None
Rhino.Input.Custom.OptionInteger.Finalize(self) -> None
Rhino.Input.Custom.OptionInteger.__init__(self, initialValue: int) -> None
Rhino.Input.Custom.OptionInteger.__init__(self, initialValue: int, lowerLimit: int, upperLimit: int) -> None
Rhino.Input.Custom.OptionInteger.__init__(self, initialValue: int, setLowerLimit: bool, limit: int) -> None
Rhino.Input.Custom.OptionToggle.Dispose(self) -> None
Rhino.Input.Custom.OptionToggle.Dispose(self, disposing: bool) -> None
Rhino.Input.Custom.OptionToggle.Finalize(self) -> None
Rhino.Input.Custom.OptionToggle.__init__(self, initialValue: bool, offValue: Rhino.UI.LocalizeStringPair, onValue: Rhino.UI.LocalizeStringPair) -> None
Rhino.Input.Custom.OptionToggle.__init__(self, initialValue: bool, offValue: str, onValue: str) -> None
Rhino.Input.Custom.PickContext.Dispose(self) -> None
Rhino.Input.Custom.PickContext.Dispose(self, disposing: bool) -> None
Rhino.Input.Custom.PickContext.Finalize(self) -> None
Rhino.Input.Custom.PickContext.PickFrustumTest(self, arg1: Rhino.Geometry.Mesh, arg2: Rhino.Input.Custom.PickContext.MeshPickStyle, arg3: Rhino.Geometry.Point3d@, arg4: Rhino.Geometry.Point2d@, arg5: Rhino.Geometry.Point2d@, arg6: System.Double@, arg7: System.Double@, arg8: Rhino.Input.Custom.PickContext.MeshHitFlag@, arg9: System.Int32@) -> bool
Rhino.Input.Custom.PickContext.PickFrustumTest(self, arg1: Rhino.Geometry.Mesh, arg2: Rhino.Input.Custom.PickContext.MeshPickStyle, arg3: Rhino.Geometry.Point3d@, arg4: System.Double@, arg5: System.Double@, arg6: Rhino.Input.Custom.PickContext.MeshHitFlag@, arg7: System.Int32@) -> bool
Rhino.Input.Custom.PickContext.PickFrustumTest(self, bezier: Rhino.Geometry.BezierCurve, t: System.Double@, depth: System.Double@, distance: System.Double@) -> bool
Rhino.Input.Custom.PickContext.PickFrustumTest(self, box: Rhino.Geometry.BoundingBox, boxCompletelyInFrustum: System.Boolean@) -> bool
Rhino.Input.Custom.PickContext.PickFrustumTest(self, cloud: Rhino.Geometry.PointCloud, pointIndex: System.Int32@, depth: System.Double@, distance: System.Double@) -> bool
Rhino.Input.Custom.PickContext.PickFrustumTest(self, curve: Rhino.Geometry.NurbsCurve, t: System.Double@, depth: System.Double@, distance: System.Double@) -> bool
Rhino.Input.Custom.PickContext.PickFrustumTest(self, line: Rhino.Geometry.Line, t: System.Double@, depth: System.Double@, distance: System.Double@) -> bool
Rhino.Input.Custom.PickContext.PickFrustumTest(self, point: Rhino.Geometry.Point3d, depth: System.Double@, distance: System.Double@) -> bool
Rhino.Input.Custom.PickContext.PickFrustumTest(self, points: List[Rhino.Geometry.Point3d], pointIndex: System.Int32@, depth: System.Double@, distance: System.Double@) -> bool
Rhino.Input.Custom.PickContext.PickMeshTopologyVertices(self, mesh: Rhino.Geometry.Mesh) -> List[int]
Rhino.Input.Custom.PickContext.SetPickTransform(self, transform: Rhino.Geometry.Transform) -> None
Rhino.Input.Custom.PickContext.UpdateClippingPlanes(self) -> None
Rhino.Input.Custom.PickContext.__init__(self) -> None
Rhino.Input.Custom.TaskCompleteEventArgs.__init__(self, task: System.Threading.Tasks.Task, doc: Rhino.RhinoDoc) -> None
Rhino.Input.RhinoGet.Get2dRectangle(solidPen: bool, rectangle: System.Drawing.Rectangle@, rectView: Rhino.Display.RhinoView@) -> Result
Rhino.Input.RhinoGet.GetAngle(commandPrompt: str, basePoint: Rhino.Geometry.Point3d, referencePoint: Rhino.Geometry.Point3d, defaultAngleRadians: float, angleRadians: System.Double@) -> Result
Rhino.Input.RhinoGet.GetArc(arc: Rhino.Geometry.Arc@) -> Result
Rhino.Input.RhinoGet.GetBool(prompt: str, acceptNothing: bool, offPrompt: str, onPrompt: str, boolValue: System.Boolean@) -> Result
Rhino.Input.RhinoGet.GetBox(box: Rhino.Geometry.Box@) -> Result
Rhino.Input.RhinoGet.GetBox(box: Rhino.Geometry.Box@, mode: Rhino.Input.GetBoxMode, basePoint: Rhino.Geometry.Point3d, prompt1: str, prompt2: str, prompt3: str) -> Result
Rhino.Input.RhinoGet.GetBoxWithCounts(xMin: int, xCount: System.Int32@, yMin: int, yCount: System.Int32@, zMin: int, zCount: System.Int32@, corners: Rhino.Geometry.Point3d[]@) -> Result
Rhino.Input.RhinoGet.GetCircle(circle: Rhino.Geometry.Circle@) -> Result
Rhino.Input.RhinoGet.GetColor(prompt: str, acceptNothing: bool, color: System.Drawing.Color@) -> Result
Rhino.Input.RhinoGet.GetFileName(mode: Rhino.Input.Custom.GetFileNameMode, defaultName: str, title: str, parent: Any) -> str
Rhino.Input.RhinoGet.GetFileName(mode: Rhino.Input.Custom.GetFileNameMode, defaultName: str, title: str, parent: Any, arg5: Rhino.Input.RhinoGet.BitmapFileTypes) -> str
Rhino.Input.RhinoGet.GetFileNameScripted(mode: Rhino.Input.Custom.GetFileNameMode, defaultName: str) -> str
Rhino.Input.RhinoGet.GetGrip(grip: Rhino.DocObjects.GripObject@, prompt: str) -> Result
Rhino.Input.RhinoGet.GetGrips(grips: Rhino.DocObjects.GripObject[]@, prompt: str) -> Result
Rhino.Input.RhinoGet.GetHelix(helix: Rhino.Geometry.NurbsCurve@) -> Result
Rhino.Input.RhinoGet.GetInteger(prompt: str, acceptNothing: bool, outputNumber: System.Int32@) -> Result
Rhino.Input.RhinoGet.GetInteger(prompt: str, acceptNothing: bool, outputNumber: System.Int32@, lowerLimit: int, upperLimit: int) -> Result
Rhino.Input.RhinoGet.GetLine(line: Rhino.Geometry.Line@) -> Result
Rhino.Input.RhinoGet.GetLinearDimension(dimension: Rhino.Geometry.LinearDimension@) -> Result
Rhino.Input.RhinoGet.GetMeshParameters(doc: Rhino.RhinoDoc, parameters: Rhino.Geometry.MeshingParameters@, uiStyle: System.Int32@) -> Result
Rhino.Input.RhinoGet.GetMultipleObjects(prompt: str, acceptNothing: bool, filter: Rhino.DocObjects.ObjectType, rhObjects: Rhino.DocObjects.ObjRef[]@) -> Result
Rhino.Input.RhinoGet.GetMultipleObjects(prompt: str, acceptNothing: bool, filter: Rhino.Input.Custom.GetObjectGeometryFilter, rhObjects: Rhino.DocObjects.ObjRef[]@) -> Result
Rhino.Input.RhinoGet.GetNumber(prompt: str, acceptNothing: bool, outputNumber: System.Double@) -> Result
Rhino.Input.RhinoGet.GetNumber(prompt: str, acceptNothing: bool, outputNumber: System.Double@, lowerLimit: float, upperLimit: float) -> Result
Rhino.Input.RhinoGet.GetOneObject(prompt: str, acceptNothing: bool, filter: Rhino.DocObjects.ObjectType, rhObject: Rhino.DocObjects.ObjRef@) -> Result
Rhino.Input.RhinoGet.GetOneObject(prompt: str, acceptNothing: bool, filter: Rhino.Input.Custom.GetObjectGeometryFilter, objref: Rhino.DocObjects.ObjRef@) -> Result
Rhino.Input.RhinoGet.GetPlane(plane: Rhino.Geometry.Plane@) -> Result
Rhino.Input.RhinoGet.GetPoint(prompt: str, acceptNothing: bool, point: Rhino.Geometry.Point3d@) -> Result
Rhino.Input.RhinoGet.GetPointOnMesh(doc: Rhino.RhinoDoc, meshObject: Rhino.DocObjects.MeshObject, prompt: str, acceptNothing: bool, point: Rhino.Geometry.Point3d@) -> Result
Rhino.Input.RhinoGet.GetPointOnMesh(doc: Rhino.RhinoDoc, meshObjectId: System.Guid, prompt: str, acceptNothing: bool, point: Rhino.Geometry.Point3d@) -> Result
Rhino.Input.RhinoGet.GetPolygon(numberSides: System.Int32@, inscribed: System.Boolean@, polyline: Rhino.Geometry.Polyline@) -> Result
Rhino.Input.RhinoGet.GetPolygon(useActiveLayerLinetype: bool, numberSides: System.Int32@, inscribed: System.Boolean@, polyline: Rhino.Geometry.Polyline@) -> Result
Rhino.Input.RhinoGet.GetPolyline(polyline: Rhino.Geometry.Polyline@) -> Result
Rhino.Input.RhinoGet.GetPrintWindow(settings: Rhino.Display.ViewCaptureSettings@) -> Result
Rhino.Input.RhinoGet.GetRectangle(corners: Rhino.Geometry.Point3d[]@) -> Result
Rhino.Input.RhinoGet.GetRectangle(firstPrompt: str, corners: Rhino.Geometry.Point3d[]@) -> Result
Rhino.Input.RhinoGet.GetRectangle(mode: Rhino.Input.GetBoxMode, firstPoint: Rhino.Geometry.Point3d, prompts: Iterable[str], corners: Rhino.Geometry.Point3d[]@) -> Result
Rhino.Input.RhinoGet.GetRectangleWithCounts(xMin: int, xCount: System.Int32@, yMin: int, yCount: System.Int32@, corners: Rhino.Geometry.Point3d[]@) -> Result
Rhino.Input.RhinoGet.GetSpiral(spiral: Rhino.Geometry.NurbsCurve@) -> Result
Rhino.Input.RhinoGet.GetString(prompt: str, acceptNothing: bool, outputString: System.String@) -> Result
Rhino.Input.RhinoGet.GetView(commandPrompt: str, view: Rhino.Display.RhinoView@) -> Result
Rhino.Input.RhinoGet.InGet(doc: Rhino.RhinoDoc) -> bool
Rhino.Input.RhinoGet.InGetObject(doc: Rhino.RhinoDoc) -> bool
Rhino.Input.RhinoGet.InGetPoint(doc: Rhino.RhinoDoc) -> bool
Rhino.Input.RhinoGet.StringToCommandOptionName(englishString: str, localizedString: str) -> LocalizeStringPair
Rhino.Input.RhinoGet.StringToCommandOptionName(stringToConvert: str) -> str
Rhino.Input.RhinoGet.[ObsoleteAttribute(self, arg1: Rhino.DocObjects.MeshObject, arg2: str, arg3: bool, arg4: Rhino.Geometry.Point3d@) -> None
Rhino.Input.RhinoGet.[ObsoleteAttribute(self, arg1: System.Guid, arg2: str, arg3: bool, arg4: Rhino.Geometry.Point3d@) -> None
Rhino.Input.StringParser.ParseAngleExpession(expression: str, start_offset: int, expression_length: int, parse_settings_in: Rhino.Input.StringParserSettings, output_angle_unit_system: Rhino.AngleUnitSystem, value_out: System.Double@, parse_results: Rhino.Input.StringParserSettings@, parsed_unit_system: Rhino.AngleUnitSystem@) -> int
Rhino.Input.StringParser.ParseAngleExpressionDegrees(expression: str, angle_degrees: System.Double@) -> bool
Rhino.Input.StringParser.ParseAngleExpressionRadians(expression: str, angle_radians: System.Double@) -> bool
Rhino.Input.StringParser.ParseLengthExpession(expression: str, parse_settings_in: Rhino.Input.StringParserSettings, output_unit_system: Rhino.UnitSystem, value_out: System.Double@) -> int
Rhino.Input.StringParser.ParseLengthExpession(expression: str, start_offset: int, expression_length: int, parse_settings_in: Rhino.Input.StringParserSettings, output_unit_system: Rhino.UnitSystem, value_out: System.Double@, parse_results: Rhino.Input.StringParserSettings@, parsed_unit_system: Rhino.UnitSystem@) -> int
Rhino.Input.StringParser.ParseNumber(expression: str, max_count: int, settings_in: Rhino.Input.StringParserSettings, settings_out: Rhino.Input.StringParserSettings@, answer: System.Double@) -> int
Rhino.Input.StringParser.__init__(self) -> None
Rhino.Input.StringParserSettings.Dispose(self) -> None
Rhino.Input.StringParserSettings.Dispose(self, disposing: bool) -> None
Rhino.Input.StringParserSettings.Finalize(self) -> None
Rhino.Input.StringParserSettings.SetAllExpressionSettingsToFalse(self) -> None
Rhino.Input.StringParserSettings.SetAllFieldsToFalse(self) -> None
Rhino.Input.StringParserSettings.__init__(self) -> None
Rhino.LengthValue.ChangeLength(self, newLength: float) -> Rhino.LengthValue
Rhino.LengthValue.ChangeUnitSystem(self, newUnits: Rhino.UnitSystem) -> Rhino.LengthValue
Rhino.LengthValue.Create(arg1: float, arg2: Rhino.UnitSystem, arg3: Rhino.LengthValue.StringFormat, arg4: System.UInt32) -> Rhino.LengthValue
Rhino.LengthValue.Create(length: float, us: Rhino.UnitSystem, arg3: Rhino.LengthValue.StringFormat) -> Rhino.LengthValue
Rhino.LengthValue.Create(s: str, ps: Rhino.Input.StringParserSettings, parsedAll: System.Boolean@) -> Rhino.LengthValue
Rhino.LengthValue.Dispose(self) -> None
Rhino.LengthValue.Finalize(self) -> None
Rhino.LengthValue.IsUnset(self) -> bool
Rhino.LengthValue.Length(self) -> float
Rhino.LengthValue.Length(self, units: Rhino.UnitSystem) -> float
Rhino.NodeInCode.ComponentFunctionInfo.Evaluate(self, args: System.Collections.IEnumerable, keepTree: bool, warnings: System.String[]@) -> List[Object]
Rhino.NodeInCode.ComponentFunctionInfo.Invoke(self, args: List[Any]) -> List[Object]
Rhino.NodeInCode.ComponentFunctionInfo.InvokeKeepTree(self, args: List[Any]) -> List[Object]
Rhino.NodeInCode.ComponentFunctionInfo.InvokeKeepTreeSilenceWarnings(self, args: List[Any]) -> List[Object]
Rhino.NodeInCode.ComponentFunctionInfo.InvokeSilenceWarnings(self, args: List[Any]) -> List[Object]
Rhino.NodeInCode.ComponentFunctionInfo.ToString(self) -> str
Rhino.NodeInCode.ComponentFunctionInfo.__init__(self, name: str, namespace: str, description: str, inputNames: Sequence[str], inputDescriptions: Sequence[str], inputTypeNames: Sequence[str], inputsOptional: Sequence[bool], outputNames: Sequence[str], outputDescriptions: Sequence[str], outputTypeNames: Sequence[str], componentGuid: System.Guid) -> None
Rhino.NodeInCode.Components.FindComponent(fullName: str) -> ComponentFunctionInfo
Rhino.NodeInCode.Components.__getAllFunctions(self) -> NodeInCodeTable
Rhino.NodeInCode.Components.__init__(self) -> None
Rhino.NodeInCode.NodeInCodeTable.Add(self, item: Rhino.NodeInCode.ComponentFunctionInfo) -> None
Rhino.NodeInCode.NodeInCodeTable.Contains(self, fullName: str) -> bool
Rhino.NodeInCode.NodeInCodeTable.GetDynamicMemberNames(self) -> IEnumerable<string>
Rhino.NodeInCode.NodeInCodeTable.GetDynamicMembers(self) -> IEnumerable<ComponentFunctionInfo>
Rhino.NodeInCode.NodeInCodeTable.TryGetIndex(self, binder: System.Dynamic.GetIndexBinder, indexes: List[Any], result: System.Object@) -> bool
Rhino.NodeInCode.NodeInCodeTable.TryGetMember(self, binder: System.Dynamic.GetMemberBinder, result: System.Object@) -> bool
Rhino.NodeInCode.NodeInCodeTable.TryInvokeMember(self, binder: System.Dynamic.InvokeMemberBinder, args: List[Any], result: System.Object@) -> bool
Rhino.NodeInCode.NodeInCodeTable.__init__(self, items: Iterable[Rhino.NodeInCode.ComponentFunctionInfo]) -> None
Rhino.PersistentSettings.AddChild(self, key: str) -> Rhino.PersistentSettings
Rhino.PersistentSettings.ClearChangedFlag(self) -> None
Rhino.PersistentSettings.ContainsChangedValues(self) -> bool
Rhino.PersistentSettings.ContainsModifiedValues(self, allUserSettings: Rhino.PersistentSettings) -> bool
Rhino.PersistentSettings.DeleteChild(self, key: str) -> None
Rhino.PersistentSettings.DeleteItem(self, key: str) -> None
Rhino.PersistentSettings.FromPlugInId(pluginId: System.Guid) -> Rhino.PersistentSettings
Rhino.PersistentSettings.GetBool(self, key: str) -> bool
Rhino.PersistentSettings.GetBool(self, key: str, defaultValue: bool) -> bool
Rhino.PersistentSettings.GetBool(self, key: str, defaultValue: bool, legacyKeyList: Iterable[str]) -> bool
Rhino.PersistentSettings.GetByte(self, key: str) -> byte
Rhino.PersistentSettings.GetByte(self, key: str, defaultValue: System.Byte) -> byte
Rhino.PersistentSettings.GetByte(self, key: str, defaultValue: System.Byte, legacyKeyList: Iterable[str]) -> byte
Rhino.PersistentSettings.GetChar(self, key: str) -> char
Rhino.PersistentSettings.GetChar(self, key: str, defaultValue: System.Char) -> char
Rhino.PersistentSettings.GetChar(self, key: str, defaultValue: System.Char, legacyKeyList: Iterable[str]) -> char
Rhino.PersistentSettings.GetChild(self, key: str) -> Rhino.PersistentSettings
Rhino.PersistentSettings.GetColor(self, key: str) -> Color
Rhino.PersistentSettings.GetColor(self, key: str, defaultValue: Optional[System.Drawing.Color]) -> Optional[Color]
Rhino.PersistentSettings.GetColor(self, key: str, defaultValue: Optional[System.Drawing.Color], legacyKeyList: Iterable[str]) -> Optional[Color]
Rhino.PersistentSettings.GetColor(self, key: str, defaultValue: System.Drawing.Color) -> Color
Rhino.PersistentSettings.GetColor(self, key: str, defaultValue: System.Drawing.Color, legacyKeyList: Iterable[str]) -> Color
Rhino.PersistentSettings.GetDate(self, key: str) -> DateTime
Rhino.PersistentSettings.GetDate(self, key: str, defaultValue: System.DateTime) -> DateTime
Rhino.PersistentSettings.GetDate(self, key: str, defaultValue: System.DateTime, legacyKeyList: Iterable[str]) -> DateTime
Rhino.PersistentSettings.GetDouble(self, key: str) -> float
Rhino.PersistentSettings.GetDouble(self, key: str, defaultValue: float) -> float
Rhino.PersistentSettings.GetDouble(self, key: str, defaultValue: float, legacyKeyList: Iterable[str]) -> float
Rhino.PersistentSettings.GetEnumValue<T>(self, defaultValue: ``0) -> T
Rhino.PersistentSettings.GetEnumValue<T>(self, key: str) -> T
Rhino.PersistentSettings.GetEnumValue<T>(self, key: str, defaultValue: ``0) -> T
Rhino.PersistentSettings.GetGuid(self, key: str) -> Guid
Rhino.PersistentSettings.GetGuid(self, key: str, defaultValue: System.Guid) -> Guid
Rhino.PersistentSettings.GetGuid(self, key: str, defaultValue: System.Guid, legacyKeyList: Iterable[str]) -> Guid
Rhino.PersistentSettings.GetInteger(self, key: str) -> int
Rhino.PersistentSettings.GetInteger(self, key: str, defaultValue: int) -> int
Rhino.PersistentSettings.GetInteger(self, key: str, defaultValue: int, bound: int, boundIsLower: bool) -> int
Rhino.PersistentSettings.GetInteger(self, key: str, defaultValue: int, legacyKeyList: Iterable[str]) -> int
Rhino.PersistentSettings.GetInteger(self, key: str, defaultValue: int, lowerBound: int, upperBound: int) -> int
Rhino.PersistentSettings.GetPoint(self, key: str) -> Point
Rhino.PersistentSettings.GetPoint(self, key: str, defaultValue: System.Drawing.Point) -> Point
Rhino.PersistentSettings.GetPoint(self, key: str, defaultValue: System.Drawing.Point, legacyKeyList: Iterable[str]) -> Point
Rhino.PersistentSettings.GetPoint3d(self, key: str) -> Point3d
Rhino.PersistentSettings.GetPoint3d(self, key: str, defaultValue: Rhino.Geometry.Point3d) -> Point3d
Rhino.PersistentSettings.GetPoint3d(self, key: str, defaultValue: Rhino.Geometry.Point3d, legacyKeyList: Iterable[str]) -> Point3d
Rhino.PersistentSettings.GetRectangle(self, key: str) -> Rectangle
Rhino.PersistentSettings.GetRectangle(self, key: str, defaultValue: System.Drawing.Rectangle) -> Rectangle
Rhino.PersistentSettings.GetRectangle(self, key: str, defaultValue: System.Drawing.Rectangle, legacyKeyList: Iterable[str]) -> Rectangle
Rhino.PersistentSettings.GetSettingIsHiddenFromUserInterface(self, key: str) -> bool
Rhino.PersistentSettings.GetSettingIsHiddenFromUserInterface(self, key: str, legacyKeyList: Iterable[str]) -> bool
Rhino.PersistentSettings.GetSettingIsReadOnly(self, key: str) -> bool
Rhino.PersistentSettings.GetSettingType(self, key: str) -> Type
Rhino.PersistentSettings.GetSize(self, key: str) -> Size
Rhino.PersistentSettings.GetSize(self, key: str, defaultValue: System.Drawing.Size) -> Size
Rhino.PersistentSettings.GetSize(self, key: str, defaultValue: System.Drawing.Size, legacyKeyList: Iterable[str]) -> Size
Rhino.PersistentSettings.GetString(self, key: str) -> str
Rhino.PersistentSettings.GetString(self, key: str, defaultValue: str) -> str
Rhino.PersistentSettings.GetString(self, key: str, defaultValue: str, legacyKeyList: Iterable[str]) -> str
Rhino.PersistentSettings.GetStringDictionary(self, key: str) -> List[string>]
Rhino.PersistentSettings.GetStringDictionary(self, key: str, defaultValue: List[KeyValuePair[str, str]]) -> List[string>]
Rhino.PersistentSettings.GetStringDictionary(self, key: str, defaultValue: List[KeyValuePair[str, str]], legacyKeyList: Iterable[str]) -> List[string>]
Rhino.PersistentSettings.GetStringList(self, key: str) -> List[str]
Rhino.PersistentSettings.GetStringList(self, key: str, defaultValue: List[str]) -> List[str]
Rhino.PersistentSettings.GetStringList(self, key: str, defaultValue: List[str], legacyKeyList: Iterable[str]) -> List[str]
Rhino.PersistentSettings.GetUnsignedInteger(self, key: str) -> uint
Rhino.PersistentSettings.GetUnsignedInteger(self, key: str, defaultValue: System.UInt32) -> uint
Rhino.PersistentSettings.GetUnsignedInteger(self, key: str, defaultValue: System.UInt32, legacyKeyList: Iterable[str]) -> uint
Rhino.PersistentSettings.GetValidator<T>(self, key: str) -> EventHandler<PersistentSettingsEventArgs<T>>
Rhino.PersistentSettings.HideSettingFromUserInterface(self, key: str) -> None
Rhino.PersistentSettings.RegisterSettingsValidator<T>(self, key: str, validator: EventHandler[PersistentSettingsEventArgs[``0]]) -> None
Rhino.PersistentSettings.SetBool(self, key: str, value: bool) -> None
Rhino.PersistentSettings.SetByte(self, key: str, value: System.Byte) -> None
Rhino.PersistentSettings.SetChar(self, key: str, value: System.Char) -> None
Rhino.PersistentSettings.SetColor(self, key: str, value: Optional[System.Drawing.Color]) -> None
Rhino.PersistentSettings.SetColor(self, key: str, value: System.Drawing.Color) -> None
Rhino.PersistentSettings.SetDate(self, key: str, value: System.DateTime) -> None
Rhino.PersistentSettings.SetDefault(self, key: str, value: List[KeyValuePair[str, str]]) -> None
Rhino.PersistentSettings.SetDefault(self, key: str, value: List[str]) -> None
Rhino.PersistentSettings.SetDefault(self, key: str, value: Optional[System.Drawing.Color]) -> None
Rhino.PersistentSettings.SetDefault(self, key: str, value: Rhino.Geometry.Point3d) -> None
Rhino.PersistentSettings.SetDefault(self, key: str, value: System.Byte) -> None
Rhino.PersistentSettings.SetDefault(self, key: str, value: System.Char) -> None
Rhino.PersistentSettings.SetDefault(self, key: str, value: System.DateTime) -> None
Rhino.PersistentSettings.SetDefault(self, key: str, value: System.Drawing.Color) -> None
Rhino.PersistentSettings.SetDefault(self, key: str, value: System.Drawing.Point) -> None
Rhino.PersistentSettings.SetDefault(self, key: str, value: System.Drawing.Rectangle) -> None
Rhino.PersistentSettings.SetDefault(self, key: str, value: System.Drawing.Size) -> None
Rhino.PersistentSettings.SetDefault(self, key: str, value: System.Guid) -> None
Rhino.PersistentSettings.SetDefault(self, key: str, value: bool) -> None
Rhino.PersistentSettings.SetDefault(self, key: str, value: float) -> None
Rhino.PersistentSettings.SetDefault(self, key: str, value: int) -> None
Rhino.PersistentSettings.SetDefault(self, key: str, value: str) -> None
Rhino.PersistentSettings.SetDouble(self, key: str, value: float) -> None
Rhino.PersistentSettings.SetEnumValue<T>(self, enumValue: ``0) -> None
Rhino.PersistentSettings.SetEnumValue<T>(self, key: str, value: ``0) -> None
Rhino.PersistentSettings.SetGuid(self, key: str, value: System.Guid) -> None
Rhino.PersistentSettings.SetInteger(self, key: str, value: int) -> None
Rhino.PersistentSettings.SetPoint(self, key: str, value: System.Drawing.Point) -> None
Rhino.PersistentSettings.SetPoint3d(self, key: str, value: Rhino.Geometry.Point3d) -> None
Rhino.PersistentSettings.SetRectangle(self, key: str, value: System.Drawing.Rectangle) -> None
Rhino.PersistentSettings.SetSize(self, key: str, value: System.Drawing.Size) -> None
Rhino.PersistentSettings.SetString(self, key: str, value: str) -> None
Rhino.PersistentSettings.SetStringDictionary(self, key: str, value: List[KeyValuePair[str, str]]) -> None
Rhino.PersistentSettings.SetStringList(self, key: str, value: List[str]) -> None
Rhino.PersistentSettings.SetUnsignedInteger(self, key: str, value: System.UInt32) -> None
Rhino.PersistentSettings.TryGetBool(self, key: str, value: System.Boolean@) -> bool
Rhino.PersistentSettings.TryGetBool(self, key: str, value: System.Boolean@, legacyKeyList: Iterable[str]) -> bool
Rhino.PersistentSettings.TryGetByte(self, key: str, value: System.Byte@) -> bool
Rhino.PersistentSettings.TryGetByte(self, key: str, value: System.Byte@, legacyKeyList: Iterable[str]) -> bool
Rhino.PersistentSettings.TryGetChar(self, key: str, value: System.Char@) -> bool
Rhino.PersistentSettings.TryGetChar(self, key: str, value: System.Char@, legacyKeyList: Iterable[str]) -> bool
Rhino.PersistentSettings.TryGetChild(self, key: str, value: Rhino.PersistentSettings@) -> bool
Rhino.PersistentSettings.TryGetColor(self, key: str, value: System.Drawing.Color@) -> bool
Rhino.PersistentSettings.TryGetColor(self, key: str, value: System.Drawing.Color@, legacyKeyList: Iterable[str]) -> bool
Rhino.PersistentSettings.TryGetColor(self, key: str, value: System.Nullable{System.Drawing.Color}@) -> bool
Rhino.PersistentSettings.TryGetColor(self, key: str, value: System.Nullable{System.Drawing.Color}@, legacyKeyList: Iterable[str]) -> bool
Rhino.PersistentSettings.TryGetDate(self, key: str, value: System.DateTime@) -> bool
Rhino.PersistentSettings.TryGetDate(self, key: str, value: System.DateTime@, legacyKeyList: Iterable[str]) -> bool
Rhino.PersistentSettings.TryGetDefault(self, key: str, value: Rhino.Geometry.Point3d@) -> bool
Rhino.PersistentSettings.TryGetDefault(self, key: str, value: System.Boolean@) -> bool
Rhino.PersistentSettings.TryGetDefault(self, key: str, value: System.Byte@) -> bool
Rhino.PersistentSettings.TryGetDefault(self, key: str, value: System.Char@) -> bool
Rhino.PersistentSettings.TryGetDefault(self, key: str, value: System.DateTime@) -> bool
Rhino.PersistentSettings.TryGetDefault(self, key: str, value: System.Double@) -> bool
Rhino.PersistentSettings.TryGetDefault(self, key: str, value: System.Drawing.Color@) -> bool
Rhino.PersistentSettings.TryGetDefault(self, key: str, value: System.Drawing.Rectangle@) -> bool
Rhino.PersistentSettings.TryGetDefault(self, key: str, value: System.Drawing.Size@) -> bool
Rhino.PersistentSettings.TryGetDefault(self, key: str, value: System.Int32@) -> bool
Rhino.PersistentSettings.TryGetDefault(self, key: str, value: System.String@) -> bool
Rhino.PersistentSettings.TryGetDefault(self, key: str, value: System.String[]@) -> bool
Rhino.PersistentSettings.TryGetDouble(self, key: str, value: System.Double@) -> bool
Rhino.PersistentSettings.TryGetDouble(self, key: str, value: System.Double@, legacyKeyList: Iterable[str]) -> bool
Rhino.PersistentSettings.TryGetEnumValue<T>(self, key: str, enumValue: ``0@) -> bool
Rhino.PersistentSettings.TryGetGuid(self, key: str, value: System.Guid@) -> bool
Rhino.PersistentSettings.TryGetGuid(self, key: str, value: System.Guid@, legacyKeyList: Iterable[str]) -> bool
Rhino.PersistentSettings.TryGetInteger(self, key: str, value: System.Int32@) -> bool
Rhino.PersistentSettings.TryGetInteger(self, key: str, value: System.Int32@, legacyKeyList: Iterable[str]) -> bool
Rhino.PersistentSettings.TryGetPoint(self, key: str, value: System.Drawing.Point@) -> bool
Rhino.PersistentSettings.TryGetPoint(self, key: str, value: System.Drawing.Point@, legacyKeyList: Iterable[str]) -> bool
Rhino.PersistentSettings.TryGetPoint3d(self, key: str, value: Rhino.Geometry.Point3d@) -> bool
Rhino.PersistentSettings.TryGetPoint3d(self, key: str, value: Rhino.Geometry.Point3d@, legacyKeyList: Iterable[str]) -> bool
Rhino.PersistentSettings.TryGetRectangle(self, key: str, value: System.Drawing.Rectangle@) -> bool
Rhino.PersistentSettings.TryGetRectangle(self, key: str, value: System.Drawing.Rectangle@, legacyKeyList: Iterable[str]) -> bool
Rhino.PersistentSettings.TryGetSettingIsHiddenFromUserInterface(self, key: str, value: System.Boolean@) -> bool
Rhino.PersistentSettings.TryGetSettingIsHiddenFromUserInterface(self, key: str, value: System.Boolean@, legacyKeyList: Iterable[str]) -> bool
Rhino.PersistentSettings.TryGetSettingIsReadOnly(self, key: str, value: System.Boolean@) -> bool
Rhino.PersistentSettings.TryGetSettingType(self, key: str, type: System.Type@) -> bool
Rhino.PersistentSettings.TryGetSize(self, key: str, value: System.Drawing.Size@) -> bool
Rhino.PersistentSettings.TryGetSize(self, key: str, value: System.Drawing.Size@, legacyKeyList: Iterable[str]) -> bool
Rhino.PersistentSettings.TryGetString(self, key: str, value: System.String@) -> bool
Rhino.PersistentSettings.TryGetString(self, key: str, value: System.String@, legacyKeyList: Iterable[str]) -> bool
Rhino.PersistentSettings.TryGetStringDictionary(self, key: str, value: System.Collections.Generic.KeyValuePair{System.String,System.String}[]@) -> bool
Rhino.PersistentSettings.TryGetStringDictionary(self, key: str, value: System.Collections.Generic.KeyValuePair{System.String,System.String}[]@, legacyKeyList: Iterable[str]) -> bool
Rhino.PersistentSettings.TryGetStringList(self, key: str, value: System.String[]@) -> bool
Rhino.PersistentSettings.TryGetStringList(self, key: str, value: System.String[]@, legacyKeyList: Iterable[str]) -> bool
Rhino.PersistentSettings.TryGetUnsignedInteger(self, key: str, value: System.UInt32@) -> bool
Rhino.PersistentSettings.TryGetUnsignedInteger(self, key: str, value: System.UInt32@, legacyKeyList: Iterable[str]) -> bool
Rhino.PersistentSettings.__init__(self, info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext) -> None
Rhino.PersistentSettingsConverter.IsStringDictionary(s: str) -> bool
Rhino.PersistentSettingsConverter.IsStringList(s: str) -> bool
Rhino.PersistentSettingsConverter.ToString(value: List[KeyValuePair[str, str]]) -> str
Rhino.PersistentSettingsConverter.ToString(value: float) -> str
Rhino.PersistentSettingsConverter.ToString(values: List[str]) -> str
Rhino.PersistentSettingsConverter.TryParseDouble(s: str, value: System.Double@) -> bool
Rhino.PersistentSettingsConverter.TryParseEnum(type: System.Type, enumValueName: str, value: System.Int32@) -> bool
Rhino.PersistentSettingsConverter.TryParseEnum(type: System.Type, intValueAsString: str, value: System.String@) -> bool
Rhino.PersistentSettingsConverter.TryParseStringDictionary(s: str, value: System.Collections.Generic.KeyValuePair{System.String,System.String}[]@) -> bool
Rhino.PersistentSettingsConverter.TryParseStringList(s: str, value: System.String[]@) -> bool
Rhino.PersistentSettingsEventArgs.__init__(self) -> None
Rhino.PersistentSettingsEventArgs`1.__init__(self, currentValue: `0, newValue: `0) -> None
Rhino.PersistentSettingsSavedEventArgs.CommandSettings(self, englishCommandName: str) -> PersistentSettings
Rhino.PlugIns.CustomRenderSaveFileTypes.RegisterFileType(self, extensions: Iterable[str], description: str, arg3: Rhino.PlugIns.CustomRenderSaveFileTypes.SaveFileHandler) -> None
Rhino.PlugIns.DigitizerPlugIn.EnableDigitizer(self, enable: bool) -> bool
Rhino.PlugIns.DigitizerPlugIn.SendPoint(self, point: Rhino.Geometry.Point3d, mousebuttons: Rhino.UI.MouseButton, shiftKey: bool, controlKey: bool) -> None
Rhino.PlugIns.DigitizerPlugIn.SendRay(self, ray: Rhino.Geometry.Ray3d, mousebuttons: Rhino.UI.MouseButton, shiftKey: bool, controlKey: bool) -> None
Rhino.PlugIns.DigitizerPlugIn.__init__(self) -> None
Rhino.PlugIns.FileExportPlugIn.AddFileTypes(self, options: Rhino.FileIO.FileWriteOptions) -> FileTypeList
Rhino.PlugIns.FileExportPlugIn.DisplayOptionsDialog(self, parent: System.IntPtr, description: str, extension: str) -> None
Rhino.PlugIns.FileExportPlugIn.WriteFile(self, filename: str, index: int, doc: Rhino.RhinoDoc, options: Rhino.FileIO.FileWriteOptions) -> WriteFileResult
Rhino.PlugIns.FileExportPlugIn.__init__(self) -> None
Rhino.PlugIns.FileImportPlugIn.AddFileTypes(self, options: Rhino.FileIO.FileReadOptions) -> FileTypeList
Rhino.PlugIns.FileImportPlugIn.DisplayOptionsDialog(self, parent: System.IntPtr, description: str, extension: str) -> None
Rhino.PlugIns.FileImportPlugIn.MakeReferenceTableName(self, nameToPrefix: str) -> str
Rhino.PlugIns.FileImportPlugIn.ReadFile(self, filename: str, index: int, doc: Rhino.RhinoDoc, options: Rhino.FileIO.FileReadOptions) -> bool
Rhino.PlugIns.FileImportPlugIn.__init__(self) -> None
Rhino.PlugIns.FileTypeList.AddFileType(self, description: str, extension1: str, extension2: str) -> int
Rhino.PlugIns.FileTypeList.AddFileType(self, description: str, extension1: str, extension2: str, showOptionsButtonInFileDialog: bool) -> int
Rhino.PlugIns.FileTypeList.AddFileType(self, description: str, extension: str) -> int
Rhino.PlugIns.FileTypeList.AddFileType(self, description: str, extension: str, showOptionsButtonInFileDialog: bool) -> int
Rhino.PlugIns.FileTypeList.AddFileType(self, description: str, extensions: Iterable[str]) -> int
Rhino.PlugIns.FileTypeList.AddFileType(self, description: str, extensions: Iterable[str], showOptionsButtonInFileDialog: bool) -> int
Rhino.PlugIns.FileTypeList.__init__(self) -> None
Rhino.PlugIns.FileTypeList.__init__(self, description: str, extension: str) -> None
Rhino.PlugIns.FileTypeList.__init__(self, description: str, extension: str, showOptionsButtonInFileDialog: bool) -> None
Rhino.PlugIns.LicenseChangedEventArgs.__init__(self) -> None
Rhino.PlugIns.LicenseData.Dispose(self) -> None
Rhino.PlugIns.LicenseData.IsNotValid(data: Rhino.PlugIns.LicenseData) -> bool
Rhino.PlugIns.LicenseData.IsValid(data: Rhino.PlugIns.LicenseData) -> bool
Rhino.PlugIns.LicenseData.IsValid(self) -> bool
Rhino.PlugIns.LicenseData.IsValid(self, ignoreExpirationDate: bool) -> bool
Rhino.PlugIns.LicenseData.__init__(self) -> None
Rhino.PlugIns.LicenseData.__init__(self, productLicense: str, serialNumber: str, licenseTitle: str) -> None
Rhino.PlugIns.LicenseData.__init__(self, productLicense: str, serialNumber: str, licenseTitle: str, buildType: Rhino.PlugIns.LicenseBuildType) -> None
Rhino.PlugIns.LicenseData.__init__(self, productLicense: str, serialNumber: str, licenseTitle: str, buildType: Rhino.PlugIns.LicenseBuildType, licenseCount: int) -> None
Rhino.PlugIns.LicenseData.__init__(self, productLicense: str, serialNumber: str, licenseTitle: str, buildType: Rhino.PlugIns.LicenseBuildType, licenseCount: int, expirationDate: Optional[System.DateTime]) -> None
Rhino.PlugIns.LicenseData.__init__(self, productLicense: str, serialNumber: str, licenseTitle: str, buildType: Rhino.PlugIns.LicenseBuildType, licenseCount: int, expirationDate: Optional[System.DateTime], productIcon: System.Drawing.Icon) -> None
Rhino.PlugIns.LicenseData.__init__(self, productLicense: str, serialNumber: str, licenseTitle: str, buildType: Rhino.PlugIns.LicenseBuildType, licenseCount: int, expirationDate: Optional[System.DateTime], productIcon: System.Drawing.Icon, requiresOnlineValidation: bool, isUpgradeFromPreviousVersion: bool) -> None
Rhino.PlugIns.LicenseIdAttribute.__init__(self, value: str) -> None
Rhino.PlugIns.LicenseLease.Finalize(self) -> None
Rhino.PlugIns.LicenseLease.__init__(self, productId: str, groupName: str, groupId: str, userName: str, userId: str, productTitle: str, productVersion: str, productEdition: str, leaseId: str, iat: System.DateTime, exp: System.DateTime) -> None
Rhino.PlugIns.LicenseLease.__init__(self, productId: str, groupName: str, groupId: str, userName: str, userId: str, productTitle: str, productVersion: str, productEdition: str, leaseId: str, iat: System.DateTime, exp: System.DateTime, renewable_until: System.DateTime) -> None
Rhino.PlugIns.LicenseLease.__init__(self, unmanagedPointer: System.IntPtr) -> None
Rhino.PlugIns.LicenseLeaseChangedEventArgs.Finalize(self) -> None
Rhino.PlugIns.LicenseLeaseChangedEventArgs.__init__(self, lease: Rhino.PlugIns.LicenseLease) -> None
Rhino.PlugIns.LicenseStatus.__init__(self) -> None
Rhino.PlugIns.LicenseUtils.AskUserForLicense(productType: int, standAlone: bool, parentWindow: Any, textMask: str, validateProductKeyDelegate: Rhino.PlugIns.ValidateProductKeyDelegate, onLeaseChangedDelegate: Rhino.PlugIns.OnLeaseChangedDelegate, product_path: str, product_title: str, pluginId: System.Guid, licenseId: System.Guid, capabilities: Rhino.PlugIns.LicenseCapabilities) -> bool
Rhino.PlugIns.LicenseUtils.AskUserForLicense(productType: int, standAlone: bool, parentWindow: Any, textMask: str, validateProductKeyDelegate: Rhino.PlugIns.ValidateProductKeyDelegate, onLeaseChangedDelegate: Rhino.PlugIns.OnLeaseChangedDelegate, verifyLicenseKeyDelegate: Rhino.PlugIns.VerifyLicenseKeyDelegate, verifyPreviousVersionLicenseKeyDelegate: Rhino.PlugIns.VerifyPreviousVersionLicenseDelegate, product_path: str, product_title: str, pluginId: System.Guid, licenseId: System.Guid, capabilities: Rhino.PlugIns.LicenseCapabilities) -> bool
Rhino.PlugIns.LicenseUtils.CheckInLicense(productId: System.Guid) -> bool
Rhino.PlugIns.LicenseUtils.CheckOutLicense(productId: System.Guid) -> bool
Rhino.PlugIns.LicenseUtils.ConvertLicense(productId: System.Guid) -> bool
Rhino.PlugIns.LicenseUtils.DeleteLicense(productId: System.Guid) -> bool
Rhino.PlugIns.LicenseUtils.Echo(message: str) -> str
Rhino.PlugIns.LicenseUtils.GetLicense(validateProductKeyDelegate: Rhino.PlugIns.ValidateProductKeyDelegate, leaseChangedDelegate: Rhino.PlugIns.OnLeaseChangedDelegate, product_type: int, capabilities: int, textMask: str, product_path: str, product_title: str, pluginId: System.Guid, licenseId: System.Guid) -> bool
Rhino.PlugIns.LicenseUtils.GetLicense(validateProductKeyDelegate: Rhino.PlugIns.ValidateProductKeyDelegate, leaseChangedDelegate: Rhino.PlugIns.OnLeaseChangedDelegate, verifyLicenseKeyDelegate: Rhino.PlugIns.VerifyLicenseKeyDelegate, verifyPreviousVersionLicenseKeyDelegate: Rhino.PlugIns.VerifyPreviousVersionLicenseDelegate, product_type: int, capabilities: int, textMask: str, product_path: str, product_title: str, pluginId: System.Guid, licenseId: System.Guid) -> bool
Rhino.PlugIns.LicenseUtils.GetLicenseCapabilities(filter: int) -> LicenseCapabilities
Rhino.PlugIns.LicenseUtils.GetLicenseStatus() -> List[LicenseStatus]
Rhino.PlugIns.LicenseUtils.GetLicenseType(productId: System.Guid) -> int
Rhino.PlugIns.LicenseUtils.GetOneLicenseStatus(productid: System.Guid) -> LicenseStatus
Rhino.PlugIns.LicenseUtils.Initialize() -> bool
Rhino.PlugIns.LicenseUtils.IsCheckOutEnabled() -> bool
Rhino.PlugIns.LicenseUtils.LicenseOptionsHandler(pluginId: System.Guid, licenseId: System.Guid, productTitle: str, standAlone: bool) -> bool
Rhino.PlugIns.LicenseUtils.LoginToCloudZoo() -> bool
Rhino.PlugIns.LicenseUtils.LogoutOfCloudZoo() -> bool
Rhino.PlugIns.LicenseUtils.ReturnLicense(productId: System.Guid) -> bool
Rhino.PlugIns.LicenseUtils.ShowBuyLicenseUi(productId: System.Guid) -> None
Rhino.PlugIns.LicenseUtils.ShowLicenseValidationUi(cdkey: str) -> bool
Rhino.PlugIns.LicenseUtils.ShowRhinoExpiredMessage(mode: Rhino.Runtime.Mode, result: System.Int32@) -> bool
Rhino.PlugIns.PlugIn.AskUserForLicense(self, productBuildType: Rhino.PlugIns.LicenseBuildType, standAlone: bool, textMask: str, parentWindow: Any, validateProductKeyDelegate: Rhino.PlugIns.ValidateProductKeyDelegate, onLeaseChangedDelegate: Rhino.PlugIns.OnLeaseChangedDelegate) -> bool
Rhino.PlugIns.PlugIn.CommandSettings(self, name: str) -> PersistentSettings
Rhino.PlugIns.PlugIn.CreateCommands(self) -> None
Rhino.PlugIns.PlugIn.DisplayHelp(self, windowHandle: System.IntPtr) -> bool
Rhino.PlugIns.PlugIn.DocumentPropertiesDialogPages(self, doc: Rhino.RhinoDoc, pages: List[Rhino.UI.OptionsDialogPage]) -> None
Rhino.PlugIns.PlugIn.Find(plugInId: System.Guid) -> Rhino.PlugIns.PlugIn
Rhino.PlugIns.PlugIn.Find(pluginAssembly: System.Reflection.Assembly) -> Rhino.PlugIns.PlugIn
Rhino.PlugIns.PlugIn.FlushSettingsSavedQueue() -> None
Rhino.PlugIns.PlugIn.GetCommands(self) -> List[Command]
Rhino.PlugIns.PlugIn.GetEnglishCommandNames(pluginId: System.Guid) -> List[str]
Rhino.PlugIns.PlugIn.GetInstalledPlugInFolders() -> List[str]
Rhino.PlugIns.PlugIn.GetInstalledPlugInNames() -> List[str]
Rhino.PlugIns.PlugIn.GetInstalledPlugInNames(typeFilter: Rhino.PlugIns.PlugInType, loaded: bool, unloaded: bool) -> List[str]
Rhino.PlugIns.PlugIn.GetInstalledPlugInNames(typeFilter: Rhino.PlugIns.PlugInType, loaded: bool, unloaded: bool, localizedPlugInName: bool) -> List[str]
Rhino.PlugIns.PlugIn.GetInstalledPlugIns() -> string>
Rhino.PlugIns.PlugIn.GetInstalledPlugIns(localizedPlugInName: bool) -> string>
Rhino.PlugIns.PlugIn.GetLicense(self, licenseCapabilities: Rhino.PlugIns.LicenseCapabilities, textMask: str, validateProductKeyDelegate: Rhino.PlugIns.ValidateProductKeyDelegate, leaseChangedDelegate: Rhino.PlugIns.OnLeaseChangedDelegate) -> bool
Rhino.PlugIns.PlugIn.GetLicense(self, productBuildType: Rhino.PlugIns.LicenseBuildType, validateProductKeyDelegate: Rhino.PlugIns.ValidateProductKeyDelegate, leaseChangedDelegate: Rhino.PlugIns.OnLeaseChangedDelegate) -> bool
Rhino.PlugIns.PlugIn.GetLicenseOwner(self, registeredOwner: System.String@, registeredOrganization: System.String@) -> bool
Rhino.PlugIns.PlugIn.GetLoadProtection(pluginId: System.Guid, loadSilently: System.Boolean@) -> bool
Rhino.PlugIns.PlugIn.GetPlugInInfo(pluginId: System.Guid) -> PlugInInfo
Rhino.PlugIns.PlugIn.GetPlugInObject(self) -> Object
Rhino.PlugIns.PlugIn.GetPluginSettings(plugInId: System.Guid, load: bool) -> PersistentSettings
Rhino.PlugIns.PlugIn.Icon(self, size: System.Drawing.Size) -> Bitmap
Rhino.PlugIns.PlugIn.IdFromFileName(filename: str) -> Guid
Rhino.PlugIns.PlugIn.IdFromName(pluginName: str) -> Guid
Rhino.PlugIns.PlugIn.IdFromPath(pluginPath: str) -> Guid
Rhino.PlugIns.PlugIn.IsTextureSupported(self, texture: Rhino.Render.RenderTexture) -> bool
Rhino.PlugIns.PlugIn.LoadComputeExtensionPlugins() -> None
Rhino.PlugIns.PlugIn.LoadPlugIn(path: str, plugInId: System.Guid@) -> LoadPlugInResult
Rhino.PlugIns.PlugIn.LoadPlugIn(pluginId: System.Guid) -> bool
Rhino.PlugIns.PlugIn.LoadPlugIn(pluginId: System.Guid, loadQuietly: bool, forceLoad: bool) -> bool
Rhino.PlugIns.PlugIn.NameFromPath(pluginPath: str) -> str
Rhino.PlugIns.PlugIn.ObjectPropertiesPages(self, collection: Rhino.UI.ObjectPropertiesPageCollection) -> None
Rhino.PlugIns.PlugIn.OnLoad(self, errorMessage: System.String@) -> LoadReturnCode
Rhino.PlugIns.PlugIn.OnShutdown(self) -> None
Rhino.PlugIns.PlugIn.OptionsDialogPages(self, pages: List[Rhino.UI.OptionsDialogPage]) -> None
Rhino.PlugIns.PlugIn.PathFromId(pluginId: System.Guid) -> str
Rhino.PlugIns.PlugIn.PathFromName(pluginName: str) -> str
Rhino.PlugIns.PlugIn.PlugInExists(id: System.Guid, loaded: System.Boolean@, loadProtected: System.Boolean@) -> bool
Rhino.PlugIns.PlugIn.RaiseOnPlugInSettingsSavedEvent() -> None
Rhino.PlugIns.PlugIn.ReadDocument(self, doc: Rhino.RhinoDoc, archive: Rhino.FileIO.BinaryArchiveReader, options: Rhino.FileIO.FileReadOptions) -> None
Rhino.PlugIns.PlugIn.RegisterCommand(self, command: Rhino.Commands.Command) -> bool
Rhino.PlugIns.PlugIn.ResetMessageBoxes(self) -> None
Rhino.PlugIns.PlugIn.ReturnLicense(self) -> bool
Rhino.PlugIns.PlugIn.SavePluginSettings(plugInId: System.Guid) -> None
Rhino.PlugIns.PlugIn.SaveSettings(self) -> None
Rhino.PlugIns.PlugIn.SetLicenseCapabilities(self, textMask: str, capabilities: Rhino.PlugIns.LicenseCapabilities, licenseId: System.Guid) -> None
Rhino.PlugIns.PlugIn.SetLoadProtection(pluginId: System.Guid, loadSilently: bool) -> None
Rhino.PlugIns.PlugIn.ShouldCallWriteDocument(self, options: Rhino.FileIO.FileWriteOptions) -> bool
Rhino.PlugIns.PlugIn.WriteDocument(self, doc: Rhino.RhinoDoc, archive: Rhino.FileIO.BinaryArchiveWriter, options: Rhino.FileIO.FileWriteOptions) -> None
Rhino.PlugIns.PlugIn.[ObsoleteAttribute(self, collection: List[Rhino.UI.ObjectPropertiesPage]) -> None
Rhino.PlugIns.PlugIn.__init__(self) -> None
Rhino.PlugIns.PlugInDescriptionAttribute.__init__(self, descriptionType: Rhino.PlugIns.DescriptionType, value: str) -> None
Rhino.PlugIns.PlugInInfo.Icon(self, size: System.Drawing.Size) -> Bitmap
Rhino.PlugIns.PlugInInfo.IsLoadProtected(self, loadSilently: System.Boolean@) -> bool
Rhino.PlugIns.PreviewNotification.NotifyIntermediateUpdate(self, rw: Rhino.Render.RenderWindow) -> None
Rhino.PlugIns.RenderPlugIn.AllowChooseContent(self, content: Rhino.Render.RenderContent) -> bool
Rhino.PlugIns.RenderPlugIn.CreatePreview(self, args: Rhino.Render.CreatePreviewEventArgs) -> None
Rhino.PlugIns.RenderPlugIn.CreateTexture2dPreview(self, args: Rhino.Render.CreateTexture2dPreviewEventArgs) -> None
Rhino.PlugIns.RenderPlugIn.CurrentRendererSupportsFeature(arg1: Rhino.PlugIns.RenderPlugIn.RenderFeature) -> bool
Rhino.PlugIns.RenderPlugIn.CustomChannelName(self, id: System.Guid) -> str
Rhino.PlugIns.RenderPlugIn.EnableAssignMaterialButton(self) -> bool
Rhino.PlugIns.RenderPlugIn.EnableCreateMaterialButton(self) -> bool
Rhino.PlugIns.RenderPlugIn.EnableEditMaterialButton(self, doc: Rhino.RhinoDoc, material: Rhino.DocObjects.Material) -> bool
Rhino.PlugIns.RenderPlugIn.GetRenderSettingsSections(self) -> List<Guid>
Rhino.PlugIns.RenderPlugIn.InitializeDecalProperties(self, properties: System.Collections.Generic.List{Rhino.Render.NamedValue}@) -> None
Rhino.PlugIns.RenderPlugIn.OnAssignMaterial(self, parent: System.IntPtr, doc: Rhino.RhinoDoc, material: Rhino.DocObjects.Material@) -> bool
Rhino.PlugIns.RenderPlugIn.OnCreateMaterial(self, parent: System.IntPtr, doc: Rhino.RhinoDoc, material: Rhino.DocObjects.Material@) -> bool
Rhino.PlugIns.RenderPlugIn.OnEditMaterial(self, parent: System.IntPtr, doc: Rhino.RhinoDoc, material: Rhino.DocObjects.Material@) -> bool
Rhino.PlugIns.RenderPlugIn.OnSetCurrent(self, current: bool) -> None
Rhino.PlugIns.RenderPlugIn.RegisterCustomRenderSaveFileTypes(self, saveFileTypes: Rhino.PlugIns.CustomRenderSaveFileTypes) -> None
Rhino.PlugIns.RenderPlugIn.RegisterRenderPanels(self, panels: Rhino.Render.RenderPanels) -> None
Rhino.PlugIns.RenderPlugIn.RegisterRenderTabs(self, tabs: Rhino.Render.RenderTabs) -> None
Rhino.PlugIns.RenderPlugIn.Render(self, doc: Rhino.RhinoDoc, mode: Rhino.Commands.RunMode, fastPreview: bool) -> Result
Rhino.PlugIns.RenderPlugIn.RenderContentSerializers(self) -> IEnumerable<RenderContentSerializer>
Rhino.PlugIns.RenderPlugIn.RenderOptionsDialogPage(self, doc: Rhino.RhinoDoc) -> OptionsDialogPage
Rhino.PlugIns.RenderPlugIn.RenderPlugInAddLanguageSpecificTextSet(self) -> None
Rhino.PlugIns.RenderPlugIn.RenderSettingsCustomSections(self, sections: List[Rhino.UI.Controls.ICollapsibleSection]) -> None
Rhino.PlugIns.RenderPlugIn.RenderSettingsSections(self) -> List<Guid>
Rhino.PlugIns.RenderPlugIn.RenderWindow(self, doc: Rhino.RhinoDoc, modes: Rhino.Commands.RunMode, fastPreview: bool, view: Rhino.Display.RhinoView, rect: System.Drawing.Rectangle, inWindow: bool) -> Result
Rhino.PlugIns.RenderPlugIn.RenderWindow(self, doc: Rhino.RhinoDoc, modes: Rhino.Commands.RunMode, fastPreview: bool, view: Rhino.Display.RhinoView, rect: System.Drawing.Rectangle, inWindow: bool, blowup: bool) -> Result
Rhino.PlugIns.RenderPlugIn.ShowDecalProperties(self, properties: System.Collections.Generic.List{Rhino.Render.NamedValue}@) -> bool
Rhino.PlugIns.RenderPlugIn.SunCustomSections(self, sections: List[Rhino.UI.Controls.ICollapsibleSection]) -> None
Rhino.PlugIns.RenderPlugIn.SupportedOutputTypes(self) -> List<FileType>
Rhino.PlugIns.RenderPlugIn.SupportsFeature(self, arg1: Rhino.PlugIns.RenderPlugIn.RenderFeature) -> bool
Rhino.PlugIns.RenderPlugIn.UiContentTypes(self) -> List<Guid>
Rhino.PlugIns.RenderPlugIn.__init__(self) -> None
Rhino.Render.AsyncRenderContext.DeleteThis(self) -> None
Rhino.Render.AsyncRenderContext.Dispose(self) -> None
Rhino.Render.AsyncRenderContext.Dispose(self, isDisposing: bool) -> None
Rhino.Render.AsyncRenderContext.Finalize(self) -> None
Rhino.Render.AsyncRenderContext.JoinRenderThread(self) -> None
Rhino.Render.AsyncRenderContext.StartRenderThread(self, threadStart: System.Threading.ThreadStart, threadName: str) -> bool
Rhino.Render.AsyncRenderContext.StopRendering(self) -> None
Rhino.Render.AsyncRenderContext.__init__(self) -> None
Rhino.Render.CachedTextureCoordinates.Contains(self, item: Rhino.Geometry.Point3d) -> bool
Rhino.Render.CachedTextureCoordinates.CopyTo(self, array: List[Rhino.Geometry.Point3d], arrayIndex: int) -> None
Rhino.Render.CachedTextureCoordinates.GetEnumerator(self) -> IEnumerator<Point3d>
Rhino.Render.CachedTextureCoordinates.IndexOf(self, item: Rhino.Geometry.Point3d) -> int
Rhino.Render.CachedTextureCoordinates.TryGetAt(self, index: int, u: System.Double@, v: System.Double@, w: System.Double@) -> bool
Rhino.Render.ChangeQueue.ChangeQueue.ApplyClippingPlaneChanges(self, deleted: List[System.Guid], addedOrModified: List[Rhino.Render.ChangeQueue.ClippingPlane]) -> None
Rhino.Render.ChangeQueue.ChangeQueue.ApplyDisplayPipelineAttributesChanges(self, displayPipelineAttributes: Rhino.Display.DisplayPipelineAttributes) -> None
Rhino.Render.ChangeQueue.ChangeQueue.ApplyDynamicClippingPlaneChanges(self, changed: List[Rhino.Render.ChangeQueue.ClippingPlane]) -> None
Rhino.Render.ChangeQueue.ChangeQueue.ApplyDynamicLightChanges(self, dynamicLightChanges: List[Rhino.Geometry.Light]) -> None
Rhino.Render.ChangeQueue.ChangeQueue.ApplyDynamicObjectTransforms(self, dynamicObjectTransforms: List[Rhino.Render.ChangeQueue.DynamicObjectTransform]) -> None
Rhino.Render.ChangeQueue.ChangeQueue.ApplyEnvironmentChanges(self, arg1: Rhino.Render.RenderEnvironment.Usage) -> None
Rhino.Render.ChangeQueue.ChangeQueue.ApplyGroundPlaneChanges(self, gp: Rhino.Render.ChangeQueue.GroundPlane) -> None
Rhino.Render.ChangeQueue.ChangeQueue.ApplyLightChanges(self, lightChanges: List[Rhino.Render.ChangeQueue.Light]) -> None
Rhino.Render.ChangeQueue.ChangeQueue.ApplyLinearWorkflowChanges(self, lw: Rhino.Render.LinearWorkflow) -> None
Rhino.Render.ChangeQueue.ChangeQueue.ApplyMaterialChanges(self, mats: List[Rhino.Render.ChangeQueue.Material]) -> None
Rhino.Render.ChangeQueue.ChangeQueue.ApplyMeshChanges(self, deleted: List[System.Guid], added: List[Rhino.Render.ChangeQueue.Mesh]) -> None
Rhino.Render.ChangeQueue.ChangeQueue.ApplyMeshInstanceChanges(self, deleted: List[System.UInt32], addedOrChanged: List[Rhino.Render.ChangeQueue.MeshInstance]) -> None
Rhino.Render.ChangeQueue.ChangeQueue.ApplyRenderSettingsChanges(self, rs: Rhino.Render.RenderSettings) -> None
Rhino.Render.ChangeQueue.ChangeQueue.ApplyRenderSettingsChanges(self, settings: Rhino.Render.ChangeQueue.DisplayRenderSettings) -> None
Rhino.Render.ChangeQueue.ChangeQueue.ApplySkylightChanges(self, skylight: Rhino.Render.ChangeQueue.Skylight) -> None
Rhino.Render.ChangeQueue.ChangeQueue.ApplySunChanges(self, sun: Rhino.Geometry.Light) -> None
Rhino.Render.ChangeQueue.ChangeQueue.ApplyViewChange(self, viewInfo: Rhino.DocObjects.ViewInfo) -> None
Rhino.Render.ChangeQueue.ChangeQueue.AreViewsEqual(self, aView: Rhino.DocObjects.ViewInfo, bView: Rhino.DocObjects.ViewInfo) -> bool
Rhino.Render.ChangeQueue.ChangeQueue.BakingSize(self, ro: Rhino.DocObjects.RhinoObject, material: Rhino.Render.RenderMaterial, type: Rhino.DocObjects.TextureType) -> int
Rhino.Render.ChangeQueue.ChangeQueue.ChangeQueueAddLanguageSpecificTextSet(self) -> None
Rhino.Render.ChangeQueue.ChangeQueue.ContentRenderHash(self, content: Rhino.Render.RenderContent, flags: Rhino.Render.CrcRenderHashFlags, excludeParameterNames: str, lw: Rhino.Render.LinearWorkflow) -> uint
Rhino.Render.ChangeQueue.ChangeQueue.ConvertCameraBasedLightToWorld(changequeue: Rhino.Render.ChangeQueue.ChangeQueue, light: Rhino.Render.ChangeQueue.Light, vp: Rhino.DocObjects.ViewInfo) -> None
Rhino.Render.ChangeQueue.ChangeQueue.CrcFromGuid(guid: System.Guid) -> uint
Rhino.Render.ChangeQueue.ChangeQueue.CreateWorld(self) -> None
Rhino.Render.ChangeQueue.ChangeQueue.CreateWorld(self, bFlushWhenReady: bool) -> None
Rhino.Render.ChangeQueue.ChangeQueue.Dispose(self) -> None
Rhino.Render.ChangeQueue.ChangeQueue.Dispose(self, isDisposing: bool) -> None
Rhino.Render.ChangeQueue.ChangeQueue.EnvironmentForid(self, crc: System.UInt32) -> RenderEnvironment
Rhino.Render.ChangeQueue.ChangeQueue.EnvironmentFromOriginalInstanceId(self, id: System.Guid) -> RenderEnvironment
Rhino.Render.ChangeQueue.ChangeQueue.EnvironmentIdForUsage(self, arg1: Rhino.Render.RenderEnvironment.Usage) -> uint
Rhino.Render.ChangeQueue.ChangeQueue.Flush(self) -> None
Rhino.Render.ChangeQueue.ChangeQueue.GetQueueGroundPlane(self) -> GroundPlane
Rhino.Render.ChangeQueue.ChangeQueue.GetQueueRenderSettings(self) -> RenderSettings
Rhino.Render.ChangeQueue.ChangeQueue.GetQueueSceneBoundingBox(self) -> BoundingBox
Rhino.Render.ChangeQueue.ChangeQueue.GetQueueSkylight(self) -> Skylight
Rhino.Render.ChangeQueue.ChangeQueue.GetQueueSun(self) -> Light
Rhino.Render.ChangeQueue.ChangeQueue.GetQueueView(self) -> ViewInfo
Rhino.Render.ChangeQueue.ChangeQueue.MaterialFromId(self, crc: System.UInt32) -> RenderMaterial
Rhino.Render.ChangeQueue.ChangeQueue.MaterialFromOriginalInstanceId(self, id: System.Guid) -> RenderMaterial
Rhino.Render.ChangeQueue.ChangeQueue.NotifyBeginUpdates(self) -> None
Rhino.Render.ChangeQueue.ChangeQueue.NotifyDynamicUpdatesAreAvailable(self) -> None
Rhino.Render.ChangeQueue.ChangeQueue.NotifyEndUpdates(self) -> None
Rhino.Render.ChangeQueue.ChangeQueue.OneShot(self) -> None
Rhino.Render.ChangeQueue.ChangeQueue.OriginalInstanceIdsFromEnvironmentId(self, crc: System.UInt32) -> List[Guid]
Rhino.Render.ChangeQueue.ChangeQueue.OriginalInstanceIdsFromMaterialId(self, crc: System.UInt32) -> List[Guid]
Rhino.Render.ChangeQueue.ChangeQueue.OriginalInstanceIdsFromTextureId(self, crc: System.UInt32) -> List[Guid]
Rhino.Render.ChangeQueue.ChangeQueue.ProvideOriginalObject(self) -> bool
Rhino.Render.ChangeQueue.ChangeQueue.TextureForId(self, crc: System.UInt32) -> RenderTexture
Rhino.Render.ChangeQueue.ChangeQueue.TextureFromOriginalInstanceId(self, id: System.Guid) -> RenderTexture
Rhino.Render.ChangeQueue.ChangeQueue.__init__(self, pluginId: System.Guid, createPreviewEventArgs: Rhino.Render.CreatePreviewEventArgs) -> None
Rhino.Render.ChangeQueue.ChangeQueue.__init__(self, pluginId: System.Guid, docRuntimeSerialNumber: System.UInt32, viewinfo: Rhino.DocObjects.ViewInfo, attributes: Rhino.Display.DisplayPipelineAttributes, bRespectDisplayPipelineAttributes: bool, bNotifyChanges: bool) -> None
Rhino.Render.ChangeQueue.ChangeQueue.__init__(self, pluginId: System.Guid, docRuntimeSerialNumber: System.UInt32, viewinfo: Rhino.DocObjects.ViewInfo, bRespectDisplayPipelineAttributes: bool) -> None
Rhino.Render.ChangeQueue.DynamicObjectTransform.ToString(self) -> str
Rhino.Render.ChangeQueue.Mesh.GetMeshes(self) -> List[Rhino.Render.ChangeQueue.Mesh]
Rhino.Render.ChangeQueue.Mesh.Id(self) -> Guid
Rhino.Render.ChangeQueue.MeshInstance.AncestryRecord.Dispose(self) -> None
Rhino.Render.ChangeQueue.MeshInstance.AncestryRecord.Dispose(self, isDisposing: bool) -> None
Rhino.Render.ChangeQueue.MeshInstance.AncestryRecord.Finalize(self) -> None
Rhino.Render.ChangeQueue.MeshInstance.AncestryRecord.__init__(self) -> None
Rhino.Render.ChangeQueue.Skylight.ToString(self) -> str
Rhino.Render.ChildSlotNames.PhysicallyBased.FromTextureType(textureType: Rhino.DocObjects.TextureType) -> str
Rhino.Render.City.Cities() -> int
Rhino.Render.City.CityAt(index: int) -> Rhino.Render.City
Rhino.Render.City.FindNearest(latitude: float, longitude: float) -> Rhino.Render.City
Rhino.Render.ContentCollectionIterator.DeleteThis(self) -> None
Rhino.Render.ContentCollectionIterator.Dispose(self) -> None
Rhino.Render.ContentCollectionIterator.Finalize(self) -> None
Rhino.Render.ContentCollectionIterator.First(self) -> RenderContent
Rhino.Render.ContentCollectionIterator.Next(self) -> RenderContent
Rhino.Render.ContentCollectionIterator.__init__(self, pCollection: System.IntPtr) -> None
Rhino.Render.ContentUndoBlocker.Dispose(self) -> None
Rhino.Render.ContentUndoBlocker.Dispose(self, isDisposing: bool) -> None
Rhino.Render.ContentUndoBlocker.Finalize(self) -> None
Rhino.Render.ContentUndoBlocker.__init__(self) -> None
Rhino.Render.ContentUndoHelper.AddContent(self, content: Rhino.Render.RenderContent, parent: Rhino.Render.RenderContent) -> bool
Rhino.Render.ContentUndoHelper.Dispose(self) -> None
Rhino.Render.ContentUndoHelper.Dispose(self, isDisposing: bool) -> None
Rhino.Render.ContentUndoHelper.Finalize(self) -> None
Rhino.Render.ContentUndoHelper.ModifyContent(self, content: Rhino.Render.RenderContent) -> bool
Rhino.Render.ContentUndoHelper.TweakContent(self, content: Rhino.Render.RenderContent, parameterName: str) -> bool
Rhino.Render.ContentUndoHelper.__init__(self, arg1: Rhino.RhinoDoc, arg2: str) -> None
Rhino.Render.ContentUndoHelper.__init__(self, doc: Rhino.RhinoDoc) -> None
Rhino.Render.ConvertibleExtensions.ToColor4f(variant: System.IConvertible) -> Color4f
Rhino.Render.ConvertibleExtensions.ToVector2d(variant: System.IConvertible) -> Vector2d
Rhino.Render.ConvertibleExtensions.ToVector3d(variant: System.IConvertible) -> Vector3d
Rhino.Render.CreatePreviewEventArgs.SkipInitialisation(self) -> None
Rhino.Render.CustomRenderContentAttribute.__init__(self, renderEngineGuid: str, imageBased: bool, category: str, is_elevated: bool, is_built_in: bool, is_private: bool) -> None
Rhino.Render.CustomRenderContentAttribute.__init__(self, renderEngineGuid: str, imageBased: bool, category: str, is_elevated: bool, is_built_in: bool, is_private: bool, is_linear: bool, is_hdrcapable: bool, is_normalmap: bool) -> None
Rhino.Render.CustomRenderMeshProvider.AllObjectsChanged(doc: Rhino.RhinoDoc) -> None
Rhino.Render.CustomRenderMeshProvider.BoundingBox(self, vp: Rhino.DocObjects.ViewportInfo, obj: Rhino.DocObjects.RhinoObject, doc: Rhino.RhinoDoc, requestingPlugIn: System.Guid, attrs: Rhino.Display.DisplayPipelineAttributes) -> BoundingBox
Rhino.Render.CustomRenderMeshProvider.BoundingBox(self, vp: Rhino.DocObjects.ViewportInfo, obj: Rhino.DocObjects.RhinoObject, requestingPlugIn: System.Guid, preview: bool) -> BoundingBox
Rhino.Render.CustomRenderMeshProvider.BuildCustomMeshes(self, vp: Rhino.DocObjects.ViewportInfo, objMeshes: Rhino.Render.RenderPrimitiveList, requestingPlugIn: System.Guid, meshType: bool) -> bool
Rhino.Render.CustomRenderMeshProvider.DocumentBasedMeshesChanged(doc: Rhino.RhinoDoc) -> None
Rhino.Render.CustomRenderMeshProvider.ObjectChanged(doc: Rhino.RhinoDoc, obj: Rhino.DocObjects.RhinoObject) -> None
Rhino.Render.CustomRenderMeshProvider.RegisterProviders(assembly: System.Reflection.Assembly, pluginId: System.Guid) -> None
Rhino.Render.CustomRenderMeshProvider.WillBuildCustomMeshes(self, vp: Rhino.DocObjects.ViewportInfo, obj: Rhino.DocObjects.RhinoObject, requestingPlugIn: System.Guid, preview: bool) -> bool
Rhino.Render.CustomRenderMeshProvider.[ObsoleteAttribute(self) -> None
Rhino.Render.CustomRenderMeshProvider.__init__(self) -> None
Rhino.Render.CustomRenderMeshProvider2.BoundingBox(self, vp: Rhino.DocObjects.ViewportInfo, obj: Rhino.DocObjects.RhinoObject, doc: Rhino.RhinoDoc, requestingPlugIn: System.Guid, attrs: Rhino.Display.DisplayPipelineAttributes) -> BoundingBox
Rhino.Render.CustomRenderMeshProvider2.BoundingBox(self, vp: Rhino.DocObjects.ViewportInfo, obj: Rhino.DocObjects.RhinoObject, requestingPlugIn: System.Guid, preview: bool) -> BoundingBox
Rhino.Render.CustomRenderMeshProvider2.BuildCustomMeshes(self, vp: Rhino.DocObjects.ViewportInfo, doc: Rhino.RhinoDoc, objMeshes: Rhino.Render.RenderPrimitiveList, requestingPlugIn: System.Guid, attrs: Rhino.Display.DisplayPipelineAttributes) -> bool
Rhino.Render.CustomRenderMeshProvider2.BuildCustomMeshes(self, vp: Rhino.DocObjects.ViewportInfo, objMeshes: Rhino.Render.RenderPrimitiveList, requestingPlugIn: System.Guid, preview: bool) -> bool
Rhino.Render.CustomRenderMeshProvider2.WillBuildCustomMeshes(self, vp: Rhino.DocObjects.ViewportInfo, obj: Rhino.DocObjects.RhinoObject, doc: Rhino.RhinoDoc, requestingPlugIn: System.Guid, attrs: Rhino.Display.DisplayPipelineAttributes) -> bool
Rhino.Render.CustomRenderMeshProvider2.WillBuildCustomMeshes(self, vp: Rhino.DocObjects.ViewportInfo, obj: Rhino.DocObjects.RhinoObject, requestingPlugIn: System.Guid, preview: bool) -> bool
Rhino.Render.CustomRenderMeshProvider2.__init__(self) -> None
Rhino.Render.CustomRenderMeshes.CustomRenderMeshProviderAttribute.__init__(self, nonObjectIdsOnly: bool) -> None
Rhino.Render.CustomRenderMeshes.Instance.Dispose(self) -> None
Rhino.Render.CustomRenderMeshes.Instance.Dispose(self, isDisposing: bool) -> None
Rhino.Render.CustomRenderMeshes.Instance.Finalize(self) -> None
Rhino.Render.CustomRenderMeshes.Instance.__init__(self) -> None
Rhino.Render.CustomRenderMeshes.RenderMeshProvider.Dispose(self) -> None
Rhino.Render.CustomRenderMeshes.RenderMeshProvider.Dispose(self, isDisposing: bool) -> None
Rhino.Render.CustomRenderMeshes.RenderMeshProvider.Finalize(self) -> None
Rhino.Render.CustomRenderMeshes.RenderMeshProvider.GetParameter(self, doc: Rhino.RhinoDoc, objectId: System.Guid, parameterName: str) -> Object
Rhino.Render.CustomRenderMeshes.RenderMeshProvider.HasCustomRenderMeshes(self, arg1: Rhino.Geometry.MeshType, arg2: Rhino.DocObjects.ViewportInfo, arg3: Rhino.RhinoDoc, arg4: System.Guid, arg5: Rhino.Render.CustomRenderMeshes.RenderMeshProvider.Flags@, arg6: Rhino.PlugIns.PlugIn, arg7: Rhino.Display.DisplayPipelineAttributes) -> bool
Rhino.Render.CustomRenderMeshes.RenderMeshProvider.Progress(self, doc: Rhino.RhinoDoc, optional_objectIds: List[System.Guid]) -> RenderMeshProviderProgress
Rhino.Render.CustomRenderMeshes.RenderMeshProvider.ProgressForAll(doc: Rhino.RhinoDoc, optional_objectIds: List[System.Guid]) -> List[RenderMeshProviderProgress]
Rhino.Render.CustomRenderMeshes.RenderMeshProvider.RegisterProvider(provider: Rhino.Render.CustomRenderMeshes.RenderMeshProvider, plugin: Rhino.PlugIns.PlugIn) -> bool
Rhino.Render.CustomRenderMeshes.RenderMeshProvider.RegisterProviders(assembly: System.Reflection.Assembly, plugin: Rhino.PlugIns.PlugIn) -> None
Rhino.Render.CustomRenderMeshes.RenderMeshProvider.RegisterProviders(plugin: Rhino.PlugIns.PlugIn) -> None
Rhino.Render.CustomRenderMeshes.RenderMeshProvider.RenderMeshes(self, arg1: Rhino.Geometry.MeshType, arg2: Rhino.DocObjects.ViewportInfo, arg3: Rhino.RhinoDoc, arg4: System.Guid, arg5: List[Rhino.DocObjects.InstanceObject], arg6: Rhino.Render.CustomRenderMeshes.RenderMeshProvider.Flags@, arg7: Rhino.Render.CustomRenderMeshes.RenderMeshes, arg8: Rhino.PlugIns.PlugIn, arg9: Rhino.Display.DisplayPipelineAttributes) -> RenderMeshes
Rhino.Render.CustomRenderMeshes.RenderMeshProvider.SetParameter(self, doc: Rhino.RhinoDoc, objectId: System.Guid, parameterName: str, value: Any) -> None
Rhino.Render.CustomRenderMeshes.RenderMeshProvider.__init__(self) -> None
Rhino.Render.CustomRenderMeshes.RenderMeshProviderProgress.__init__(self) -> None
Rhino.Render.CustomRenderMeshes.RenderMeshes.AddInstance(self, instance: Rhino.Render.CustomRenderMeshes.Instance) -> None
Rhino.Render.CustomRenderMeshes.RenderMeshes.Dispose(self) -> None
Rhino.Render.CustomRenderMeshes.RenderMeshes.Dispose(self, isDisposing: bool) -> None
Rhino.Render.CustomRenderMeshes.RenderMeshes.Finalize(self) -> None
Rhino.Render.CustomRenderMeshes.RenderMeshes.GetEnumerator(self) -> IEnumerator<Instance>
Rhino.Render.CustomRenderMeshes.RenderMeshes.GetHashCode(self) -> int
Rhino.Render.CustomRenderMeshes.RenderMeshes.__init__(self, doc: Rhino.RhinoDoc, objectId: System.Guid, renderMeshProviderId: System.Guid, runningHash: System.UInt32) -> None
Rhino.Render.CustomRenderMeshes.RenderMeshes.__init__(self, doc: Rhino.RhinoDoc, objectId: System.Guid, renderMeshProviderId: System.Guid, runningHash: System.UInt32, flags: System.UInt32) -> None
Rhino.Render.DataSources.ContentFactories.Dispose(self) -> None
Rhino.Render.DataSources.ContentFactories.Finalize(self) -> None
Rhino.Render.DataSources.ContentFactories.FindFactory(self, uuid: System.Guid) -> ContentFactory
Rhino.Render.DataSources.ContentFactories.FirstFactory(self) -> ContentFactory
Rhino.Render.DataSources.ContentFactories.NextFactory(self) -> ContentFactory
Rhino.Render.DataSources.ContentFactories.__init__(self, pRdkContentFactories: System.IntPtr) -> None
Rhino.Render.DataSources.ContentFactory.ContentTypeId(self) -> Guid
Rhino.Render.DataSources.ContentFactory.Dispose(self) -> None
Rhino.Render.DataSources.ContentFactory.Finalize(self) -> None
Rhino.Render.DataSources.ContentFactory.Kind(self) -> RenderContentKind
Rhino.Render.DataSources.ContentFactory.NewContent(self) -> RenderContent
Rhino.Render.DataSources.ContentFactory.__init__(self, pRdkContentFactory: System.IntPtr) -> None
Rhino.Render.DataSources.MetaData.ContentInstanceId(self) -> Guid
Rhino.Render.DataSources.MetaData.Dispose(self) -> None
Rhino.Render.DataSources.MetaData.Finalize(self) -> None
Rhino.Render.DataSources.MetaData.Geometry(self) -> str
Rhino.Render.DataSources.MetaData.__init__(self, pMetaData: System.IntPtr) -> None
Rhino.Render.DataSources.RdkEdit.Dispose(self) -> None
Rhino.Render.DataSources.RdkEdit.Execute(self, collection: Rhino.Render.RenderContentCollection) -> bool
Rhino.Render.DataSources.RdkEdit.Finalize(self) -> None
Rhino.Render.DataSources.RdkEdit.__init__(self, pRdkEdit: System.IntPtr) -> None
Rhino.Render.DataSources.RdkModalEditContentBucket.ContentsIn(self) -> RenderContentCollection
Rhino.Render.DataSources.RdkModalEditContentBucket.Dispose(self) -> None
Rhino.Render.DataSources.RdkModalEditContentBucket.Finalize(self) -> None
Rhino.Render.DataSources.RdkModalEditContentBucket.SetContentsOut(self, collection: Rhino.Render.RenderContentCollection) -> None
Rhino.Render.DataSources.RdkModalEditContentBucket.__init__(self, pRdkModalEditContentBucket: System.IntPtr) -> None
Rhino.Render.DataSources.RdkSelectionNavigator.Add(self, selectedContentArray: Rhino.Render.RenderContentCollection) -> None
Rhino.Render.DataSources.RdkSelectionNavigator.CanGoBackwards(self) -> bool
Rhino.Render.DataSources.RdkSelectionNavigator.CanGoForwards(self) -> bool
Rhino.Render.DataSources.RdkSelectionNavigator.Clear(self) -> None
Rhino.Render.DataSources.RdkSelectionNavigator.Dispose(self) -> None
Rhino.Render.DataSources.RdkSelectionNavigator.Finalize(self) -> None
Rhino.Render.DataSources.RdkSelectionNavigator.GoBackwards(self, selectedContentArray: Rhino.Render.RenderContentCollection@) -> bool
Rhino.Render.DataSources.RdkSelectionNavigator.GoForwards(self, selectedContentArray: Rhino.Render.RenderContentCollection@) -> bool
Rhino.Render.DataSources.RdkSelectionNavigator.__init__(self, pRhinoSettings: System.IntPtr) -> None
Rhino.Render.DataSources.RhinoSettings.ActiveView(self) -> RhinoView
Rhino.Render.DataSources.RhinoSettings.Dispose(self) -> None
Rhino.Render.DataSources.RhinoSettings.Finalize(self) -> None
Rhino.Render.DataSources.RhinoSettings.GetCurrentRenderer(self) -> Guid
Rhino.Render.DataSources.RhinoSettings.GetCustomRenderSizes(self) -> List<Size>
Rhino.Render.DataSources.RhinoSettings.GetRenderSettings(self) -> RenderSettings
Rhino.Render.DataSources.RhinoSettings.GroundPlaneOnInViewDisplayMode(self, view: Rhino.Display.RhinoView) -> bool
Rhino.Render.DataSources.RhinoSettings.RenderingView(self) -> ViewInfo
Rhino.Render.DataSources.RhinoSettings.SetCurrentRenderer(self, g: System.Guid) -> None
Rhino.Render.DataSources.RhinoSettings.SetGroundPlaneOnInViewDisplayMode(self, view: Rhino.Display.RhinoView, bOn: bool) -> None
Rhino.Render.DataSources.RhinoSettings.SetRenderSettings(self, renderSettings: Rhino.Render.RenderSettings) -> None
Rhino.Render.DataSources.RhinoSettings.ViewSupportsShading(self, view: Rhino.Display.RhinoView) -> bool
Rhino.Render.DataSources.RhinoSettings.__init__(self, pRhinoSettings: System.IntPtr) -> None
Rhino.Render.Decal.ConstPointer(self) -> IntPtr
Rhino.Render.Decal.Create(createParams: Rhino.Render.DecalCreateParams) -> Rhino.Render.Decal
Rhino.Render.Decal.CustomData(self) -> List<NamedValue>
Rhino.Render.Decal.CustomData(self, renderer: System.Guid) -> List<NamedValue>
Rhino.Render.Decal.Dispose(self) -> None
Rhino.Render.Decal.Dispose(self, isDisposing: bool) -> None
Rhino.Render.Decal.Finalize(self) -> None
Rhino.Render.Decal.GetTextureMapping(self) -> TextureMapping
Rhino.Render.Decal.GetUVBounds(self, min_u: System.Double@, min_v: System.Double@, max_u: System.Double@, max_v: System.Double@) -> None
Rhino.Render.Decal.HorzSweep(self, sta: System.Double@, end: System.Double@) -> None
Rhino.Render.Decal.NonConstPointer(self) -> IntPtr
Rhino.Render.Decal.TryGetColor(self, point: Rhino.Geometry.Point3d, normal: Rhino.Geometry.Vector3d, colInOut: Rhino.Display.Color4f@, uvOut: Rhino.Geometry.Point2d@) -> bool
Rhino.Render.Decal.UVBounds(self, minUOut: System.Double@, minVOut: System.Double@, maxUOut: System.Double@, maxVOut: System.Double@) -> None
Rhino.Render.Decal.VertSweep(self, sta: System.Double@, end: System.Double@) -> None
Rhino.Render.Decal.[ObsoleteAttribute(self, arg1: Rhino.Render.CrcRenderHashFlags) -> None
Rhino.Render.Decal.[ObsoleteAttribute(self, arg1: Rhino.Render.CrcRenderHashFlags, arg2: Rhino.Render.LinearWorkflow) -> None
Rhino.Render.Decal.[ObsoleteAttribute(self, arg1: Rhino.Render.TextureRenderHashFlags) -> None
Rhino.Render.Decal.[ObsoleteAttribute(self, arg1: Rhino.Render.TextureRenderHashFlags, arg2: Rhino.Render.LinearWorkflow) -> None
Rhino.Render.DecalCreateParams.__init__(self) -> None
Rhino.Render.Decals.Add(self, decal: Rhino.Render.Decal) -> uint
Rhino.Render.Decals.GetEnumerator(self) -> IEnumerator<Decal>
Rhino.Render.Decals.Remove(self, decal: Rhino.Render.Decal) -> bool
Rhino.Render.Decals.RemoveAllDecals(self) -> None
Rhino.Render.Decals.[ObsoleteAttribute(self) -> None
Rhino.Render.Dithering.CopyFrom(self, src: Rhino.Render.FreeFloatingBase) -> None
Rhino.Render.Dithering.Dispose(self) -> None
Rhino.Render.Dithering.Finalize(self) -> None
Rhino.Render.Dithering.__init__(self) -> None
Rhino.Render.Dithering.__init__(self, d: Rhino.Render.Dithering) -> None
Rhino.Render.DocumentOrFreeFloatingBase.BeginChange(self, arg1: Rhino.Render.RenderContent.ChangeContexts) -> None
Rhino.Render.DocumentOrFreeFloatingBase.EndChange(self) -> bool
Rhino.Render.ExtensionMethods.SimulatedTextureAddLanguageSpecificTextSet(arg1: Rhino.Render.TextureEnvironmentMappingMode) -> None
Rhino.Render.ExtensionMethods.SimulatedTextureAddLanguageSpecificTextSet(arg1: Rhino.Render.TextureProjectionMode) -> None
Rhino.Render.ExtensionMethods.ToEnvironmentMappingMode(arg1: Rhino.Render.SimulatedTexture.EnvironmentMappingModes) -> TextureEnvironmentMappingMode
Rhino.Render.ExtensionMethods.ToTextureProjectionMode(arg1: Rhino.Render.SimulatedTexture.ProjectionModes) -> TextureProjectionMode
Rhino.Render.Fields.BoolField.ValueAsObject(self) -> Object
Rhino.Render.Fields.ByteArrayField.ValueAsObject(self) -> Object
Rhino.Render.Fields.Color4fField.ValueAsObject(self) -> Object
Rhino.Render.Fields.DateTimeField.ValueAsObject(self) -> Object
Rhino.Render.Fields.DoubleField.ValueAsObject(self) -> Object
Rhino.Render.Fields.Field.CreateCppPointer(self, content: Rhino.Render.RenderContent, key: str, prompt: str, initialValue: Any, isTextured: bool, treatAsLinear: bool) -> None
Rhino.Render.Fields.Field.GetValue<T>(self) -> T
Rhino.Render.Fields.Field.ValueAsBool(self) -> bool
Rhino.Render.Fields.Field.ValueAsByteArray(self) -> List[byte]
Rhino.Render.Fields.Field.ValueAsColor4f(self) -> Color4f
Rhino.Render.Fields.Field.ValueAsDateTime(self) -> DateTime
Rhino.Render.Fields.Field.ValueAsDouble(self) -> float
Rhino.Render.Fields.Field.ValueAsFloat(self) -> float
Rhino.Render.Fields.Field.ValueAsGuid(self) -> Guid
Rhino.Render.Fields.Field.ValueAsInt(self) -> int
Rhino.Render.Fields.Field.ValueAsObject(self) -> Object
Rhino.Render.Fields.Field.ValueAsPoint2d(self) -> Point2d
Rhino.Render.Fields.Field.ValueAsPoint3d(self) -> Point3d
Rhino.Render.Fields.Field.ValueAsPoint4d(self) -> Point4d
Rhino.Render.Fields.Field.ValueAsString(self) -> str
Rhino.Render.Fields.Field.ValueAsTransform(self) -> Transform
Rhino.Render.Fields.Field.ValueAsVector2d(self) -> Vector2d
Rhino.Render.Fields.Field.ValueAsVector3d(self) -> Vector3d
Rhino.Render.Fields.Field.__init__(self, renderContent: Rhino.Render.RenderContent, name: str) -> None
Rhino.Render.Fields.Field.__init__(self, renderContent: Rhino.Render.RenderContent, name: str, prompt: str, initialValue: Any, isTextured: bool) -> None
Rhino.Render.Fields.Field.__init__(self, renderContent: Rhino.Render.RenderContent, name: str, prompt: str, initialValue: Any, isTextured: bool, treatAsLinear: bool) -> None
Rhino.Render.Fields.Field.__init__(self, renderContent: Rhino.Render.RenderContent, name: str, prompt: str, initialValue: Any, isTextured: bool, treatAsLinear: bool, sectionId: int) -> None
Rhino.Render.Fields.Field.__init__(self, renderContent: Rhino.Render.RenderContent, pointer: System.IntPtr) -> None
Rhino.Render.Fields.FieldDictionary.Add(self, key: str, prompt: str, sectionId: int) -> NullField
Rhino.Render.Fields.FieldDictionary.Add(self, key: str, value: List[System.Byte]) -> ByteArrayField
Rhino.Render.Fields.FieldDictionary.Add(self, key: str, value: Rhino.Display.Color4f) -> Color4fField
Rhino.Render.Fields.FieldDictionary.Add(self, key: str, value: Rhino.Display.Color4f, prompt: str) -> Color4fField
Rhino.Render.Fields.FieldDictionary.Add(self, key: str, value: Rhino.Display.Color4f, prompt: str, sectionId: int) -> Color4fField
Rhino.Render.Fields.FieldDictionary.Add(self, key: str, value: Rhino.Geometry.Point2d) -> Point2dField
Rhino.Render.Fields.FieldDictionary.Add(self, key: str, value: Rhino.Geometry.Point2d, prompt: str) -> Point2dField
Rhino.Render.Fields.FieldDictionary.Add(self, key: str, value: Rhino.Geometry.Point2d, prompt: str, sectionId: int) -> Point2dField
Rhino.Render.Fields.FieldDictionary.Add(self, key: str, value: Rhino.Geometry.Point3d) -> Point3dField
Rhino.Render.Fields.FieldDictionary.Add(self, key: str, value: Rhino.Geometry.Point3d, prompt: str) -> Point3dField
Rhino.Render.Fields.FieldDictionary.Add(self, key: str, value: Rhino.Geometry.Point3d, prompt: str, sectionId: int) -> Point3dField
Rhino.Render.Fields.FieldDictionary.Add(self, key: str, value: Rhino.Geometry.Point4d) -> Point4dField
Rhino.Render.Fields.FieldDictionary.Add(self, key: str, value: Rhino.Geometry.Point4d, prompt: str) -> Point4dField
Rhino.Render.Fields.FieldDictionary.Add(self, key: str, value: Rhino.Geometry.Point4d, prompt: str, sectionId: int) -> Point4dField
Rhino.Render.Fields.FieldDictionary.Add(self, key: str, value: Rhino.Geometry.Transform) -> TransformField
Rhino.Render.Fields.FieldDictionary.Add(self, key: str, value: Rhino.Geometry.Transform, prompt: str) -> TransformField
Rhino.Render.Fields.FieldDictionary.Add(self, key: str, value: Rhino.Geometry.Transform, prompt: str, sectionId: int) -> TransformField
Rhino.Render.Fields.FieldDictionary.Add(self, key: str, value: Rhino.Geometry.Vector2d) -> Vector2dField
Rhino.Render.Fields.FieldDictionary.Add(self, key: str, value: Rhino.Geometry.Vector2d, prompt: str) -> Vector2dField
Rhino.Render.Fields.FieldDictionary.Add(self, key: str, value: Rhino.Geometry.Vector2d, prompt: str, sectionId: int) -> Vector2dField
Rhino.Render.Fields.FieldDictionary.Add(self, key: str, value: Rhino.Geometry.Vector3d) -> Vector3dField
Rhino.Render.Fields.FieldDictionary.Add(self, key: str, value: Rhino.Geometry.Vector3d, prompt: str) -> Vector3dField
Rhino.Render.Fields.FieldDictionary.Add(self, key: str, value: Rhino.Geometry.Vector3d, prompt: str, sectionId: int) -> Vector3dField
Rhino.Render.Fields.FieldDictionary.Add(self, key: str, value: System.DateTime) -> DateTimeField
Rhino.Render.Fields.FieldDictionary.Add(self, key: str, value: System.DateTime, prompt: str) -> DateTimeField
Rhino.Render.Fields.FieldDictionary.Add(self, key: str, value: System.DateTime, prompt: str, sectionId: int) -> DateTimeField
Rhino.Render.Fields.FieldDictionary.Add(self, key: str, value: System.Drawing.Color) -> Color4fField
Rhino.Render.Fields.FieldDictionary.Add(self, key: str, value: System.Drawing.Color, prompt: str) -> Color4fField
Rhino.Render.Fields.FieldDictionary.Add(self, key: str, value: System.Guid) -> GuidField
Rhino.Render.Fields.FieldDictionary.Add(self, key: str, value: System.Guid, prompt: str) -> GuidField
Rhino.Render.Fields.FieldDictionary.Add(self, key: str, value: System.Guid, prompt: str, sectionId: int) -> GuidField
Rhino.Render.Fields.FieldDictionary.Add(self, key: str, value: bool) -> BoolField
Rhino.Render.Fields.FieldDictionary.Add(self, key: str, value: bool, prompt: str) -> BoolField
Rhino.Render.Fields.FieldDictionary.Add(self, key: str, value: bool, prompt: str, sectionId: int) -> BoolField
Rhino.Render.Fields.FieldDictionary.Add(self, key: str, value: float) -> DoubleField
Rhino.Render.Fields.FieldDictionary.Add(self, key: str, value: float) -> FloatField
Rhino.Render.Fields.FieldDictionary.Add(self, key: str, value: float, prompt: str) -> DoubleField
Rhino.Render.Fields.FieldDictionary.Add(self, key: str, value: float, prompt: str) -> FloatField
Rhino.Render.Fields.FieldDictionary.Add(self, key: str, value: float, prompt: str, sectionId: int) -> DoubleField
Rhino.Render.Fields.FieldDictionary.Add(self, key: str, value: float, prompt: str, sectionId: int) -> FloatField
Rhino.Render.Fields.FieldDictionary.Add(self, key: str, value: int) -> IntField
Rhino.Render.Fields.FieldDictionary.Add(self, key: str, value: int, prompt: str) -> IntField
Rhino.Render.Fields.FieldDictionary.Add(self, key: str, value: int, prompt: str, sectionId: int) -> IntField
Rhino.Render.Fields.FieldDictionary.Add(self, key: str, value: str) -> StringField
Rhino.Render.Fields.FieldDictionary.Add(self, key: str, value: str, prompt: str) -> StringField
Rhino.Render.Fields.FieldDictionary.Add(self, key: str, value: str, prompt: str, sectionId: int) -> StringField
Rhino.Render.Fields.FieldDictionary.AddFilename(self, key: str, value: str, prompt: str, sectionId: int) -> StringField
Rhino.Render.Fields.FieldDictionary.AddTextured(self, key: str, prompt: str) -> NullField
Rhino.Render.Fields.FieldDictionary.AddTextured(self, key: str, prompt: str, treatAsLinear: bool) -> NullField
Rhino.Render.Fields.FieldDictionary.AddTextured(self, key: str, prompt: str, treatAsLinear: bool, sectionId: int) -> NullField
Rhino.Render.Fields.FieldDictionary.AddTextured(self, key: str, value: Rhino.Display.Color4f, prompt: str) -> Color4fField
Rhino.Render.Fields.FieldDictionary.AddTextured(self, key: str, value: Rhino.Display.Color4f, prompt: str, treatAsLinear: bool) -> Color4fField
Rhino.Render.Fields.FieldDictionary.AddTextured(self, key: str, value: Rhino.Display.Color4f, prompt: str, treatAsLinear: bool, sectionId: int) -> Color4fField
Rhino.Render.Fields.FieldDictionary.AddTextured(self, key: str, value: Rhino.Geometry.Point2d, prompt: str) -> Point2dField
Rhino.Render.Fields.FieldDictionary.AddTextured(self, key: str, value: Rhino.Geometry.Point2d, prompt: str, treatAsLinear: bool) -> Point2dField
Rhino.Render.Fields.FieldDictionary.AddTextured(self, key: str, value: Rhino.Geometry.Point2d, prompt: str, treatAsLinear: bool, sectionId: int) -> Point2dField
Rhino.Render.Fields.FieldDictionary.AddTextured(self, key: str, value: Rhino.Geometry.Point3d, prompt: str) -> Point3dField
Rhino.Render.Fields.FieldDictionary.AddTextured(self, key: str, value: Rhino.Geometry.Point3d, prompt: str, treatAsLinear: bool) -> Point3dField
Rhino.Render.Fields.FieldDictionary.AddTextured(self, key: str, value: Rhino.Geometry.Point3d, prompt: str, treatAsLinear: bool, sectionId: int) -> Point3dField
Rhino.Render.Fields.FieldDictionary.AddTextured(self, key: str, value: Rhino.Geometry.Point4d, prompt: str) -> Point4dField
Rhino.Render.Fields.FieldDictionary.AddTextured(self, key: str, value: Rhino.Geometry.Point4d, prompt: str, treatAsLinear: bool) -> Point4dField
Rhino.Render.Fields.FieldDictionary.AddTextured(self, key: str, value: Rhino.Geometry.Point4d, prompt: str, treatAsLinear: bool, sectionId: int) -> Point4dField
Rhino.Render.Fields.FieldDictionary.AddTextured(self, key: str, value: Rhino.Geometry.Transform, prompt: str) -> TransformField
Rhino.Render.Fields.FieldDictionary.AddTextured(self, key: str, value: Rhino.Geometry.Transform, prompt: str, treatAsLinear: bool) -> TransformField
Rhino.Render.Fields.FieldDictionary.AddTextured(self, key: str, value: Rhino.Geometry.Transform, prompt: str, treatAsLinear: bool, sectionId: int) -> TransformField
Rhino.Render.Fields.FieldDictionary.AddTextured(self, key: str, value: Rhino.Geometry.Vector2d, prompt: str) -> Vector2dField
Rhino.Render.Fields.FieldDictionary.AddTextured(self, key: str, value: Rhino.Geometry.Vector2d, prompt: str, treatAsLinear: bool) -> Vector2dField
Rhino.Render.Fields.FieldDictionary.AddTextured(self, key: str, value: Rhino.Geometry.Vector2d, prompt: str, treatAsLinear: bool, sectionId: int) -> Vector2dField
Rhino.Render.Fields.FieldDictionary.AddTextured(self, key: str, value: Rhino.Geometry.Vector3d, prompt: str) -> Vector3dField
Rhino.Render.Fields.FieldDictionary.AddTextured(self, key: str, value: Rhino.Geometry.Vector3d, prompt: str, treatAsLinear: bool) -> Vector3dField
Rhino.Render.Fields.FieldDictionary.AddTextured(self, key: str, value: Rhino.Geometry.Vector3d, prompt: str, treatAsLinear: bool, sectionId: int) -> Vector3dField
Rhino.Render.Fields.FieldDictionary.AddTextured(self, key: str, value: System.DateTime, prompt: str) -> DateTimeField
Rhino.Render.Fields.FieldDictionary.AddTextured(self, key: str, value: System.DateTime, prompt: str, treatAsLinear: bool) -> DateTimeField
Rhino.Render.Fields.FieldDictionary.AddTextured(self, key: str, value: System.DateTime, prompt: str, treatAsLinear: bool, sectionId: int) -> DateTimeField
Rhino.Render.Fields.FieldDictionary.AddTextured(self, key: str, value: System.Drawing.Color, prompt: str) -> Color4fField
Rhino.Render.Fields.FieldDictionary.AddTextured(self, key: str, value: System.Drawing.Color, prompt: str, treatAsLinear: bool) -> Color4fField
Rhino.Render.Fields.FieldDictionary.AddTextured(self, key: str, value: System.Guid, prompt: str) -> GuidField
Rhino.Render.Fields.FieldDictionary.AddTextured(self, key: str, value: System.Guid, prompt: str, treatAsLinear: bool) -> GuidField
Rhino.Render.Fields.FieldDictionary.AddTextured(self, key: str, value: System.Guid, prompt: str, treatAsLinear: bool, sectionId: int) -> GuidField
Rhino.Render.Fields.FieldDictionary.AddTextured(self, key: str, value: bool, prompt: str) -> BoolField
Rhino.Render.Fields.FieldDictionary.AddTextured(self, key: str, value: bool, prompt: str, treatAsLinear: bool) -> BoolField
Rhino.Render.Fields.FieldDictionary.AddTextured(self, key: str, value: bool, prompt: str, treatAsLinear: bool, sectionId: int) -> BoolField
Rhino.Render.Fields.FieldDictionary.AddTextured(self, key: str, value: float, prompt: str) -> DoubleField
Rhino.Render.Fields.FieldDictionary.AddTextured(self, key: str, value: float, prompt: str) -> FloatField
Rhino.Render.Fields.FieldDictionary.AddTextured(self, key: str, value: float, prompt: str, treatAsLinear: bool) -> DoubleField
Rhino.Render.Fields.FieldDictionary.AddTextured(self, key: str, value: float, prompt: str, treatAsLinear: bool) -> FloatField
Rhino.Render.Fields.FieldDictionary.AddTextured(self, key: str, value: float, prompt: str, treatAsLinear: bool, sectionId: int) -> DoubleField
Rhino.Render.Fields.FieldDictionary.AddTextured(self, key: str, value: float, prompt: str, treatAsLinear: bool, sectionId: int) -> FloatField
Rhino.Render.Fields.FieldDictionary.AddTextured(self, key: str, value: int, prompt: str) -> IntField
Rhino.Render.Fields.FieldDictionary.AddTextured(self, key: str, value: int, prompt: str, treatAsLinear: bool) -> IntField
Rhino.Render.Fields.FieldDictionary.AddTextured(self, key: str, value: int, prompt: str, treatAsLinear: bool, sectionId: int) -> IntField
Rhino.Render.Fields.FieldDictionary.AddTextured(self, key: str, value: str, prompt: str) -> StringField
Rhino.Render.Fields.FieldDictionary.AddTextured(self, key: str, value: str, prompt: str, treatAsLinear: bool) -> StringField
Rhino.Render.Fields.FieldDictionary.AddTextured(self, key: str, value: str, prompt: str, treatAsLinear: bool, sectionId: int) -> StringField
Rhino.Render.Fields.FieldDictionary.ContainsField(self, fieldName: str) -> bool
Rhino.Render.Fields.FieldDictionary.GetEnumerator(self) -> IEnumerator<Field>
Rhino.Render.Fields.FieldDictionary.GetField(self, fieldName: str) -> Field
Rhino.Render.Fields.FieldDictionary.RemoveField(self, fieldName: str) -> None
Rhino.Render.Fields.FieldDictionary.Set(self, key: str, value: List[System.Byte]) -> None
Rhino.Render.Fields.FieldDictionary.Set(self, key: str, value: Rhino.Display.Color4f) -> None
Rhino.Render.Fields.FieldDictionary.Set(self, key: str, value: Rhino.Geometry.Point2d) -> None
Rhino.Render.Fields.FieldDictionary.Set(self, key: str, value: Rhino.Geometry.Point3d) -> None
Rhino.Render.Fields.FieldDictionary.Set(self, key: str, value: Rhino.Geometry.Point4d) -> None
Rhino.Render.Fields.FieldDictionary.Set(self, key: str, value: Rhino.Geometry.Transform) -> None
Rhino.Render.Fields.FieldDictionary.Set(self, key: str, value: Rhino.Geometry.Vector2d) -> None
Rhino.Render.Fields.FieldDictionary.Set(self, key: str, value: Rhino.Geometry.Vector3d) -> None
Rhino.Render.Fields.FieldDictionary.Set(self, key: str, value: System.DateTime) -> None
Rhino.Render.Fields.FieldDictionary.Set(self, key: str, value: System.Drawing.Color) -> None
Rhino.Render.Fields.FieldDictionary.Set(self, key: str, value: System.Guid) -> None
Rhino.Render.Fields.FieldDictionary.Set(self, key: str, value: bool) -> None
Rhino.Render.Fields.FieldDictionary.Set(self, key: str, value: float) -> None
Rhino.Render.Fields.FieldDictionary.Set(self, key: str, value: float) -> None
Rhino.Render.Fields.FieldDictionary.Set(self, key: str, value: int) -> None
Rhino.Render.Fields.FieldDictionary.Set(self, key: str, value: str) -> None
Rhino.Render.Fields.FieldDictionary.TryGetValue(self, key: str, value: Rhino.Display.Color4f@) -> bool
Rhino.Render.Fields.FieldDictionary.TryGetValue(self, key: str, value: Rhino.Geometry.Point2d@) -> bool
Rhino.Render.Fields.FieldDictionary.TryGetValue(self, key: str, value: Rhino.Geometry.Point3d@) -> bool
Rhino.Render.Fields.FieldDictionary.TryGetValue(self, key: str, value: Rhino.Geometry.Point4d@) -> bool
Rhino.Render.Fields.FieldDictionary.TryGetValue(self, key: str, value: Rhino.Geometry.Transform@) -> bool
Rhino.Render.Fields.FieldDictionary.TryGetValue(self, key: str, value: Rhino.Geometry.Vector2d@) -> bool
Rhino.Render.Fields.FieldDictionary.TryGetValue(self, key: str, value: Rhino.Geometry.Vector3d@) -> bool
Rhino.Render.Fields.FieldDictionary.TryGetValue(self, key: str, value: System.Boolean@) -> bool
Rhino.Render.Fields.FieldDictionary.TryGetValue(self, key: str, value: System.Byte[]@) -> bool
Rhino.Render.Fields.FieldDictionary.TryGetValue(self, key: str, value: System.DateTime@) -> bool
Rhino.Render.Fields.FieldDictionary.TryGetValue(self, key: str, value: System.Double@) -> bool
Rhino.Render.Fields.FieldDictionary.TryGetValue(self, key: str, value: System.Drawing.Color@) -> bool
Rhino.Render.Fields.FieldDictionary.TryGetValue(self, key: str, value: System.Guid@) -> bool
Rhino.Render.Fields.FieldDictionary.TryGetValue(self, key: str, value: System.Int32@) -> bool
Rhino.Render.Fields.FieldDictionary.TryGetValue(self, key: str, value: System.Single@) -> bool
Rhino.Render.Fields.FieldDictionary.TryGetValue(self, key: str, value: System.String@) -> bool
Rhino.Render.Fields.FieldDictionary.TryGetValue<T>(self, key: str, value: ``0@) -> bool
Rhino.Render.Fields.FloatField.ValueAsObject(self) -> Object
Rhino.Render.Fields.GuidField.ValueAsObject(self) -> Object
Rhino.Render.Fields.IntField.ValueAsObject(self) -> Object
Rhino.Render.Fields.NullField.ValueAsObject(self) -> Object
Rhino.Render.Fields.Point2dField.ValueAsObject(self) -> Object
Rhino.Render.Fields.Point3dField.ValueAsObject(self) -> Object
Rhino.Render.Fields.Point4dField.ValueAsObject(self) -> Object
Rhino.Render.Fields.StringField.ValueAsObject(self) -> Object
Rhino.Render.Fields.TransformField.ValueAsObject(self) -> Object
Rhino.Render.Fields.Vector2dField.ValueAsObject(self) -> Object
Rhino.Render.Fields.Vector3dField.ValueAsObject(self) -> Object
Rhino.Render.FreeFloatingBase.CopyFrom(self, src: Rhino.Render.FreeFloatingBase) -> None
Rhino.Render.FreeFloatingBase.Finalize(self) -> None
Rhino.Render.GroundPlane.CopyFrom(self, src: Rhino.Render.FreeFloatingBase) -> None
Rhino.Render.GroundPlane.Dispose(self) -> None
Rhino.Render.GroundPlane.Finalize(self) -> None
Rhino.Render.GroundPlane.__init__(self) -> None
Rhino.Render.GroundPlane.__init__(self, g: Rhino.Render.GroundPlane) -> None
Rhino.Render.LightArray.Append(self, light: Rhino.Geometry.Light) -> None
Rhino.Render.LightArray.Count(self) -> int
Rhino.Render.LightArray.Dispose(self) -> None
Rhino.Render.LightArray.ElementAt(self, index: int) -> Light
Rhino.Render.LightArray.Finalize(self) -> None
Rhino.Render.LightArray.__init__(self) -> None
Rhino.Render.LightArray.__init__(self, pLightArray: System.IntPtr) -> None
Rhino.Render.LightManagerSupport.DeleteLight(self, doc: Rhino.RhinoDoc, light: Rhino.Geometry.Light, bUndelete: bool) -> bool
Rhino.Render.LightManagerSupport.GetLightSolo(self, doc: Rhino.RhinoDoc, uuid_light: System.Guid) -> bool
Rhino.Render.LightManagerSupport.GetLights(self, doc: Rhino.RhinoDoc, light_array: Rhino.Render.LightArray@) -> None
Rhino.Render.LightManagerSupport.GroupLights(self, doc: Rhino.RhinoDoc, light_array: Rhino.Render.LightArray@) -> None
Rhino.Render.LightManagerSupport.LightDescription(self, doc: Rhino.RhinoDoc, light: Rhino.Geometry.Light@) -> str
Rhino.Render.LightManagerSupport.LightFromId(self, doc: Rhino.RhinoDoc, uuid: System.Guid, light: Rhino.Geometry.Light@) -> bool
Rhino.Render.LightManagerSupport.LightsInSoloStorage(self, doc: Rhino.RhinoDoc) -> int
Rhino.Render.LightManagerSupport.ModifyLight(self, doc: Rhino.RhinoDoc, light: Rhino.Geometry.Light) -> None
Rhino.Render.LightManagerSupport.ObjectSerialNumberFromLight(self, doc: Rhino.RhinoDoc, light: Rhino.Geometry.Light@) -> int
Rhino.Render.LightManagerSupport.OnCustomLightEvent(self, doc: Rhino.RhinoDoc, le: Rhino.Render.LightMangerSupportCustomEvent, light: Rhino.Geometry.Light@) -> None
Rhino.Render.LightManagerSupport.OnEditLight(self, doc: Rhino.RhinoDoc, light_array: Rhino.Render.LightArray@) -> bool
Rhino.Render.LightManagerSupport.PluginId(self) -> Guid
Rhino.Render.LightManagerSupport.RegisterLightManager(plugin: Rhino.PlugIns.PlugIn) -> None
Rhino.Render.LightManagerSupport.RegisterProviders(assembly: System.Reflection.Assembly, pluginId: System.Guid) -> None
Rhino.Render.LightManagerSupport.RenderEngineId(self) -> Guid
Rhino.Render.LightManagerSupport.SetLightSolo(self, doc: Rhino.RhinoDoc, uuid_light: System.Guid, bSolo: bool) -> bool
Rhino.Render.LightManagerSupport.UnGroup(self, doc: Rhino.RhinoDoc, light_array: Rhino.Render.LightArray@) -> None
Rhino.Render.LightManagerSupport.__init__(self) -> None
Rhino.Render.LightManagerSupportClient.DeleteLight(self, light: Rhino.Geometry.Light) -> None
Rhino.Render.LightManagerSupportClient.Dispose(self) -> None
Rhino.Render.LightManagerSupportClient.Finalize(self) -> None
Rhino.Render.LightManagerSupportClient.GetLightFromId(self, uuid: System.Guid) -> Light
Rhino.Render.LightManagerSupportClient.GetLightSolo(self, light: Rhino.Geometry.Light) -> bool
Rhino.Render.LightManagerSupportClient.GetLights(self) -> LightArray
Rhino.Render.LightManagerSupportClient.GroupLights(self, lights: Rhino.Render.LightArray) -> None
Rhino.Render.LightManagerSupportClient.LightDescription(self, light: Rhino.Geometry.Light) -> str
Rhino.Render.LightManagerSupportClient.LightsInSoloStorage(self) -> int
Rhino.Render.LightManagerSupportClient.ModifyLight(self, light: Rhino.Geometry.Light) -> None
Rhino.Render.LightManagerSupportClient.ObjectFromLight(self, light: Rhino.Geometry.Light) -> RhinoObject
Rhino.Render.LightManagerSupportClient.OnEditLight(self, lights: Rhino.Render.LightArray) -> None
Rhino.Render.LightManagerSupportClient.SetLightSolo(self, light: Rhino.Geometry.Light, bSolo: bool) -> bool
Rhino.Render.LightManagerSupportClient.UnGroup(self, lights: Rhino.Render.LightArray) -> None
Rhino.Render.LightManagerSupportClient.__init__(self, doc_uuid: System.UInt32) -> None
Rhino.Render.LinearWorkflow.CopyFrom(self, src: Rhino.Render.FreeFloatingBase) -> None
Rhino.Render.LinearWorkflow.Dispose(self) -> None
Rhino.Render.LinearWorkflow.Equals(self, obj: Any) -> bool
Rhino.Render.LinearWorkflow.Finalize(self) -> None
Rhino.Render.LinearWorkflow.GetHashCode(self) -> int
Rhino.Render.LinearWorkflow.__init__(self) -> None
Rhino.Render.LinearWorkflow.__init__(self, src: Rhino.Render.LinearWorkflow) -> None
Rhino.Render.MappingTag.__init__(self) -> None
Rhino.Render.MetaDataProxy.Dispose(self) -> None
Rhino.Render.MetaDataProxy.Finalize(self) -> None
Rhino.Render.MetaDataProxy.SetContentInstanceId(self, uuid: System.Guid) -> None
Rhino.Render.MetaDataProxy.__init__(self) -> None
Rhino.Render.NamedValue.__init__(self, name: str, value: Any) -> None
Rhino.Render.PhysicallyBasedMaterial.ParametersNames.__init__(self) -> None
Rhino.Render.PhysicallyBasedMaterial.__init__(self) -> None
Rhino.Render.PixelBuffer.__init__(self, bufferPointer: System.IntPtr) -> None
Rhino.Render.PostEffects.CustomPostEffectAttribute.__init__(self, postEffectType: Rhino.Render.PostEffects.PostEffectType, name: str, styles: Rhino.Render.PostEffects.PostEffectStyles, executeWhileRenderingOption: Rhino.Render.PostEffects.PostEffectExecuteWhileRenderingOptions, canDisplayHelp: bool, executeWhileRenderingDelay: int) -> None
Rhino.Render.PostEffects.IPostEffects.GetPostEffects(self, type: Rhino.Render.PostEffects.PostEffectType) -> List[PostEffect]
Rhino.Render.PostEffects.IPostEffects.PostEffectFromId(self, uuid: System.Guid) -> PostEffect
Rhino.Render.PostEffects.PostEffect.AddUISections(self, ui: Rhino.Render.PostEffects.PostEffectUI) -> None
Rhino.Render.PostEffects.PostEffect.BeginChange(self, arg1: Rhino.Render.RenderContent.ChangeContexts) -> None
Rhino.Render.PostEffects.PostEffect.CanExecute(self, pipeline: Rhino.Render.PostEffects.PostEffectPipeline) -> bool
Rhino.Render.PostEffects.PostEffect.Changed(self) -> None
Rhino.Render.PostEffects.PostEffect.DisplayHelp(self) -> bool
Rhino.Render.PostEffects.PostEffect.Dispose(self) -> None
Rhino.Render.PostEffects.PostEffect.Dispose(self, bDisposing: bool) -> None
Rhino.Render.PostEffects.PostEffect.EndChange(self) -> bool
Rhino.Render.PostEffects.PostEffect.Execute(self, pipeline: Rhino.Render.PostEffects.PostEffectPipeline, rect: System.Drawing.Rectangle) -> bool
Rhino.Render.PostEffects.PostEffect.Finalize(self) -> None
Rhino.Render.PostEffects.PostEffect.GetHashCode(self) -> int
Rhino.Render.PostEffects.PostEffect.GetParam(self, param: str, v: System.Object@) -> bool
Rhino.Render.PostEffects.PostEffect.ReadState(self, state: Rhino.Render.PostEffects.PostEffectState) -> bool
Rhino.Render.PostEffects.PostEffect.RegisterPostEffect(assembly: System.Reflection.Assembly, pluginId: System.Guid) -> List[Type]
Rhino.Render.PostEffects.PostEffect.RegisterPostEffect(plugin: Rhino.PlugIns.PlugIn) -> List[Type]
Rhino.Render.PostEffects.PostEffect.ResetToFactoryDefaults(self) -> None
Rhino.Render.PostEffects.PostEffect.SetParam(self, param: str, v: Any) -> bool
Rhino.Render.PostEffects.PostEffect.WriteState(self, state: Rhino.Render.PostEffects.PostEffectState@) -> bool
Rhino.Render.PostEffects.PostEffect.[ObsoleteAttribute(self, arg1: Rhino.RhinoDoc) -> None
Rhino.Render.PostEffects.PostEffect.[ObsoleteAttribute(self, arg1: Rhino.RhinoDoc) -> None
Rhino.Render.PostEffects.PostEffect.__init__(self) -> None
Rhino.Render.PostEffects.PostEffectChannel.Clone(self) -> Rhino.Render.PostEffects.PostEffectChannel
Rhino.Render.PostEffects.PostEffectChannel.Commit(self) -> None
Rhino.Render.PostEffects.PostEffectChannel.Dispose(self) -> None
Rhino.Render.PostEffects.PostEffectChannel.Finalize(self) -> None
Rhino.Render.PostEffects.PostEffectChannel.RenderWindowAddLanguageSpecificTextSet(self) -> None
Rhino.Render.PostEffects.PostEffectChannel.RenderWindowAddLanguageSpecificTextSet(self) -> None
Rhino.Render.PostEffects.PostEffectCollection.CopyFrom(self, src: Rhino.Render.FreeFloatingBase) -> None
Rhino.Render.PostEffects.PostEffectCollection.Dispose(self) -> None
Rhino.Render.PostEffects.PostEffectCollection.Finalize(self) -> None
Rhino.Render.PostEffects.PostEffectCollection.GetEnumerator(self) -> IEnumerator<PostEffectData>
Rhino.Render.PostEffects.PostEffectCollection.GetSelectedPostEffect(self, type: Rhino.Render.PostEffects.PostEffectType, id: System.Guid@) -> bool
Rhino.Render.PostEffects.PostEffectCollection.MovePostEffectBefore(self, id_move: System.Guid, id_before: System.Guid) -> bool
Rhino.Render.PostEffects.PostEffectCollection.PostEffectDataFromId(self, id: System.Guid) -> PostEffectData
Rhino.Render.PostEffects.PostEffectCollection.SetSelectedPostEffect(self, type: Rhino.Render.PostEffects.PostEffectType, id: System.Guid) -> None
Rhino.Render.PostEffects.PostEffectCollection.__init__(self) -> None
Rhino.Render.PostEffects.PostEffectCollection.__init__(self, c: Rhino.Render.PostEffects.PostEffectCollection) -> None
Rhino.Render.PostEffects.PostEffectData.DataCRC(self, current_remainder: System.UInt32) -> uint
Rhino.Render.PostEffects.PostEffectData.Dispose(self) -> None
Rhino.Render.PostEffects.PostEffectData.Dispose(self, disposing: bool) -> None
Rhino.Render.PostEffects.PostEffectData.Finalize(self) -> None
Rhino.Render.PostEffects.PostEffectData.GetParameter(self, param_name: str) -> IConvertible
Rhino.Render.PostEffects.PostEffectData.SetParameter(self, param_name: str, param_value: Any) -> bool
Rhino.Render.PostEffects.PostEffectExecutionControl.Detach(self) -> IntPtr
Rhino.Render.PostEffects.PostEffectExecutionControl.Dispose(self) -> None
Rhino.Render.PostEffects.PostEffectExecutionControl.Dispose(self, bDisposing: bool) -> None
Rhino.Render.PostEffects.PostEffectExecutionControl.Finalize(self) -> None
Rhino.Render.PostEffects.PostEffectExecutionControl.ReadyToExecutePostEffect(self, pep_id: System.Guid) -> bool
Rhino.Render.PostEffects.PostEffectExecutionControl.__init__(self) -> None
Rhino.Render.PostEffects.PostEffectJob.Clone(self) -> Rhino.Render.PostEffects.PostEffectJob
Rhino.Render.PostEffects.PostEffectJob.Dispose(self) -> None
Rhino.Render.PostEffects.PostEffectJob.Dispose(self, bDisposing: bool) -> None
Rhino.Render.PostEffects.PostEffectJob.Execute(self, rect: System.Drawing.Rectangle, access: Rhino.Render.PostEffects.PostEffectJobChannels) -> bool
Rhino.Render.PostEffects.PostEffectJob.Finalize(self) -> None
Rhino.Render.PostEffects.PostEffectJob.__init__(self) -> None
Rhino.Render.PostEffects.PostEffectJobChannels.Dispose(self) -> None
Rhino.Render.PostEffects.PostEffectJobChannels.Finalize(self) -> None
Rhino.Render.PostEffects.PostEffectJobChannels.GetChannel(self, channelId: System.Guid) -> PostEffectChannel
Rhino.Render.PostEffects.PostEffectPipeline.Dimensions(self) -> Size
Rhino.Render.PostEffects.PostEffectPipeline.Dispose(self) -> None
Rhino.Render.PostEffects.PostEffectPipeline.Execute(self, p: System.Drawing.Rectangle, renderingInProgress: bool, usageContexts: Rhino.Render.PostEffects.PostEffectExecuteContexts, histogramsToUpdate: Rhino.Render.PostEffects.PostEffectHistograms) -> bool
Rhino.Render.PostEffects.PostEffectPipeline.ExecutionOrder(self) -> List[Guid]
Rhino.Render.PostEffects.PostEffectPipeline.Finalize(self) -> None
Rhino.Render.PostEffects.PostEffectPipeline.GetChannelForRead(self, id: System.Guid) -> PostEffectChannel
Rhino.Render.PostEffects.PostEffectPipeline.GetChannelForWrite(self, id: System.Guid) -> PostEffectChannel
Rhino.Render.PostEffects.PostEffectPipeline.GetEndTimeInMilliseconds(self) -> ulong
Rhino.Render.PostEffects.PostEffectPipeline.GetMaxLuminance(self) -> float
Rhino.Render.PostEffects.PostEffectPipeline.GetStartTimeInMilliseconds(self) -> ulong
Rhino.Render.PostEffects.PostEffectPipeline.SetStartTimeInMilliseconds(self, ms: System.UInt64) -> None
Rhino.Render.PostEffects.PostEffectPipeline.ThreadEngine(self) -> PostEffectThreadEngine
Rhino.Render.PostEffects.PostEffectState.Dispose(self) -> None
Rhino.Render.PostEffects.PostEffectState.Finalize(self) -> None
Rhino.Render.PostEffects.PostEffectState.SetValue<T>(self, name: str, vValue: ``0) -> bool
Rhino.Render.PostEffects.PostEffectState.TryGetValue<T>(self, name: str, vValue: ``0@) -> bool
Rhino.Render.PostEffects.PostEffectThreadEngine.Dispose(self) -> None
Rhino.Render.PostEffects.PostEffectThreadEngine.Finalize(self) -> None
Rhino.Render.PostEffects.PostEffectThreadEngine.RunPostEffect(self, job: Rhino.Render.PostEffects.PostEffectJob, pipeline: Rhino.Render.PostEffects.PostEffectPipeline, plugin: Rhino.Render.PostEffects.PostEffect, rect: System.Drawing.Rectangle, channels: List[System.Guid]) -> bool
Rhino.Render.PostEffects.PostEffectUI.AddSection(self, section: Rhino.UI.Controls.ICollapsibleSection) -> None
Rhino.Render.PostEffects.PostEffectUI.Dispose(self) -> None
Rhino.Render.PostEffects.PostEffectUI.Finalize(self) -> None
Rhino.Render.PreviewAppearance.Background(self) -> PreviewBackground
Rhino.Render.PreviewAppearance.Dispose(self) -> None
Rhino.Render.PreviewAppearance.Finalize(self) -> None
Rhino.Render.PreviewAppearance.FromMetaData(self, md: Rhino.Render.DataSources.MetaData) -> None
Rhino.Render.PreviewAppearance.Geometry(self) -> PreviewGeometry
Rhino.Render.PreviewAppearance.Lighting(self) -> PreviewLighting
Rhino.Render.PreviewAppearance.RotationType(self) -> IRhRdkPreviewSceneServer_eRotationType
Rhino.Render.PreviewAppearance.RotationX(self) -> float
Rhino.Render.PreviewAppearance.RotationY(self) -> float
Rhino.Render.PreviewAppearance.SetRotationType(self, type: Rhino.Render.IRhRdkPreviewSceneServer_eRotationType) -> None
Rhino.Render.PreviewAppearance.SetRotationX(self, d: float) -> None
Rhino.Render.PreviewAppearance.SetRotationY(self, d: float) -> None
Rhino.Render.PreviewAppearance.ToMetaData(self) -> None
Rhino.Render.PreviewAppearance.ToMetaData(self, mdp: Rhino.Render.MetaDataProxy) -> None
Rhino.Render.PreviewAppearance.[ObsoleteAttribute(self) -> None
Rhino.Render.PreviewAppearance.[ObsoleteAttribute(self, arg1: float) -> None
Rhino.Render.PreviewAppearance.__init__(self, pRenderContent: System.IntPtr) -> None
Rhino.Render.PreviewBackground.ElementKind(self) -> str
Rhino.Render.PreviewBackground.EnvironmentInstanceId(self) -> Guid
Rhino.Render.PreviewBackground.SetEnvironmentInstanceId(self, guid: System.Guid) -> None
Rhino.Render.PreviewBackground.SetUpPreview(self, sceneServerPointer: System.IntPtr, guid: System.Guid) -> None
Rhino.Render.PreviewBackground.__init__(self, pPreviewBackground: System.IntPtr) -> None
Rhino.Render.PreviewGeometry.ElementKind(self) -> str
Rhino.Render.PreviewGeometry.SetUpPreview(self, sceneServerPointer: System.IntPtr, pRenderContent: System.IntPtr, bCopy: bool) -> None
Rhino.Render.PreviewGeometry.__init__(self, pPreviewGeometry: System.IntPtr) -> None
Rhino.Render.PreviewJobSignature.Compare(self, pjs: Rhino.Render.PreviewJobSignature) -> bool
Rhino.Render.PreviewJobSignature.Dispose(self) -> None
Rhino.Render.PreviewJobSignature.Finalize(self) -> None
Rhino.Render.PreviewJobSignature.ImageHeight(self) -> int
Rhino.Render.PreviewJobSignature.ImageWidth(self) -> int
Rhino.Render.PreviewJobSignature.__init__(self) -> None
Rhino.Render.PreviewJobSignature.__init__(self, intPtr: System.IntPtr) -> None
Rhino.Render.PreviewJobSignature.__init__(self, width: int, height: int, sig: System.UInt32) -> None
Rhino.Render.PreviewLighting.ElementKind(self) -> str
Rhino.Render.PreviewLighting.SetUpPreview(self, sceneServerPointer: System.IntPtr) -> None
Rhino.Render.PreviewLighting.__init__(self, pPreviewLighting: System.IntPtr) -> None
Rhino.Render.PreviewRenderedEventArgs.__init__(self) -> None
Rhino.Render.PreviewSceneServer.ApplyRotation(self, X: float, Y: float, type: Rhino.Render.IRhRdkPreviewSceneServer_eRotationType) -> None
Rhino.Render.PreviewSceneServer.Dispose(self) -> None
Rhino.Render.PreviewSceneServer.Dispose(self, bDisposing: bool) -> None
Rhino.Render.PreviewSceneServer.Finalize(self) -> None
Rhino.Render.PreviewSceneServer.SetSceneScale(self, scale: float) -> None
Rhino.Render.PreviewSceneServer.__init__(self, arg1: System.IntPtr) -> None
Rhino.Render.RdkUndo.Dispose(self) -> None
Rhino.Render.RdkUndo.Finalize(self) -> None
Rhino.Render.RdkUndo.NewUndoRecord(self) -> RdkUndoRecord
Rhino.Render.RdkUndo.__init__(self, pUndoRecord: System.IntPtr) -> None
Rhino.Render.RdkUndoRecord.Dispose(self) -> None
Rhino.Render.RdkUndoRecord.Finalize(self) -> None
Rhino.Render.RdkUndoRecord.SetDescription(self, description: str) -> None
Rhino.Render.RdkUndoRecord.__init__(self, pUndoRecord: System.IntPtr) -> None
Rhino.Render.RealtimeDisplayMode.CaptureProgress(self) -> float
Rhino.Render.RealtimeDisplayMode.ComputeViewportCrc(self, view: Rhino.DocObjects.ViewInfo) -> uint
Rhino.Render.RealtimeDisplayMode.CreateWorld(self, doc: Rhino.RhinoDoc, viewInfo: Rhino.DocObjects.ViewInfo, displayPipelineAttributes: Rhino.Display.DisplayPipelineAttributes) -> None
Rhino.Render.RealtimeDisplayMode.DisplayPipelineSettingsChangedEventArgs.__init__(self, dpa: Rhino.Display.DisplayPipelineAttributes) -> None
Rhino.Render.RealtimeDisplayMode.DrawMiddlegroundEventArgs.__init__(self, dp: Rhino.Display.DisplayPipeline) -> None
Rhino.Render.RealtimeDisplayMode.DrawOpenGl(self) -> bool
Rhino.Render.RealtimeDisplayMode.GetRealtimeViewport(realtimeViewport: System.IntPtr) -> Rhino.Render.RealtimeDisplayMode
Rhino.Render.RealtimeDisplayMode.GetRealtimeViewport(realtimeViewport: System.IntPtr, create: bool) -> Rhino.Render.RealtimeDisplayMode
Rhino.Render.RealtimeDisplayMode.GetRenderSize(self, width: System.Int32@, height: System.Int32@) -> None
Rhino.Render.RealtimeDisplayMode.GetView(self) -> ViewInfo
Rhino.Render.RealtimeDisplayMode.HudAllowEditMaxPasses(self) -> bool
Rhino.Render.RealtimeDisplayMode.HudCustomStatusText(self) -> str
Rhino.Render.RealtimeDisplayMode.HudLastRenderedPass(self) -> int
Rhino.Render.RealtimeDisplayMode.HudMaxPassesChangedEventArgs.__init__(self, mp: int) -> None
Rhino.Render.RealtimeDisplayMode.HudMaximumPasses(self) -> int
Rhino.Render.RealtimeDisplayMode.HudProductName(self) -> str
Rhino.Render.RealtimeDisplayMode.HudRendererLocked(self) -> bool
Rhino.Render.RealtimeDisplayMode.HudRendererPaused(self) -> bool
Rhino.Render.RealtimeDisplayMode.HudShow(self) -> bool
Rhino.Render.RealtimeDisplayMode.HudShowControls(self) -> bool
Rhino.Render.RealtimeDisplayMode.HudShowCustomStatusText(self) -> bool
Rhino.Render.RealtimeDisplayMode.HudShowMaxPasses(self) -> bool
Rhino.Render.RealtimeDisplayMode.HudShowPasses(self) -> bool
Rhino.Render.RealtimeDisplayMode.HudStartTime(self) -> DateTime
Rhino.Render.RealtimeDisplayMode.InitFramebufferEventArgs.__init__(self, dp: Rhino.Display.DisplayPipeline) -> None
Rhino.Render.RealtimeDisplayMode.IsCompleted(self) -> bool
Rhino.Render.RealtimeDisplayMode.IsFrameBufferAvailable(self, view: Rhino.DocObjects.ViewInfo) -> bool
Rhino.Render.RealtimeDisplayMode.IsRendererStarted(self) -> bool
Rhino.Render.RealtimeDisplayMode.LastRenderedPass(self) -> int
Rhino.Render.RealtimeDisplayMode.OnRenderSizeChanged(self, width: int, height: int) -> bool
Rhino.Render.RealtimeDisplayMode.OpenGlVersion(self) -> int
Rhino.Render.RealtimeDisplayMode.PostConstruct(self) -> None
Rhino.Render.RealtimeDisplayMode.RegisterDisplayModes(assembly: System.Reflection.Assembly, pluginId: System.Guid) -> List[RealtimeDisplayModeClassInfo]
Rhino.Render.RealtimeDisplayMode.RegisterDisplayModes(plugin: Rhino.PlugIns.PlugIn) -> List[RealtimeDisplayModeClassInfo]
Rhino.Render.RealtimeDisplayMode.RemoveRealtimeViewport(realtimeViewport: System.IntPtr) -> None
Rhino.Render.RealtimeDisplayMode.SetUseDrawOpenGl(self, use: bool) -> None
Rhino.Render.RealtimeDisplayMode.SetView(self, view: Rhino.DocObjects.ViewInfo) -> None
Rhino.Render.RealtimeDisplayMode.ShowCaptureProgress(self) -> bool
Rhino.Render.RealtimeDisplayMode.ShutdownRenderer(self) -> None
Rhino.Render.RealtimeDisplayMode.SignalRedraw(self) -> None
Rhino.Render.RealtimeDisplayMode.StartRenderer(self, w: int, h: int, doc: Rhino.RhinoDoc, view: Rhino.DocObjects.ViewInfo, viewportInfo: Rhino.DocObjects.ViewportInfo, forCapture: bool, renderWindow: Rhino.Render.RenderWindow) -> bool
Rhino.Render.RealtimeDisplayMode.UnregisterDisplayModes(assembly: System.Reflection.Assembly, pluginId: System.Guid) -> None
Rhino.Render.RealtimeDisplayMode.UnregisterDisplayModes(plugin: Rhino.PlugIns.PlugIn) -> None
Rhino.Render.RealtimeDisplayMode.UseFastDraw(self) -> bool
Rhino.Render.RealtimeDisplayMode.__init__(self) -> None
Rhino.Render.RealtimeDisplayModeClassInfo.__init__(self) -> None
Rhino.Render.RenderChannels.CopyFrom(self, src: Rhino.Render.FreeFloatingBase) -> None
Rhino.Render.RenderChannels.Dispose(self) -> None
Rhino.Render.RenderChannels.Finalize(self) -> None
Rhino.Render.RenderChannels.__init__(self) -> None
Rhino.Render.RenderContent.AddAutomaticUserInterfaceSection(self, caption: str, id: int) -> bool
Rhino.Render.RenderContent.AddUserInterfaceSection(self, section: Rhino.UI.Controls.ICollapsibleSection) -> bool
Rhino.Render.RenderContent.BeginChange(self, arg1: Rhino.Render.RenderContent.ChangeContexts) -> None
Rhino.Render.RenderContent.BeginCreateDynamicFields(self, automatic: bool) -> None
Rhino.Render.RenderContent.BindParameterToField(self, parameterName: str, childSlotName: str, field: Rhino.Render.Fields.Field, arg4: Rhino.Render.RenderContent.ChangeContexts) -> None
Rhino.Render.RenderContent.BindParameterToField(self, parameterName: str, field: Rhino.Render.Fields.Field, arg3: Rhino.Render.RenderContent.ChangeContexts) -> None
Rhino.Render.RenderContent.CalculateRenderHash2(self, flags: Rhino.Render.CrcRenderHashFlags, excludeParameterNames: List[str]) -> uint
Rhino.Render.RenderContent.ChildSlotAmount(self, childSlotName: str) -> float
Rhino.Render.RenderContent.ChildSlotNameFromParamName(self, paramName: str) -> str
Rhino.Render.RenderContent.ChildSlotOn(self, childSlotName: str) -> bool
Rhino.Render.RenderContent.ConvertUnits(self, from: Rhino.UnitSystem, to: Rhino.UnitSystem) -> None
Rhino.Render.RenderContent.Create(arg1: System.Guid, arg2: Rhino.Render.RenderContent, arg3: str, arg4: Rhino.Render.RenderContent.ShowContentChooserFlags, arg5: Rhino.RhinoDoc) -> Rhino.Render.RenderContent
Rhino.Render.RenderContent.Create(arg1: System.Guid, arg2: Rhino.Render.RenderContent.ShowContentChooserFlags, arg3: Rhino.RhinoDoc) -> Rhino.Render.RenderContent
Rhino.Render.RenderContent.Create(arg1: System.Type, arg2: Rhino.Render.RenderContent, arg3: str, arg4: Rhino.Render.RenderContent.ShowContentChooserFlags, arg5: Rhino.RhinoDoc) -> Rhino.Render.RenderContent
Rhino.Render.RenderContent.Create(arg1: System.Type, arg2: Rhino.Render.RenderContent.ShowContentChooserFlags, arg3: Rhino.RhinoDoc) -> Rhino.Render.RenderContent
Rhino.Render.RenderContent.Create(doc: Rhino.RhinoDoc, type: System.Guid) -> Rhino.Render.RenderContent
Rhino.Render.RenderContent.Create(doc: Rhino.RhinoDoc, type: System.Guid, parent: Rhino.Render.RenderContent, childSlotName: str) -> Rhino.Render.RenderContent
Rhino.Render.RenderContent.Create(doc: Rhino.RhinoDoc, type: System.Type) -> Rhino.Render.RenderContent
Rhino.Render.RenderContent.Create(doc: Rhino.RhinoDoc, type: System.Type, parent: Rhino.Render.RenderContent, childSlotName: str) -> Rhino.Render.RenderContent
Rhino.Render.RenderContent.CreateDynamicField(self, internalName: str, localName: str, englishName: str, value: Any, minValue: Any, maxValue: Any, sectionId: int) -> bool
Rhino.Render.RenderContent.DeleteAllChildren(self, arg1: Rhino.Render.RenderContent.ChangeContexts) -> None
Rhino.Render.RenderContent.DeleteChild(self, childSlotName: str, arg2: Rhino.Render.RenderContent.ChangeContexts) -> bool
Rhino.Render.RenderContent.Dispose(self) -> None
Rhino.Render.RenderContent.Dispose(self, disposing: bool) -> None
Rhino.Render.RenderContent.DynamicIcon(self, size: System.Drawing.Size, bitmap: System.Drawing.Bitmap@, usage: Rhino.Render.DynamicIconUsage) -> bool
Rhino.Render.RenderContent.Edit(self) -> Rhino.Render.RenderContent
Rhino.Render.RenderContent.EndChange(self) -> None
Rhino.Render.RenderContent.EndCreateDynamicFields(self) -> None
Rhino.Render.RenderContent.Factory(self) -> ContentFactory
Rhino.Render.RenderContent.Finalize(self) -> None
Rhino.Render.RenderContent.FindChild(self, childSlotName: str) -> Rhino.Render.RenderContent
Rhino.Render.RenderContent.ForDisplay(self) -> Rhino.Render.RenderContent
Rhino.Render.RenderContent.FromId(document: Rhino.RhinoDoc, id: System.Guid) -> Rhino.Render.RenderContent
Rhino.Render.RenderContent.FromXml(xml: str, doc: Rhino.RhinoDoc) -> Rhino.Render.RenderContent
Rhino.Render.RenderContent.GenerateQuickContentPreview(c: Rhino.Render.RenderContent, width: int, height: int, psc: Rhino.Render.PreviewSceneServer, bSuppressLocalMapping: bool, reason: int, result: Rhino.Commands.Result@) -> Bitmap
Rhino.Render.RenderContent.GenerateQuickContentPreview(lw: Rhino.Render.LinearWorkflow, c: Rhino.Render.RenderContent, width: int, height: int, psc: Rhino.Render.PreviewSceneServer, bSuppressLocalMapping: bool, reason: int, result: Rhino.Commands.Result@) -> Bitmap
Rhino.Render.RenderContent.GenerateRenderContentPreview(lwf: Rhino.Render.LinearWorkflow, c: Rhino.Render.RenderContent, width: int, height: int, bSuppressLocalMapping: bool, pjs: Rhino.Render.PreviewJobSignature, pa: Rhino.Render.PreviewAppearance, arg8: Rhino.Render.Utilities.PreviewRenderResult@) -> Bitmap
Rhino.Render.RenderContent.GetChildSlotParameter(self, contentParameterName: str, extraRequirementParameter: str) -> Object
Rhino.Render.RenderContent.GetEmbeddedFilesList(self) -> List[str]
Rhino.Render.RenderContent.GetExtraRequirementParameter(self, contentParameterName: str, extraRequirementParameter: str) -> Object
Rhino.Render.RenderContent.GetParameter(self, parameterName: str) -> Object
Rhino.Render.RenderContent.GetUiHash(self) -> ulong
Rhino.Render.RenderContent.GetUnderlyingInstances(self, collection: Rhino.Render.RenderContentCollection@) -> bool
Rhino.Render.RenderContent.Icon(self, size: System.Drawing.Size, bitmap: System.Drawing.Bitmap@) -> bool
Rhino.Render.RenderContent.IsCompatible(self, renderEngineId: System.Guid) -> bool
Rhino.Render.RenderContent.IsContentTypeAcceptableAsChild(self, type: System.Guid, childSlotName: str) -> bool
Rhino.Render.RenderContent.IsFactoryProductAcceptableAsChild(self, factory: Rhino.Render.DataSources.ContentFactory, childSlotName: str) -> bool
Rhino.Render.RenderContent.IsFactoryProductAcceptableAsChild(self, kindId: System.Guid, factoryKind: str, childSlotName: str) -> bool
Rhino.Render.RenderContent.IsReference(self) -> bool
Rhino.Render.RenderContent.LoadFromFile(filename: str) -> Rhino.Render.RenderContent
Rhino.Render.RenderContent.MakeCopy(self) -> Rhino.Render.RenderContent
Rhino.Render.RenderContent.MakeGroupInstance(self) -> Rhino.Render.RenderContent
Rhino.Render.RenderContent.ModifyRenderContentStyles(self, stylesToAdd: Rhino.Render.RenderContentStyles, stylesToRemove: Rhino.Render.RenderContentStyles) -> None
Rhino.Render.RenderContent.NewPreviewSceneServer(self, ssd: Rhino.Render.SceneServerData) -> PreviewSceneServer
Rhino.Render.RenderContent.OnAddUserInterfaceSections(self) -> None
Rhino.Render.RenderContent.OnGetDefaultsInteractive(self) -> bool
Rhino.Render.RenderContent.OnMakeCopy(self, newContent: Rhino.Render.RenderContent@) -> None
Rhino.Render.RenderContent.OpenInEditor(self) -> bool
Rhino.Render.RenderContent.ParamNameFromChildSlotName(self, childSlotName: str) -> str
Rhino.Render.RenderContent.RegisterContent(assembly: System.Reflection.Assembly, pluginId: System.Guid) -> List[Type]
Rhino.Render.RenderContent.RegisterContent(plugin: Rhino.PlugIns.PlugIn) -> List[Type]
Rhino.Render.RenderContent.RenderContentAddLanguageSpecificTextSet(self, arg1: Rhino.Render.RenderContent) -> None
Rhino.Render.RenderContent.RenderHashExclude(self, flags: Rhino.Render.CrcRenderHashFlags, excludeParameterNames: str) -> uint
Rhino.Render.RenderContent.RenderHashExclude(self, flags: Rhino.Render.CrcRenderHashFlags, excludeParameterNames: str, lw: Rhino.Render.LinearWorkflow) -> uint
Rhino.Render.RenderContent.RenderHashExclude(self, flags: Rhino.Render.TextureRenderHashFlags, excludeParameterNames: str) -> uint
Rhino.Render.RenderContent.Replace(self, newcontent: Rhino.Render.RenderContent) -> bool
Rhino.Render.RenderContent.SaveToFile(self, filename: str, arg2: Rhino.Render.RenderContent.EmbedFilesChoice) -> bool
Rhino.Render.RenderContent.SetChild(self, renderContent: Rhino.Render.RenderContent, childSlotName: str) -> bool
Rhino.Render.RenderContent.SetChildSlotAmount(self, childSlotName: str, amount: float, arg3: Rhino.Render.RenderContent.ChangeContexts) -> None
Rhino.Render.RenderContent.SetChildSlotOn(self, childSlotName: str, bOn: bool, arg3: Rhino.Render.RenderContent.ChangeContexts) -> None
Rhino.Render.RenderContent.SetChildSlotParameter(self, contentParameterName: str, extraRequirementParameter: str, value: Any, arg4: Rhino.Render.RenderContent.ExtraRequirementsSetContexts) -> bool
Rhino.Render.RenderContent.SetExtraRequirementParameter(self, contentParameterName: str, extraRequirementParameter: str, value: Any, arg4: Rhino.Render.RenderContent.ExtraRequirementsSetContexts) -> bool
Rhino.Render.RenderContent.SetIsRenderHashRecursive(self, recursive: bool) -> None
Rhino.Render.RenderContent.SetName(self, name: str, renameEvents: bool, ensureNameUnique: bool) -> None
Rhino.Render.RenderContent.SetParameter(self, parameterName: str, value: Any) -> bool
Rhino.Render.RenderContent.ShowContentInstanceBrowser(doc: Rhino.RhinoDoc, instance_id: System.Guid@, kinds: Rhino.Render.RenderContentKind, arg4: Rhino.Render.RenderContent.ContentInstanceBrowserButtons) -> bool
Rhino.Render.RenderContent.SmartUngroupRecursive(self) -> bool
Rhino.Render.RenderContent.Ungroup(self) -> bool
Rhino.Render.RenderContent.UngroupRecursive(self) -> bool
Rhino.Render.RenderContent.UseCount(self) -> int
Rhino.Render.RenderContent.VirtualIcon(self, size: System.Drawing.Size, bitmap: System.Drawing.Bitmap@) -> bool
Rhino.Render.RenderContent.[ObsoleteAttribute(self) -> None
Rhino.Render.RenderContent.[ObsoleteAttribute(self) -> None
Rhino.Render.RenderContent.[ObsoleteAttribute(self) -> None
Rhino.Render.RenderContent.[ObsoleteAttribute(self) -> None
Rhino.Render.RenderContent.[ObsoleteAttribute(self, arg1: Rhino.Render.RenderContent) -> None
Rhino.Render.RenderContent.[ObsoleteAttribute(self, arg1: Rhino.Render.RenderContent) -> None
Rhino.Render.RenderContent.[ObsoleteAttribute(self, arg1: Rhino.Render.RenderContent, arg2: Rhino.Render.RenderContent) -> None
Rhino.Render.RenderContent.[ObsoleteAttribute(self, arg1: Rhino.Render.RenderContent, arg2: str) -> None
Rhino.Render.RenderContent.[ObsoleteAttribute(self, arg1: Rhino.Render.RenderContent, arg2: str, arg3: Rhino.Render.RenderContent.ChangeContexts) -> None
Rhino.Render.RenderContent.[ObsoleteAttribute(self, arg1: Rhino.RhinoDoc, arg2: Rhino.Render.RenderContent) -> None
Rhino.Render.RenderContent.[ObsoleteAttribute(self, arg1: System.Type, arg2: str, arg3: bool, arg4: bool) -> None
Rhino.Render.RenderContent.[ObsoleteAttribute(self, arg1: System.UInt32) -> None
Rhino.Render.RenderContent.[ObsoleteAttribute(self, arg1: System.UInt64) -> None
Rhino.Render.RenderContent.[ObsoleteAttribute(self, arg1: str) -> None
Rhino.Render.RenderContent.[ObsoleteAttribute(self, arg1: str, arg2: Any, arg3: Rhino.Render.RenderContent.ChangeContexts) -> None
Rhino.Render.RenderContentCollection.Add(self, collection: Rhino.Render.RenderContentCollection) -> None
Rhino.Render.RenderContentCollection.Append(self, content: Rhino.Render.RenderContent) -> None
Rhino.Render.RenderContentCollection.Clear(self) -> None
Rhino.Render.RenderContentCollection.ContentAt(self, index: int) -> RenderContent
Rhino.Render.RenderContentCollection.ContentNeedsPreviewThumbnail(self, c: Rhino.Render.RenderContent, includeChildren: bool) -> bool
Rhino.Render.RenderContentCollection.Count(self) -> int
Rhino.Render.RenderContentCollection.Dispose(self) -> None
Rhino.Render.RenderContentCollection.Finalize(self) -> None
Rhino.Render.RenderContentCollection.Find_Sel(self, uuid: System.Guid) -> RenderContent
Rhino.Render.RenderContentCollection.FirstTag(self) -> str
Rhino.Render.RenderContentCollection.GetEnumerator(self) -> IEnumerator
Rhino.Render.RenderContentCollection.GetFilterContentByUsage(self) -> FilterContentByUsage
Rhino.Render.RenderContentCollection.GetForcedVaries(self) -> bool
Rhino.Render.RenderContentCollection.GetSearchPattern(self) -> str
Rhino.Render.RenderContentCollection.Iterator(self) -> ContentCollectionIterator
Rhino.Render.RenderContentCollection.NextTag(self) -> str
Rhino.Render.RenderContentCollection.Remove(self, collection: Rhino.Render.RenderContentCollection) -> None
Rhino.Render.RenderContentCollection.Set(self, collection: Rhino.Render.RenderContentCollection) -> None
Rhino.Render.RenderContentCollection.SetForcedVaries(self, b: bool) -> None
Rhino.Render.RenderContentCollection.SetSearchPattern(self, pattern: str) -> None
Rhino.Render.RenderContentCollection.__init__(self) -> None
Rhino.Render.RenderContentCollection.__init__(self, nativePtr: System.IntPtr) -> None
Rhino.Render.RenderContentKindList.Add(self, kind: Rhino.Render.RenderContentKind) -> None
Rhino.Render.RenderContentKindList.Contains(self, kind: Rhino.Render.RenderContentKind) -> bool
Rhino.Render.RenderContentKindList.Count(self) -> int
Rhino.Render.RenderContentKindList.Dispose(self) -> None
Rhino.Render.RenderContentKindList.Finalize(self) -> None
Rhino.Render.RenderContentKindList.SingleKind(self) -> RenderContentKind
Rhino.Render.RenderContentKindList.__init__(self) -> None
Rhino.Render.RenderContentKindList.__init__(self, kind_list: Rhino.Render.RenderContentKindList) -> None
Rhino.Render.RenderContentKindList.__init__(self, pRdkRenderContentKindList: System.IntPtr) -> None
Rhino.Render.RenderContentManager.RestoreRenderContent() -> bool
Rhino.Render.RenderContentSerializer.CanLoadMultiple(self) -> bool
Rhino.Render.RenderContentSerializer.LoadMultiple(self, doc: Rhino.RhinoDoc, fileNames: Iterable[str], contentKind: Rhino.Render.RenderContentKind, arg4: Rhino.Render.RenderContentSerializer.LoadMultipleFlags) -> bool
Rhino.Render.RenderContentSerializer.Read(self, pathToFile: str) -> RenderContent
Rhino.Render.RenderContentSerializer.RegisterSerializer(self, id: System.Guid) -> bool
Rhino.Render.RenderContentSerializer.ReportContentAndFile(self, renderContent: Rhino.Render.RenderContent, pathToFile: str, flags: int) -> None
Rhino.Render.RenderContentSerializer.ReportDeferredContentAndFile(self, renderContent: Rhino.Render.RenderContent, pathToFile: str, flags: int) -> None
Rhino.Render.RenderContentSerializer.Write(self, pathToFile: str, renderContent: Rhino.Render.RenderContent, previewArgs: Rhino.Render.CreatePreviewEventArgs) -> bool
Rhino.Render.RenderContentSerializer.__init__(self, fileExtension: str, contentKind: Rhino.Render.RenderContentKind, canRead: bool, canWrite: bool) -> None
Rhino.Render.RenderContentType.Dispose(self) -> None
Rhino.Render.RenderContentType.Dispose(self, isDisposing: bool) -> None
Rhino.Render.RenderContentType.Finalize(self) -> None
Rhino.Render.RenderContentType.GetAllAvailableTypes() -> List[Rhino.Render.RenderContentType]
Rhino.Render.RenderContentType.NewContentFromTypeId(typeId: System.Guid) -> RenderContent
Rhino.Render.RenderContentType.NewContentFromTypeId(typeId: System.Guid, doc: Rhino.RhinoDoc) -> RenderContent
Rhino.Render.RenderContentType.NewRenderContent(self) -> RenderContent
Rhino.Render.RenderContentType.__init__(self, typeId: System.Guid) -> None
Rhino.Render.RenderEndEventArgs.__init__(self) -> None
Rhino.Render.RenderEnvironment.NewBasicEnvironment(environment: Rhino.Render.SimulatedEnvironment) -> Rhino.Render.RenderEnvironment
Rhino.Render.RenderEnvironment.NewBasicEnvironment(environment: Rhino.Render.SimulatedEnvironment, doc: Rhino.RhinoDoc) -> Rhino.Render.RenderEnvironment
Rhino.Render.RenderEnvironment.SimulateEnvironment(self, isForDataOnly: bool) -> SimulatedEnvironment
Rhino.Render.RenderEnvironment.SimulateEnvironment(self, simulation: Rhino.Render.SimulatedEnvironment@, isForDataOnly: bool) -> None
Rhino.Render.RenderEnvironment.__init__(self) -> None
Rhino.Render.RenderEnvironmentTable.Add(self, c: Rhino.Render.RenderEnvironment) -> bool
Rhino.Render.RenderEnvironmentTable.BeginChange(self, arg1: Rhino.Render.RenderContent.ChangeContexts) -> None
Rhino.Render.RenderEnvironmentTable.EndChange(self) -> None
Rhino.Render.RenderEnvironmentTable.Find(self, id: System.Guid) -> RenderEnvironment
Rhino.Render.RenderEnvironmentTable.GetEnumerator(self) -> IEnumerator<RenderEnvironment>
Rhino.Render.RenderEnvironmentTable.Remove(self, c: Rhino.Render.RenderEnvironment) -> bool
Rhino.Render.RenderMaterial.AssignTo(self, arg1: Iterable[Rhino.DocObjects.ObjRef], arg2: Rhino.Render.RenderMaterial.AssignToSubFaceChoices, arg3: Rhino.Render.RenderMaterial.AssignToBlockChoices, arg4: bool) -> bool
Rhino.Render.RenderMaterial.AssignTo(self, or: Rhino.DocObjects.ObjRef) -> bool
Rhino.Render.RenderMaterial.BasicMaterialParameterNames.__init__(self) -> None
Rhino.Render.RenderMaterial.ConvertToPhysicallyBased(self, arg1: Rhino.Render.RenderTexture.TextureGeneration) -> PhysicallyBasedMaterial
Rhino.Render.RenderMaterial.CreateBasicMaterial(material: Rhino.DocObjects.Material, doc: Rhino.RhinoDoc) -> Rhino.Render.RenderMaterial
Rhino.Render.RenderMaterial.CreateImportedMaterial(material: Rhino.DocObjects.Material, doc: Rhino.RhinoDoc, reference: bool) -> Rhino.Render.RenderMaterial
Rhino.Render.RenderMaterial.FromMaterial(material: Rhino.DocObjects.Material, doc: Rhino.RhinoDoc) -> Rhino.Render.RenderMaterial
Rhino.Render.RenderMaterial.GetTextureAmountFromUsage(self, arg1: Rhino.Render.RenderMaterial.StandardChildSlots) -> float
Rhino.Render.RenderMaterial.GetTextureFromUsage(self, arg1: Rhino.Render.RenderMaterial.StandardChildSlots) -> RenderTexture
Rhino.Render.RenderMaterial.GetTextureOnFromUsage(self, arg1: Rhino.Render.RenderMaterial.StandardChildSlots) -> bool
Rhino.Render.RenderMaterial.HandleTexturedValue<T>(self, slotname: str, tc: TexturedValue[``0]) -> bool
Rhino.Render.RenderMaterial.ImportMaterialAndAssignToLayers(doc: Rhino.RhinoDoc, file: str, layer_indices: Iterable[int]) -> bool
Rhino.Render.RenderMaterial.RenderMaterialAddLanguageSpecificTextSet(arg1: Rhino.DocObjects.TextureType) -> None
Rhino.Render.RenderMaterial.SimulateMaterial(self, simulation: Rhino.DocObjects.Material@, arg2: Rhino.Render.RenderTexture.TextureGeneration) -> None
Rhino.Render.RenderMaterial.TextureChildSlotName(self, arg1: Rhino.Render.RenderMaterial.StandardChildSlots) -> str
Rhino.Render.RenderMaterial.TextureTypeFromSlot(arg1: Rhino.Render.RenderMaterial.StandardChildSlots) -> TextureType
Rhino.Render.RenderMaterial.ToMaterial(self, arg1: Rhino.Render.RenderTexture.TextureGeneration) -> Material
Rhino.Render.RenderMaterial.[ObsoleteAttribute(self, arg1: Rhino.Render.RenderTexture.TextureGeneration) -> None
Rhino.Render.RenderMaterial.[ObsoleteAttribute(self, arg1: bool) -> None
Rhino.Render.RenderMaterial.[ObsoleteAttribute(self, doc: Rhino.DocObjects.Material) -> None
Rhino.Render.RenderMaterial.[ObsoleteAttribute(self, instead: Rhino.DocObjects.Material@, arg2: bool) -> None
Rhino.Render.RenderMaterial.__init__(self) -> None
Rhino.Render.RenderMaterialTable.Add(self, c: Rhino.Render.RenderMaterial) -> bool
Rhino.Render.RenderMaterialTable.BeginChange(self, arg1: Rhino.Render.RenderContent.ChangeContexts) -> None
Rhino.Render.RenderMaterialTable.EndChange(self) -> None
Rhino.Render.RenderMaterialTable.Find(self, id: System.Guid) -> RenderMaterial
Rhino.Render.RenderMaterialTable.GetEnumerator(self) -> IEnumerator<RenderMaterial>
Rhino.Render.RenderMaterialTable.Remove(self, c: Rhino.Render.RenderMaterial) -> bool
Rhino.Render.RenderPanels.FromRenderSessionId(plugIn: Rhino.PlugIns.PlugIn, panelType: System.Type, renderSessionId: System.Guid) -> Object
Rhino.Render.RenderPanels.RegisterPanel(self, plugin: Rhino.PlugIns.PlugIn, renderPanelType: Rhino.Render.RenderPanelType, panelType: System.Type, renderEngineId: System.Guid, caption: str, alwaysShow: bool, initialShow: bool) -> None
Rhino.Render.RenderPanels.RegisterPanel(self, plugin: Rhino.PlugIns.PlugIn, renderPanelType: Rhino.Render.RenderPanelType, panelType: System.Type, renderEngineId: System.Guid, caption: str, alwaysShow: bool, initialShow: bool, arg8: Rhino.Render.RenderPanels.ExtraSidePanePosition) -> None
Rhino.Render.RenderPanels.[ObsoleteAttribute(self, arg1: Rhino.PlugIns.PlugIn, arg2: Rhino.Render.RenderPanelType, arg3: System.Type, arg4: str, arg5: bool, arg6: bool) -> None
Rhino.Render.RenderPipeline.AddLightToScene(self, light: Rhino.DocObjects.LightObject) -> bool
Rhino.Render.RenderPipeline.AddRenderMeshToScene(self, obj: Rhino.DocObjects.RhinoObject, material: Rhino.DocObjects.Material, mesh: Rhino.Geometry.Mesh) -> bool
Rhino.Render.RenderPipeline.CloseWindow(self) -> bool
Rhino.Render.RenderPipeline.CommandResult(self) -> Result
Rhino.Render.RenderPipeline.ContinueModal(self) -> bool
Rhino.Render.RenderPipeline.Dispose(self) -> None
Rhino.Render.RenderPipeline.Dispose(self, isDisposing: bool) -> None
Rhino.Render.RenderPipeline.Finalize(self) -> None
Rhino.Render.RenderPipeline.GetRenderWindow(self) -> RenderWindow
Rhino.Render.RenderPipeline.GetRenderWindow(self, viewportInfo: Rhino.DocObjects.ViewportInfo, fromRenderViewSource: bool) -> RenderWindow
Rhino.Render.RenderPipeline.GetRenderWindow(self, viewportInfo: Rhino.DocObjects.ViewportInfo, fromRenderViewSource: bool, region: System.Drawing.Rectangle) -> RenderWindow
Rhino.Render.RenderPipeline.GetRenderWindow(self, withWireframeChannel: bool) -> RenderWindow
Rhino.Render.RenderPipeline.GetRenderWindow(self, withWireframeChannel: bool, fromRenderViewSource: bool) -> RenderWindow
Rhino.Render.RenderPipeline.GetRenderWindowFromRenderViewSource(self, fromRenderViewSource: bool) -> RenderWindow
Rhino.Render.RenderPipeline.IgnoreRhinoObject(self, obj: Rhino.DocObjects.RhinoObject) -> bool
Rhino.Render.RenderPipeline.LocalizeRenderReturnCode(arg1: Rhino.Render.RenderPipeline.RenderReturnCode) -> str
Rhino.Render.RenderPipeline.NeedToProcessGeometryTable(self) -> bool
Rhino.Render.RenderPipeline.NeedToProcessLightTable(self) -> bool
Rhino.Render.RenderPipeline.OnRenderBegin(self) -> bool
Rhino.Render.RenderPipeline.OnRenderBeginQuiet(self, imageSize: System.Drawing.Size) -> bool
Rhino.Render.RenderPipeline.OnRenderEnd(self, e: Rhino.Render.RenderEndEventArgs) -> None
Rhino.Render.RenderPipeline.OnRenderWindowBegin(self, view: Rhino.Display.RhinoView, rectangle: System.Drawing.Rectangle) -> bool
Rhino.Render.RenderPipeline.PauseRendering(self) -> None
Rhino.Render.RenderPipeline.RenderEnterModalLoop(self) -> bool
Rhino.Render.RenderPipeline.RenderExitModalLoop(self) -> bool
Rhino.Render.RenderPipeline.RenderPipelineAddLanguageSpecificTextSet(self) -> None
Rhino.Render.RenderPipeline.RenderPipelineAddLanguageSpecificTextSet(self, arg1: Rhino.Display.RhinoView, arg2: System.Drawing.Rectangle, arg3: bool) -> None
Rhino.Render.RenderPipeline.RenderPreCreateWindow(self) -> bool
Rhino.Render.RenderPipeline.RenderSceneWithNoMeshes(self) -> bool
Rhino.Render.RenderPipeline.RenderSize() -> Size
Rhino.Render.RenderPipeline.RenderSize(doc: Rhino.RhinoDoc) -> Size
Rhino.Render.RenderPipeline.RenderSize(doc: Rhino.RhinoDoc, fromRenderSources: bool) -> Size
Rhino.Render.RenderPipeline.ResumeRendering(self) -> None
Rhino.Render.RenderPipeline.SaveImage(self, fileName: str, saveAlpha: bool) -> bool
Rhino.Render.RenderPipeline.SetAsyncRenderContext(self, aRC: Rhino.Render.AsyncRenderContext@) -> None
Rhino.Render.RenderPipeline.SupportsPause(self) -> bool
Rhino.Render.RenderPipeline.__init__(self, arg1: Rhino.RhinoDoc, arg2: Rhino.Commands.RunMode, arg3: Rhino.PlugIns.PlugIn, arg4: System.Drawing.Size, arg5: str, arg6: Rhino.Render.RenderWindow.StandardChannels, arg7: bool, arg8: bool) -> None
Rhino.Render.RenderPipeline.__init__(self, arg1: Rhino.RhinoDoc, arg2: Rhino.Commands.RunMode, arg3: Rhino.PlugIns.PlugIn, arg4: System.Drawing.Size, arg5: str, arg6: Rhino.Render.RenderWindow.StandardChannels, arg7: bool, arg8: bool, arg9: Rhino.Render.AsyncRenderContext@) -> None
Rhino.Render.RenderPlugInList.__init__(self) -> None
Rhino.Render.RenderPrimitive.Dispose(self) -> None
Rhino.Render.RenderPrimitive.Dispose(self, isDisposing: bool) -> None
Rhino.Render.RenderPrimitive.Finalize(self) -> None
Rhino.Render.RenderPrimitive.Mesh(self) -> Mesh
Rhino.Render.RenderPrimitive.TryGetBox(self, box: Rhino.Geometry.Box@) -> bool
Rhino.Render.RenderPrimitive.TryGetCone(self, cone: Rhino.Geometry.Cone@, truncation: Rhino.Geometry.Plane@) -> bool
Rhino.Render.RenderPrimitive.TryGetPlane(self, plane: Rhino.Geometry.PlaneSurface@) -> bool
Rhino.Render.RenderPrimitive.TryGetSphere(self, sphere: Rhino.Geometry.Sphere@) -> bool
Rhino.Render.RenderPrimitiveList.Add(self, box: Rhino.Geometry.Box, material: Rhino.Render.RenderMaterial) -> None
Rhino.Render.RenderPrimitiveList.Add(self, cone: Rhino.Geometry.Cone, truncation: Rhino.Geometry.Plane, material: Rhino.Render.RenderMaterial) -> None
Rhino.Render.RenderPrimitiveList.Add(self, mesh: Rhino.Geometry.Mesh, material: Rhino.Render.RenderMaterial) -> None
Rhino.Render.RenderPrimitiveList.Add(self, mesh: Rhino.Geometry.Mesh, material: Rhino.Render.RenderMaterial, t: Rhino.Geometry.Transform) -> None
Rhino.Render.RenderPrimitiveList.Add(self, meshes: Iterable[Rhino.Geometry.Mesh], material: Rhino.Render.RenderMaterial) -> None
Rhino.Render.RenderPrimitiveList.Add(self, plane: Rhino.Geometry.PlaneSurface, material: Rhino.Render.RenderMaterial) -> None
Rhino.Render.RenderPrimitiveList.Add(self, sphere: Rhino.Geometry.Sphere, material: Rhino.Render.RenderMaterial) -> None
Rhino.Render.RenderPrimitiveList.AutoDeleteMaterialsOn(self) -> bool
Rhino.Render.RenderPrimitiveList.AutoDeleteMeshesOn(self) -> bool
Rhino.Render.RenderPrimitiveList.Clear(self) -> None
Rhino.Render.RenderPrimitiveList.ConvertMeshesToTriangles(self) -> None
Rhino.Render.RenderPrimitiveList.Dispose(self) -> None
Rhino.Render.RenderPrimitiveList.Finalize(self) -> None
Rhino.Render.RenderPrimitiveList.GetInstanceTransform(self, index: int) -> Transform
Rhino.Render.RenderPrimitiveList.Material(self, index: int) -> RenderMaterial
Rhino.Render.RenderPrimitiveList.Mesh(self, index: int) -> Mesh
Rhino.Render.RenderPrimitiveList.MeshInstance(self, index: int, instance_transform: Rhino.Geometry.Transform@) -> Mesh
Rhino.Render.RenderPrimitiveList.PrimitiveType(self, index: int) -> RenderPrimitiveType
Rhino.Render.RenderPrimitiveList.SetInstanceTransform(self, index: int, xform: Rhino.Geometry.Transform) -> None
Rhino.Render.RenderPrimitiveList.ToMaterialArray(self) -> List[RenderMaterial]
Rhino.Render.RenderPrimitiveList.ToMeshArray(self) -> List[Mesh]
Rhino.Render.RenderPrimitiveList.TryGetBox(self, index: int, box: Rhino.Geometry.Box@) -> bool
Rhino.Render.RenderPrimitiveList.TryGetCone(self, index: int, cone: Rhino.Geometry.Cone@, truncation: Rhino.Geometry.Plane@) -> bool
Rhino.Render.RenderPrimitiveList.TryGetPlane(self, index: int, plane: Rhino.Geometry.PlaneSurface@) -> bool
Rhino.Render.RenderPrimitiveList.TryGetSphere(self, index: int, sphere: Rhino.Geometry.Sphere@) -> bool
Rhino.Render.RenderSettings.Duplicate(self) -> Rhino.Render.RenderSettings
Rhino.Render.RenderSettings.RenderEnvironment(self, arg1: Rhino.Render.RenderSettings.EnvironmentUsage, arg2: Rhino.Render.RenderSettings.EnvironmentPurpose) -> RenderEnvironment
Rhino.Render.RenderSettings.RenderEnvironmentId(self, arg1: Rhino.Render.RenderSettings.EnvironmentUsage, arg2: Rhino.Render.RenderSettings.EnvironmentPurpose) -> Guid
Rhino.Render.RenderSettings.RenderEnvironmentOverride(self, arg1: Rhino.Render.RenderSettings.EnvironmentUsage) -> bool
Rhino.Render.RenderSettings.SetRenderEnvironment(self, arg1: Rhino.Render.RenderSettings.EnvironmentUsage, arg2: Rhino.Render.RenderEnvironment) -> None
Rhino.Render.RenderSettings.SetRenderEnvironmentId(self, arg1: Rhino.Render.RenderSettings.EnvironmentUsage, arg2: System.Guid) -> None
Rhino.Render.RenderSettings.SetRenderEnvironmentOverride(self, arg1: Rhino.Render.RenderSettings.EnvironmentUsage, arg2: bool) -> None
Rhino.Render.RenderSettings.__init__(self) -> None
Rhino.Render.RenderSettings.__init__(self, source: Rhino.Render.RenderSettings) -> None
Rhino.Render.RenderSourceView.Dispose(self) -> None
Rhino.Render.RenderSourceView.Dispose(self, isDisposing: bool) -> None
Rhino.Render.RenderSourceView.Finalize(self) -> None
Rhino.Render.RenderSourceView.GetViewInfo(self) -> ViewInfo
Rhino.Render.RenderSourceView.__init__(self, doc: Rhino.RhinoDoc) -> None
Rhino.Render.RenderTabs.FromRenderSessionId(plugIn: Rhino.PlugIns.PlugIn, tabType: System.Type, renderSessionId: System.Guid) -> Object
Rhino.Render.RenderTabs.RegisterTab(self, plugin: Rhino.PlugIns.PlugIn, tabType: System.Type, renderEngineId: System.Guid, caption: str, icon: System.Drawing.Icon) -> None
Rhino.Render.RenderTabs.SessionIdFromTab(tab: Any) -> Guid
Rhino.Render.RenderTabs.SidePaneUiIdFromTab(tab: Any) -> Guid
Rhino.Render.RenderTabs.[ObsoleteAttribute(self, arg1: Rhino.PlugIns.PlugIn, arg2: System.Type, arg3: str, arg4: System.Drawing.Icon) -> None
Rhino.Render.RenderTexture.CreateEvaluator(self, arg1: Rhino.Render.RenderTexture.TextureEvaluatorFlags) -> TextureEvaluator
Rhino.Render.RenderTexture.GenerateTextureSimulation(self, bitmap: System.Drawing.Bitmap@, arg2: Rhino.Render.RenderTexture.TextureEvaluatorFlags) -> bool
Rhino.Render.RenderTexture.GetDisplayInViewport(self) -> bool
Rhino.Render.RenderTexture.GetEnvironmentMappingMode(self) -> TextureEnvironmentMappingMode
Rhino.Render.RenderTexture.GetEnvironmentMappingProjection(mode: Rhino.Render.TextureEnvironmentMappingMode, reflectionVector: Rhino.Geometry.Vector3d, u: System.Single@, v: System.Single@) -> bool
Rhino.Render.RenderTexture.GetInternalEnvironmentMappingMode(self) -> TextureEnvironmentMappingMode
Rhino.Render.RenderTexture.GetMappingChannel(self) -> int
Rhino.Render.RenderTexture.GetOffset(self) -> Vector3d
Rhino.Render.RenderTexture.GetOffsetLocked(self) -> bool
Rhino.Render.RenderTexture.GetPreviewIn3D(self) -> bool
Rhino.Render.RenderTexture.GetPreviewLocalMapping(self) -> bool
Rhino.Render.RenderTexture.GetProceduralAaltonenNoiseArrayPointer() -> IntPtr
Rhino.Render.RenderTexture.GetProceduralAaltonenNoiseArraySize() -> uint
Rhino.Render.RenderTexture.GetProceduralImpulseNoiseArrayPointer() -> IntPtr
Rhino.Render.RenderTexture.GetProceduralImpulseNoiseArraySize() -> uint
Rhino.Render.RenderTexture.GetProceduralPerlinNoiseArrayPointer() -> IntPtr
Rhino.Render.RenderTexture.GetProceduralPerlinNoiseArraySize() -> uint
Rhino.Render.RenderTexture.GetProceduralVcNoiseArrayPointer() -> IntPtr
Rhino.Render.RenderTexture.GetProceduralVcNoiseArraySize() -> uint
Rhino.Render.RenderTexture.GetProjectionMode(self) -> TextureProjectionMode
Rhino.Render.RenderTexture.GetRepeat(self) -> Vector3d
Rhino.Render.RenderTexture.GetRepeatLocked(self) -> bool
Rhino.Render.RenderTexture.GetRotation(self) -> Vector3d
Rhino.Render.RenderTexture.GetWcsBoxMapping(worldXyz: Rhino.Geometry.Point3d, normal: Rhino.Geometry.Vector3d) -> Point3d
Rhino.Render.RenderTexture.GetWrapType(self) -> TextureWrapType
Rhino.Render.RenderTexture.GraphInfo(self, tgi: Rhino.Render.TextureGraphInfo@) -> None
Rhino.Render.RenderTexture.IsHdrCapable(self) -> bool
Rhino.Render.RenderTexture.IsImageBased(self) -> bool
Rhino.Render.RenderTexture.IsLinear(self) -> bool
Rhino.Render.RenderTexture.IsNormalMap(self) -> bool
Rhino.Render.RenderTexture.NewBitmapTexture(bitmap: System.Drawing.Bitmap, doc: Rhino.RhinoDoc) -> Rhino.Render.RenderTexture
Rhino.Render.RenderTexture.NewBitmapTexture(texture: Rhino.Render.SimulatedTexture) -> Rhino.Render.RenderTexture
Rhino.Render.RenderTexture.NewBitmapTexture(texture: Rhino.Render.SimulatedTexture, doc: Rhino.RhinoDoc) -> Rhino.Render.RenderTexture
Rhino.Render.RenderTexture.PixelSize(self, u: System.Int32@, v: System.Int32@, w: System.Int32@) -> None
Rhino.Render.RenderTexture.RenderTextureAddLanguageSpecificTextSet(self) -> None
Rhino.Render.RenderTexture.SaveAsImage(self, FullPath: str, width: int, height: int, depth: int) -> bool
Rhino.Render.RenderTexture.SetDisplayInViewport(self, value: bool) -> None
Rhino.Render.RenderTexture.SetDisplayInViewport(self, value: bool, arg2: Rhino.Render.RenderContent.ChangeContexts) -> None
Rhino.Render.RenderTexture.SetEnvironmentMappingMode(self, value: Rhino.Render.TextureEnvironmentMappingMode) -> None
Rhino.Render.RenderTexture.SetEnvironmentMappingMode(self, value: Rhino.Render.TextureEnvironmentMappingMode, arg2: Rhino.Render.RenderContent.ChangeContexts) -> None
Rhino.Render.RenderTexture.SetGraphInfo(self, tgi: Rhino.Render.TextureGraphInfo) -> None
Rhino.Render.RenderTexture.SetMappingChannel(self, value: int, arg2: Rhino.Render.RenderContent.ChangeContexts) -> None
Rhino.Render.RenderTexture.SetOffset(self, value: Rhino.Geometry.Vector3d, arg2: Rhino.Render.RenderContent.ChangeContexts) -> None
Rhino.Render.RenderTexture.SetOffsetLocked(self, value: bool, arg2: Rhino.Render.RenderContent.ChangeContexts) -> None
Rhino.Render.RenderTexture.SetPreviewIn3D(self, value: bool, arg2: Rhino.Render.RenderContent.ChangeContexts) -> None
Rhino.Render.RenderTexture.SetPreviewLocalMapping(self, value: bool) -> None
Rhino.Render.RenderTexture.SetPreviewLocalMapping(self, value: bool, arg2: Rhino.Render.RenderContent.ChangeContexts) -> None
Rhino.Render.RenderTexture.SetProjectionMode(self, value: Rhino.Render.TextureProjectionMode, arg2: Rhino.Render.RenderContent.ChangeContexts) -> None
Rhino.Render.RenderTexture.SetRepeat(self, value: Rhino.Geometry.Vector3d, arg2: Rhino.Render.RenderContent.ChangeContexts) -> None
Rhino.Render.RenderTexture.SetRepeatLocked(self, value: bool, arg2: Rhino.Render.RenderContent.ChangeContexts) -> None
Rhino.Render.RenderTexture.SetRotation(self, value: Rhino.Geometry.Vector3d, arg2: Rhino.Render.RenderContent.ChangeContexts) -> None
Rhino.Render.RenderTexture.SetWrapType(self, value: Rhino.Render.TextureWrapType, arg2: Rhino.Render.RenderContent.ChangeContexts) -> None
Rhino.Render.RenderTexture.SimulateTexture(self, arg1: Rhino.Render.SimulatedTexture@, arg2: Rhino.Render.RenderTexture.TextureGeneration, arg3: int, arg4: Rhino.DocObjects.RhinoObject) -> None
Rhino.Render.RenderTexture.SimulatedTexture(self, arg1: Rhino.Render.RenderTexture.TextureGeneration, arg2: int, arg3: Rhino.DocObjects.RhinoObject) -> SimulatedTexture
Rhino.Render.RenderTexture.[ObsoleteAttribute(self) -> None
Rhino.Render.RenderTexture.[ObsoleteAttribute(self, size: Rhino.Render.SimulatedTexture@, arg2: bool) -> None
Rhino.Render.RenderTexture.__init__(self) -> None
Rhino.Render.RenderTextureTable.Add(self, c: Rhino.Render.RenderTexture) -> bool
Rhino.Render.RenderTextureTable.BeginChange(self, arg1: Rhino.Render.RenderContent.ChangeContexts) -> None
Rhino.Render.RenderTextureTable.EndChange(self) -> None
Rhino.Render.RenderTextureTable.Find(self, id: System.Guid) -> RenderTexture
Rhino.Render.RenderTextureTable.GetEnumerator(self) -> IEnumerator<RenderTexture>
Rhino.Render.RenderTextureTable.Remove(self, c: Rhino.Render.RenderTexture) -> bool
Rhino.Render.RenderWindow.AddChannel(self, arg1: Rhino.Render.RenderWindow.StandardChannels) -> bool
Rhino.Render.RenderWindow.AddWireframeChannel(self, doc: Rhino.RhinoDoc, viewport: Rhino.DocObjects.ViewportInfo, size: System.Drawing.Size, region: System.Drawing.Rectangle) -> bool
Rhino.Render.RenderWindow.Channel.AddValue(self, x: int, y: int, value: Rhino.Display.Color4f) -> None
Rhino.Render.RenderWindow.Channel.Dispose(self) -> None
Rhino.Render.RenderWindow.Channel.Dispose(self, disposing: bool) -> None
Rhino.Render.RenderWindow.Channel.GetMinMaxValues(self, min: System.Single@, max: System.Single@) -> None
Rhino.Render.RenderWindow.Channel.GetValue(self, x: int, y: int, componentOrder: Rhino.Render.ComponentOrders, values: System.Single[]@) -> None
Rhino.Render.RenderWindow.Channel.GetValues(self, rectangle: System.Drawing.Rectangle, stride: int, componentOrder: Rhino.Render.ComponentOrders, values: System.Single[]@) -> None
Rhino.Render.RenderWindow.Channel.PixelSize(self) -> int
Rhino.Render.RenderWindow.Channel.RenderWindowAddLanguageSpecificTextSet(self) -> None
Rhino.Render.RenderWindow.Channel.SetValue(self, x: int, y: int, value: Rhino.Display.Color4f) -> None
Rhino.Render.RenderWindow.Channel.SetValue(self, x: int, y: int, value: float) -> None
Rhino.Render.RenderWindow.Channel.SetValues(self, rectangle: System.Drawing.Rectangle, bufferResolution: System.Drawing.Size, colorBuffer: Rhino.Render.PixelBuffer) -> None
Rhino.Render.RenderWindow.Channel.SetValuesFlipped(self, rectangle: System.Drawing.Rectangle, bufferResolution: System.Drawing.Size, colorBuffer: Rhino.Render.PixelBuffer) -> None
Rhino.Render.RenderWindow.ChannelGPU.Close(self) -> None
Rhino.Render.RenderWindow.ChannelGPU.CopyTo(self, arg1: Rhino.Render.RenderWindow.Channel) -> None
Rhino.Render.RenderWindow.ChannelGPU.Dispose(self) -> None
Rhino.Render.RenderWindow.ChannelGPU.Finalize(self) -> None
Rhino.Render.RenderWindow.ChannelGPU.Height(self) -> int
Rhino.Render.RenderWindow.ChannelGPU.Id(self) -> Guid
Rhino.Render.RenderWindow.ChannelGPU.PixelSize(self) -> uint
Rhino.Render.RenderWindow.ChannelGPU.RenderWindowAddLanguageSpecificTextSet(self) -> None
Rhino.Render.RenderWindow.ChannelGPU.TextureHandleMetal(self) -> IntPtr
Rhino.Render.RenderWindow.ChannelGPU.TextureHandleOpenGL(self) -> uint
Rhino.Render.RenderWindow.ChannelGPU.Width(self) -> int
Rhino.Render.RenderWindow.ChannelGPU.[ObsoleteAttribute(self) -> None
Rhino.Render.RenderWindow.ChannelId(arg1: Rhino.Render.RenderWindow.StandardChannels) -> Guid
Rhino.Render.RenderWindow.Create(szSize: System.Drawing.Size) -> Rhino.Render.RenderWindow
Rhino.Render.RenderWindow.Dispose(self) -> None
Rhino.Render.RenderWindow.EndAsyncRender(self, arg1: Rhino.Render.RenderWindow.RenderSuccessCode) -> None
Rhino.Render.RenderWindow.FromSessionId(sessionId: System.Guid) -> Rhino.Render.RenderWindow
Rhino.Render.RenderWindow.GetBitmap(self) -> Bitmap
Rhino.Render.RenderWindow.GetRequestedRenderChannels(self) -> List[Guid]
Rhino.Render.RenderWindow.Invalidate(self) -> None
Rhino.Render.RenderWindow.InvalidateArea(self, rect: System.Drawing.Rectangle) -> None
Rhino.Render.RenderWindow.IsChannelAvailable(self, id: System.Guid) -> bool
Rhino.Render.RenderWindow.IsChannelShown(self, id: System.Guid) -> bool
Rhino.Render.RenderWindow.RegisterPostEffectExecutionControl(self, ec: Rhino.Render.PostEffects.PostEffectExecutionControl) -> None
Rhino.Render.RenderWindow.RenderWindowAddLanguageSpecificTextSet(arg1: System.Guid) -> None
Rhino.Render.RenderWindow.RenderWindowAddLanguageSpecificTextSet(self) -> None
Rhino.Render.RenderWindow.RenderWindowAddLanguageSpecificTextSet(self, arg1: Rhino.Render.RenderWindow.StandardChannels) -> None
Rhino.Render.RenderWindow.SaveDibAsBitmap(self, filename: str) -> None
Rhino.Render.RenderWindow.SaveRenderImageAs(self, filename: str, renderEngineGuid: System.Guid, saveAlpha: bool) -> None
Rhino.Render.RenderWindow.SaveRenderImageAs(self, filename: str, saveAlpha: bool) -> None
Rhino.Render.RenderWindow.SetIsRendering(self, is_rendering: bool) -> None
Rhino.Render.RenderWindow.SetProgress(self, text: str, progress: float) -> None
Rhino.Render.RenderWindow.SetRGBAChannelColors(self, rectangle: System.Drawing.Rectangle, colors: List[Rhino.Display.Color4f]) -> None
Rhino.Render.RenderWindow.SetRGBAChannelColors(self, size: System.Drawing.Size, colors: List[Rhino.Display.Color4f]) -> None
Rhino.Render.RenderWindow.SetRenderOutputRect(self, rect: System.Drawing.Rectangle) -> None
Rhino.Render.RenderWindow.SetSize(self, size: System.Drawing.Size) -> None
Rhino.Render.RenderWindow.SetView(self, view: Rhino.DocObjects.ViewInfo) -> None
Rhino.Render.RenderWindow.Size(self) -> Size
Rhino.Render.RenderWindow.[ObsoleteAttribute(self) -> None
Rhino.Render.RenderWindow.[ObsoleteAttribute(self, arg1: Rhino.Render.RenderWindow.ImageAdjust) -> None
Rhino.Render.SafeFrame.CopyFrom(self, src: Rhino.Render.FreeFloatingBase) -> None
Rhino.Render.SafeFrame.Dispose(self) -> None
Rhino.Render.SafeFrame.Finalize(self) -> None
Rhino.Render.SafeFrame.__init__(self) -> None
Rhino.Render.SafeFrame.__init__(self, doc: Rhino.RhinoDoc) -> None
Rhino.Render.SafeFrame.__init__(self, sf: Rhino.Render.SafeFrame) -> None
Rhino.Render.SceneServerData.Dispose(self) -> None
Rhino.Render.SceneServerData.Dispose(self, bDisposing: bool) -> None
Rhino.Render.SceneServerData.Finalize(self) -> None
Rhino.Render.SceneServerData.__init__(self, appearance: Rhino.Render.PreviewAppearance, usage: Rhino.Render.SceneServerDataUsage) -> None
Rhino.Render.SceneServerData.__init__(self, arg1: Rhino.Render.PreviewGeometry, arg2: Rhino.Render.PreviewBackground, arg3: Rhino.Render.PreviewLighting, arg4: Rhino.Render.SceneServerDataUsage) -> None
Rhino.Render.SimulatedEnvironment.ConstPointer(self) -> IntPtr
Rhino.Render.SimulatedEnvironment.Dispose(self) -> None
Rhino.Render.SimulatedEnvironment.Dispose(self, disposing: bool) -> None
Rhino.Render.SimulatedEnvironment.Finalize(self) -> None
Rhino.Render.SimulatedEnvironment.SimulatedEnvironmentAddLanguageSpecificTextSet(arg1: str) -> None
Rhino.Render.SimulatedEnvironment.StringFromProjection(arg1: Rhino.Render.SimulatedEnvironment.BackgroundProjections) -> str
Rhino.Render.SimulatedEnvironment.__init__(self) -> None
Rhino.Render.SimulatedTexture.ConstPointer(self) -> IntPtr
Rhino.Render.SimulatedTexture.Dispose(self) -> None
Rhino.Render.SimulatedTexture.Dispose(self, disposing: bool) -> None
Rhino.Render.SimulatedTexture.Finalize(self) -> None
Rhino.Render.SimulatedTexture.MetersToUnits(self, doc: Rhino.RhinoDoc, units: float) -> float
Rhino.Render.SimulatedTexture.SetMappingChannelAndProjectionMode(self, arg1: Rhino.Render.SimulatedTexture.ProjectionModes, arg2: int, arg3: Rhino.Render.SimulatedTexture.EnvironmentMappingModes) -> None
Rhino.Render.SimulatedTexture.Texture(self) -> Texture
Rhino.Render.SimulatedTexture.UnitsToMeters(self, doc: Rhino.RhinoDoc, units: float) -> float
Rhino.Render.SimulatedTexture.[ObsoleteAttribute(self, arg1: float) -> None
Rhino.Render.SimulatedTexture.[ObsoleteAttribute(self, arg1: float) -> None
Rhino.Render.SimulatedTexture.__init__(self) -> None
Rhino.Render.SimulatedTexture.__init__(self, doc: Rhino.RhinoDoc) -> None
Rhino.Render.SimulatedTexture.__init__(self, doc: Rhino.RhinoDoc, texture: Rhino.DocObjects.Texture) -> None
Rhino.Render.SimulatedTexture.__init__(self, texture: Rhino.DocObjects.Texture) -> None
Rhino.Render.Skylight.CopyFrom(self, src: Rhino.Render.FreeFloatingBase) -> None
Rhino.Render.Skylight.Dispose(self) -> None
Rhino.Render.Skylight.Finalize(self) -> None
Rhino.Render.Skylight.__init__(self) -> None
Rhino.Render.Skylight.__init__(self, src: Rhino.Render.Skylight) -> None
Rhino.Render.Sun.AltitudeFromValues(latitude: float, longitude: float, timezoneHours: float, daylightMinutes: int, when: System.DateTime, hours: float, fast: bool) -> float
Rhino.Render.Sun.ColorFromAltitude(altitudeDegrees: float) -> Color
Rhino.Render.Sun.CopyFrom(self, src: Rhino.Render.FreeFloatingBase) -> None
Rhino.Render.Sun.Dispose(self) -> None
Rhino.Render.Sun.Finalize(self) -> None
Rhino.Render.Sun.GetDateTime(self, kind: System.DateTimeKind) -> DateTime
Rhino.Render.Sun.Here(latitude: System.Double@, longitude: System.Double@) -> bool
Rhino.Render.Sun.JulianDay(timezoneHours: float, daylightMinutes: int, when: System.DateTime, hours: float) -> float
Rhino.Render.Sun.SetDateTime(self, time: System.DateTime, kind: System.DateTimeKind) -> None
Rhino.Render.Sun.SunDirection(latitude: float, longitude: float, when: System.DateTime) -> Vector3d
Rhino.Render.Sun.TwilightZone() -> float
Rhino.Render.Sun.[ObsoleteAttribute(self, arg1: System.DateTime, arg2: float, arg3: float) -> None
Rhino.Render.Sun.[ObsoleteAttribute(self, arg1: float, arg2: float) -> None
Rhino.Render.Sun.__init__(self) -> None
Rhino.Render.SupportOptions.AlwaysShowSunPreview() -> bool
Rhino.Render.SupportOptions.AutoSaveKeepAmount() -> int
Rhino.Render.SupportOptions.AutoSaveRenderings() -> bool
Rhino.Render.SupportOptions.CheckSupportFilesBeforeRendering() -> bool
Rhino.Render.SupportOptions.CombineEditors() -> bool
Rhino.Render.SupportOptions.DarkPreviewCheckerColor() -> int
Rhino.Render.SupportOptions.EnablePreviewJobLog() -> bool
Rhino.Render.SupportOptions.FileExplorer_CustomPath() -> str
Rhino.Render.SupportOptions.FileExplorer_CustomPathList() -> str
Rhino.Render.SupportOptions.FileExplorer_InitialLocationCustomFolder() -> str
Rhino.Render.SupportOptions.FileExplorer_LastNavigatedLocation() -> str
Rhino.Render.SupportOptions.FileExplorer_SetCustomPath(path: str) -> None
Rhino.Render.SupportOptions.FileExplorer_SetCustomPathList(path: str) -> None
Rhino.Render.SupportOptions.FileExplorer_SetInitialLocation(arg1: Rhino.Render.SupportOptions.RdkInitialLocation) -> None
Rhino.Render.SupportOptions.FileExplorer_SetInitialLocationCustomFolder(path: str) -> None
Rhino.Render.SupportOptions.FileExplorer_SetLastNavigatedLocation(folder: str) -> None
Rhino.Render.SupportOptions.FileExplorer_SetShowCustom(b: bool) -> None
Rhino.Render.SupportOptions.FileExplorer_SetShowDocuments(b: bool) -> None
Rhino.Render.SupportOptions.FileExplorer_SetShowRenderContent(b: bool) -> None
Rhino.Render.SupportOptions.FileExplorer_SetUseDefaultLocation(b: bool) -> None
Rhino.Render.SupportOptions.FileExplorer_ShowCustom() -> bool
Rhino.Render.SupportOptions.FileExplorer_ShowDocuments() -> bool
Rhino.Render.SupportOptions.FileExplorer_ShowRenderContent() -> bool
Rhino.Render.SupportOptions.FileExplorer_UseDefaultLocation() -> bool
Rhino.Render.SupportOptions.HarvestContentParameters() -> bool
Rhino.Render.SupportOptions.LabelFormatLoc() -> int
Rhino.Render.SupportOptions.LabelFormatUtc() -> int
Rhino.Render.SupportOptions.Libraries_CustomPath() -> str
Rhino.Render.SupportOptions.Libraries_CustomPathList() -> str
Rhino.Render.SupportOptions.Libraries_InitialLocationCustomFolder() -> str
Rhino.Render.SupportOptions.Libraries_LastNavigatedLocation() -> str
Rhino.Render.SupportOptions.Libraries_SetCustomPath(path: str) -> None
Rhino.Render.SupportOptions.Libraries_SetCustomPathList(path: str) -> None
Rhino.Render.SupportOptions.Libraries_SetInitialLocation(arg1: Rhino.Render.SupportOptions.RdkInitialLocation) -> None
Rhino.Render.SupportOptions.Libraries_SetInitialLocationCustomFolder(path: str) -> None
Rhino.Render.SupportOptions.Libraries_SetLastNavigatedLocation(folder: str) -> None
Rhino.Render.SupportOptions.Libraries_SetShowCustom(b: bool) -> None
Rhino.Render.SupportOptions.Libraries_SetShowDocuments(b: bool) -> None
Rhino.Render.SupportOptions.Libraries_SetShowRenderContent(b: bool) -> None
Rhino.Render.SupportOptions.Libraries_SetUseDefaultLocation(b: bool) -> None
Rhino.Render.SupportOptions.Libraries_ShowCustom() -> bool
Rhino.Render.SupportOptions.Libraries_ShowDocuments() -> bool
Rhino.Render.SupportOptions.Libraries_ShowRenderContent() -> bool
Rhino.Render.SupportOptions.Libraries_UseDefaultLocation() -> bool
Rhino.Render.SupportOptions.LightPreviewCheckerColor() -> int
Rhino.Render.SupportOptions.MaxPreviewCacheMB() -> int
Rhino.Render.SupportOptions.MaxPreviewSeconds() -> int
Rhino.Render.SupportOptions.MultithreadedTextureEvaluation() -> bool
Rhino.Render.SupportOptions.PreferNativeRenderer() -> bool
Rhino.Render.SupportOptions.PreferredUnpackFolder() -> str
Rhino.Render.SupportOptions.PreviewCustomRenderMeshes() -> bool
Rhino.Render.SupportOptions.SetAlwaysShowSunPreview(b: bool) -> None
Rhino.Render.SupportOptions.SetAutoSaveKeepAmount(value: int) -> None
Rhino.Render.SupportOptions.SetAutoSaveRenderings(b: bool) -> None
Rhino.Render.SupportOptions.SetCheckSupportFilesBeforeRendering(b: bool) -> None
Rhino.Render.SupportOptions.SetCombineEditors(b: bool) -> None
Rhino.Render.SupportOptions.SetHarvestContentParameters(b: bool) -> None
Rhino.Render.SupportOptions.SetLabelFormatLoc(value: int) -> None
Rhino.Render.SupportOptions.SetLabelFormatUtc(value: int) -> None
Rhino.Render.SupportOptions.SetMultithreadedTextureEvaluation(b: bool) -> None
Rhino.Render.SupportOptions.SetPreferNativeRenderer(b: bool) -> None
Rhino.Render.SupportOptions.SetPreferredUnpackFolder(path: str) -> None
Rhino.Render.SupportOptions.SetPreviewCustomRenderMeshes(b: bool) -> None
Rhino.Render.SupportOptions.SetShowDetailsPanel(b: bool) -> None
Rhino.Render.SupportOptions.SetSupportSharedUIs(b: bool) -> None
Rhino.Render.SupportOptions.SetUsePreviewCache(b: bool) -> None
Rhino.Render.SupportOptions.SetUseQuickInitialPreview(b: bool) -> None
Rhino.Render.SupportOptions.ShowDetailsPanel() -> bool
Rhino.Render.SupportOptions.SupportOptionsAddLanguageSpecificTextSet() -> None
Rhino.Render.SupportOptions.SupportOptionsAddLanguageSpecificTextSet() -> None
Rhino.Render.SupportOptions.SupportSharedUIs() -> bool
Rhino.Render.SupportOptions.SupportSharedUIsNoCache() -> bool
Rhino.Render.SupportOptions.TextureSize() -> int
Rhino.Render.SupportOptions.UsePreview() -> bool
Rhino.Render.SupportOptions.UsePreviewCache() -> bool
Rhino.Render.SupportOptions.UseQuickInitialPreview() -> bool
Rhino.Render.SupportOptions.UseRenderedPreview() -> bool
Rhino.Render.SupportOptions.[ObsoleteAttribute(self) -> None
Rhino.Render.SupportOptions.[ObsoleteAttribute(self) -> None
Rhino.Render.SupportOptions.[ObsoleteAttribute(self) -> None
Rhino.Render.SupportOptions.[ObsoleteAttribute(self) -> None
Rhino.Render.SupportOptions.[ObsoleteAttribute(self) -> None
Rhino.Render.SupportOptions.[ObsoleteAttribute(self) -> None
Rhino.Render.SupportOptions.[ObsoleteAttribute(self) -> None
Rhino.Render.SupportOptions.[ObsoleteAttribute(self) -> None
Rhino.Render.SupportOptions.[ObsoleteAttribute(self) -> None
Rhino.Render.SupportOptions.[ObsoleteAttribute(self, arg1: Rhino.Render.SupportOptions.RdkInitialLocation) -> None
Rhino.Render.SupportOptions.[ObsoleteAttribute(self, arg1: Rhino.Render.SupportOptions.RdkTextureSize, arg2: bool) -> None
Rhino.Render.SupportOptions.[ObsoleteAttribute(self, arg1: bool) -> None
Rhino.Render.SupportOptions.[ObsoleteAttribute(self, arg1: bool) -> None
Rhino.Render.SupportOptions.[ObsoleteAttribute(self, arg1: bool) -> None
Rhino.Render.SupportOptions.[ObsoleteAttribute(self, arg1: bool) -> None
Rhino.Render.SupportOptions.[ObsoleteAttribute(self, arg1: str) -> None
Rhino.Render.SupportOptions.[ObsoleteAttribute(self, arg1: str) -> None
Rhino.Render.SupportOptions.[ObsoleteAttribute(self, arg1: str) -> None
Rhino.Render.SupportOptions.[ObsoleteAttribute(self, arg1: str) -> None
Rhino.Render.TextureEvaluator.Dispose(self) -> None
Rhino.Render.TextureEvaluator.Dispose(self, disposing: bool) -> None
Rhino.Render.TextureEvaluator.Finalize(self) -> None
Rhino.Render.TextureEvaluator.GetColor(self, uvw: Rhino.Geometry.Point3d, duvwdx: Rhino.Geometry.Vector3d, duvwdy: Rhino.Geometry.Vector3d) -> Color4f
Rhino.Render.TextureEvaluator.GetColor(self, uvw: Rhino.Geometry.Point3d, duvwdx: Rhino.Geometry.Vector3d, duvwdy: Rhino.Geometry.Vector3d, color: Rhino.Display.Color4f@) -> bool
Rhino.Render.TextureEvaluator.Initialize(self) -> bool
Rhino.Render.TextureEvaluator.WriteToByteArray2(self, width: int, height: int) -> StdVectorByte
Rhino.Render.TextureEvaluator.WriteToFloatArray2(self, width: int, height: int) -> StdVectorFloat
Rhino.Render.TextureEvaluator.[ObsoleteAttribute(self, arg1: int, arg2: int) -> None
Rhino.Render.TextureEvaluator.[ObsoleteAttribute(self, arg1: int, arg2: int) -> None
Rhino.Render.TextureEvaluator.__init__(self) -> None
Rhino.Render.TextureEvaluator.__init__(self, arg1: Rhino.Render.RenderTexture.TextureEvaluatorFlags) -> None
Rhino.Render.TextureGraphInfo.AmountU(self) -> float
Rhino.Render.TextureGraphInfo.AmountV(self) -> float
Rhino.Render.TextureGraphInfo.AmountW(self) -> float
Rhino.Render.TextureGraphInfo.Dispose(self) -> None
Rhino.Render.TextureGraphInfo.Finalize(self) -> None
Rhino.Render.TextureGraphInfo.SetActiveAxis(self, arg1: Rhino.Render.TextureGraphInfo.Axis) -> None
Rhino.Render.TextureGraphInfo.SetActiveChannel(self, arg1: Rhino.Render.TextureGraphInfo.Channel) -> None
Rhino.Render.TextureGraphInfo.SetAmountU(self, d: float) -> None
Rhino.Render.TextureGraphInfo.SetAmountV(self, d: float) -> None
Rhino.Render.TextureGraphInfo.SetAmountW(self, d: float) -> None
Rhino.Render.TextureGraphInfo.TextureGraphInfoAddLanguageSpecificTextSet(self) -> None
Rhino.Render.TextureGraphInfo.TextureGraphInfoAddLanguageSpecificTextSet(self) -> None
Rhino.Render.TextureGraphInfo.__init__(self) -> None
Rhino.Render.TextureMapping.CreateBoxMapping(plane: Rhino.Geometry.Plane, dx: Rhino.Geometry.Interval, dy: Rhino.Geometry.Interval, dz: Rhino.Geometry.Interval, capped: bool) -> Rhino.Render.TextureMapping
Rhino.Render.TextureMapping.CreateCustomMeshMapping(mesh: Rhino.Geometry.Mesh) -> Rhino.Render.TextureMapping
Rhino.Render.TextureMapping.CreateCylinderMapping(cylinder: Rhino.Geometry.Cylinder, capped: bool) -> Rhino.Render.TextureMapping
Rhino.Render.TextureMapping.CreateOcsMapping(plane: Rhino.Geometry.Plane) -> Rhino.Render.TextureMapping
Rhino.Render.TextureMapping.CreatePlaneMapping(plane: Rhino.Geometry.Plane, dx: Rhino.Geometry.Interval, dy: Rhino.Geometry.Interval, dz: Rhino.Geometry.Interval) -> Rhino.Render.TextureMapping
Rhino.Render.TextureMapping.CreatePlaneMapping(plane: Rhino.Geometry.Plane, dx: Rhino.Geometry.Interval, dy: Rhino.Geometry.Interval, dz: Rhino.Geometry.Interval, capped: bool) -> Rhino.Render.TextureMapping
Rhino.Render.TextureMapping.CreateSphereMapping(sphere: Rhino.Geometry.Sphere) -> Rhino.Render.TextureMapping
Rhino.Render.TextureMapping.CreateSurfaceParameterMapping() -> Rhino.Render.TextureMapping
Rhino.Render.TextureMapping.Evaluate(self, p: Rhino.Geometry.Point3d, n: Rhino.Geometry.Vector3d, t: Rhino.Geometry.Point3d@) -> int
Rhino.Render.TextureMapping.Evaluate(self, p: Rhino.Geometry.Point3d, n: Rhino.Geometry.Vector3d, t: Rhino.Geometry.Point3d@, pXform: Rhino.Geometry.Transform, nXform: Rhino.Geometry.Transform) -> int
Rhino.Render.TextureMapping.TryGetMappingBox(self, plane: Rhino.Geometry.Plane@, dx: Rhino.Geometry.Interval@, dy: Rhino.Geometry.Interval@, dz: Rhino.Geometry.Interval@) -> bool
Rhino.Render.TextureMapping.TryGetMappingBox(self, plane: Rhino.Geometry.Plane@, dx: Rhino.Geometry.Interval@, dy: Rhino.Geometry.Interval@, dz: Rhino.Geometry.Interval@, capped: System.Boolean@) -> bool
Rhino.Render.TextureMapping.TryGetMappingCylinder(self, cylinder: Rhino.Geometry.Cylinder@) -> bool
Rhino.Render.TextureMapping.TryGetMappingCylinder(self, cylinder: Rhino.Geometry.Cylinder@, capped: System.Boolean@) -> bool
Rhino.Render.TextureMapping.TryGetMappingMesh(self, mesh: Rhino.Geometry.Mesh@) -> bool
Rhino.Render.TextureMapping.TryGetMappingPlane(self, plane: Rhino.Geometry.Plane@, dx: Rhino.Geometry.Interval@, dy: Rhino.Geometry.Interval@, dz: Rhino.Geometry.Interval@) -> bool
Rhino.Render.TextureMapping.TryGetMappingPlane(self, plane: Rhino.Geometry.Plane@, dx: Rhino.Geometry.Interval@, dy: Rhino.Geometry.Interval@, dz: Rhino.Geometry.Interval@, capped: System.Boolean@) -> bool
Rhino.Render.TextureMapping.TryGetMappingSphere(self, sphere: Rhino.Geometry.Sphere@) -> bool
Rhino.Render.TexturedColor.__init__(self, name: str, value: Rhino.Display.Color4f, on: bool, amount: float) -> None
Rhino.Render.TexturedFloat.__init__(self, name: str, value: float, on: bool, amount: float) -> None
Rhino.Render.TexturedValue`1.__init__(self, name: str, value: `0, on: bool, amount: float) -> None
Rhino.Render.TimeZone.TimeZoneAt(index: int) -> Rhino.Render.TimeZone
Rhino.Render.TimeZone.TimeZones() -> int
Rhino.Render.TwoColorRenderTexture.AddAdditionalUISections(self) -> None
Rhino.Render.TwoColorRenderTexture.OnAddUserInterfaceSections(self) -> None
Rhino.Render.TwoColorRenderTexture.__init__(self) -> None
Rhino.Render.UI.IUserInterfaceSection.OnUserInterfaceSectionExpanding(self, userInterfaceSection: Rhino.Render.UI.UserInterfaceSection, expanding: bool) -> None
Rhino.Render.UI.IUserInterfaceSection.UserInterfaceDisplayData(self, userInterfaceSection: Rhino.Render.UI.UserInterfaceSection, renderContentList: List[Rhino.Render.RenderContent]) -> None
Rhino.Render.UI.UserInterfaceSection.Expand(self, expand: bool) -> None
Rhino.Render.UI.UserInterfaceSection.FromWindow(window: Any) -> Rhino.Render.UI.UserInterfaceSection
Rhino.Render.UI.UserInterfaceSection.GetContentList(self) -> List[RenderContent]
Rhino.Render.UI.UserInterfaceSection.Show(self, visible: bool) -> None
Rhino.Render.UI.WorldMapDayNight.Dispose(self) -> None
Rhino.Render.UI.WorldMapDayNight.Finalize(self) -> None
Rhino.Render.UI.WorldMapDayNight.HasMapForCurrentSettings(self) -> bool
Rhino.Render.UI.WorldMapDayNight.LocationToMap(self, latlong: Rhino.Geometry.Point2d) -> Point
Rhino.Render.UI.WorldMapDayNight.MakeMapBitmap(self) -> None
Rhino.Render.UI.WorldMapDayNight.Map(self) -> Image
Rhino.Render.UI.WorldMapDayNight.MapToLocation(self, mapPoint: System.Drawing.Point) -> Point2d
Rhino.Render.UI.WorldMapDayNight.SetDayNightDisplay(self, bOn: bool) -> None
Rhino.Render.UI.WorldMapDayNight.SetEnabled(self, bEnabled: bool) -> None
Rhino.Render.UI.WorldMapDayNight.SetTimeInfo(self, dt: System.DateTime, timezone: float, daylightSavingMinutes: int, bDaylightSavingsOn: bool) -> None
Rhino.Render.UI.WorldMapDayNight.__init__(self) -> None
Rhino.Render.Utilities.ChangeContentType(oldContent: Rhino.Render.RenderContent, newType: System.Guid, harvestParameters: bool) -> RenderContent
Rhino.Render.Utilities.FindFile(doc: Rhino.RhinoDoc, fullPathToFile: str) -> str
Rhino.Render.Utilities.FindFile(doc: Rhino.RhinoDoc, fullPathToFile: str, unpackFromBitmapTableIfNecessary: bool) -> str
Rhino.Render.Utilities.GetUnpackedFilesCacheFolder(doc: Rhino.RhinoDoc, create: bool) -> str
Rhino.Render.Utilities.IsCachedTextureFileInUse(textureFileName: str) -> bool
Rhino.Render.Utilities.LoadPersistentRenderContentFromFile(docSerialNumber: System.UInt32, filename: str) -> RenderContent
Rhino.Render.Utilities.MoveWindow(hwnd: System.IntPtr, rect: System.Drawing.Rectangle, bRepaint: bool, bRepaintNC: bool) -> None
Rhino.Render.Utilities.PromptForSaveImageFileParameters(filename: str, width: System.Int32@, height: System.Int32@, colorDepth: System.Int32@) -> str
Rhino.Render.Utilities.SafeFrameEnabled(doc: Rhino.RhinoDoc) -> bool
Rhino.Render.Utilities.SetDefaultRenderPlugIn(pluginId: System.Guid) -> bool
Rhino.Render.Utilities.ShowIORMenu(hwnd: System.IntPtr, pt: System.Drawing.Point, outIOR: System.Double@, outString: System.String@) -> bool
Rhino.Render.Utilities.UtilitiesAddLanguageSpecificTextSet(arg1: Rhino.RhinoDoc, arg2: System.Guid, arg3: System.Guid, arg4: Rhino.Render.RenderContentKind, arg5: Rhino.Render.RenderContent.ShowContentChooserFlags, arg6: str, arg7: Iterable[str], arg8: Iterable[System.Guid], arg9: System.Guid[]@) -> None
Rhino.Render.Utilities.UtilitiesAddLanguageSpecificTextSet(arg1: Rhino.RhinoDoc, arg2: System.Guid, arg3: System.Guid, arg4: Rhino.Render.RenderContentKind, arg5: Rhino.Render.Utilities.ContentChooserFlags, arg6: str, arg7: Iterable[str], arg8: Iterable[System.Guid], arg9: System.Guid[]@) -> None
Rhino.Render.Utilities.UtilitiesAddLanguageSpecificTextSet(arg1: System.Guid, arg2: System.Guid, arg3: Rhino.Render.RenderContentKind, arg4: System.Guid@, arg5: Rhino.Render.RenderContent.ShowContentChooserFlags, arg6: Rhino.RhinoDoc) -> None
Rhino.RhinoApp.AskUserForRhinoLicense(standAlone: bool, parentWindow: Any) -> bool
Rhino.RhinoApp.CapturedCommandWindowStrings(clearBuffer: bool) -> List[str]
Rhino.RhinoApp.ChangeLicenseKey(pluginId: System.Guid) -> bool
Rhino.RhinoApp.ClearCommandHistoryWindow() -> None
Rhino.RhinoApp.CommandLineTextWriter.Write(self, buffer: List[System.Char], index: int, count: int) -> None
Rhino.RhinoApp.CommandLineTextWriter.Write(self, value: System.Char) -> None
Rhino.RhinoApp.CommandLineTextWriter.Write(self, value: str) -> None
Rhino.RhinoApp.CommandLineTextWriter.__init__(self) -> None
Rhino.RhinoApp.ExecuteCommand(document: Rhino.RhinoDoc, commandName: str) -> Result
Rhino.RhinoApp.Exit() -> None
Rhino.RhinoApp.Exit(allowCancel: bool) -> None
Rhino.RhinoApp.GetDataDirectory(localUser: bool, forceDirectoryCreation: bool) -> str
Rhino.RhinoApp.GetDataDirectory(localUser: bool, forceDirectoryCreation: bool, subDirectory: str) -> str
Rhino.RhinoApp.GetExecutableDirectory() -> DirectoryInfo
Rhino.RhinoApp.GetPlugInObject(plugin: str) -> Object
Rhino.RhinoApp.GetPlugInObject(pluginId: System.Guid) -> Object
Rhino.RhinoApp.InFullScreen() -> bool
Rhino.RhinoApp.InvokeAndWait(action: System.Action) -> None
Rhino.RhinoApp.InvokeOnUiThread(method: System.Delegate, args: List[Any]) -> None
Rhino.RhinoApp.IsInstallationBeta(licenseType: Rhino.ApplicationSettings.Installation) -> bool
Rhino.RhinoApp.IsInstallationCommercial(licenseType: Rhino.ApplicationSettings.Installation) -> bool
Rhino.RhinoApp.IsInstallationEvaluation(licenseType: Rhino.ApplicationSettings.Installation) -> bool
Rhino.RhinoApp.LoginToCloudZoo() -> bool
Rhino.RhinoApp.MainWindowHandle() -> IntPtr
Rhino.RhinoApp.OutputDebugString(str: str) -> None
Rhino.RhinoApp.ParseTextField(formula: str, obj: Rhino.DocObjects.RhinoObject, topParentObject: Rhino.DocObjects.RhinoObject) -> str
Rhino.RhinoApp.ParseTextField(formula: str, obj: Rhino.DocObjects.RhinoObject, topParentObject: Rhino.DocObjects.RhinoObject, immediateParent: Rhino.DocObjects.InstanceObject) -> str
Rhino.RhinoApp.PostCancelEvent(runtimeDocSerialNumber: System.UInt32) -> None
Rhino.RhinoApp.PostEnterEvent(runtimeDocSerialNumber: System.UInt32, bRepeatedEnter: bool) -> None
Rhino.RhinoApp.RefreshRhinoLicense() -> bool
Rhino.RhinoApp.ReleaseMouseCapture() -> bool
Rhino.RhinoApp.RunMenuScript(script: str) -> bool
Rhino.RhinoApp.RunScript(documentSerialNumber: System.UInt32, script: str, echo: bool) -> bool
Rhino.RhinoApp.RunScript(documentSerialNumber: System.UInt32, script: str, mruDisplayString: str, echo: bool) -> bool
Rhino.RhinoApp.RunScript(script: str, echo: bool) -> bool
Rhino.RhinoApp.RunScript(script: str, mruDisplayString: str, echo: bool) -> bool
Rhino.RhinoApp.RunningInRdp() -> bool
Rhino.RhinoApp.RunningOnVMWare() -> bool
Rhino.RhinoApp.SendKeystrokes(characters: str, appendReturn: bool) -> None
Rhino.RhinoApp.SetCommandPrompt(prompt: str) -> None
Rhino.RhinoApp.SetCommandPrompt(prompt: str, promptDefault: str) -> None
Rhino.RhinoApp.SetCommandPromptMessage(prompt: str) -> None
Rhino.RhinoApp.SetFocusToMainWindow() -> None
Rhino.RhinoApp.SetFocusToMainWindow(doc: Rhino.RhinoDoc) -> None
Rhino.RhinoApp.Wait() -> None
Rhino.RhinoApp.Write(format: str, arg0: Any) -> None
Rhino.RhinoApp.Write(format: str, arg0: Any, arg1: Any) -> None
Rhino.RhinoApp.Write(format: str, arg0: Any, arg1: Any, arg2: Any) -> None
Rhino.RhinoApp.Write(message: str) -> None
Rhino.RhinoApp.WriteLine() -> None
Rhino.RhinoApp.WriteLine(format: str, arg0: Any) -> None
Rhino.RhinoApp.WriteLine(format: str, arg0: Any, arg1: Any) -> None
Rhino.RhinoApp.WriteLine(format: str, arg0: Any, arg1: Any, arg2: Any) -> None
Rhino.RhinoApp.WriteLine(message: str) -> None
Rhino.RhinoDoc.AddCustomUndoEvent(self, description: str, handler: EventHandler[Rhino.Commands.CustomUndoEventArgs]) -> bool
Rhino.RhinoDoc.AddCustomUndoEvent(self, description: str, handler: EventHandler[Rhino.Commands.CustomUndoEventArgs], tag: Any) -> bool
Rhino.RhinoDoc.AdjustModelUnitSystem(self, newUnitSystem: Rhino.UnitSystem, scale: bool) -> None
Rhino.RhinoDoc.AdjustPageUnitSystem(self, newUnitSystem: Rhino.UnitSystem, scale: bool) -> None
Rhino.RhinoDoc.Audit(self, textLog: Rhino.FileIO.TextLog, attemptRepair: bool) -> bool
Rhino.RhinoDoc.BeginUndoRecord(self, description: str) -> uint
Rhino.RhinoDoc.ClearRedoRecords(self) -> None
Rhino.RhinoDoc.ClearUndoRecords(self, purgeDeletedObjects: bool) -> None
Rhino.RhinoDoc.ClearUndoRecords(self, undoSerialNumber: System.UInt32, purgeDeletedObjects: bool) -> None
Rhino.RhinoDoc.Create(modelTemplateFileName: str) -> Rhino.RhinoDoc
Rhino.RhinoDoc.CreateDefaultAttributes(self) -> ObjectAttributes
Rhino.RhinoDoc.CreateHeadless(file3dmTemplatePath: str) -> Rhino.RhinoDoc
Rhino.RhinoDoc.CustomRenderMeshesBoundingBox(self, arg1: Rhino.Geometry.MeshType, arg2: Rhino.DocObjects.ViewportInfo, arg3: Rhino.Render.CustomRenderMeshes.RenderMeshProvider.Flags@, arg4: Rhino.PlugIns.PlugIn, arg5: Rhino.Display.DisplayPipelineAttributes, arg6: Rhino.Geometry.BoundingBox@) -> bool
Rhino.RhinoDoc.Dispose(self) -> None
Rhino.RhinoDoc.EndUndoRecord(self, undoRecordSerialNumber: System.UInt32) -> bool
Rhino.RhinoDoc.Equals(self, obj: Any) -> bool
Rhino.RhinoDoc.Export(self, filePath: str) -> bool
Rhino.RhinoDoc.Export(self, filePath: str, options: Rhino.Collections.ArchivableDictionary) -> bool
Rhino.RhinoDoc.ExportSelected(self, filePath: str) -> bool
Rhino.RhinoDoc.ExportSelected(self, filePath: str, options: Rhino.Collections.ArchivableDictionary) -> bool
Rhino.RhinoDoc.ExtractPreviewImage(path: str) -> Bitmap
Rhino.RhinoDoc.Finalize(self) -> None
Rhino.RhinoDoc.FindFile(self, filename: str) -> str
Rhino.RhinoDoc.FormatNumber(self, value: float) -> str
Rhino.RhinoDoc.FormatNumber(self, value: float, appendUnitSystemName: bool, abbreviate: bool) -> str
Rhino.RhinoDoc.FromFilePath(filePath: str) -> Rhino.RhinoDoc
Rhino.RhinoDoc.FromRuntimeSerialNumber(serialNumber: System.UInt32) -> Rhino.RhinoDoc
Rhino.RhinoDoc.GetAnalysisMeshingParameters(self) -> MeshingParameters
Rhino.RhinoDoc.GetCurrentMeshingParameters(self) -> MeshingParameters
Rhino.RhinoDoc.GetCustomUnitSystem(self, modelUnits: bool, customUnitName: System.String@, metersPerCustomUnit: System.Double@) -> bool
Rhino.RhinoDoc.GetEmbeddedFilesList(self, missingOnly: bool) -> List[str]
Rhino.RhinoDoc.GetGridDefaults(self) -> ConstructionPlaneGridDefaults
Rhino.RhinoDoc.GetGumballPlane(self, plane: Rhino.Geometry.Plane@) -> bool
Rhino.RhinoDoc.GetHashCode(self) -> int
Rhino.RhinoDoc.GetMeshingParameters(self, style: Rhino.Geometry.MeshingParameterStyle) -> MeshingParameters
Rhino.RhinoDoc.GetRenderPrimitiveList(self, viewport: Rhino.DocObjects.ViewportInfo, attrs: Rhino.Display.DisplayPipelineAttributes) -> RenderPrimitiveList
Rhino.RhinoDoc.GetUnitSystemName(self, modelUnits: bool, capitalize: bool, singular: bool, abbreviate: bool) -> str
Rhino.RhinoDoc.HasCustomRenderMeshes(self, arg1: Rhino.Geometry.MeshType, arg2: Rhino.DocObjects.ViewportInfo, arg3: Rhino.Render.CustomRenderMeshes.RenderMeshProvider.Flags@, arg4: Rhino.PlugIns.PlugIn, arg5: Rhino.Display.DisplayPipelineAttributes) -> bool
Rhino.RhinoDoc.Import(self, filePath: str) -> bool
Rhino.RhinoDoc.Import(self, filePath: str, options: Rhino.Collections.ArchivableDictionary) -> bool
Rhino.RhinoDoc.InCommand(self, bIgnoreScriptRunnerCommands: bool) -> int
Rhino.RhinoDoc.IsMetricUnitSystem(self, modelUnits: bool) -> bool
Rhino.RhinoDoc.Open(filePath: str, wasAlreadyOpen: System.Boolean@) -> Rhino.RhinoDoc
Rhino.RhinoDoc.OpenDocuments() -> List[Rhino.RhinoDoc]
Rhino.RhinoDoc.OpenDocuments(includeHeadless: bool) -> List[Rhino.RhinoDoc]
Rhino.RhinoDoc.OpenHeadless(file3dmPath: str) -> Rhino.RhinoDoc
Rhino.RhinoDoc.OpenHeadless(filePath: str, options: Rhino.Collections.ArchivableDictionary) -> Rhino.RhinoDoc
Rhino.RhinoDoc.ReadFile(path: str, options: Rhino.FileIO.FileReadOptions) -> bool
Rhino.RhinoDoc.ReadFileVersion(self) -> int
Rhino.RhinoDoc.Redo(self) -> bool
Rhino.RhinoDoc.RenderMeshes(self, arg1: Rhino.Geometry.MeshType, arg2: Rhino.DocObjects.ViewportInfo, arg3: Rhino.Render.CustomRenderMeshes.RenderMeshProvider.Flags@, arg4: Rhino.PlugIns.PlugIn, arg5: Rhino.Display.DisplayPipelineAttributes) -> List[RenderMeshes]
Rhino.RhinoDoc.Save(self) -> bool
Rhino.RhinoDoc.SaveAs(self, file3dmPath: str) -> bool
Rhino.RhinoDoc.SaveAs(self, file3dmPath: str, version: int) -> bool
Rhino.RhinoDoc.SaveAs(self, file3dmPath: str, version: int, saveSmall: bool, saveTextures: bool, saveGeometryOnly: bool, savePluginData: bool) -> bool
Rhino.RhinoDoc.SaveAsTemplate(self, file3dmTemplatePath: str) -> bool
Rhino.RhinoDoc.SaveAsTemplate(self, file3dmTemplatePath: str, version: int) -> bool
Rhino.RhinoDoc.SelectRenderContentInEditor(self, collection: Rhino.Render.RenderContentCollection, append: bool) -> None
Rhino.RhinoDoc.SetCustomMeshingParameters(self, mp: Rhino.Geometry.MeshingParameters) -> None
Rhino.RhinoDoc.SetCustomUnitSystem(self, modelUnits: bool, customUnitName: str, metersPerCustomUnit: float, scale: bool) -> bool
Rhino.RhinoDoc.SetGridDefaults(self, defaults: Rhino.DocObjects.ConstructionPlaneGridDefaults) -> None
Rhino.RhinoDoc.SupportsRenderPrimitiveList(self, viewport: Rhino.DocObjects.ViewportInfo, attrs: Rhino.Display.DisplayPipelineAttributes) -> bool
Rhino.RhinoDoc.TryGetRenderPrimitiveBoundingBox(self, viewport: Rhino.DocObjects.ViewportInfo, attrs: Rhino.Display.DisplayPipelineAttributes, boundingBox: Rhino.Geometry.BoundingBox@) -> bool
Rhino.RhinoDoc.Undo(self) -> bool
Rhino.RhinoDoc.Write3dmFile(self, path: str, options: Rhino.FileIO.FileWriteOptions) -> bool
Rhino.RhinoDoc.WriteFile(self, path: str, options: Rhino.FileIO.FileWriteOptions) -> bool
Rhino.RhinoDoc.[ObsoleteAttribute(self, arg1: Rhino.DocObjects.ViewportInfo, arg2: bool, arg3: bool) -> None
Rhino.RhinoDoc.[ObsoleteAttribute(self, arg1: System.Guid, arg2: Rhino.DocObjects.ViewportInfo, arg3: bool, arg4: bool) -> None
Rhino.RhinoDoc.[ObsoleteAttribute(self, arg1: bool, arg2: bool) -> None
Rhino.RhinoDoc.[ObsoleteAttribute(self, arg1: int) -> None
Rhino.RhinoDoc.[ObsoleteAttribute(self, arg1: str) -> None
Rhino.RhinoDocObserverArgs.__init__(self, doc: Rhino.RhinoDoc) -> None
Rhino.RhinoDocUndoRecord.Dispose(self) -> None
Rhino.RhinoDocUndoRecord.__init__(self, doc: Rhino.RhinoDoc, description: str) -> None
Rhino.RhinoDocUndoRecord.__init__(self, docRuntimeSerialNumber: System.UInt32, description: str) -> None
Rhino.RhinoMath.CRC32(currentRemainder: System.UInt32, buffer: List[System.Byte]) -> uint
Rhino.RhinoMath.CRC32(currentRemainder: System.UInt32, value: float) -> uint
Rhino.RhinoMath.CRC32(currentRemainder: System.UInt32, value: int) -> uint
Rhino.RhinoMath.Clamp(value: float, bound1: float, bound2: float) -> float
Rhino.RhinoMath.Clamp(value: int, bound1: int, bound2: int) -> int
Rhino.RhinoMath.EpsilonEquals(x: float, y: float, epsilon: float) -> bool
Rhino.RhinoMath.EpsilonEquals(x: float, y: float, epsilon: float) -> bool
Rhino.RhinoMath.EvaluateNormal(limitDirection: int, ds: Rhino.Geometry.Vector3d, dt: Rhino.Geometry.Vector3d, dss: Rhino.Geometry.Vector3d, dst: Rhino.Geometry.Vector3d, dtt: Rhino.Geometry.Vector3d, n: Rhino.Geometry.Vector3d@) -> bool
Rhino.RhinoMath.EvaluateNormalPartials(ds: Rhino.Geometry.Vector3d, dt: Rhino.Geometry.Vector3d, dss: Rhino.Geometry.Vector3d, dst: Rhino.Geometry.Vector3d, dtt: Rhino.Geometry.Vector3d, ns: Rhino.Geometry.Vector3d@, nt: Rhino.Geometry.Vector3d@) -> bool
Rhino.RhinoMath.EvaluateSectionalCurvature(ds: Rhino.Geometry.Vector3d, dt: Rhino.Geometry.Vector3d, dss: Rhino.Geometry.Vector3d, dst: Rhino.Geometry.Vector3d, dtt: Rhino.Geometry.Vector3d, planeNormal: Rhino.Geometry.Vector3d, k: Rhino.Geometry.Vector3d@) -> bool
Rhino.RhinoMath.IntIndexToString(index: int) -> str
Rhino.RhinoMath.IsValidDouble(x: float) -> bool
Rhino.RhinoMath.IsValidSingle(x: float) -> bool
Rhino.RhinoMath.MetersPerUnit(units: Rhino.UnitSystem) -> float
Rhino.RhinoMath.ParseNumber(expression: str) -> float
Rhino.RhinoMath.ToDegrees(radians: float) -> float
Rhino.RhinoMath.ToRadians(degrees: float) -> float
Rhino.RhinoMath.TryParseNumber(expression: str, result: System.Double@) -> bool
Rhino.RhinoMath.UnitScale(from: Rhino.UnitSystem, fromMetersPerUnit: float, to: Rhino.UnitSystem, toMetersPerUnit: float) -> float
Rhino.RhinoMath.UnitScale(from: Rhino.UnitSystem, to: Rhino.UnitSystem) -> float
Rhino.RhinoMath.Wrap(value: float, bound1: float, bound2: float) -> float
Rhino.Runtime.Analytics.Send(self, Category: str) -> None
Rhino.Runtime.Analytics.Send(self, Category: str, Action: str) -> None
Rhino.Runtime.Analytics.Send(self, Category: str, Action: str, Label: str) -> None
Rhino.Runtime.Analytics.Send(self, Category: str, Action: str, Label: str, Value: System.UInt32) -> None
Rhino.Runtime.Analytics.Send(self, data: System.Collections.Specialized.NameValueCollection) -> None
Rhino.Runtime.Analytics.__init__(self, TrackingID: str, Name: str) -> None
Rhino.Runtime.Analytics.__init__(self, TrackingID: str, Name: str, Platform: str, InstallerId: str, Version: str) -> None
Rhino.Runtime.AssemblyResolver.AddSearchFile(file: str) -> None
Rhino.Runtime.AssemblyResolver.AddSearchFolder(folder: str) -> None
Rhino.Runtime.CommonObject.ConstructConstObject(self, parentObject: Any, subobjectIndex: int) -> None
Rhino.Runtime.CommonObject.Dispose(self) -> None
Rhino.Runtime.CommonObject.Dispose(self, disposing: bool) -> None
Rhino.Runtime.CommonObject.EnsurePrivateCopy(self) -> None
Rhino.Runtime.CommonObject.Finalize(self) -> None
Rhino.Runtime.CommonObject.FromBase64String(archive3dm: int, opennurbs: int, base64Data: str) -> Rhino.Runtime.CommonObject
Rhino.Runtime.CommonObject.FromJSON(json: str) -> Rhino.Runtime.CommonObject
Rhino.Runtime.CommonObject.FromJSON(jsonDictionary: Dict[str, str]) -> Rhino.Runtime.CommonObject
Rhino.Runtime.CommonObject.GetObjectData(self, info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext) -> None
Rhino.Runtime.CommonObject.IsValidWithLog(self, log: System.String@) -> bool
Rhino.Runtime.CommonObject.NonConstOperation(self) -> None
Rhino.Runtime.CommonObject.OnSwitchToNonConst(self) -> None
Rhino.Runtime.CommonObject.ToJSON(self, options: Rhino.FileIO.SerializationOptions) -> str
Rhino.Runtime.CommonObject.__init__(self) -> None
Rhino.Runtime.CommonObject.__init__(self, info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext) -> None
Rhino.Runtime.DocumentCollectedException.__init__(self) -> None
Rhino.Runtime.DocumentCollectedException.__init__(self, message: str) -> None
Rhino.Runtime.HostUtils.AutoInstallPlugInFolder(currentUser: bool) -> str
Rhino.Runtime.HostUtils.CallFromCoreRhino(task: str) -> int
Rhino.Runtime.HostUtils.CheckForRdk(throwOnFalse: bool, usePreviousResult: bool) -> bool
Rhino.Runtime.HostUtils.ClearFpuExceptionStatus() -> None
Rhino.Runtime.HostUtils.CreateCommands(pPlugIn: System.IntPtr, pluginAssembly: System.Reflection.Assembly) -> int
Rhino.Runtime.HostUtils.CreateCommands(plugin: Rhino.PlugIns.PlugIn) -> None
Rhino.Runtime.HostUtils.CreatePlugIn(pluginType: System.Type, printDebugMessages: bool) -> PlugIn
Rhino.Runtime.HostUtils.DebugDumpToString(bezierCurve: Rhino.Geometry.BezierCurve) -> str
Rhino.Runtime.HostUtils.DebugDumpToString(geometry: Rhino.Geometry.GeometryBase) -> str
Rhino.Runtime.HostUtils.DebugString(format: str, args: List[Any]) -> None
Rhino.Runtime.HostUtils.DebugString(msg: str) -> None
Rhino.Runtime.HostUtils.DescribeGeometry(geometry: Rhino.Geometry.GeometryBase) -> str
Rhino.Runtime.HostUtils.DisplayOleAlerts(display: bool) -> None
Rhino.Runtime.HostUtils.ExceptionReport(ex: System.Exception) -> None
Rhino.Runtime.HostUtils.ExceptionReport(source: str, ex: System.Exception) -> None
Rhino.Runtime.HostUtils.ExecuteNamedCallback(name: str, args: Rhino.Runtime.NamedParametersEventArgs) -> bool
Rhino.Runtime.HostUtils.FileNameEndsWithRhinoBackupExtension(fileName: str) -> bool
Rhino.Runtime.HostUtils.FileNameEndsWithRhinoExtension(fileName: str) -> bool
Rhino.Runtime.HostUtils.GetAbsolutePath(relativePath: str, bRelativePathisFileName: bool, relativeTo: str, bRelativeToIsFileName: bool, pathOut: System.String@) -> bool
Rhino.Runtime.HostUtils.GetActivePlugInVersionFolders() -> IEnumerable<DirectoryInfo>
Rhino.Runtime.HostUtils.GetActivePlugInVersionFolders(currentUser: bool) -> IEnumerable<DirectoryInfo>
Rhino.Runtime.HostUtils.GetAssemblySearchPaths() -> List[str]
Rhino.Runtime.HostUtils.GetCurrentProcessInfo(processName: System.String@, processVersion: System.Version@) -> None
Rhino.Runtime.HostUtils.GetCustomComputeEndpoints() -> List[Type>]
Rhino.Runtime.HostUtils.GetPlatformService<T>(assemblyPath: str, typeFullName: str) -> T
Rhino.Runtime.HostUtils.GetPrinterDPI(printerName: str, horizontal: bool) -> float
Rhino.Runtime.HostUtils.GetPrinterFormMargins(printerName: str, formName: str, portrait: bool, leftMillimeters: System.Double@, topMillimeters: System.Double@, rightMillimeters: System.Double@, bottomMillimeters: System.Double@) -> bool
Rhino.Runtime.HostUtils.GetPrinterFormNames(printerName: str) -> List[str]
Rhino.Runtime.HostUtils.GetPrinterFormSize(printerName: str, formName: str, widthMillimeters: System.Double@, heightMillimeters: System.Double@) -> bool
Rhino.Runtime.HostUtils.GetPrinterNames() -> List[str]
Rhino.Runtime.HostUtils.GetRhinoDotNetAssembly() -> Assembly
Rhino.Runtime.HostUtils.GetSystemProcessorCount() -> int
Rhino.Runtime.HostUtils.GetSystemReferenceAssemblies() -> IEnumerable<string>
Rhino.Runtime.HostUtils.InPlaceConstCast(geometry: Rhino.Geometry.GeometryBase, makeNonConst: bool) -> None
Rhino.Runtime.HostUtils.InitializeRhinoCommon() -> None
Rhino.Runtime.HostUtils.InitializeRhinoCommon_RDK() -> None
Rhino.Runtime.HostUtils.InitializeZooClient() -> None
Rhino.Runtime.HostUtils.IsManagedDll(path: str) -> bool
Rhino.Runtime.HostUtils.IsRhinoBackupFileExtension(fileExtension: str) -> bool
Rhino.Runtime.HostUtils.IsRhinoFileExtension(fileExtension: str) -> bool
Rhino.Runtime.HostUtils.LoadAssemblyFrom(path: str) -> Assembly
Rhino.Runtime.HostUtils.LogDebugEvent(message: str) -> None
Rhino.Runtime.HostUtils.RecordInitInstanceTime(description: str) -> None
Rhino.Runtime.HostUtils.RegisterComputeEndpoint(endpointPath: str, t: System.Type) -> None
Rhino.Runtime.HostUtils.RegisterDynamicCommand(plugin: Rhino.PlugIns.PlugIn, cmd: Rhino.Commands.Command) -> bool
Rhino.Runtime.HostUtils.RegisterNamedCallback(name: str, callback: EventHandler[Rhino.Runtime.NamedParametersEventArgs]) -> None
Rhino.Runtime.HostUtils.RemoveNamedCallback(name: str) -> None
Rhino.Runtime.HostUtils.RhinoCommonExceptionHandler(title: str, sender: Any, ex: System.Exception) -> None
Rhino.Runtime.HostUtils.SendLogMessageToCloudCallbackProc(arg1: Rhino.Runtime.HostUtils.LogMessageType, arg2: System.IntPtr, arg3: System.IntPtr, arg4: System.IntPtr) -> None
Rhino.Runtime.HostUtils.SetInShutDown() -> None
Rhino.Runtime.HostUtils.ShutDownRhinoCommon_RDK() -> None
Rhino.Runtime.HostUtils.UnhandledThreadException(sender: Any, e: System.Threading.ThreadExceptionEventArgs) -> None
Rhino.Runtime.IPlatformServiceLocator.GetService<T>(self) -> T
Rhino.Runtime.IShrinkWrapService.ShrinkWrap(self, geometryBases: Iterable[Rhino.Geometry.GeometryBase], parameters: Rhino.Geometry.ShrinkWrapParameters, meshingParameters: Rhino.Geometry.MeshingParameters) -> Mesh
Rhino.Runtime.IShrinkWrapService.ShrinkWrap(self, geometryBases: Iterable[Rhino.Geometry.GeometryBase], parameters: Rhino.Geometry.ShrinkWrapParameters, meshingParameters: Rhino.Geometry.MeshingParameters, cancellationToken: System.Threading.CancellationToken) -> Mesh
Rhino.Runtime.IShrinkWrapService.ShrinkWrap(self, mesh: Rhino.Geometry.Mesh, parameters: Rhino.Geometry.ShrinkWrapParameters) -> Mesh
Rhino.Runtime.IShrinkWrapService.ShrinkWrap(self, mesh: Rhino.Geometry.Mesh, parameters: Rhino.Geometry.ShrinkWrapParameters, cancellationToken: System.Threading.CancellationToken) -> Mesh
Rhino.Runtime.IShrinkWrapService.ShrinkWrap(self, meshes: Iterable[Rhino.Geometry.Mesh], parameters: Rhino.Geometry.ShrinkWrapParameters) -> Mesh
Rhino.Runtime.IShrinkWrapService.ShrinkWrap(self, meshes: Iterable[Rhino.Geometry.Mesh], parameters: Rhino.Geometry.ShrinkWrapParameters, cancellationToken: System.Threading.CancellationToken) -> Mesh
Rhino.Runtime.IShrinkWrapService.ShrinkWrap(self, pointCloud: Rhino.Geometry.PointCloud, parameters: Rhino.Geometry.ShrinkWrapParameters) -> Mesh
Rhino.Runtime.IShrinkWrapService.ShrinkWrap(self, pointCloud: Rhino.Geometry.PointCloud, parameters: Rhino.Geometry.ShrinkWrapParameters, cancellationToken: System.Threading.CancellationToken) -> Mesh
Rhino.Runtime.IZooClientUtilities.AskUserForLicense(self, verify: Any, parameters: Rhino.Runtime.ZooClientParameters) -> bool
Rhino.Runtime.IZooClientUtilities.CheckInLicense(self, verify: Any, productId: System.Guid) -> bool
Rhino.Runtime.IZooClientUtilities.CheckOutLicense(self, verify: Any, productId: System.Guid) -> bool
Rhino.Runtime.IZooClientUtilities.ConvertLicense(self, verify: Any, productId: System.Guid) -> bool
Rhino.Runtime.IZooClientUtilities.DeleteLicense(self, verify: Any, productId: System.Guid) -> bool
Rhino.Runtime.IZooClientUtilities.Echo(self, verify: Any, message: str) -> str
Rhino.Runtime.IZooClientUtilities.GetCurrentTime(self) -> DateTime
Rhino.Runtime.IZooClientUtilities.GetLicense(self, verify: Any, parameters: Rhino.Runtime.ZooClientParameters) -> bool
Rhino.Runtime.IZooClientUtilities.GetLicenseStatus(self, verify: Any) -> List[LicenseStatus]
Rhino.Runtime.IZooClientUtilities.GetLicenseType(self, verify: Any, productId: System.Guid) -> int
Rhino.Runtime.IZooClientUtilities.GetOneLicenseStatus(self, verify: Any, productId: System.Guid) -> LicenseStatus
Rhino.Runtime.IZooClientUtilities.GetRegisteredOwnerInfo(self, verify: Any, productId: System.Guid, registeredOwner: System.String@, registeredOrganization: System.String@) -> bool
Rhino.Runtime.IZooClientUtilities.Initialize(self, verify: Any) -> bool
Rhino.Runtime.IZooClientUtilities.IsCheckOutEnabled(self, verify: Any) -> bool
Rhino.Runtime.IZooClientUtilities.LicenseOptionsHandler(self, verify: Any, parameters: Rhino.Runtime.ZooClientParameters) -> bool
Rhino.Runtime.IZooClientUtilities.LoginToCloudZoo(self) -> bool
Rhino.Runtime.IZooClientUtilities.LogoutOfCloudZoo(self) -> bool
Rhino.Runtime.IZooClientUtilities.ReturnLicense(self, verify: Any, productId: System.Guid) -> bool
Rhino.Runtime.IZooClientUtilities.ReturnLicense(self, verify: Any, productPath: str, productId: System.Guid) -> bool
Rhino.Runtime.IZooClientUtilities.ShowBuyLicenseUi(self, verify: Any, productId: System.Guid) -> None
Rhino.Runtime.IZooClientUtilities.ShowLicenseValidationUi(self, verify: Any, cdkey: str) -> bool
Rhino.Runtime.IZooClientUtilities.ShowRhinoExpiredMessage(self, mode: Rhino.Runtime.Mode, result: System.Int32@) -> bool
Rhino.Runtime.InProcess.RhinoCore.Dispose(self) -> None
Rhino.Runtime.InProcess.RhinoCore.DoEvents(self) -> bool
Rhino.Runtime.InProcess.RhinoCore.DoIdle(self) -> bool
Rhino.Runtime.InProcess.RhinoCore.Finalize(self) -> None
Rhino.Runtime.InProcess.RhinoCore.InvokeInHostContext(self, action: System.Action) -> None
Rhino.Runtime.InProcess.RhinoCore.InvokeInHostContext<T>(self, func: Func[``0]) -> T
Rhino.Runtime.InProcess.RhinoCore.RaiseIdle(self) -> None
Rhino.Runtime.InProcess.RhinoCore.Run(self) -> int
Rhino.Runtime.InProcess.RhinoCore.__init__(self) -> None
Rhino.Runtime.InProcess.RhinoCore.__init__(self, args: List[str]) -> None
Rhino.Runtime.InProcess.RhinoCore.__init__(self, args: List[str], windowStyle: Rhino.Runtime.InProcess.WindowStyle) -> None
Rhino.Runtime.InProcess.RhinoCore.__init__(self, args: List[str], windowStyle: Rhino.Runtime.InProcess.WindowStyle, hostWnd: System.IntPtr) -> None
Rhino.Runtime.Interop.CommandLineOptionFromNativePointer(ptrCommandLineOption: System.IntPtr) -> CommandLineOption
Rhino.Runtime.Interop.CreateFromNativePointer(pGeometry: System.IntPtr) -> GeometryBase
Rhino.Runtime.Interop.FileReadOptionsConstPointer(options: Rhino.FileIO.FileReadOptions) -> IntPtr
Rhino.Runtime.Interop.FileWriteOptionsConstPointer(options: Rhino.FileIO.FileWriteOptions) -> IntPtr
Rhino.Runtime.Interop.FontFromPointer(ptrManagedFont: System.IntPtr) -> Font
Rhino.Runtime.Interop.FromOnBrep(source: Any) -> Brep
Rhino.Runtime.Interop.FromOnCurve(source: Any) -> Curve
Rhino.Runtime.Interop.FromOnMesh(source: Any) -> Mesh
Rhino.Runtime.Interop.FromOnSurface(source: Any) -> Surface
Rhino.Runtime.Interop.NSFontFromFont(font: Rhino.DocObjects.Font) -> IntPtr
Rhino.Runtime.Interop.NSFontFromFont(font: Rhino.DocObjects.Font, pointSize: float) -> IntPtr
Rhino.Runtime.Interop.NativeGeometryConstPointer(geometry: Rhino.Geometry.GeometryBase) -> IntPtr
Rhino.Runtime.Interop.NativeGeometryNonConstPointer(geometry: Rhino.Geometry.GeometryBase) -> IntPtr
Rhino.Runtime.Interop.NativeNonConstPointer(getPoint: Rhino.Input.Custom.GetPoint) -> IntPtr
Rhino.Runtime.Interop.NativeNonConstPointer(pipeline: Rhino.Display.DisplayPipeline) -> IntPtr
Rhino.Runtime.Interop.NativeNonConstPointer(settings: Rhino.Display.ViewCaptureSettings) -> IntPtr
Rhino.Runtime.Interop.NativeNonConstPointer(viewport: Rhino.Display.RhinoViewport) -> IntPtr
Rhino.Runtime.Interop.NativeNonConstPointer(viewport: Rhino.DocObjects.ViewportInfo) -> IntPtr
Rhino.Runtime.Interop.NativeRhinoDocPointer(doc: Rhino.RhinoDoc) -> IntPtr
Rhino.Runtime.Interop.PlugInPointer(plugin: Rhino.PlugIns.PlugIn) -> IntPtr
Rhino.Runtime.Interop.RhinoObjectConstPointer(rhinoObject: Rhino.DocObjects.RhinoObject) -> IntPtr
Rhino.Runtime.Interop.RhinoObjectFromPointer(pRhinoObject: System.IntPtr) -> RhinoObject
Rhino.Runtime.Interop.ToIRhinoViewport(source: Rhino.Display.RhinoViewport) -> Object
Rhino.Runtime.Interop.ToOnBrep(source: Rhino.Geometry.Brep) -> Object
Rhino.Runtime.Interop.ToOnCurve(source: Rhino.Geometry.Curve) -> Object
Rhino.Runtime.Interop.ToOnMesh(source: Rhino.Geometry.Mesh) -> Object
Rhino.Runtime.Interop.ToOnSurface(source: Rhino.Geometry.Surface) -> Object
Rhino.Runtime.Interop.ToOnXform(source: Rhino.Geometry.Transform) -> Object
Rhino.Runtime.Interop.TryCopyFromOnArc(source: Any, destination: Rhino.Geometry.Arc@) -> bool
Rhino.Runtime.Interop.TryCopyToOnArc(source: Rhino.Geometry.Arc, destination: Any) -> bool
Rhino.Runtime.Interop.ViewCaptureFromPointer(ptrViewCapture: System.IntPtr) -> ViewCaptureSettings
Rhino.Runtime.InteropWrappers.ClassArrayObjRef.Add(self, objref: Rhino.DocObjects.ObjRef) -> None
Rhino.Runtime.InteropWrappers.ClassArrayObjRef.ConstPointer(self) -> IntPtr
Rhino.Runtime.InteropWrappers.ClassArrayObjRef.Dispose(self) -> None
Rhino.Runtime.InteropWrappers.ClassArrayObjRef.Finalize(self) -> None
Rhino.Runtime.InteropWrappers.ClassArrayObjRef.NonConstPointer(self) -> IntPtr
Rhino.Runtime.InteropWrappers.ClassArrayObjRef.ToNonConstArray(self) -> List[ObjRef]
Rhino.Runtime.InteropWrappers.ClassArrayObjRef.__init__(self) -> None
Rhino.Runtime.InteropWrappers.ClassArrayObjRef.__init__(self, objrefs: Iterable[Rhino.DocObjects.ObjRef]) -> None
Rhino.Runtime.InteropWrappers.ClassArrayObjRef.__init__(self, ptr: System.IntPtr, deleteOnDispose: bool) -> None
Rhino.Runtime.InteropWrappers.ClassArrayOnObjRef.Add(self, objref: Rhino.DocObjects.ObjRef) -> None
Rhino.Runtime.InteropWrappers.ClassArrayOnObjRef.ConstPointer(self) -> IntPtr
Rhino.Runtime.InteropWrappers.ClassArrayOnObjRef.Dispose(self) -> None
Rhino.Runtime.InteropWrappers.ClassArrayOnObjRef.Finalize(self) -> None
Rhino.Runtime.InteropWrappers.ClassArrayOnObjRef.NonConstPointer(self) -> IntPtr
Rhino.Runtime.InteropWrappers.ClassArrayOnObjRef.ToNonConstArray(self) -> List[ObjRef]
Rhino.Runtime.InteropWrappers.ClassArrayOnObjRef.ToNonConstArray(self, doc: Rhino.RhinoDoc) -> List[ObjRef]
Rhino.Runtime.InteropWrappers.ClassArrayOnObjRef.__init__(self) -> None
Rhino.Runtime.InteropWrappers.ClassArrayOnObjRef.__init__(self, objrefs: Iterable[Rhino.DocObjects.ObjRef]) -> None
Rhino.Runtime.InteropWrappers.ClassArrayString.Add(self, s: str) -> None
Rhino.Runtime.InteropWrappers.ClassArrayString.ConstPointer(self) -> IntPtr
Rhino.Runtime.InteropWrappers.ClassArrayString.Dispose(self) -> None
Rhino.Runtime.InteropWrappers.ClassArrayString.Dispose(self, disposing: bool) -> None
Rhino.Runtime.InteropWrappers.ClassArrayString.Finalize(self) -> None
Rhino.Runtime.InteropWrappers.ClassArrayString.NonConstPointer(self) -> IntPtr
Rhino.Runtime.InteropWrappers.ClassArrayString.ToArray(self) -> List[str]
Rhino.Runtime.InteropWrappers.ClassArrayString.__init__(self) -> None
Rhino.Runtime.InteropWrappers.RhDisplayPoint.__init__(self, location: Rhino.Geometry.Point3d) -> None
Rhino.Runtime.InteropWrappers.SimpleArray2dex.ConstPointer(self) -> IntPtr
Rhino.Runtime.InteropWrappers.SimpleArray2dex.Dispose(self) -> None
Rhino.Runtime.InteropWrappers.SimpleArray2dex.Finalize(self) -> None
Rhino.Runtime.InteropWrappers.SimpleArray2dex.NonConstPointer(self) -> IntPtr
Rhino.Runtime.InteropWrappers.SimpleArray2dex.ToArray(self) -> List[IndexPair]
Rhino.Runtime.InteropWrappers.SimpleArray2dex.__init__(self) -> None
Rhino.Runtime.InteropWrappers.SimpleArray2dex.__init__(self, values: Iterable[Rhino.IndexPair]) -> None
Rhino.Runtime.InteropWrappers.SimpleArrayArrayPoint3d.ConstPointer(self) -> IntPtr
Rhino.Runtime.InteropWrappers.SimpleArrayArrayPoint3d.Dispose(self) -> None
Rhino.Runtime.InteropWrappers.SimpleArrayArrayPoint3d.Dispose(self, disposing: bool) -> None
Rhino.Runtime.InteropWrappers.SimpleArrayArrayPoint3d.Finalize(self) -> None
Rhino.Runtime.InteropWrappers.SimpleArrayArrayPoint3d.NonConstPointer(self) -> IntPtr
Rhino.Runtime.InteropWrappers.SimpleArrayArrayPoint3d.PointCountAt(self, index: int) -> int
Rhino.Runtime.InteropWrappers.SimpleArrayArrayPoint3d.PolylineAt(self, index: int) -> Polyline
Rhino.Runtime.InteropWrappers.SimpleArrayArrayPoint3d.__init__(self) -> None
Rhino.Runtime.InteropWrappers.SimpleArrayBinaryArchiveReader.Add(self, reader: Rhino.FileIO.BinaryArchiveReader) -> None
Rhino.Runtime.InteropWrappers.SimpleArrayBinaryArchiveReader.ConstPointer(self) -> IntPtr
Rhino.Runtime.InteropWrappers.SimpleArrayBinaryArchiveReader.Dispose(self) -> None
Rhino.Runtime.InteropWrappers.SimpleArrayBinaryArchiveReader.Finalize(self) -> None
Rhino.Runtime.InteropWrappers.SimpleArrayBinaryArchiveReader.Get(self, index: int) -> BinaryArchiveReader
Rhino.Runtime.InteropWrappers.SimpleArrayBinaryArchiveReader.NonConstPointer(self) -> IntPtr
Rhino.Runtime.InteropWrappers.SimpleArrayBinaryArchiveReader.__init__(self) -> None
Rhino.Runtime.InteropWrappers.SimpleArrayBinaryArchiveReader.__init__(self, p: System.IntPtr) -> None
Rhino.Runtime.InteropWrappers.SimpleArrayBrepPointer.Add(self, brep: Rhino.Geometry.Brep, asConst: bool) -> None
Rhino.Runtime.InteropWrappers.SimpleArrayBrepPointer.ConstPointer(self) -> IntPtr
Rhino.Runtime.InteropWrappers.SimpleArrayBrepPointer.Dispose(self) -> None
Rhino.Runtime.InteropWrappers.SimpleArrayBrepPointer.Dispose(self, disposing: bool) -> None
Rhino.Runtime.InteropWrappers.SimpleArrayBrepPointer.Finalize(self) -> None
Rhino.Runtime.InteropWrappers.SimpleArrayBrepPointer.NonConstPointer(self) -> IntPtr
Rhino.Runtime.InteropWrappers.SimpleArrayBrepPointer.ToNonConstArray(self) -> List[Brep]
Rhino.Runtime.InteropWrappers.SimpleArrayBrepPointer.__init__(self) -> None
Rhino.Runtime.InteropWrappers.SimpleArrayByte.Array(self) -> IntPtr
Rhino.Runtime.InteropWrappers.SimpleArrayByte.ConstPointer(self) -> IntPtr
Rhino.Runtime.InteropWrappers.SimpleArrayByte.CopyTo(self, other: Rhino.Runtime.InteropWrappers.SimpleArrayByte) -> None
Rhino.Runtime.InteropWrappers.SimpleArrayByte.Dispose(self) -> None
Rhino.Runtime.InteropWrappers.SimpleArrayByte.Finalize(self) -> None
Rhino.Runtime.InteropWrappers.SimpleArrayByte.NonConstPointer(self) -> IntPtr
Rhino.Runtime.InteropWrappers.SimpleArrayByte.ToArray(self) -> List[byte]
Rhino.Runtime.InteropWrappers.SimpleArrayByte.__init__(self) -> None
Rhino.Runtime.InteropWrappers.SimpleArrayByte.__init__(self, initialSize: int) -> None
Rhino.Runtime.InteropWrappers.SimpleArrayByte.__init__(self, other: Rhino.Runtime.InteropWrappers.SimpleArrayByte) -> None
Rhino.Runtime.InteropWrappers.SimpleArrayByte.__init__(self, values: Iterable[System.Byte]) -> None
Rhino.Runtime.InteropWrappers.SimpleArrayClippingPlaneObjectPointer.Add(self, clippingplane: Rhino.DocObjects.ClippingPlaneObject, asConst: bool) -> None
Rhino.Runtime.InteropWrappers.SimpleArrayClippingPlaneObjectPointer.ConstPointer(self) -> IntPtr
Rhino.Runtime.InteropWrappers.SimpleArrayClippingPlaneObjectPointer.Dispose(self) -> None
Rhino.Runtime.InteropWrappers.SimpleArrayClippingPlaneObjectPointer.Dispose(self, disposing: bool) -> None
Rhino.Runtime.InteropWrappers.SimpleArrayClippingPlaneObjectPointer.Finalize(self) -> None
Rhino.Runtime.InteropWrappers.SimpleArrayClippingPlaneObjectPointer.NonConstPointer(self) -> IntPtr
Rhino.Runtime.InteropWrappers.SimpleArrayClippingPlaneObjectPointer.__init__(self) -> None
Rhino.Runtime.InteropWrappers.SimpleArrayCurvePointer.ConstPointer(self) -> IntPtr
Rhino.Runtime.InteropWrappers.SimpleArrayCurvePointer.Dispose(self) -> None
Rhino.Runtime.InteropWrappers.SimpleArrayCurvePointer.Dispose(self, disposing: bool) -> None
Rhino.Runtime.InteropWrappers.SimpleArrayCurvePointer.Finalize(self) -> None
Rhino.Runtime.InteropWrappers.SimpleArrayCurvePointer.NonConstPointer(self) -> IntPtr
Rhino.Runtime.InteropWrappers.SimpleArrayCurvePointer.ToNonConstArray(self) -> List[Curve]
Rhino.Runtime.InteropWrappers.SimpleArrayCurvePointer.__init__(self) -> None
Rhino.Runtime.InteropWrappers.SimpleArrayCurvePointer.__init__(self, curves: Iterable[Rhino.Geometry.Curve]) -> None
Rhino.Runtime.InteropWrappers.SimpleArrayDouble.ConstPointer(self) -> IntPtr
Rhino.Runtime.InteropWrappers.SimpleArrayDouble.Dispose(self) -> None
Rhino.Runtime.InteropWrappers.SimpleArrayDouble.Finalize(self) -> None
Rhino.Runtime.InteropWrappers.SimpleArrayDouble.NonConstPointer(self) -> IntPtr
Rhino.Runtime.InteropWrappers.SimpleArrayDouble.ToArray(self) -> List[float]
Rhino.Runtime.InteropWrappers.SimpleArrayDouble.__init__(self) -> None
Rhino.Runtime.InteropWrappers.SimpleArrayDouble.__init__(self, items: Iterable[float]) -> None
Rhino.Runtime.InteropWrappers.SimpleArrayExtrusionPointer.Add(self, extrusion: Rhino.Geometry.Extrusion, asConst: bool) -> None
Rhino.Runtime.InteropWrappers.SimpleArrayExtrusionPointer.ConstPointer(self) -> IntPtr
Rhino.Runtime.InteropWrappers.SimpleArrayExtrusionPointer.Dispose(self) -> None
Rhino.Runtime.InteropWrappers.SimpleArrayExtrusionPointer.Dispose(self, disposing: bool) -> None
Rhino.Runtime.InteropWrappers.SimpleArrayExtrusionPointer.Finalize(self) -> None
Rhino.Runtime.InteropWrappers.SimpleArrayExtrusionPointer.NonConstPointer(self) -> IntPtr
Rhino.Runtime.InteropWrappers.SimpleArrayExtrusionPointer.ToNonConstArray(self) -> List[Extrusion]
Rhino.Runtime.InteropWrappers.SimpleArrayExtrusionPointer.__init__(self) -> None
Rhino.Runtime.InteropWrappers.SimpleArrayFloat.Array(self) -> IntPtr
Rhino.Runtime.InteropWrappers.SimpleArrayFloat.ConstPointer(self) -> IntPtr
Rhino.Runtime.InteropWrappers.SimpleArrayFloat.CopyTo(self, other: Rhino.Runtime.InteropWrappers.SimpleArrayFloat) -> None
Rhino.Runtime.InteropWrappers.SimpleArrayFloat.Dispose(self) -> None
Rhino.Runtime.InteropWrappers.SimpleArrayFloat.Finalize(self) -> None
Rhino.Runtime.InteropWrappers.SimpleArrayFloat.NonConstPointer(self) -> IntPtr
Rhino.Runtime.InteropWrappers.SimpleArrayFloat.ToArray(self) -> List[float]
Rhino.Runtime.InteropWrappers.SimpleArrayFloat.__init__(self) -> None
Rhino.Runtime.InteropWrappers.SimpleArrayFloat.__init__(self, initialSize: int) -> None
Rhino.Runtime.InteropWrappers.SimpleArrayFloat.__init__(self, other: Rhino.Runtime.InteropWrappers.SimpleArrayFloat) -> None
Rhino.Runtime.InteropWrappers.SimpleArrayFloat.__init__(self, values: Iterable[float]) -> None
Rhino.Runtime.InteropWrappers.SimpleArrayGeometryPointer.ConstPointer(self) -> IntPtr
Rhino.Runtime.InteropWrappers.SimpleArrayGeometryPointer.Dispose(self) -> None
Rhino.Runtime.InteropWrappers.SimpleArrayGeometryPointer.Dispose(self, disposing: bool) -> None
Rhino.Runtime.InteropWrappers.SimpleArrayGeometryPointer.Finalize(self) -> None
Rhino.Runtime.InteropWrappers.SimpleArrayGeometryPointer.NonConstPointer(self) -> IntPtr
Rhino.Runtime.InteropWrappers.SimpleArrayGeometryPointer.ToNonConstArray(self) -> List[GeometryBase]
Rhino.Runtime.InteropWrappers.SimpleArrayGeometryPointer.__init__(self) -> None
Rhino.Runtime.InteropWrappers.SimpleArrayGeometryPointer.__init__(self, geometry: Iterable[Rhino.Geometry.GeometryBase]) -> None
Rhino.Runtime.InteropWrappers.SimpleArrayGeometryPointer.__init__(self, geometry: System.Collections.IEnumerable) -> None
Rhino.Runtime.InteropWrappers.SimpleArrayGuid.Append(self, uuid: System.Guid) -> None
Rhino.Runtime.InteropWrappers.SimpleArrayGuid.ConstPointer(self) -> IntPtr
Rhino.Runtime.InteropWrappers.SimpleArrayGuid.Dispose(self) -> None
Rhino.Runtime.InteropWrappers.SimpleArrayGuid.Finalize(self) -> None
Rhino.Runtime.InteropWrappers.SimpleArrayGuid.NonConstPointer(self) -> IntPtr
Rhino.Runtime.InteropWrappers.SimpleArrayGuid.ToArray(self) -> List[Guid]
Rhino.Runtime.InteropWrappers.SimpleArrayGuid.__init__(self) -> None
Rhino.Runtime.InteropWrappers.SimpleArrayGuid.__init__(self, values: Iterable[System.Guid]) -> None
Rhino.Runtime.InteropWrappers.SimpleArrayGuidPointer.ConstPointer(self) -> IntPtr
Rhino.Runtime.InteropWrappers.SimpleArrayGuidPointer.Dispose(self) -> None
Rhino.Runtime.InteropWrappers.SimpleArrayGuidPointer.Finalize(self) -> None
Rhino.Runtime.InteropWrappers.SimpleArrayGuidPointer.NonConstPointer(self) -> IntPtr
Rhino.Runtime.InteropWrappers.SimpleArrayGuidPointer.ToArray(self) -> List[Guid]
Rhino.Runtime.InteropWrappers.SimpleArrayGuidPointer.__init__(self) -> None
Rhino.Runtime.InteropWrappers.SimpleArrayHatchLinePointer.ConstPointer(self) -> IntPtr
Rhino.Runtime.InteropWrappers.SimpleArrayHatchLinePointer.Dispose(self) -> None
Rhino.Runtime.InteropWrappers.SimpleArrayHatchLinePointer.Dispose(self, disposing: bool) -> None
Rhino.Runtime.InteropWrappers.SimpleArrayHatchLinePointer.Finalize(self) -> None
Rhino.Runtime.InteropWrappers.SimpleArrayHatchLinePointer.NonConstPointer(self) -> IntPtr
Rhino.Runtime.InteropWrappers.SimpleArrayHatchLinePointer.__init__(self) -> None
Rhino.Runtime.InteropWrappers.SimpleArrayHatchLinePointer.__init__(self, hatchLines: Iterable[Rhino.DocObjects.HatchLine]) -> None
Rhino.Runtime.InteropWrappers.SimpleArrayInt.ConstPointer(self) -> IntPtr
Rhino.Runtime.InteropWrappers.SimpleArrayInt.Dispose(self) -> None
Rhino.Runtime.InteropWrappers.SimpleArrayInt.Finalize(self) -> None
Rhino.Runtime.InteropWrappers.SimpleArrayInt.NonConstPointer(self) -> IntPtr
Rhino.Runtime.InteropWrappers.SimpleArrayInt.ToArray(self) -> List[int]
Rhino.Runtime.InteropWrappers.SimpleArrayInt.__init__(self) -> None
Rhino.Runtime.InteropWrappers.SimpleArrayInt.__init__(self, values: Iterable[int]) -> None
Rhino.Runtime.InteropWrappers.SimpleArrayIntPtr.ConstPointer(self) -> IntPtr
Rhino.Runtime.InteropWrappers.SimpleArrayIntPtr.Dispose(self) -> None
Rhino.Runtime.InteropWrappers.SimpleArrayIntPtr.Finalize(self) -> None
Rhino.Runtime.InteropWrappers.SimpleArrayIntPtr.NonConstPointer(self) -> IntPtr
Rhino.Runtime.InteropWrappers.SimpleArrayIntPtr.ToArray(self) -> List[IntPtr]
Rhino.Runtime.InteropWrappers.SimpleArrayIntPtr.__init__(self) -> None
Rhino.Runtime.InteropWrappers.SimpleArrayInterval.Add(self, interval: Rhino.Geometry.Interval) -> None
Rhino.Runtime.InteropWrappers.SimpleArrayInterval.ConstPointer(self) -> IntPtr
Rhino.Runtime.InteropWrappers.SimpleArrayInterval.Dispose(self) -> None
Rhino.Runtime.InteropWrappers.SimpleArrayInterval.Finalize(self) -> None
Rhino.Runtime.InteropWrappers.SimpleArrayInterval.NonConstPointer(self) -> IntPtr
Rhino.Runtime.InteropWrappers.SimpleArrayInterval.ToArray(self) -> List[Interval]
Rhino.Runtime.InteropWrappers.SimpleArrayInterval.__init__(self) -> None
Rhino.Runtime.InteropWrappers.SimpleArrayLine.ConstPointer(self) -> IntPtr
Rhino.Runtime.InteropWrappers.SimpleArrayLine.Dispose(self) -> None
Rhino.Runtime.InteropWrappers.SimpleArrayLine.Finalize(self) -> None
Rhino.Runtime.InteropWrappers.SimpleArrayLine.NonConstPointer(self) -> IntPtr
Rhino.Runtime.InteropWrappers.SimpleArrayLine.ToArray(self) -> List[Line]
Rhino.Runtime.InteropWrappers.SimpleArrayLine.__init__(self) -> None
Rhino.Runtime.InteropWrappers.SimpleArrayLinetypePointer.ConstPointer(self) -> IntPtr
Rhino.Runtime.InteropWrappers.SimpleArrayLinetypePointer.Dispose(self) -> None
Rhino.Runtime.InteropWrappers.SimpleArrayLinetypePointer.Dispose(self, disposing: bool) -> None
Rhino.Runtime.InteropWrappers.SimpleArrayLinetypePointer.Finalize(self) -> None
Rhino.Runtime.InteropWrappers.SimpleArrayLinetypePointer.NonConstPointer(self) -> IntPtr
Rhino.Runtime.InteropWrappers.SimpleArrayLinetypePointer.ToNonConstArray(self) -> List[Linetype]
Rhino.Runtime.InteropWrappers.SimpleArrayLinetypePointer.__init__(self) -> None
Rhino.Runtime.InteropWrappers.SimpleArrayMeshFace.ConstPointer(self) -> IntPtr
Rhino.Runtime.InteropWrappers.SimpleArrayMeshFace.Dispose(self) -> None
Rhino.Runtime.InteropWrappers.SimpleArrayMeshFace.Finalize(self) -> None
Rhino.Runtime.InteropWrappers.SimpleArrayMeshFace.NonConstPointer(self) -> IntPtr
Rhino.Runtime.InteropWrappers.SimpleArrayMeshFace.ToArray(self) -> List[MeshFace]
Rhino.Runtime.InteropWrappers.SimpleArrayMeshFace.__init__(self) -> None
Rhino.Runtime.InteropWrappers.SimpleArrayMeshPointer.Add(self, mesh: Rhino.Geometry.Mesh, asConst: bool) -> None
Rhino.Runtime.InteropWrappers.SimpleArrayMeshPointer.ConstPointer(self) -> IntPtr
Rhino.Runtime.InteropWrappers.SimpleArrayMeshPointer.Dispose(self) -> None
Rhino.Runtime.InteropWrappers.SimpleArrayMeshPointer.Dispose(self, disposing: bool) -> None
Rhino.Runtime.InteropWrappers.SimpleArrayMeshPointer.Finalize(self) -> None
Rhino.Runtime.InteropWrappers.SimpleArrayMeshPointer.NonConstPointer(self) -> IntPtr
Rhino.Runtime.InteropWrappers.SimpleArrayMeshPointer.ToNonConstArray(self) -> List[Mesh]
Rhino.Runtime.InteropWrappers.SimpleArrayMeshPointer.__init__(self) -> None
Rhino.Runtime.InteropWrappers.SimpleArrayPlane.ConstPointer(self) -> IntPtr
Rhino.Runtime.InteropWrappers.SimpleArrayPlane.Dispose(self) -> None
Rhino.Runtime.InteropWrappers.SimpleArrayPlane.Finalize(self) -> None
Rhino.Runtime.InteropWrappers.SimpleArrayPlane.NonConstPointer(self) -> IntPtr
Rhino.Runtime.InteropWrappers.SimpleArrayPlane.ToArray(self) -> List[Plane]
Rhino.Runtime.InteropWrappers.SimpleArrayPlane.__init__(self) -> None
Rhino.Runtime.InteropWrappers.SimpleArrayPoint2d.ConstPointer(self) -> IntPtr
Rhino.Runtime.InteropWrappers.SimpleArrayPoint2d.Dispose(self) -> None
Rhino.Runtime.InteropWrappers.SimpleArrayPoint2d.Dispose(self, disposing: bool) -> None
Rhino.Runtime.InteropWrappers.SimpleArrayPoint2d.Finalize(self) -> None
Rhino.Runtime.InteropWrappers.SimpleArrayPoint2d.NonConstPointer(self) -> IntPtr
Rhino.Runtime.InteropWrappers.SimpleArrayPoint2d.ToArray(self) -> List[Point2d]
Rhino.Runtime.InteropWrappers.SimpleArrayPoint2d.__init__(self) -> None
Rhino.Runtime.InteropWrappers.SimpleArrayPoint3d.Add(self, pt: Rhino.Geometry.Point3d) -> None
Rhino.Runtime.InteropWrappers.SimpleArrayPoint3d.ConstPointer(self) -> IntPtr
Rhino.Runtime.InteropWrappers.SimpleArrayPoint3d.Dispose(self) -> None
Rhino.Runtime.InteropWrappers.SimpleArrayPoint3d.Dispose(self, disposing: bool) -> None
Rhino.Runtime.InteropWrappers.SimpleArrayPoint3d.Finalize(self) -> None
Rhino.Runtime.InteropWrappers.SimpleArrayPoint3d.NonConstPointer(self) -> IntPtr
Rhino.Runtime.InteropWrappers.SimpleArrayPoint3d.ToArray(self) -> List[Point3d]
Rhino.Runtime.InteropWrappers.SimpleArrayPoint3d.__init__(self) -> None
Rhino.Runtime.InteropWrappers.SimpleArrayPoint3d.__init__(self, pts: Iterable[Rhino.Geometry.Point3d]) -> None
Rhino.Runtime.InteropWrappers.SimpleArraySubDPointer.Add(self, subd: Rhino.Geometry.SubD, asConst: bool) -> None
Rhino.Runtime.InteropWrappers.SimpleArraySubDPointer.ConstPointer(self) -> IntPtr
Rhino.Runtime.InteropWrappers.SimpleArraySubDPointer.Dispose(self) -> None
Rhino.Runtime.InteropWrappers.SimpleArraySubDPointer.Dispose(self, disposing: bool) -> None
Rhino.Runtime.InteropWrappers.SimpleArraySubDPointer.Finalize(self) -> None
Rhino.Runtime.InteropWrappers.SimpleArraySubDPointer.NonConstPointer(self) -> IntPtr
Rhino.Runtime.InteropWrappers.SimpleArraySubDPointer.ToNonConstArray(self) -> List[SubD]
Rhino.Runtime.InteropWrappers.SimpleArraySubDPointer.__init__(self) -> None
Rhino.Runtime.InteropWrappers.SimpleArraySurfacePointer.ConstPointer(self) -> IntPtr
Rhino.Runtime.InteropWrappers.SimpleArraySurfacePointer.Dispose(self) -> None
Rhino.Runtime.InteropWrappers.SimpleArraySurfacePointer.Dispose(self, disposing: bool) -> None
Rhino.Runtime.InteropWrappers.SimpleArraySurfacePointer.Finalize(self) -> None
Rhino.Runtime.InteropWrappers.SimpleArraySurfacePointer.NonConstPointer(self) -> IntPtr
Rhino.Runtime.InteropWrappers.SimpleArraySurfacePointer.ToNonConstArray(self) -> List[Surface]
Rhino.Runtime.InteropWrappers.SimpleArraySurfacePointer.__init__(self) -> None
Rhino.Runtime.InteropWrappers.SimpleArrayUint.ConstPointer(self) -> IntPtr
Rhino.Runtime.InteropWrappers.SimpleArrayUint.Dispose(self) -> None
Rhino.Runtime.InteropWrappers.SimpleArrayUint.Finalize(self) -> None
Rhino.Runtime.InteropWrappers.SimpleArrayUint.NonConstPointer(self) -> IntPtr
Rhino.Runtime.InteropWrappers.SimpleArrayUint.ToArray(self) -> List[uint]
Rhino.Runtime.InteropWrappers.SimpleArrayUint.__init__(self) -> None
Rhino.Runtime.InteropWrappers.SimpleArrayUint.__init__(self, values: Iterable[System.UInt32]) -> None
Rhino.Runtime.InteropWrappers.StdVectorByte.ConstPointer(self) -> IntPtr
Rhino.Runtime.InteropWrappers.StdVectorByte.CopyTo(self, other: Rhino.Runtime.InteropWrappers.StdVectorByte) -> None
Rhino.Runtime.InteropWrappers.StdVectorByte.Dispose(self) -> None
Rhino.Runtime.InteropWrappers.StdVectorByte.Finalize(self) -> None
Rhino.Runtime.InteropWrappers.StdVectorByte.Memory(self) -> IntPtr
Rhino.Runtime.InteropWrappers.StdVectorByte.NonConstPointer(self) -> IntPtr
Rhino.Runtime.InteropWrappers.StdVectorByte.ToArray(self) -> List[byte]
Rhino.Runtime.InteropWrappers.StdVectorByte.__init__(self) -> None
Rhino.Runtime.InteropWrappers.StdVectorByte.__init__(self, initialSize: System.UInt64) -> None
Rhino.Runtime.InteropWrappers.StdVectorByte.__init__(self, other: Rhino.Runtime.InteropWrappers.StdVectorByte) -> None
Rhino.Runtime.InteropWrappers.StdVectorByte.__init__(self, values: Iterable[System.Byte]) -> None
Rhino.Runtime.InteropWrappers.StdVectorFloat.ConstPointer(self) -> IntPtr
Rhino.Runtime.InteropWrappers.StdVectorFloat.CopyTo(self, other: Rhino.Runtime.InteropWrappers.StdVectorFloat) -> None
Rhino.Runtime.InteropWrappers.StdVectorFloat.Dispose(self) -> None
Rhino.Runtime.InteropWrappers.StdVectorFloat.Finalize(self) -> None
Rhino.Runtime.InteropWrappers.StdVectorFloat.Memory(self) -> IntPtr
Rhino.Runtime.InteropWrappers.StdVectorFloat.NonConstPointer(self) -> IntPtr
Rhino.Runtime.InteropWrappers.StdVectorFloat.ToArray(self) -> List[float]
Rhino.Runtime.InteropWrappers.StdVectorFloat.__init__(self) -> None
Rhino.Runtime.InteropWrappers.StdVectorFloat.__init__(self, initialSize: System.UInt64) -> None
Rhino.Runtime.InteropWrappers.StdVectorFloat.__init__(self, other: Rhino.Runtime.InteropWrappers.StdVectorFloat) -> None
Rhino.Runtime.InteropWrappers.StdVectorFloat.__init__(self, values: Iterable[float]) -> None
Rhino.Runtime.InteropWrappers.StdVectorGuid.Append(self, uuid: System.Guid) -> None
Rhino.Runtime.InteropWrappers.StdVectorGuid.ConstPointer(self) -> IntPtr
Rhino.Runtime.InteropWrappers.StdVectorGuid.Dispose(self) -> None
Rhino.Runtime.InteropWrappers.StdVectorGuid.Finalize(self) -> None
Rhino.Runtime.InteropWrappers.StdVectorGuid.NonConstPointer(self) -> IntPtr
Rhino.Runtime.InteropWrappers.StdVectorGuid.ToArray(self) -> List[Guid]
Rhino.Runtime.InteropWrappers.StdVectorGuid.__init__(self) -> None
Rhino.Runtime.InteropWrappers.StdVectorGuid.__init__(self, values: Iterable[System.Guid]) -> None
Rhino.Runtime.InteropWrappers.StdVectorOfSharedPtrToMesh.Add(self, mesh: Rhino.Geometry.Mesh, asConst: bool) -> None
Rhino.Runtime.InteropWrappers.StdVectorOfSharedPtrToMesh.ConstPointer(self) -> IntPtr
Rhino.Runtime.InteropWrappers.StdVectorOfSharedPtrToMesh.Dispose(self) -> None
Rhino.Runtime.InteropWrappers.StdVectorOfSharedPtrToMesh.Dispose(self, disposing: bool) -> None
Rhino.Runtime.InteropWrappers.StdVectorOfSharedPtrToMesh.Finalize(self) -> None
Rhino.Runtime.InteropWrappers.StdVectorOfSharedPtrToMesh.NonConstPointer(self) -> IntPtr
Rhino.Runtime.InteropWrappers.StdVectorOfSharedPtrToMesh.ToNonConstArray(self) -> List[Mesh]
Rhino.Runtime.InteropWrappers.StdVectorOfSharedPtrToMesh.__init__(self) -> None
Rhino.Runtime.InteropWrappers.StringHolder.ConstPointer(self) -> IntPtr
Rhino.Runtime.InteropWrappers.StringHolder.Dispose(self) -> None
Rhino.Runtime.InteropWrappers.StringHolder.Dispose(self, disposing: bool) -> None
Rhino.Runtime.InteropWrappers.StringHolder.Finalize(self) -> None
Rhino.Runtime.InteropWrappers.StringHolder.GetString(pStringHolder: System.IntPtr) -> str
Rhino.Runtime.InteropWrappers.StringHolder.NonConstPointer(self) -> IntPtr
Rhino.Runtime.InteropWrappers.StringHolder.ToString(self) -> str
Rhino.Runtime.InteropWrappers.StringHolder.ToStringSafe(self) -> str
Rhino.Runtime.InteropWrappers.StringHolder.__init__(self) -> None
Rhino.Runtime.InteropWrappers.StringWrapper.Dispose(self) -> None
Rhino.Runtime.InteropWrappers.StringWrapper.Finalize(self) -> None
Rhino.Runtime.InteropWrappers.StringWrapper.GetStringFromPointer(pConstON_wString: System.IntPtr) -> str
Rhino.Runtime.InteropWrappers.StringWrapper.SetString(self, s: str) -> None
Rhino.Runtime.InteropWrappers.StringWrapper.SetStringOnPointer(pON_wString: System.IntPtr, s: str) -> None
Rhino.Runtime.InteropWrappers.StringWrapper.ToString(self) -> str
Rhino.Runtime.InteropWrappers.StringWrapper.__init__(self) -> None
Rhino.Runtime.InteropWrappers.StringWrapper.__init__(self, s: str) -> None
Rhino.Runtime.LicenseStateChangedEventArgs.__init__(self, callingRhinoCommonAllowed: bool) -> None
Rhino.Runtime.NamedParametersEventArgs.Dispose(self) -> None
Rhino.Runtime.NamedParametersEventArgs.Finalize(self) -> None
Rhino.Runtime.NamedParametersEventArgs.Set(self, name: str, guidList: Iterable[System.Guid]) -> None
Rhino.Runtime.NamedParametersEventArgs.Set(self, name: str, plane: Rhino.Geometry.Plane) -> None
Rhino.Runtime.NamedParametersEventArgs.Set(self, name: str, pts: List[Rhino.Geometry.Point3d]) -> None
Rhino.Runtime.NamedParametersEventArgs.Set(self, name: str, strings: Iterable[str]) -> None
Rhino.Runtime.NamedParametersEventArgs.Set(self, name: str, value: Rhino.Geometry.Arc) -> None
Rhino.Runtime.NamedParametersEventArgs.Set(self, name: str, value: Rhino.Geometry.GeometryBase) -> None
Rhino.Runtime.NamedParametersEventArgs.Set(self, name: str, value: Rhino.Geometry.Line) -> None
Rhino.Runtime.NamedParametersEventArgs.Set(self, name: str, value: Rhino.Geometry.MeshingParameters) -> None
Rhino.Runtime.NamedParametersEventArgs.Set(self, name: str, value: Rhino.Geometry.Point3d) -> None
Rhino.Runtime.NamedParametersEventArgs.Set(self, name: str, value: Rhino.Geometry.Vector3d) -> None
Rhino.Runtime.NamedParametersEventArgs.Set(self, name: str, value: System.Drawing.Color) -> None
Rhino.Runtime.NamedParametersEventArgs.Set(self, name: str, value: System.Drawing.Point) -> None
Rhino.Runtime.NamedParametersEventArgs.Set(self, name: str, value: System.Guid) -> None
Rhino.Runtime.NamedParametersEventArgs.Set(self, name: str, value: System.UInt32) -> None
Rhino.Runtime.NamedParametersEventArgs.Set(self, name: str, value: bool) -> None
Rhino.Runtime.NamedParametersEventArgs.Set(self, name: str, value: float) -> None
Rhino.Runtime.NamedParametersEventArgs.Set(self, name: str, value: int) -> None
Rhino.Runtime.NamedParametersEventArgs.Set(self, name: str, value: str) -> None
Rhino.Runtime.NamedParametersEventArgs.Set(self, name: str, values: Iterable[Rhino.DocObjects.ObjRef]) -> None
Rhino.Runtime.NamedParametersEventArgs.Set(self, name: str, values: Iterable[Rhino.Geometry.GeometryBase]) -> None
Rhino.Runtime.NamedParametersEventArgs.Set(self, name: str, values: Iterable[System.UInt32]) -> None
Rhino.Runtime.NamedParametersEventArgs.SetWindowHandle(self, name: str, value: System.IntPtr) -> None
Rhino.Runtime.NamedParametersEventArgs.SetWindowImageHandle(self, name: str, value: System.IntPtr) -> None
Rhino.Runtime.NamedParametersEventArgs.TryGetArc(self, name: str, value: Rhino.Geometry.Arc@) -> bool
Rhino.Runtime.NamedParametersEventArgs.TryGetBool(self, name: str, value: System.Boolean@) -> bool
Rhino.Runtime.NamedParametersEventArgs.TryGetColor(self, name: str, value: System.Drawing.Color@) -> bool
Rhino.Runtime.NamedParametersEventArgs.TryGetDouble(self, name: str, value: System.Double@) -> bool
Rhino.Runtime.NamedParametersEventArgs.TryGetGeometry(self, name: str, values: Rhino.Geometry.GeometryBase[]@) -> bool
Rhino.Runtime.NamedParametersEventArgs.TryGetGuid(self, name: str, value: System.Guid@) -> bool
Rhino.Runtime.NamedParametersEventArgs.TryGetGuids(self, name: str, value: System.Guid[]@) -> bool
Rhino.Runtime.NamedParametersEventArgs.TryGetInt(self, name: str, value: System.Int32@) -> bool
Rhino.Runtime.NamedParametersEventArgs.TryGetLine(self, name: str, value: Rhino.Geometry.Line@) -> bool
Rhino.Runtime.NamedParametersEventArgs.TryGetMeshParameters(self, name: str, value: Rhino.Geometry.MeshingParameters@) -> bool
Rhino.Runtime.NamedParametersEventArgs.TryGetObjRefs(self, name: str, value: Rhino.DocObjects.ObjRef[]@) -> bool
Rhino.Runtime.NamedParametersEventArgs.TryGetPlane(self, name: str, plane: Rhino.Geometry.Plane@) -> bool
Rhino.Runtime.NamedParametersEventArgs.TryGetPoint(self, name: str, value: Rhino.Geometry.Point3d@) -> bool
Rhino.Runtime.NamedParametersEventArgs.TryGetPoint2i(self, name: str, value: System.Drawing.Point@) -> bool
Rhino.Runtime.NamedParametersEventArgs.TryGetPoints(self, name: str, pts: Rhino.Geometry.Point3d[]@) -> bool
Rhino.Runtime.NamedParametersEventArgs.TryGetRhinoObjects(self, key: str, values: Rhino.DocObjects.RhinoObject[]@) -> bool
Rhino.Runtime.NamedParametersEventArgs.TryGetString(self, name: str, value: System.String@) -> bool
Rhino.Runtime.NamedParametersEventArgs.TryGetStrings(self, name: str, value: System.String[]@) -> bool
Rhino.Runtime.NamedParametersEventArgs.TryGetUints(self, name: str, value: System.UInt32[]@) -> bool
Rhino.Runtime.NamedParametersEventArgs.TryGetUnmangedPointer(self, name: str, value: System.IntPtr@) -> bool
Rhino.Runtime.NamedParametersEventArgs.TryGetUnsignedInt(self, name: str, value: System.UInt32@) -> bool
Rhino.Runtime.NamedParametersEventArgs.TryGetVector(self, name: str, value: Rhino.Geometry.Vector3d@) -> bool
Rhino.Runtime.NamedParametersEventArgs.TryGetViewport(self, name: str, viewport: Rhino.DocObjects.ViewportInfo@) -> bool
Rhino.Runtime.NamedParametersEventArgs.TryGetWindowHandle(self, name: str, value: System.IntPtr@) -> bool
Rhino.Runtime.NamedParametersEventArgs.TryGetWindowImageHandle(self, name: str, value: System.IntPtr@) -> bool
Rhino.Runtime.NamedParametersEventArgs.__init__(self) -> None
Rhino.Runtime.NotLicensedException.__init__(self) -> None
Rhino.Runtime.NotLicensedException.__init__(self, message: str) -> None
Rhino.Runtime.NotLicensedException.__init__(self, message: str, inner: System.Exception) -> None
Rhino.Runtime.Notifications.IAssemblyRestrictedObject.Editable(self) -> bool
Rhino.Runtime.Notifications.Notification.Editable(self) -> bool
Rhino.Runtime.Notifications.Notification.ExecuteAssemblyProtectedCode(action: System.Action) -> None
Rhino.Runtime.Notifications.Notification.ExecuteAssemblyProtectedCode<TResult>(func: Func[``0]) -> TResult
Rhino.Runtime.Notifications.Notification.HideModal(self) -> None
Rhino.Runtime.Notifications.Notification.RemoveMetadata(self, key: str) -> bool
Rhino.Runtime.Notifications.Notification.ShowModal(self) -> None
Rhino.Runtime.Notifications.Notification.ToString(self) -> str
Rhino.Runtime.Notifications.Notification.__init__(self) -> None
Rhino.Runtime.Notifications.Notification.__init__(self, allowedAssemblies: Iterable[System.Reflection.Assembly]) -> None
Rhino.Runtime.Notifications.NotificationButtonClickedArgs.__init__(self, notification: Rhino.Runtime.Notifications.Notification, buttonClicked: Rhino.Runtime.Notifications.ButtonType) -> None
Rhino.Runtime.Notifications.TrulyObservableOrderedSet`1.Add(self, item: `0) -> None
Rhino.Runtime.Notifications.TrulyObservableOrderedSet`1.Clear(self) -> None
Rhino.Runtime.Notifications.TrulyObservableOrderedSet`1.Contains(self, item: `0) -> bool
Rhino.Runtime.Notifications.TrulyObservableOrderedSet`1.CopyTo(self, array: List[`0], arrayIndex: int) -> None
Rhino.Runtime.Notifications.TrulyObservableOrderedSet`1.GetEnumerator(self) -> IEnumerator<T>
Rhino.Runtime.Notifications.TrulyObservableOrderedSet`1.IndexOf(self, item: `0) -> int
Rhino.Runtime.Notifications.TrulyObservableOrderedSet`1.Insert(self, index: int, item: `0) -> None
Rhino.Runtime.Notifications.TrulyObservableOrderedSet`1.Remove(self, item: `0) -> bool
Rhino.Runtime.Notifications.TrulyObservableOrderedSet`1.RemoveAt(self, index: int) -> None
Rhino.Runtime.Notifications.TrulyObservableOrderedSet`1.Sort<TKey>(self, keySelector: Func[`0, ``0], descending: bool) -> None
Rhino.Runtime.Notifications.TrulyObservableOrderedSet`1.__init__(self) -> None
Rhino.Runtime.Notifications.TrulyObservableOrderedSet`1.__init__(self, items: Iterable[`0]) -> None
Rhino.Runtime.PythonCompiledCode.Execute(self, scope: Rhino.Runtime.PythonScript) -> None
Rhino.Runtime.PythonCompiledCode.__init__(self) -> None
Rhino.Runtime.PythonScript.AddRuntimeAssembly(assembly: System.Reflection.Assembly) -> None
Rhino.Runtime.PythonScript.Compile(self, script: str) -> PythonCompiledCode
Rhino.Runtime.PythonScript.ContainsVariable(self, name: str) -> bool
Rhino.Runtime.PythonScript.Create() -> Rhino.Runtime.PythonScript
Rhino.Runtime.PythonScript.CreateTextEditorControl(self, script: str, helpcallback: Action[str]) -> Object
Rhino.Runtime.PythonScript.EvaluateExpression(self, statements: str, expression: str) -> Object
Rhino.Runtime.PythonScript.ExecuteFile(self, path: str) -> bool
Rhino.Runtime.PythonScript.ExecuteFileInScope(self, path: str) -> bool
Rhino.Runtime.PythonScript.ExecuteScript(self, script: str) -> bool
Rhino.Runtime.PythonScript.GetSearchPaths(self) -> List[str]
Rhino.Runtime.PythonScript.GetStackTraceFromException(self, ex: System.Exception) -> str
Rhino.Runtime.PythonScript.GetVariable(self, name: str) -> Object
Rhino.Runtime.PythonScript.GetVariableNames(self) -> IEnumerable<string>
Rhino.Runtime.PythonScript.RemoveVariable(self, name: str) -> None
Rhino.Runtime.PythonScript.RuntimeAssemblies() -> List[Assembly]
Rhino.Runtime.PythonScript.SetIntellisenseVariable(self, name: str, value: Any) -> None
Rhino.Runtime.PythonScript.SetSearchPaths(self, paths: List[str]) -> None
Rhino.Runtime.PythonScript.SetVariable(self, name: str, value: Any) -> None
Rhino.Runtime.PythonScript.SetupScriptContext(self, doc: Any) -> None
Rhino.Runtime.PythonScript.__init__(self) -> None
Rhino.Runtime.RdkNotLoadedException.__init__(self) -> None
Rhino.Runtime.RhinoAccounts.IRhinoAccountsManager.ExecuteProtectedCode(self, protectedCode: Action[Rhino.Runtime.RhinoAccounts.SecretKey]) -> None
Rhino.Runtime.RhinoAccounts.IRhinoAccountsManager.ExecuteProtectedCodeAsync(self, protectedCode: Func[Rhino.Runtime.RhinoAccounts.SecretKey, System.Threading.Tasks.Task]) -> Task
Rhino.Runtime.RhinoAccounts.IRhinoAccountsManager.GetAuthTokensAsync(self, clientId: str, clientSecret: str, scope: Iterable[str], prompt: str, maxAge: Optional[int], showUI: bool, progress: IProgress[Rhino.Runtime.RhinoAccounts.RhinoAccoountsProgressInfo], secretKey: Rhino.Runtime.RhinoAccounts.SecretKey, cancellationToken: System.Threading.CancellationToken) -> IOAuth2Token>>
Rhino.Runtime.RhinoAccounts.IRhinoAccountsManager.GetAuthTokensAsync(self, clientId: str, clientSecret: str, secretKey: Rhino.Runtime.RhinoAccounts.SecretKey, cancellationToken: System.Threading.CancellationToken) -> IOAuth2Token>>
Rhino.Runtime.RhinoAccounts.IRhinoAccountsManager.RevokeAuthTokenAsync(self, oauth2Token: Rhino.Runtime.RhinoAccounts.IOAuth2Token, secretKey: Rhino.Runtime.RhinoAccounts.SecretKey, cancellationToken: System.Threading.CancellationToken) -> Task
Rhino.Runtime.RhinoAccounts.IRhinoAccountsManager.TryGetAuthTokens(self, clientId: str, scope: Iterable[str], secretKey: Rhino.Runtime.RhinoAccounts.SecretKey) -> IOAuth2Token>
Rhino.Runtime.RhinoAccounts.IRhinoAccountsManager.TryGetAuthTokens(self, clientId: str, secretKey: Rhino.Runtime.RhinoAccounts.SecretKey) -> IOAuth2Token>
Rhino.Runtime.RhinoAccounts.IRhinoAccountsManager.UpdateOpenIDConnectTokenAsync(self, currentToken: Rhino.Runtime.RhinoAccounts.IOpenIDConnectToken, oauth2Token: Rhino.Runtime.RhinoAccounts.IOAuth2Token, secretKey: Rhino.Runtime.RhinoAccounts.SecretKey, cancellationToken: System.Threading.CancellationToken) -> Task<IOpenIDConnectToken>
Rhino.Runtime.RhinoAccounts.RhinoAccoountsProgressInfo.__init__(self, state: Rhino.Runtime.RhinoAccounts.ProgressState, metadata: Dict[Any, Any], customDescription: str) -> None
Rhino.Runtime.RhinoAccounts.RhinoAccountsAuthTokenMismatchException.__init__(self, currentUsername: str, newUsername: str, innerException: System.Exception) -> None
Rhino.Runtime.RhinoAccounts.RhinoAccountsAuthTokenMismatchException.__init__(self, innerException: System.Exception) -> None
Rhino.Runtime.RhinoAccounts.RhinoAccountsAuthTokenMismatchException.__init__(self, message: str, innerException: System.Exception) -> None
Rhino.Runtime.RhinoAccounts.RhinoAccountsCannotListenException.__init__(self, innerException: System.Exception) -> None
Rhino.Runtime.RhinoAccounts.RhinoAccountsCannotListenException.__init__(self, message: str, innerException: System.Exception) -> None
Rhino.Runtime.RhinoAccounts.RhinoAccountsException.__init__(self, innerException: System.Exception) -> None
Rhino.Runtime.RhinoAccounts.RhinoAccountsException.__init__(self, message: str, innerException: System.Exception) -> None
Rhino.Runtime.RhinoAccounts.RhinoAccountsGroup.__init__(self, id: str, name: str) -> None
Rhino.Runtime.RhinoAccounts.RhinoAccountsInvalidResponseException.__init__(self, innerException: System.Exception) -> None
Rhino.Runtime.RhinoAccounts.RhinoAccountsInvalidResponseException.__init__(self, message: str, innerException: System.Exception) -> None
Rhino.Runtime.RhinoAccounts.RhinoAccountsInvalidStateException.__init__(self, innerException: System.Exception) -> None
Rhino.Runtime.RhinoAccounts.RhinoAccountsInvalidStateException.__init__(self, message: str, innerException: System.Exception) -> None
Rhino.Runtime.RhinoAccounts.RhinoAccountsInvalidTokenException.__init__(self, innerException: System.Exception) -> None
Rhino.Runtime.RhinoAccounts.RhinoAccountsInvalidTokenException.__init__(self, message: str, innerException: System.Exception) -> None
Rhino.Runtime.RhinoAccounts.RhinoAccountsManager.ExecuteProtectedCode(protectedCode: Action[Rhino.Runtime.RhinoAccounts.SecretKey]) -> None
Rhino.Runtime.RhinoAccounts.RhinoAccountsManager.ExecuteProtectedCodeAsync(protectedCode: Func[Rhino.Runtime.RhinoAccounts.SecretKey, System.Threading.Tasks.Task]) -> Task
Rhino.Runtime.RhinoAccounts.RhinoAccountsManager.GetAuthTokensAsync(clientId: str, clientSecret: str, scope: Iterable[str], prompt: str, maxAge: Optional[int], showUI: bool, progress: IProgress[Rhino.Runtime.RhinoAccounts.RhinoAccoountsProgressInfo], secretKey: Rhino.Runtime.RhinoAccounts.SecretKey, cancellationToken: System.Threading.CancellationToken) -> IOAuth2Token>>
Rhino.Runtime.RhinoAccounts.RhinoAccountsManager.GetAuthTokensAsync(clientId: str, clientSecret: str, secretKey: Rhino.Runtime.RhinoAccounts.SecretKey, cancellationToken: System.Threading.CancellationToken) -> IOAuth2Token>>
Rhino.Runtime.RhinoAccounts.RhinoAccountsManager.RevokeAuthTokenAsync(oauth2Token: Rhino.Runtime.RhinoAccounts.IOAuth2Token, secretKey: Rhino.Runtime.RhinoAccounts.SecretKey, cancellationToken: System.Threading.CancellationToken) -> Task
Rhino.Runtime.RhinoAccounts.RhinoAccountsManager.TryGetAuthTokens(clientId: str, scope: Iterable[str], secretKey: Rhino.Runtime.RhinoAccounts.SecretKey) -> IOAuth2Token>
Rhino.Runtime.RhinoAccounts.RhinoAccountsManager.TryGetAuthTokens(clientId: str, secretKey: Rhino.Runtime.RhinoAccounts.SecretKey) -> IOAuth2Token>
Rhino.Runtime.RhinoAccounts.RhinoAccountsManager.UpdateOpenIDConnectTokenAsync(currentToken: Rhino.Runtime.RhinoAccounts.IOpenIDConnectToken, oauth2Token: Rhino.Runtime.RhinoAccounts.IOAuth2Token, secretKey: Rhino.Runtime.RhinoAccounts.SecretKey, cancellationToken: System.Threading.CancellationToken) -> Task<IOpenIDConnectToken>
Rhino.Runtime.RhinoAccounts.RhinoAccountsOperationInProgressException.__init__(self, assembly: System.Reflection.Assembly, innerException: System.Exception) -> None
Rhino.Runtime.RhinoAccounts.RhinoAccountsOperationInProgressException.__init__(self, message: str, innerException: System.Exception) -> None
Rhino.Runtime.RhinoAccounts.RhinoAccountsProxyException.__init__(self, innerException: System.Exception) -> None
Rhino.Runtime.RhinoAccounts.RhinoAccountsProxyException.__init__(self, message: str, innerException: System.Exception) -> None
Rhino.Runtime.RhinoAccounts.RhinoAccountsServerException.__init__(self, innerException: System.Exception) -> None
Rhino.Runtime.RhinoAccounts.RhinoAccountsServerException.__init__(self, message: str, innerException: System.Exception) -> None
Rhino.Runtime.RhinoAccounts.RhinoAccountsServerNotReachableException.__init__(self, innerException: System.Exception) -> None
Rhino.Runtime.RhinoAccounts.RhinoAccountsServerNotReachableException.__init__(self, message: str, innerException: System.Exception) -> None
Rhino.Runtime.RhinoAccounts.SecretKey.__init__(self) -> None
Rhino.Runtime.RiskyAction.Dispose(self) -> None
Rhino.Runtime.RiskyAction.__init__(self, description: str, file: str, member: str, line: int) -> None
Rhino.Runtime.Skin.HideSplash(self) -> None
Rhino.Runtime.Skin.OnBeginLoadAtStartPlugIns(self, expectedCount: int) -> None
Rhino.Runtime.Skin.OnBeginLoadPlugIn(self, description: str) -> None
Rhino.Runtime.Skin.OnBuiltInCommandsRegistered(self) -> None
Rhino.Runtime.Skin.OnEndLoadAtStartPlugIns(self) -> None
Rhino.Runtime.Skin.OnEndLoadPlugIn(self) -> None
Rhino.Runtime.Skin.OnLicenseCheckCompleted(self) -> None
Rhino.Runtime.Skin.OnMainFrameWindowCreated(self) -> None
Rhino.Runtime.Skin.ShowHelp(self) -> None
Rhino.Runtime.Skin.ShowSplash(self) -> None
Rhino.Runtime.Skin.__init__(self) -> None
Rhino.Runtime.TextFields.Area(id: str) -> float
Rhino.Runtime.TextFields.Area(id: str, unitSystem: str) -> float
Rhino.Runtime.TextFields.BlockAttributeText(key: str, prompt: str, defaultValue: str) -> str
Rhino.Runtime.TextFields.BlockDescription(definitionNameOrId: str) -> str
Rhino.Runtime.TextFields.BlockInstanceCount(instanceDefinitionNameOrId: str) -> int
Rhino.Runtime.TextFields.BlockInstanceName(blockId: str) -> str
Rhino.Runtime.TextFields.BlockName(blockId: str) -> str
Rhino.Runtime.TextFields.CurveLength(id: str) -> float
Rhino.Runtime.TextFields.CurveLength(id: str, unitSystem: str) -> float
Rhino.Runtime.TextFields.Date() -> str
Rhino.Runtime.TextFields.Date(dateFormat: str) -> str
Rhino.Runtime.TextFields.Date(dateFormat: str, languageId: str) -> str
Rhino.Runtime.TextFields.DateModified() -> str
Rhino.Runtime.TextFields.DateModified(dateFormat: str) -> str
Rhino.Runtime.TextFields.DateModified(dateFormat: str, languageId: str) -> str
Rhino.Runtime.TextFields.DetailScale(detailId: str, scaleFormat: str) -> str
Rhino.Runtime.TextFields.DocumentText(key: str) -> str
Rhino.Runtime.TextFields.FileName() -> str
Rhino.Runtime.TextFields.FileName(options: str) -> str
Rhino.Runtime.TextFields.InstanceAttributeField.__init__(self, key: str, prompt: str, defaultValue: str) -> None
Rhino.Runtime.TextFields.LayerName(layerId: str) -> str
Rhino.Runtime.TextFields.LayoutUserText(key: str) -> str
Rhino.Runtime.TextFields.LayoutUserText(layoutId: str, key: str) -> str
Rhino.Runtime.TextFields.ModelUnits() -> str
Rhino.Runtime.TextFields.Notes() -> str
Rhino.Runtime.TextFields.NumPages() -> int
Rhino.Runtime.TextFields.ObjectLayer(id: str) -> str
Rhino.Runtime.TextFields.ObjectName() -> str
Rhino.Runtime.TextFields.ObjectName(id: str) -> str
Rhino.Runtime.TextFields.ObjectPageName(id: str) -> str
Rhino.Runtime.TextFields.ObjectPageNumber(id: str) -> int
Rhino.Runtime.TextFields.PageHeight() -> float
Rhino.Runtime.TextFields.PageName() -> str
Rhino.Runtime.TextFields.PageName(id: str) -> str
Rhino.Runtime.TextFields.PageNumber() -> int
Rhino.Runtime.TextFields.PageWidth() -> float
Rhino.Runtime.TextFields.PaperName() -> str
Rhino.Runtime.TextFields.PointCoordinate(pointId: str, axis: str) -> str
Rhino.Runtime.TextFields.TextFieldsAddLanguageSpecificTextSet(arg1: Rhino.DocObjects.InstanceDefinition) -> None
Rhino.Runtime.TextFields.TextFieldsAddLanguageSpecificTextSet(arg1: Rhino.DocObjects.TextObject) -> None
Rhino.Runtime.TextFields.TextFieldsAddLanguageSpecificTextSet(arg1: str) -> None
Rhino.Runtime.TextFields.TryFormat(text: str, doc: Rhino.RhinoDoc, result: System.String@) -> bool
Rhino.Runtime.TextFields.TryParse(text: str, doc: Rhino.RhinoDoc, result: System.Collections.Generic.List{System.String}@) -> bool
Rhino.Runtime.TextFields.UserText(id: str, key: str) -> str
Rhino.Runtime.TextFields.UserText(id: str, key: str, prompt: str) -> str
Rhino.Runtime.TextFields.UserText(id: str, key: str, prompt: str, defaultValue: str) -> str
Rhino.Runtime.TextFields.Volume(id: str) -> float
Rhino.Runtime.TextFields.Volume(id: str, opt: str) -> float
Rhino.Runtime.TextFields.Volume(id: str, unitSystem: str, allowOpenObjects: str) -> float
Rhino.Runtime.ViewCaptureWriter.Draw(self, constPtrPrintInfo: System.IntPtr, doc: Rhino.RhinoDoc) -> None
Rhino.Runtime.ViewCaptureWriter.DrawBitmap(self, bitmap: System.Drawing.Bitmap, m11: float, m12: float, m21: float, m22: float, dx: float, dy: float) -> None
Rhino.Runtime.ViewCaptureWriter.DrawCircle(self, center: System.Drawing.PointF, diameter: float, fillColor: System.Drawing.Color, arg4: Rhino.Runtime.ViewCaptureWriter.Pen) -> None
Rhino.Runtime.ViewCaptureWriter.DrawGradientHatch(self, pipeline: Rhino.Display.DisplayPipeline, hatch: Rhino.Geometry.Hatch, pattern: Rhino.DocObjects.HatchPattern, gradientColors: List[System.Drawing.Color], gradientStops: List[float], gradientPoint1: Rhino.Geometry.Point3d, gradientPoint2: Rhino.Geometry.Point3d, linearGradient: bool, boundaryColor: System.Drawing.Color, pointScale: float, effectiveHatchScale: float) -> None
Rhino.Runtime.ViewCaptureWriter.DrawPath(self, arg1: List[Rhino.Runtime.ViewCaptureWriter.PathPoint], arg2: Rhino.Runtime.ViewCaptureWriter.Pen, arg3: bool, arg4: List[Rhino.Display.ColorStop], arg5: List[Rhino.Geometry.Point2d], arg6: float) -> None
Rhino.Runtime.ViewCaptureWriter.DrawRectangle(self, rect: System.Drawing.RectangleF, fillColor: System.Drawing.Color, strokeWidth: float, strokeColor: System.Drawing.Color, cornerRadius: float) -> None
Rhino.Runtime.ViewCaptureWriter.DrawScreenText(self, text: str, textColor: System.Drawing.Color, x: float, y: float, angle: float, horizontalAlignment: int, heightPoints: float, font: Rhino.DocObjects.Font) -> None
Rhino.Runtime.ViewCaptureWriter.FillPolygon(self, points: List[System.Drawing.PointF], fillColor: System.Drawing.Color) -> None
Rhino.Runtime.ViewCaptureWriter.Flush(self) -> None
Rhino.Runtime.ViewCaptureWriter.Pen.__init__(self) -> None
Rhino.Runtime.ViewCaptureWriter.PopClipPath(self) -> None
Rhino.Runtime.ViewCaptureWriter.PushClipPath(self, arg1: List[Rhino.Runtime.ViewCaptureWriter.PathPoint]) -> None
Rhino.Runtime.ViewCaptureWriter.PushClipPath(self, rect: System.Drawing.RectangleF) -> None
Rhino.Runtime.ViewCaptureWriter.SetClipPath(self, arg1: List[Rhino.Runtime.ViewCaptureWriter.PathPoint]) -> None
Rhino.Runtime.ViewCaptureWriter.SupportsArc(self) -> bool
Rhino.Runtime.ViewCaptureWriter.__init__(self, dpi: float, pageSize: System.Drawing.Size) -> None
Rhino.Runtime.ZooClientParameters.VerifyLicenseKey(self, licenseKey: str, validationCode: str, validationCodeInstallDate: System.DateTime, gracePeriodExpired: bool, licenseData: Rhino.PlugIns.LicenseData@) -> ValidateResult
Rhino.Runtime.ZooClientParameters.VerifyPreviousVersionLicense(self, license: str, previousVersionLicense: str, errorMessage: System.String@) -> bool
Rhino.Runtime.ZooClientParameters.__init__(self, productGuid: System.Guid, licenseGuid: System.Guid, productTitle: str, productBuildType: int, capabilities: Rhino.PlugIns.LicenseCapabilities, licenseEntryTextMask: str, productPath: str, parentWindow: Any, selectedLicenseType: Rhino.Runtime.LicenseTypes, validateProductKey: Rhino.PlugIns.ValidateProductKeyDelegate, onLeaseChangedDelegate: Rhino.PlugIns.OnLeaseChangedDelegate, verifyLicenseKeyDelegate: Rhino.PlugIns.VerifyLicenseKeyDelegate, verifyPreviousVersionLicenseKeyDelegate: Rhino.PlugIns.VerifyPreviousVersionLicenseDelegate) -> None
Rhino.ScaleValue.Create(left: Rhino.LengthValue, right: Rhino.LengthValue, arg3: Rhino.ScaleValue.ScaleStringFormat) -> Rhino.ScaleValue
Rhino.ScaleValue.Create(s: str, ps: Rhino.Input.StringParserSettings) -> Rhino.ScaleValue
Rhino.ScaleValue.Dispose(self) -> None
Rhino.ScaleValue.Finalize(self) -> None
Rhino.ScaleValue.IsUnset(self) -> bool
Rhino.ScaleValue.LeftLengthValue(self) -> LengthValue
Rhino.ScaleValue.OneToOne() -> Rhino.ScaleValue
Rhino.ScaleValue.RightLengthValue(self) -> LengthValue
Rhino.ScaleValue.__init__(self) -> None
Rhino.UI.Controls.CollapsibleSectionHolderImpl.Dispose(self) -> None
Rhino.UI.Controls.CollapsibleSectionHolderImpl.Find(cpp: System.IntPtr) -> ICollapsibleSectionHolder
Rhino.UI.Controls.CollapsibleSectionHolderImpl.IsSameObject(self, cpp: System.IntPtr) -> bool
Rhino.UI.Controls.CollapsibleSectionHolderImpl.NewNativeWrapper(cpp: System.IntPtr) -> ICollapsibleSectionHolder
Rhino.UI.Controls.CollapsibleSectionHolderImpl.__init__(self, client: Rhino.UI.Controls.ICollapsibleSectionHolder) -> None
Rhino.UI.Controls.CollapsibleSectionImpl.CreateHostedSection(section: Rhino.UI.Controls.ICollapsibleSection) -> None
Rhino.UI.Controls.CollapsibleSectionImpl.Dispose(self) -> None
Rhino.UI.Controls.CollapsibleSectionImpl.Factory.__init__(self) -> None
Rhino.UI.Controls.CollapsibleSectionImpl.Finalize(self) -> None
Rhino.UI.Controls.CollapsibleSectionImpl.Find(cpp: System.IntPtr) -> ICollapsibleSection
Rhino.UI.Controls.CollapsibleSectionImpl.GetSibling(section: Rhino.UI.Controls.ICollapsibleSection, siblingSectionId: System.Guid) -> ICollapsibleSection
Rhino.UI.Controls.CollapsibleSectionImpl.GetSiblings(section: Rhino.UI.Controls.ICollapsibleSection) -> List[ICollapsibleSection]
Rhino.UI.Controls.CollapsibleSectionImpl.IsSameObject(self, cpp: System.IntPtr) -> bool
Rhino.UI.Controls.CollapsibleSectionImpl.NewNativeWrapper(cpp: System.IntPtr) -> ICollapsibleSection
Rhino.UI.Controls.CollapsibleSectionImpl.ReplaceClient(self, client: Rhino.UI.Controls.ICollapsibleSection) -> None
Rhino.UI.Controls.CollapsibleSectionImpl.__InternalSetParent(self, parent: System.IntPtr) -> None
Rhino.UI.Controls.CollapsibleSectionImpl.__init__(self, section: Rhino.UI.Controls.ICollapsibleSection) -> None
Rhino.UI.Controls.CollapsibleSectionViewModel.Commit(self, uuidDataType: System.Guid) -> None
Rhino.UI.Controls.CollapsibleSectionViewModel.Discard(self, uuidDataType: System.Guid) -> None
Rhino.UI.Controls.CollapsibleSectionViewModel.GetData(self, uuidDataType: System.Guid, bForWrite: bool, bAutoChangeBracket: bool) -> Object
Rhino.UI.Controls.CollapsibleSectionViewModel.UndoHelper(self, description: str) -> UndoRecord
Rhino.UI.Controls.CollapsibleSectionViewModel.__init__(self, section: Rhino.UI.Controls.ICollapsibleSection) -> None
Rhino.UI.Controls.ContentUI.ContentUIHolder(self) -> ICollapsibleSectionHolder
Rhino.UI.Controls.ContentUI.Dispose(self) -> None
Rhino.UI.Controls.ContentUI.EditorUuid(self) -> Guid
Rhino.UI.Controls.ContentUI.Finalize(self) -> None
Rhino.UI.Controls.ContentUI.IsCreated(self) -> bool
Rhino.UI.Controls.ContentUI.IsShown(self) -> bool
Rhino.UI.Controls.ContentUI.Uuid(self) -> Guid
Rhino.UI.Controls.ContentUI.__init__(self, pContentUI: System.IntPtr) -> None
Rhino.UI.Controls.DataSource.ProviderIds.__init__(self) -> None
Rhino.UI.Controls.Delegates.__init__(self) -> None
Rhino.UI.Controls.ExpandableContentUI.AddSection(self, pSection: Rhino.UI.Controls.ICollapsibleSection) -> None
Rhino.UI.Controls.ExpandableContentUI.AddSection(self, pSection: Rhino.UI.Controls.ICollapsibleSection, vm: Rhino.UI.Controls.IRdkViewModel) -> None
Rhino.UI.Controls.FactoryBase.Finalize(self) -> None
Rhino.UI.Controls.FactoryBase.Get(self, id: System.Guid) -> IntPtr
Rhino.UI.Controls.FactoryBase.Register() -> List[Type]
Rhino.UI.Controls.FactoryBase.Register(plugin: Rhino.PlugIns.PlugIn) -> List[Type]
Rhino.UI.Controls.ICollapsibleSection.RunScript(self, vm: Rhino.UI.Controls.IRdkViewModel) -> int
Rhino.UI.Controls.ICollapsibleSection2.EnableHeaderButton(self, index: int, bEnable: bool) -> bool
Rhino.UI.Controls.ICollapsibleSection2.NewHeaderButtonHandler(self) -> IHeaderButtonHandler
Rhino.UI.Controls.ICollapsibleSection2.OnAttachedToHolder(self, holder: Rhino.UI.Controls.ICollapsibleSectionHolder2) -> None
Rhino.UI.Controls.ICollapsibleSection2.OnAttachingToHolder(self, holder: Rhino.UI.Controls.ICollapsibleSectionHolder2) -> None
Rhino.UI.Controls.ICollapsibleSection2.OnDetachedFromHolder(self, holder: Rhino.UI.Controls.ICollapsibleSectionHolder2) -> None
Rhino.UI.Controls.ICollapsibleSection2.OnDetachingFromHolder(self, holder: Rhino.UI.Controls.ICollapsibleSectionHolder2) -> None
Rhino.UI.Controls.ICollapsibleSection2.ShowHeaderButton(self, index: int, bShow: bool) -> bool
Rhino.UI.Controls.ICollapsibleSection3.UpdateView(self, flags: System.UInt32) -> None
Rhino.UI.Controls.ICollapsibleSectionHolder.Add(self, section: Rhino.UI.Controls.ICollapsibleSection) -> None
Rhino.UI.Controls.ICollapsibleSectionHolder.ExpandSection(self, section: Rhino.UI.Controls.ICollapsibleSection, expand: bool, ensureVisible: bool) -> None
Rhino.UI.Controls.ICollapsibleSectionHolder.IsSectionExpanded(self, section: Rhino.UI.Controls.ICollapsibleSection) -> bool
Rhino.UI.Controls.ICollapsibleSectionHolder.Remove(self, section: Rhino.UI.Controls.ICollapsibleSection) -> None
Rhino.UI.Controls.ICollapsibleSectionHolder.SectionAt(self, index: int) -> ICollapsibleSection
Rhino.UI.Controls.ICollapsibleSectionHolder.UpdateAllViews(self, flags: int) -> None
Rhino.UI.Controls.ICollapsibleSectionHolder2.EnableHeaderButton(self, s: Rhino.UI.Controls.ICollapsibleSection, index: int, bEnable: bool) -> bool
Rhino.UI.Controls.ICollapsibleSectionHolder2.SetFullHeightSection(self, sec: Rhino.UI.Controls.ICollapsibleSection) -> None
Rhino.UI.Controls.ICollapsibleSectionHolder2.ShowHeaderButton(self, s: Rhino.UI.Controls.ICollapsibleSection, index: int, bShow: bool) -> bool
Rhino.UI.Controls.IHeaderButtonHandler.ButtonDetails(self, index: int, iconOut: System.Drawing.Bitmap@, sToolTipOut: System.String@) -> bool
Rhino.UI.Controls.IHeaderButtonHandler.ButtonRect(self, index: int, rectHeader: System.Drawing.Rectangle) -> Rectangle
Rhino.UI.Controls.IHeaderButtonHandler.DeleteThis(self) -> None
Rhino.UI.Controls.IHeaderButtonHandler.OnButtonClicked(self, index: int) -> bool
Rhino.UI.Controls.IRdkViewModel.Commit(self, uuidDataType: System.Guid) -> None
Rhino.UI.Controls.IRdkViewModel.Discard(self, uuidDataType: System.Guid) -> None
Rhino.UI.Controls.IRdkViewModel.GetData(self, uuidDataType: System.Guid, bForWrite: bool, bAutoChangeBracket: bool) -> Object
Rhino.UI.Controls.IWindow.Move(self, pos: System.Drawing.Rectangle, bRepaint: bool, bRepaintBorder: bool) -> None
Rhino.UI.Controls.InternalRdkViewModelFactory.__init__(self) -> None
Rhino.UI.Controls.ThumbnailUI.IRhRdkContentThumbnail.ChildContent(self) -> RenderContent
Rhino.UI.Controls.ThumbnailUI.IRhRdkContentThumbnail.GroupId(self) -> Guid
Rhino.UI.Controls.ThumbnailUI.IRhRdkContentThumbnail.TopLevelContent(self) -> RenderContent
Rhino.UI.Controls.ThumbnailUI.IRhRdkThumbnail.Dib(self, dibOut: System.Drawing.Bitmap@) -> None
Rhino.UI.Controls.ThumbnailUI.IRhRdkThumbnail.GetDib(self) -> Bitmap
Rhino.UI.Controls.ThumbnailUI.IRhRdkThumbnail.GetDisplayRect(self, rectOut: System.Drawing.RectangleF@) -> None
Rhino.UI.Controls.ThumbnailUI.IRhRdkThumbnail.Id(self) -> Guid
Rhino.UI.Controls.ThumbnailUI.IRhRdkThumbnail.IsHot(self) -> bool
Rhino.UI.Controls.ThumbnailUI.IRhRdkThumbnail.IsSelected(self) -> bool
Rhino.UI.Controls.ThumbnailUI.IRhRdkThumbnail.Label(self) -> str
Rhino.UI.Controls.ThumbnailUI.IRhRdkThumbnailList.Add(self, t: Rhino.UI.Controls.ThumbnailUI.Thumbnail) -> None
Rhino.UI.Controls.ThumbnailUI.IRhRdkThumbnailList.Clear(self) -> None
Rhino.UI.Controls.ThumbnailUI.IRhRdkThumbnailList.Get(self, u: System.Guid@) -> IRhRdkThumbnail
Rhino.UI.Controls.ThumbnailUI.IRhRdkThumbnailList.GetGridMetrics(self, w: System.Int32@, h: System.Int32@, ox: System.Int32@, oy: System.Int32@) -> None
Rhino.UI.Controls.ThumbnailUI.IRhRdkThumbnailList.GetSize(self) -> IRhRdkContentThumbnailList_Sizes
Rhino.UI.Controls.ThumbnailUI.IRhRdkThumbnailList.GetStatisticsHeaderHeight(self) -> None
Rhino.UI.Controls.ThumbnailUI.IRhRdkThumbnailList.Mode(self) -> IRhRdkThumbnailList_Modes
Rhino.UI.Controls.ThumbnailUI.IRhRdkThumbnailList.SetClientText(self, w: str) -> None
Rhino.UI.Controls.ThumbnailUI.IRhRdkThumbnailList.SetCustomBitmapSize(self, w: int, h: int) -> None
Rhino.UI.Controls.ThumbnailUI.IRhRdkThumbnailList.SetMode(self, m: Rhino.UI.Controls.ThumbnailUI.IRhRdkThumbnailList_Modes, b: bool) -> None
Rhino.UI.Controls.ThumbnailUI.IRhRdkThumbnailList.SetShowLabels(self, b: bool) -> None
Rhino.UI.Controls.ThumbnailUI.IRhRdkThumbnailList.Shape(self) -> IRhRdkThumbnailList_Shapes
Rhino.UI.Controls.ThumbnailUI.IRhRdkThumbnailList.ShowLabels(self) -> bool
Rhino.UI.Controls.ThumbnailUI.IRhRdkThumbnailList.UUID(self) -> Guid
Rhino.UI.Controls.ThumbnailUI.ThumbData.GetPreviewHeigth(thumb_size: Rhino.Render.DataSources.Sizes, shape: Rhino.Render.DataSources.Shapes) -> int
Rhino.UI.Controls.ThumbnailUI.ThumbData.GetPreviewWidth(thumb_size: Rhino.Render.DataSources.Sizes, shape: Rhino.Render.DataSources.Shapes) -> int
Rhino.UI.Controls.ThumbnailUI.ThumbData.__init__(self) -> None
Rhino.UI.Controls.ThumbnailUI.Thumbnail.Dib(self, dibOut: System.Drawing.Bitmap@) -> None
Rhino.UI.Controls.ThumbnailUI.Thumbnail.Dispose(self) -> None
Rhino.UI.Controls.ThumbnailUI.Thumbnail.Finalize(self) -> None
Rhino.UI.Controls.ThumbnailUI.Thumbnail.GetDib(self) -> Bitmap
Rhino.UI.Controls.ThumbnailUI.Thumbnail.GetDisplayRect(self, rectOut: System.Drawing.RectangleF@) -> None
Rhino.UI.Controls.ThumbnailUI.Thumbnail.Id(self) -> Guid
Rhino.UI.Controls.ThumbnailUI.Thumbnail.IsHot(self) -> bool
Rhino.UI.Controls.ThumbnailUI.Thumbnail.IsSelected(self) -> bool
Rhino.UI.Controls.ThumbnailUI.Thumbnail.Label(self) -> str
Rhino.UI.Controls.ThumbnailUI.Thumbnail.__init__(self, pRdkThumbnail: System.IntPtr) -> None
Rhino.UI.Controls.ThumbnailUI.ThumbnailViewModelFactory.Get(self, id: System.Guid) -> IntPtr
Rhino.UI.Controls.ThumbnailUI.ThumbnailViewModelFactory.__init__(self) -> None
Rhino.UI.Controls.UndoRecord.Dispose(self) -> None
Rhino.UI.Controls.UndoRecord.Dispose(self, disposing: bool) -> None
Rhino.UI.Controls.UndoRecord.Finalize(self) -> None
Rhino.UI.Controls.UndoRecord.__init__(self, description: str, viewModel: Rhino.UI.Controls.IRdkViewModel) -> None
Rhino.UI.Dialogs.KillSplash() -> None
Rhino.UI.Dialogs.SetCustomColorDialog(handler: EventHandler[Rhino.UI.GetColorEventArgs]) -> None
Rhino.UI.Dialogs.ShowAboutDialog(forceSimpleDialog: bool) -> None
Rhino.UI.Dialogs.ShowCheckListBox(title: str, message: str, items: System.Collections.IList, checkState: List[bool]) -> List[bool]
Rhino.UI.Dialogs.ShowColorDialog(color: Rhino.Display.Color4f@, allowAlpha: bool) -> bool
Rhino.UI.Dialogs.ShowColorDialog(color: System.Drawing.Color@) -> bool
Rhino.UI.Dialogs.ShowColorDialog(color: System.Drawing.Color@, includeButtonColors: bool, dialogTitle: str) -> bool
Rhino.UI.Dialogs.ShowColorDialog(color: System.Drawing.Color@, includeButtonColors: bool, dialogTitle: str, namedColorList: Rhino.UI.NamedColorList) -> bool
Rhino.UI.Dialogs.ShowColorDialog(parent: Any, color: Rhino.Display.Color4f@, allowAlpha: bool) -> bool
Rhino.UI.Dialogs.ShowColorDialog(parent: Any, color: Rhino.Display.Color4f@, allowAlpha: bool, arg4: Rhino.UI.Dialogs.OnColorChangedEvent) -> bool
Rhino.UI.Dialogs.ShowColorDialog(parent: Any, color: Rhino.Display.Color4f@, allowAlpha: bool, namedColorList: Rhino.UI.NamedColorList, arg5: Rhino.UI.Dialogs.OnColorChangedEvent) -> bool
Rhino.UI.Dialogs.ShowComboListBox(title: str, message: str, items: System.Collections.IList) -> Object
Rhino.UI.Dialogs.ShowContextMenu(items: Iterable[str], screenPoint: System.Drawing.Point, modes: Iterable[int]) -> int
Rhino.UI.Dialogs.ShowEditBox(title: str, message: str, defaultText: str, multiline: bool, text: System.String@) -> bool
Rhino.UI.Dialogs.ShowLayerMaterialDialog(doc: Rhino.RhinoDoc, layerIndices: Iterable[int]) -> bool
Rhino.UI.Dialogs.ShowLineTypes(title: str, message: str, doc: Rhino.RhinoDoc) -> Object
Rhino.UI.Dialogs.ShowLineTypes(title: str, message: str, doc: Rhino.RhinoDoc, selectedLineTypeId: System.Guid) -> Guid
Rhino.UI.Dialogs.ShowListBox(title: str, message: str, items: System.Collections.IList) -> Object
Rhino.UI.Dialogs.ShowListBox(title: str, message: str, items: System.Collections.IList, selectedItem: Any) -> Object
Rhino.UI.Dialogs.ShowMessage(message: str, title: str) -> ShowMessageResult
Rhino.UI.Dialogs.ShowMessage(message: str, title: str, buttons: Rhino.UI.ShowMessageButton, icon: Rhino.UI.ShowMessageIcon) -> ShowMessageResult
Rhino.UI.Dialogs.ShowMessage(parent: Any, message: str, title: str, buttons: Rhino.UI.ShowMessageButton, icon: Rhino.UI.ShowMessageIcon, defaultButton: Rhino.UI.ShowMessageDefaultButton, options: Rhino.UI.ShowMessageOptions, mode: Rhino.UI.ShowMessageMode) -> ShowMessageResult
Rhino.UI.Dialogs.ShowMultiListBox(title: str, message: str, items: List[str], defaults: List[str]) -> List[str]
Rhino.UI.Dialogs.ShowNumberBox(title: str, message: str, number: System.Double@) -> bool
Rhino.UI.Dialogs.ShowNumberBox(title: str, message: str, number: System.Double@, minimum: float, maximum: float) -> bool
Rhino.UI.Dialogs.ShowPrintWidths(title: str, message: str) -> float
Rhino.UI.Dialogs.ShowPrintWidths(title: str, message: str, selectedWidth: float) -> float
Rhino.UI.Dialogs.ShowPropertyListBox(title: str, message: str, items: List[KeyValuePair[str, str]]) -> List[str]
Rhino.UI.Dialogs.ShowPropertyListBox(title: str, message: str, items: System.Collections.IList, values: List[str]) -> List[str]
Rhino.UI.Dialogs.ShowSelectLayerDialog(layerIndex: System.Int32@, dialogTitle: str, showNewLayerButton: bool, showSetCurrentButton: bool, initialSetCurrentState: System.Boolean@) -> bool
Rhino.UI.Dialogs.ShowSelectLinetypeDialog(linetypeIndex: System.Int32@, displayByLayer: bool) -> bool
Rhino.UI.Dialogs.ShowSelectMultipleLayersDialog(defaultLayerIndices: Iterable[int], dialogTitle: str, showNewLayerButton: bool, layerIndices: System.Int32[]@) -> bool
Rhino.UI.Dialogs.ShowSunDialog(sun: Rhino.Render.Sun) -> bool
Rhino.UI.Dialogs.ShowTextDialog(message: str, title: str) -> None
Rhino.UI.Dialogs.[ObsoleteAttribute(self, arg1: System.Windows.Forms.IWin32Window, arg2: Rhino.Display.Color4f@, arg3: bool) -> None
Rhino.UI.DrawingUtilities.BitmapFromIconResource(resourceName: str, assembly: System.Reflection.Assembly) -> Bitmap
Rhino.UI.DrawingUtilities.BitmapFromIconResource(resourceName: str, bitmapSize: System.Drawing.Size, assembly: System.Reflection.Assembly) -> Bitmap
Rhino.UI.DrawingUtilities.BitmapFromSvg(svg: str, width: int, height: int) -> Bitmap
Rhino.UI.DrawingUtilities.BitmapFromSvg(svg: str, width: int, height: int, adjustForDarkMode: bool) -> Bitmap
Rhino.UI.DrawingUtilities.CreateCurvePreviewGeometry(curve: Rhino.Geometry.Curve, linetype: Rhino.DocObjects.Linetype, width: int, height: int) -> List<Point2f[]>
Rhino.UI.DrawingUtilities.CreateMeshPreviewImage(doc: Rhino.RhinoDoc, meshes: Iterable[Rhino.Geometry.Mesh], colors: Iterable[System.Drawing.Color], size: System.Drawing.Size) -> Bitmap
Rhino.UI.DrawingUtilities.CreateMeshPreviewImage(mesh: Rhino.Geometry.Mesh, color: System.Drawing.Color, size: System.Drawing.Size) -> Bitmap
Rhino.UI.DrawingUtilities.CreateMeshPreviewImage(meshes: Iterable[Rhino.Geometry.Mesh], colors: Iterable[System.Drawing.Color], size: System.Drawing.Size) -> Bitmap
Rhino.UI.DrawingUtilities.DarkModeConvertPixel(r: System.Byte@, g: System.Byte@, b: System.Byte@) -> None
Rhino.UI.DrawingUtilities.DarkModeConvertPixels(rgbaBytes: System.Byte[]@) -> None
Rhino.UI.DrawingUtilities.IconFromResource(resourceName: str, assembly: System.Reflection.Assembly) -> Icon
Rhino.UI.DrawingUtilities.IconFromResource(resourceName: str, size: System.Drawing.Size, assembly: System.Reflection.Assembly) -> Icon
Rhino.UI.DrawingUtilities.ImageFromResource(resourceName: str, assembly: System.Reflection.Assembly) -> Image
Rhino.UI.DrawingUtilities.LoadBitmapWithScaleDown(iconName: str, sizeDesired: int, assembly: System.Reflection.Assembly) -> Bitmap
Rhino.UI.DrawingUtilities.LoadIconWithScaleDown(iconName: str, sizeDesired: int, assembly: System.Reflection.Assembly) -> Icon
Rhino.UI.DrawingUtilities.MakeArgb(a: System.Byte, r: System.Byte, g: System.Byte, b: System.Byte) -> int
Rhino.UI.DrawingUtilities.PixelsFromSvg(svg: str, width: int, height: int, premultiplyAlpha: bool, backgroundColor: System.Drawing.Color) -> List[byte]
Rhino.UI.DrawingUtilities.SvgToRhinoDibIntPtr(svg: str, width: int, height: int, adjustForDarkMode: bool, pRhinoDib: System.IntPtr) -> None
Rhino.UI.Fonts.GetUiFont(arg1: Rhino.UI.Fonts.Style, arg2: Rhino.UI.Fonts.Size) -> Font
Rhino.UI.Fonts.__init__(self) -> None
Rhino.UI.Gumball.GumballAppearanceSettings.__init__(self) -> None
Rhino.UI.Gumball.GumballDisplayConduit.CheckShiftAndControlKeys(self) -> None
Rhino.UI.Gumball.GumballDisplayConduit.Dispose(self) -> None
Rhino.UI.Gumball.GumballDisplayConduit.Dispose(self, disposing: bool) -> None
Rhino.UI.Gumball.GumballDisplayConduit.Finalize(self) -> None
Rhino.UI.Gumball.GumballDisplayConduit.PickGumball(self, pickContext: Rhino.Input.Custom.PickContext, getPoint: Rhino.Input.Custom.GetPoint) -> bool
Rhino.UI.Gumball.GumballDisplayConduit.SetBaseGumball(self, gumball: Rhino.UI.Gumball.GumballObject) -> None
Rhino.UI.Gumball.GumballDisplayConduit.SetBaseGumball(self, gumball: Rhino.UI.Gumball.GumballObject, appearanceSettings: Rhino.UI.Gumball.GumballAppearanceSettings) -> None
Rhino.UI.Gumball.GumballDisplayConduit.UpdateGumball(self, frame: Rhino.Geometry.Plane) -> bool
Rhino.UI.Gumball.GumballDisplayConduit.UpdateGumball(self, point: Rhino.Geometry.Point3d, worldLine: Rhino.Geometry.Line) -> bool
Rhino.UI.Gumball.GumballDisplayConduit.__init__(self) -> None
Rhino.UI.Gumball.GumballDisplayConduit.__init__(self, space: Rhino.DocObjects.ActiveSpace) -> None
Rhino.UI.Gumball.GumballObject.Dispose(self) -> None
Rhino.UI.Gumball.GumballObject.Dispose(self, disposing: bool) -> None
Rhino.UI.Gumball.GumballObject.Finalize(self) -> None
Rhino.UI.Gumball.GumballObject.SetFromArc(self, arc: Rhino.Geometry.Arc) -> bool
Rhino.UI.Gumball.GumballObject.SetFromBoundingBox(self, boundingBox: Rhino.Geometry.BoundingBox) -> bool
Rhino.UI.Gumball.GumballObject.SetFromBoundingBox(self, frame: Rhino.Geometry.Plane, frameBoundingBox: Rhino.Geometry.BoundingBox) -> bool
Rhino.UI.Gumball.GumballObject.SetFromCircle(self, circle: Rhino.Geometry.Circle) -> bool
Rhino.UI.Gumball.GumballObject.SetFromCurve(self, curve: Rhino.Geometry.Curve) -> bool
Rhino.UI.Gumball.GumballObject.SetFromEllipse(self, ellipse: Rhino.Geometry.Ellipse) -> bool
Rhino.UI.Gumball.GumballObject.SetFromExtrusion(self, extrusion: Rhino.Geometry.Extrusion) -> bool
Rhino.UI.Gumball.GumballObject.SetFromHatch(self, hatch: Rhino.Geometry.Hatch) -> bool
Rhino.UI.Gumball.GumballObject.SetFromLight(self, light: Rhino.Geometry.Light) -> bool
Rhino.UI.Gumball.GumballObject.SetFromLine(self, line: Rhino.Geometry.Line) -> bool
Rhino.UI.Gumball.GumballObject.SetFromPlane(self, plane: Rhino.Geometry.Plane) -> bool
Rhino.UI.Gumball.GumballObject.__init__(self) -> None
Rhino.UI.Gumball.GumballPickResult.SetToDefault(self) -> None
Rhino.UI.IDialogService.ObjectToWindowHandle(self, window: Any, useMainRhinoWindowWhenNull: bool) -> IntPtr
Rhino.UI.IDialogService.ShowColorDialog(self, parent: Any, color: Rhino.Display.Color4f@, allowAlpha: bool, arg4: Rhino.UI.Dialogs.OnColorChangedEvent) -> bool
Rhino.UI.IDialogService.ShowMultiListBox(self, title: str, message: str, items: List[str], defaults: List[str]) -> List[str]
Rhino.UI.IDialogService.WrapAsIWin32Window(self, handle: System.IntPtr) -> Object
Rhino.UI.ILocalizationService.LocalizeCommandName(self, assembly: System.Reflection.Assembly, languageId: int, english: str) -> str
Rhino.UI.ILocalizationService.LocalizeDialogItem(self, assembly: System.Reflection.Assembly, languageId: int, key: str, english: str) -> str
Rhino.UI.ILocalizationService.LocalizeForm(self, assembly: System.Reflection.Assembly, languageId: int, formOrUserControl: Any) -> None
Rhino.UI.ILocalizationService.LocalizeString(self, assembly: System.Reflection.Assembly, languageId: int, english: str, contextId: int) -> str
Rhino.UI.IPanel.PanelClosing(self, documentSerialNumber: System.UInt32, onCloseDocument: bool) -> None
Rhino.UI.IPanel.PanelHidden(self, documentSerialNumber: System.UInt32, reason: Rhino.UI.ShowPanelReason) -> None
Rhino.UI.IPanel.PanelShown(self, documentSerialNumber: System.UInt32, reason: Rhino.UI.ShowPanelReason) -> None
Rhino.UI.IPanelsService.CreateDockBar(self, options: Any) -> bool
Rhino.UI.IPanelsService.DestroyNativeWindow(self, host: Any, nativeObject: Any, disposeOfNativeObject: bool) -> None
Rhino.UI.IPanelsService.DockBarIdInUse(self, barId: System.Guid) -> bool
Rhino.UI.IPanelsService.DockBarIsVisible(self, barId: System.Guid) -> bool
Rhino.UI.IPanelsService.FactoryResetSettings(self) -> None
Rhino.UI.IPanelsService.Float(self, barId: System.Guid, point: System.Drawing.Point) -> bool
Rhino.UI.IPanelsService.ResizeFloating(self, barId: System.Guid, size: System.Drawing.Size) -> bool
Rhino.UI.IPanelsService.SetF1Hook(self, nativeObject: Any, hook: System.EventHandler) -> None
Rhino.UI.IPanelsService.ShowDockBar(self, barId: System.Guid, show: bool) -> bool
Rhino.UI.IPanelsService.StartDraggingDockBar(self, barId: System.Guid, mouseDownPoint: System.Drawing.Point, screenStartPoint: System.Drawing.Point) -> bool
Rhino.UI.IPanelsService.SupportedType(self, type: System.Type, exceptionMessage: System.String@) -> bool
Rhino.UI.IPanelsService.ToggleDocking(self, barId: System.Guid) -> bool
Rhino.UI.IPanelsService.UnhookDeleteAndDestroyDockBar(self, id: System.Guid) -> bool
Rhino.UI.IRhinoUiDialogService.DetectColorScheme(self, defaultLightMode: System.Boolean@, defaultDarkMode: System.Boolean@) -> None
Rhino.UI.IRhinoUiDialogService.IconFromResourceId(self, iconAssembly: System.Reflection.Assembly, iconResourceId: str) -> Icon
Rhino.UI.IRhinoUiDialogService.SetToDefaultColorScheme(self, dark: bool) -> bool
Rhino.UI.IRhinoUiDialogService.ShowCheckListBox(self, title: str, message: str, items: System.Collections.IList, checkState: List[bool]) -> List[bool]
Rhino.UI.IRhinoUiDialogService.ShowComboListBox(self, title: str, message: str, items: System.Collections.IList) -> Object
Rhino.UI.IRhinoUiDialogService.ShowEditBox(self, title: str, message: str, defaultText: str, multiline: bool, text: System.String@) -> bool
Rhino.UI.IRhinoUiDialogService.ShowLineTypes(self, title: str, message: str, doc: Rhino.RhinoDoc) -> Object
Rhino.UI.IRhinoUiDialogService.ShowLineTypes(self, title: str, message: str, doc: Rhino.RhinoDoc, selectedLinetypeId: System.Guid) -> Guid
Rhino.UI.IRhinoUiDialogService.ShowListBox(self, title: str, message: str, items: System.Collections.IList, selectedItem: Any) -> Object
Rhino.UI.IRhinoUiDialogService.ShowMultiListBox(self, items: List[str], message: str, title: str, defaults: List[str]) -> List[str]
Rhino.UI.IRhinoUiDialogService.ShowNumberBox(self, title: str, message: str, number: System.Double@, minimum: float, maximum: float) -> bool
Rhino.UI.IRhinoUiDialogService.ShowPopupMenu(self, arrItems: List[str], arrModes: List[int], screenPointX: Optional[int], screenPointY: Optional[int]) -> int
Rhino.UI.IRhinoUiDialogService.ShowPrintWidths(self, title: str, message: str) -> float
Rhino.UI.IRhinoUiDialogService.ShowPrintWidths(self, title: str, message: str, selectedWidth: float) -> float
Rhino.UI.IRhinoUiDialogService.ShowPropertyListBox(self, title: str, message: str, items: List[KeyValuePair[str, str]]) -> List[str]
Rhino.UI.IRhinoUiDialogService.ShowPropertyListBox(self, title: str, message: str, items: System.Collections.IList, values: List[str]) -> List[str]
Rhino.UI.IStackedDialogPageService.GetImageHandle(self, icon: System.Drawing.Icon, canBeNull: bool) -> IntPtr
Rhino.UI.IStackedDialogPageService.GetImageHandle(self, image: System.Drawing.Image, canBeNull: bool) -> IntPtr
Rhino.UI.IStackedDialogPageService.GetNativePageWindow(self, nativeWindowObject: Any, isRhinoPanel: bool, applyPanelStyles: bool, host: System.Object@) -> IntPtr
Rhino.UI.IStackedDialogPageService.GetNativePageWindow(self, pageObject: Any, isRhinoPanel: bool, applyPanelStyles: bool, nativeWindowObject: System.Object@, host: System.Object@) -> IntPtr
Rhino.UI.IStackedDialogPageService.NativeHandle(self, host: Any) -> IntPtr
Rhino.UI.IStackedDialogPageService.RedrawPageControl(self, pageControl: Any) -> None
Rhino.UI.IStackedDialogPageService.SetNativeParent(self, hwndParent: System.IntPtr, host: Any) -> bool
Rhino.UI.IStackedDialogPageService.TryGetControlMinimumSize(self, controlObject: Any, size: System.Drawing.SizeF@) -> bool
Rhino.UI.LOC.COMMANDNAME(english: str) -> str
Rhino.UI.LOC.CON(english: str) -> LocalizeStringPair
Rhino.UI.LOC.CON(english: str, assemblyFromObject: Any) -> LocalizeStringPair
Rhino.UI.LOC.COV(english: str) -> LocalizeStringPair
Rhino.UI.LOC.COV(english: str, assemblyFromObject: Any) -> LocalizeStringPair
Rhino.UI.LOC.STR(english: str) -> str
Rhino.UI.LOC.STR(english: str, assemblyOrObject: Any) -> str
Rhino.UI.LOC.[ObsoleteAttribute(self, arg1: str, true: int) -> None
Rhino.UI.LOC.[ObsoleteAttribute(self, arg1: str, true: int) -> None
Rhino.UI.Localization.FormatArea(area: float, units: Rhino.UnitSystem, dimStyle: Rhino.DocObjects.DimensionStyle, alternate: bool) -> str
Rhino.UI.Localization.FormatDistanceAndTolerance(distance: float, units: Rhino.UnitSystem, dimStyle: Rhino.DocObjects.DimensionStyle, alternate: bool) -> str
Rhino.UI.Localization.FormatNumber(x: float) -> str
Rhino.UI.Localization.FormatNumber(x: float, units: Rhino.UnitSystem, mode: Rhino.UI.DistanceDisplayMode, precision: int, appendUnitSystemName: bool) -> str
Rhino.UI.Localization.FormatVolume(volume: float, units: Rhino.UnitSystem, dimStyle: Rhino.DocObjects.DimensionStyle, alternate: bool) -> str
Rhino.UI.Localization.GetLanguages(ids: Rhino.Runtime.InteropWrappers.SimpleArrayInt@, names: Rhino.Runtime.InteropWrappers.ClassArrayString@) -> bool
Rhino.UI.Localization.LocalizeCommandName(english: str) -> str
Rhino.UI.Localization.LocalizeCommandName(english: str, assemblyOrObject: Any) -> str
Rhino.UI.Localization.LocalizeCommandOptionName(english: str, assemblyOrObject: Any, contextId: int) -> LocalizeStringPair
Rhino.UI.Localization.LocalizeCommandOptionName(english: str, contextId: int) -> LocalizeStringPair
Rhino.UI.Localization.LocalizeCommandOptionValue(english: str, assemblyOrObject: Any, contextId: int) -> LocalizeStringPair
Rhino.UI.Localization.LocalizeCommandOptionValue(english: str, contextId: int) -> LocalizeStringPair
Rhino.UI.Localization.LocalizeDialogItem(assemblyOrObject: Any, key: str, english: str) -> str
Rhino.UI.Localization.LocalizeForm(formOrUserControl: Any) -> None
Rhino.UI.Localization.LocalizeString(english: str, assemblyOrObject: Any, contextId: int) -> str
Rhino.UI.Localization.LocalizeString(english: str, contextId: int) -> str
Rhino.UI.Localization.SetLanguageId(id: int) -> bool
Rhino.UI.Localization.UnitSystemName(units: Rhino.UnitSystem, capitalize: bool, singular: bool, abbreviate: bool) -> str
Rhino.UI.Localization.[ObsoleteAttribute(self, arg1: str, arg2: int, arg3: int) -> None
Rhino.UI.Localization.[ObsoleteAttribute(self, arg1: str, arg2: int, arg3: int) -> None
Rhino.UI.LocalizeStringPair.ToString(self) -> str
Rhino.UI.LocalizeStringPair.__init__(self, english: str, local: str) -> None
Rhino.UI.LocalizeStringPair.string(lcp: Rhino.UI.LocalizeStringPair) -> operator
Rhino.UI.MouseCallback.OnEndMouseDown(self, e: Rhino.UI.MouseCallbackEventArgs) -> None
Rhino.UI.MouseCallback.OnEndMouseMove(self, e: Rhino.UI.MouseCallbackEventArgs) -> None
Rhino.UI.MouseCallback.OnEndMouseUp(self, e: Rhino.UI.MouseCallbackEventArgs) -> None
Rhino.UI.MouseCallback.OnMouseDoubleClick(self, e: Rhino.UI.MouseCallbackEventArgs) -> None
Rhino.UI.MouseCallback.OnMouseDown(self, e: Rhino.UI.MouseCallbackEventArgs) -> None
Rhino.UI.MouseCallback.OnMouseEnter(self, e: Rhino.UI.MouseCallbackEventArgs) -> None
Rhino.UI.MouseCallback.OnMouseHover(self, e: Rhino.UI.MouseCallbackEventArgs) -> None
Rhino.UI.MouseCallback.OnMouseLeave(self, e: Rhino.UI.MouseCallbackEventArgs) -> None
Rhino.UI.MouseCallback.OnMouseMove(self, e: Rhino.UI.MouseCallbackEventArgs) -> None
Rhino.UI.MouseCallback.OnMouseUp(self, e: Rhino.UI.MouseCallbackEventArgs) -> None
Rhino.UI.MouseCallback.__init__(self) -> None
Rhino.UI.MouseCallbackEventArgs.IsOverGumball(self) -> GumballMode
Rhino.UI.MouseCursor.SetToolTip(tooltip: str) -> None
Rhino.UI.NamedColor.__init__(self, name: str, color: System.Drawing.Color) -> None
Rhino.UI.NamedColorList.__init__(self, name: str) -> None
Rhino.UI.NamedColorList.__init__(self, name: str, entries: Iterable[Rhino.UI.NamedColor]) -> None
Rhino.UI.ObjectPropertiesPage.AnySelectedObject<T>(self) -> bool
Rhino.UI.ObjectPropertiesPage.AnySelectedObject<T>(self, allMustMatch: bool) -> bool
Rhino.UI.ObjectPropertiesPage.GetSelectedObjects(self, filter: Rhino.DocObjects.ObjectType) -> List[RhinoObject]
Rhino.UI.ObjectPropertiesPage.GetSelectedObjects<T>(self) -> List[T]
Rhino.UI.ObjectPropertiesPage.ModifyPage(self, callbackAction: Action[Rhino.UI.ObjectPropertiesPageEventArgs]) -> None
Rhino.UI.ObjectPropertiesPage.OnActivate(self, active: bool) -> bool
Rhino.UI.ObjectPropertiesPage.OnCreateParent(self, hwndParent: System.IntPtr) -> None
Rhino.UI.ObjectPropertiesPage.OnHelp(self) -> None
Rhino.UI.ObjectPropertiesPage.OnSizeParent(self, width: int, height: int) -> None
Rhino.UI.ObjectPropertiesPage.PageIcon(self, sizeInPixels: System.Drawing.Size) -> Icon
Rhino.UI.ObjectPropertiesPage.RunScript(self, e: Rhino.UI.ObjectPropertiesPageEventArgs) -> Result
Rhino.UI.ObjectPropertiesPage.ShouldDisplay(self, e: Rhino.UI.ObjectPropertiesPageEventArgs) -> bool
Rhino.UI.ObjectPropertiesPage.UpdatePage(self, e: Rhino.UI.ObjectPropertiesPageEventArgs) -> None
Rhino.UI.ObjectPropertiesPage.[ObsoleteAttribute(self, arg1: Rhino.DocObjects.RhinoObject) -> None
Rhino.UI.ObjectPropertiesPage.[ObsoleteAttribute(self, arg1: Rhino.RhinoDoc, arg2: List[Rhino.DocObjects.RhinoObject]) -> None
Rhino.UI.ObjectPropertiesPage.[ObsoleteAttribute(self, rhObj: Rhino.DocObjects.RhinoObject) -> None
Rhino.UI.ObjectPropertiesPage.__init__(self) -> None
Rhino.UI.ObjectPropertiesPageCollection.Add(self, page: Rhino.UI.ObjectPropertiesPage) -> None
Rhino.UI.ObjectPropertiesPageEventArgs.GetObjects(self, filter: Rhino.DocObjects.ObjectType) -> List[RhinoObject]
Rhino.UI.ObjectPropertiesPageEventArgs.GetObjects<T>(self) -> List[T]
Rhino.UI.ObjectPropertiesPageEventArgs.IncludesObjectsType(self, objectTypes: Rhino.DocObjects.ObjectType) -> bool
Rhino.UI.ObjectPropertiesPageEventArgs.IncludesObjectsType(self, objectTypes: Rhino.DocObjects.ObjectType, allMustMatch: bool) -> bool
Rhino.UI.ObjectPropertiesPageEventArgs.IncludesObjectsType<T>(self) -> bool
Rhino.UI.ObjectPropertiesPageEventArgs.IncludesObjectsType<T>(self, allMustMatch: bool) -> bool
Rhino.UI.ObjectPropertiesPageEventArgs.__init__(self, page: Rhino.UI.ObjectPropertiesPage) -> None
Rhino.UI.OpenFileDialog.ShowOpenDialog(self) -> bool
Rhino.UI.OpenFileDialog.[ObsoleteAttribute(self) -> None
Rhino.UI.OpenFileDialog.__init__(self) -> None
Rhino.UI.OptionsDialogPage.RunScript(self, doc: Rhino.RhinoDoc, mode: Rhino.Commands.RunMode) -> Result
Rhino.UI.OptionsDialogPage.__init__(self, englishPageTitle: str) -> None
Rhino.UI.PanelEventArgs.__init__(self, panelId: System.Guid, documentSerialNumber: System.UInt32) -> None
Rhino.UI.Panels.ChangePanelIcon(panelType: System.Type, fullPathToResource: str) -> None
Rhino.UI.Panels.ChangePanelIcon(panelType: System.Type, icon: System.Drawing.Icon) -> None
Rhino.UI.Panels.ClosePanel(panelId: System.Guid) -> None
Rhino.UI.Panels.ClosePanel(panelId: System.Guid, doc: Rhino.RhinoDoc) -> None
Rhino.UI.Panels.ClosePanel(panelType: System.Type) -> None
Rhino.UI.Panels.ClosePanel(panelType: System.Type, doc: Rhino.RhinoDoc) -> None
Rhino.UI.Panels.DockBarIdInUse(dockBarId: System.Guid) -> bool
Rhino.UI.Panels.FloatPanel(panelType: System.Type, arg2: Rhino.UI.Panels.FloatPanelMode) -> bool
Rhino.UI.Panels.FloatPanel(panelTypeId: System.Guid, arg2: Rhino.UI.Panels.FloatPanelMode) -> bool
Rhino.UI.Panels.GetOpenPanelIds() -> List[Guid]
Rhino.UI.Panels.GetPanel(panelId: System.Guid, documentSerialNumber: System.UInt32) -> Object
Rhino.UI.Panels.GetPanel(panelId: System.Guid, rhinoDoc: Rhino.RhinoDoc) -> Object
Rhino.UI.Panels.GetPanel<T>(documentSerialNumber: System.UInt32) -> T
Rhino.UI.Panels.GetPanel<T>(rhinoDoc: Rhino.RhinoDoc) -> T
Rhino.UI.Panels.GetPanels(panelId: System.Guid, doc: Rhino.RhinoDoc) -> List[Object]
Rhino.UI.Panels.GetPanels(panelId: System.Guid, documentRuntimeSerialNumber: System.UInt32) -> List[Object]
Rhino.UI.Panels.GetPanels<T>(doc: Rhino.RhinoDoc) -> List[T]
Rhino.UI.Panels.GetPanels<T>(documentRuntimeSerialNumber: System.UInt32) -> List[T]
Rhino.UI.Panels.IsHiding(reason: Rhino.UI.ShowPanelReason) -> bool
Rhino.UI.Panels.IsPanelVisible(panelId: System.Guid) -> bool
Rhino.UI.Panels.IsPanelVisible(panelId: System.Guid, isSelectedTab: bool) -> bool
Rhino.UI.Panels.IsPanelVisible(panelType: System.Type) -> bool
Rhino.UI.Panels.IsPanelVisible(panelType: System.Type, isSelectedTab: bool) -> bool
Rhino.UI.Panels.IsShowing(reason: Rhino.UI.ShowPanelReason) -> bool
Rhino.UI.Panels.OnClosePanel(panelId: System.Guid, documentSerialNumber: System.UInt32) -> None
Rhino.UI.Panels.OnShowPanel(panelId: System.Guid, documentSerialNumber: System.UInt32, show: bool) -> None
Rhino.UI.Panels.OpenPanel(dockBarId: System.Guid, panelId: System.Guid) -> Guid
Rhino.UI.Panels.OpenPanel(dockBarId: System.Guid, panelId: System.Guid, makeSelectedPanel: bool) -> Guid
Rhino.UI.Panels.OpenPanel(dockBarId: System.Guid, panelType: System.Type) -> Guid
Rhino.UI.Panels.OpenPanel(dockBarId: System.Guid, panelType: System.Type, makeSelectedPanel: bool) -> Guid
Rhino.UI.Panels.OpenPanel(panelId: System.Guid) -> None
Rhino.UI.Panels.OpenPanel(panelId: System.Guid, makeSelectedPanel: bool) -> None
Rhino.UI.Panels.OpenPanel(panelType: System.Type) -> None
Rhino.UI.Panels.OpenPanel(panelType: System.Type, makeSelectedPanel: bool) -> None
Rhino.UI.Panels.OpenPanelAsSibling(panelId: System.Guid, siblingPanelId: System.Guid) -> bool
Rhino.UI.Panels.OpenPanelAsSibling(panelId: System.Guid, siblingPanelId: System.Guid, makeSelectedPanel: bool) -> bool
Rhino.UI.Panels.PanelDockBar(panelId: System.Guid) -> Guid
Rhino.UI.Panels.PanelDockBar(panelType: System.Type) -> Guid
Rhino.UI.Panels.PanelDockBars(panelId: System.Guid) -> List[Guid]
Rhino.UI.Panels.RegisterPanel(plugIn: Rhino.PlugIns.PlugIn, type: System.Type, caption: str, icon: System.Drawing.Icon, panelType: Rhino.UI.PanelType) -> None
Rhino.UI.Panels.RegisterPanel(plugIn: Rhino.PlugIns.PlugIn, type: System.Type, caption: str, iconAssembly: System.Reflection.Assembly, iconResourceId: str, panelType: Rhino.UI.PanelType) -> None
Rhino.UI.Panels.RegisterPanel(plugin: Rhino.PlugIns.PlugIn, panelType: System.Type, caption: str, icon: System.Drawing.Icon) -> None
Rhino.UI.Panels.[ObsoleteAttribute(self) -> None
Rhino.UI.Panels.[ObsoleteAttribute(self, arg1: System.Guid) -> None
Rhino.UI.RhinoHelp.Show(helpLink: str) -> bool
Rhino.UI.RhinoPageInterop.NewPropertiesPanelPagePointer(page: Rhino.UI.ObjectPropertiesPage, rhinoDocRuntimeSn: System.UInt32) -> IntPtr
Rhino.UI.RhinoPageInterop.StackedDialogPageFromUnmanagedPointer(pointer: System.IntPtr) -> StackedDialogPage
Rhino.UI.RuiUpdateUi.RegisterMenuItem(file: System.Guid, menu: System.Guid, item: System.Guid, arg4: Rhino.UI.RuiUpdateUi.UpdateMenuItemEventHandler) -> bool
Rhino.UI.RuiUpdateUi.RegisterMenuItem(fileId: str, menuId: str, itemId: str, arg4: Rhino.UI.RuiUpdateUi.UpdateMenuItemEventHandler) -> bool
Rhino.UI.SaveFileDialog.ShowSaveDialog(self) -> bool
Rhino.UI.SaveFileDialog.[ObsoleteAttribute(self) -> None
Rhino.UI.SaveFileDialog.__init__(self) -> None
Rhino.UI.ShowPanelEventArgs.__init__(self, panelId: System.Guid, documentSerialNumber: System.UInt32, show: bool) -> None
Rhino.UI.StackedDialogPage.AddChildPage(self, pageToAdd: Rhino.UI.StackedDialogPage) -> None
Rhino.UI.StackedDialogPage.MakeActivePage(self) -> None
Rhino.UI.StackedDialogPage.OnActivate(self, active: bool) -> bool
Rhino.UI.StackedDialogPage.OnApply(self) -> bool
Rhino.UI.StackedDialogPage.OnCancel(self) -> None
Rhino.UI.StackedDialogPage.OnCreateParent(self, hwndParent: System.IntPtr) -> None
Rhino.UI.StackedDialogPage.OnDefaults(self) -> None
Rhino.UI.StackedDialogPage.OnHelp(self) -> None
Rhino.UI.StackedDialogPage.OnSizeParent(self, width: int, height: int) -> None
Rhino.UI.StackedDialogPage.RemovePage(self) -> None
Rhino.UI.StackedDialogPage.SetActivePageTo(self, pageName: str, documentPropertiesPage: bool) -> bool
Rhino.UI.StackedDialogPage.SetEnglishPageTitle(self, newPageTile: str) -> None
Rhino.UI.StackedDialogPage.__init__(self, englishPageTitle: str) -> None
Rhino.UI.StatusBar.ClearMessagePane() -> None
Rhino.UI.StatusBar.HideProgressMeter() -> None
Rhino.UI.StatusBar.HideProgressMeter(docSerialNumber: System.UInt32) -> None
Rhino.UI.StatusBar.SetDistancePane(distance: float) -> None
Rhino.UI.StatusBar.SetMessagePane(message: str) -> None
Rhino.UI.StatusBar.SetNumberPane(number: float) -> None
Rhino.UI.StatusBar.SetPointPane(point: Rhino.Geometry.Point3d) -> None
Rhino.UI.StatusBar.ShowProgressMeter(docSerialNumber: System.UInt32, lowerLimit: int, upperLimit: int, label: str, embedLabel: bool, showPercentComplete: bool) -> int
Rhino.UI.StatusBar.ShowProgressMeter(lowerLimit: int, upperLimit: int, label: str, embedLabel: bool, showPercentComplete: bool) -> int
Rhino.UI.StatusBar.UpdateProgressMeter(docSerialNumber: System.UInt32, label: str, position: int, absolute: bool) -> int
Rhino.UI.StatusBar.UpdateProgressMeter(docSerialNumber: System.UInt32, position: int, absolute: bool) -> int
Rhino.UI.StatusBar.UpdateProgressMeter(label: str, position: int, absolute: bool) -> int
Rhino.UI.StatusBar.UpdateProgressMeter(position: int, absolute: bool) -> int
Rhino.UI.ToolbarFile.Close(self, prompt: bool) -> bool
Rhino.UI.ToolbarFile.GetGroup(self, index: int) -> ToolbarGroup
Rhino.UI.ToolbarFile.GetGroup(self, name: str) -> ToolbarGroup
Rhino.UI.ToolbarFile.GetToolbar(self, index: int) -> Toolbar
Rhino.UI.ToolbarFile.Save(self) -> bool
Rhino.UI.ToolbarFile.SaveAs(self, path: str) -> bool
Rhino.UI.ToolbarFileCollection.FindByName(self, name: str, ignoreCase: bool) -> ToolbarFile
Rhino.UI.ToolbarFileCollection.FindByPath(self, path: str) -> ToolbarFile
Rhino.UI.ToolbarFileCollection.GetEnumerator(self) -> IEnumerator<ToolbarFile>
Rhino.UI.ToolbarFileCollection.Open(self, path: str) -> ToolbarFile
Rhino.UI.WaitCursor.Clear(self) -> None
Rhino.UI.WaitCursor.Dispose(self) -> None
Rhino.UI.WaitCursor.Set(self) -> None
Rhino.UI.WaitCursor.__init__(self) -> None
